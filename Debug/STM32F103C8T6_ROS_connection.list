
STM32F103C8T6_ROS_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080058b8  080058b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058b8  080058b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000074  08005938  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b78  08005938  00020b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014865  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a9  00000000  00000000  00034902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000371b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000380f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194b1  00000000  00000000  00038f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001058d  00000000  00000000  00052421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ad8  00000000  00000000  000629ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  000f44d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080055ec 	.word	0x080055ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080055ec 	.word	0x080055ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 fa8e 	bl	8002680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f812 	bl	800018c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f914 	bl	8000394 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800016c:	f000 f8ec 	bl	8000348 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8000170:	f000 f8bc 	bl	80002ec <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000174:	f000 f85a 	bl	800022c <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000178:	f001 fa9e 	bl	80016b8 <setup>
  HAL_TIM_Base_Start_IT(&htim1);
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <main+0x2c>)
 800017e:	f003 fccb 	bl	8003b18 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000182:	f001 fabb 	bl	80016fc <loop>
 8000186:	e7fc      	b.n	8000182 <main+0x26>
 8000188:	20000090 	.word	0x20000090

0800018c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	; 0x40
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f005 f8a0 	bl	80052e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ae:	2301      	movs	r3, #1
 80001b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c0:	2302      	movs	r3, #2
 80001c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d0:	f107 0318 	add.w	r3, r7, #24
 80001d4:	4618      	mov	r0, r3
 80001d6:	f003 f83f 	bl	8003258 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	bf14      	ite	ne
 80001e0:	2301      	movne	r3, #1
 80001e2:	2300      	moveq	r3, #0
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80001ea:	f000 f91d 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f2:	2302      	movs	r3, #2
 80001f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2102      	movs	r1, #2
 8000208:	4618      	mov	r0, r3
 800020a:	f003 faa7 	bl	800375c <HAL_RCC_ClockConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	bf14      	ite	ne
 8000214:	2301      	movne	r3, #1
 8000216:	2300      	moveq	r3, #0
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800021e:	f000 f903 	bl	8000428 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000232:	f107 0308 	add.w	r3, r7, #8
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000248:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 800024a:	4a27      	ldr	r2, [pc, #156]	; (80002e8 <_ZL12MX_TIM1_Initv+0xbc>)
 800024c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800024e:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 8000250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000256:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 800025e:	f240 529f 	movw	r2, #1439	; 0x59f
 8000262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000276:	481b      	ldr	r0, [pc, #108]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 8000278:	f003 fbfe 	bl	8003a78 <HAL_TIM_Base_Init>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf14      	ite	ne
 8000282:	2301      	movne	r3, #1
 8000284:	2300      	moveq	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800028c:	f000 f8cc 	bl	8000428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	4619      	mov	r1, r3
 800029c:	4811      	ldr	r0, [pc, #68]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 800029e:	f003 fd95 	bl	8003dcc <HAL_TIM_ConfigClockSource>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 80002b2:	f000 f8b9 	bl	8000428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b6:	2300      	movs	r3, #0
 80002b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4619      	mov	r1, r3
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <_ZL12MX_TIM1_Initv+0xb8>)
 80002c4:	f003 ff66 	bl	8004194 <HAL_TIMEx_MasterConfigSynchronization>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	bf14      	ite	ne
 80002ce:	2301      	movne	r3, #1
 80002d0:	2300      	moveq	r3, #0
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 80002d8:	f000 f8a6 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000090 	.word	0x20000090
 80002e8:	40012c00 	.word	0x40012c00

080002ec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <_ZL19MX_USART1_UART_Initv+0x58>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000322:	4807      	ldr	r0, [pc, #28]	; (8000340 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000324:	f003 ffa6 	bl	8004274 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2301      	movne	r3, #1
 8000330:	2300      	moveq	r3, #0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000338:	f000 f876 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200000d8 	.word	0x200000d8
 8000344:	40013800 	.word	0x40013800

08000348 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <_ZL11MX_DMA_Initv+0x48>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <_ZL11MX_DMA_Initv+0x48>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <_ZL11MX_DMA_Initv+0x48>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2100      	movs	r1, #0
 800036a:	200e      	movs	r0, #14
 800036c:	f002 fae5 	bl	800293a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000370:	200e      	movs	r0, #14
 8000372:	f002 fafe 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	200f      	movs	r0, #15
 800037c:	f002 fadd 	bl	800293a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000380:	200f      	movs	r0, #15
 8000382:	f002 faf6 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a1c      	ldr	r2, [pc, #112]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a16      	ldr	r2, [pc, #88]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <_ZL12MX_GPIO_Initv+0x8c>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2102      	movs	r1, #2
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <_ZL12MX_GPIO_Initv+0x90>)
 80003f6:	f002 fefd 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003fa:	2302      	movs	r3, #2
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <_ZL12MX_GPIO_Initv+0x90>)
 8000412:	f002 fd6b 	bl	8002eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010c00 	.word	0x40010c00

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>

08000432 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <_ZN3ros3MsgC1Ev+0x1c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	0800587c 	.word	0x0800587c

08000474 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
      data()
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ffe8 	bl	8000454 <_ZN3ros3MsgC1Ev>
 8000484:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3304      	adds	r3, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ffcf 	bl	8000432 <_ZN3ros4TimeC1Ev>
    {
    }
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	08005864 	.word	0x08005864

080004a4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6859      	ldr	r1, [r3, #4]
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	b2ca      	uxtb	r2, r1
 80004be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	0a19      	lsrs	r1, r3, #8
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	683a      	ldr	r2, [r7, #0]
 80004cc:	4413      	add	r3, r2
 80004ce:	b2ca      	uxtb	r2, r1
 80004d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	0c19      	lsrs	r1, r3, #16
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3302      	adds	r3, #2
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	b2ca      	uxtb	r2, r1
 80004e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	0e19      	lsrs	r1, r3, #24
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3303      	adds	r3, #3
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	b2ca      	uxtb	r2, r1
 80004f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3304      	adds	r3, #4
 80004fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6899      	ldr	r1, [r3, #8]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	4413      	add	r3, r2
 8000506:	b2ca      	uxtb	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	0a19      	lsrs	r1, r3, #8
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3301      	adds	r3, #1
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	4413      	add	r3, r2
 8000518:	b2ca      	uxtb	r2, r1
 800051a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	0c19      	lsrs	r1, r3, #16
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3302      	adds	r3, #2
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	4413      	add	r3, r2
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	0e19      	lsrs	r1, r3, #24
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3303      	adds	r3, #3
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	4413      	add	r3, r2
 800053c:	b2ca      	uxtb	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3304      	adds	r3, #4
 8000544:	60fb      	str	r3, [r7, #12]
      return offset;
 8000546:	68fb      	ldr	r3, [r7, #12]
    }
 8000548:	4618      	mov	r0, r3
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	685a      	ldr	r2, [r3, #4]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	440b      	add	r3, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685a      	ldr	r2, [r3, #4]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3302      	adds	r3, #2
 800058c:	6839      	ldr	r1, [r7, #0]
 800058e:	440b      	add	r3, r1
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	041b      	lsls	r3, r3, #16
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3303      	adds	r3, #3
 80005a2:	6839      	ldr	r1, [r7, #0]
 80005a4:	440b      	add	r3, r1
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	061b      	lsls	r3, r3, #24
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3304      	adds	r3, #4
 80005b4:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689a      	ldr	r2, [r3, #8]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	6839      	ldr	r1, [r7, #0]
 80005ce:	440b      	add	r3, r1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3302      	adds	r3, #2
 80005e2:	6839      	ldr	r1, [r7, #0]
 80005e4:	440b      	add	r3, r1
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3303      	adds	r3, #3
 80005f8:	6839      	ldr	r1, [r7, #0]
 80005fa:	440b      	add	r3, r1
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	431a      	orrs	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3304      	adds	r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
     return offset;
 800060c:	68fb      	ldr	r3, [r7, #12]
    }
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	08005604 	.word	0x08005604

08000630 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	08005614 	.word	0x08005614

08000648 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fefe 	bl	8000454 <_ZN3ros3MsgC1Ev>
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	809a      	strh	r2, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
    {
    }
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	0800584c 	.word	0x0800584c
 800068c:	08005638 	.word	0x08005638

08000690 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	8899      	ldrh	r1, [r3, #4]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	b2ca      	uxtb	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b299      	uxth	r1, r3
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	3301      	adds	r3, #1
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	b2ca      	uxtb	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	3302      	adds	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd3e 	bl	800014c <strlen>
 80006d0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	69b9      	ldr	r1, [r7, #24]
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f81a 	bl	8001714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	3304      	adds	r3, #4
 80006e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	18d0      	adds	r0, r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	4619      	mov	r1, r3
 80006f4:	f004 fde6 	bl	80052c4 <memcpy>
      offset += length_topic_name;
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	4413      	add	r3, r2
 80006fe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd21 	bl	800014c <strlen>
 800070a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	4413      	add	r3, r2
 8000712:	6979      	ldr	r1, [r7, #20]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fffd 	bl	8001714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	18d0      	adds	r0, r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	4619      	mov	r1, r3
 800072e:	f004 fdc9 	bl	80052c4 <memcpy>
      offset += length_message_type;
 8000732:	69fa      	ldr	r2, [r7, #28]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	4413      	add	r3, r2
 8000738:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd04 	bl	800014c <strlen>
 8000744:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	4413      	add	r3, r2
 800074c:	6939      	ldr	r1, [r7, #16]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ffe0 	bl	8001714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3304      	adds	r3, #4
 8000758:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	18d0      	adds	r0, r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	4619      	mov	r1, r3
 8000768:	f004 fdac 	bl	80052c4 <memcpy>
      offset += length_md5sum;
 800076c:	69fa      	ldr	r2, [r7, #28]
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4413      	add	r3, r2
 8000772:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800077a:	68f9      	ldr	r1, [r7, #12]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	4413      	add	r3, r2
 8000782:	b2ca      	uxtb	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	0a19      	lsrs	r1, r3, #8
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3301      	adds	r3, #1
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	b2ca      	uxtb	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	0c19      	lsrs	r1, r3, #16
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3302      	adds	r3, #2
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	4413      	add	r3, r2
 80007a2:	b2ca      	uxtb	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	0e19      	lsrs	r1, r3, #24
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3303      	adds	r3, #3
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	61fb      	str	r3, [r7, #28]
      return offset;
 80007bc:	69fb      	ldr	r3, [r7, #28]
    }
 80007be:	4618      	mov	r0, r3
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b08a      	sub	sp, #40	; 0x28
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	889b      	ldrh	r3, [r3, #4]
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	3301      	adds	r3, #1
 80007ec:	6839      	ldr	r1, [r7, #0]
 80007ee:	440b      	add	r3, r1
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	3302      	adds	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	441a      	add	r2, r3
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 ff9b 	bl	800174e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	3304      	adds	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	4413      	add	r3, r2
 8000828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800082a:	429a      	cmp	r2, r3
 800082c:	d20c      	bcs.n	8000848 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	441a      	add	r2, r3
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	3b01      	subs	r3, #1
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	440b      	add	r3, r1
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000842:	3301      	adds	r3, #1
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
 8000846:	e7ec      	b.n	8000822 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	3b01      	subs	r3, #1
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3b01      	subs	r3, #1
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	441a      	add	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	4413      	add	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	441a      	add	r2, r3
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ff68 	bl	800174e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	3304      	adds	r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	623b      	str	r3, [r7, #32]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	4413      	add	r3, r2
 800088e:	6a3a      	ldr	r2, [r7, #32]
 8000890:	429a      	cmp	r2, r3
 8000892:	d20c      	bcs.n	80008ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	441a      	add	r2, r3
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	3b01      	subs	r3, #1
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	440b      	add	r3, r1
 80008a2:	7812      	ldrb	r2, [r2, #0]
 80008a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	3301      	adds	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	e7ec      	b.n	8000888 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4413      	add	r3, r2
 80008b4:	3b01      	subs	r3, #1
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	441a      	add	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4413      	add	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	441a      	add	r2, r3
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ff35 	bl	800174e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	3304      	adds	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	69fa      	ldr	r2, [r7, #28]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d20c      	bcs.n	8000914 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	441a      	add	r2, r3
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	3b01      	subs	r3, #1
 8000904:	6839      	ldr	r1, [r7, #0]
 8000906:	440b      	add	r3, r1
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	3301      	adds	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	e7ec      	b.n	80008ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	3b01      	subs	r3, #1
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	3b01      	subs	r3, #1
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	441a      	add	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4413      	add	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	6839      	ldr	r1, [r7, #0]
 8000942:	440a      	add	r2, r1
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	4313      	orrs	r3, r2
 8000948:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	3301      	adds	r3, #1
 8000950:	6839      	ldr	r1, [r7, #0]
 8000952:	440b      	add	r3, r1
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	4313      	orrs	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	3302      	adds	r3, #2
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	440b      	add	r3, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	041b      	lsls	r3, r3, #16
 800096a:	4313      	orrs	r3, r2
 800096c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	3303      	adds	r3, #3
 8000974:	6839      	ldr	r1, [r7, #0]
 8000976:	440b      	add	r3, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	061b      	lsls	r3, r3, #24
 800097c:	4313      	orrs	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	3304      	adds	r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
     return offset;
 800098c:	69bb      	ldr	r3, [r7, #24]
    }
 800098e:	4618      	mov	r0, r3
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	0800563c 	.word	0x0800563c

080009b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	08005658 	.word	0x08005658

080009c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd3e 	bl	8000454 <_ZN3ros3MsgC1Ev>
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	711a      	strb	r2, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80009e8:	609a      	str	r2, [r3, #8]
    {
    }
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08005834 	.word	0x08005834
 80009f8:	08005638 	.word	0x08005638

080009fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	7912      	ldrb	r2, [r2, #4]
 8000a14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fb93 	bl	800014c <strlen>
 8000a26:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fe6f 	bl	8001714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	18d0      	adds	r0, r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f004 fc3b 	bl	80052c4 <memcpy>
      offset += length_msg;
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a56:	68fb      	ldr	r3, [r7, #12]
    }
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	441a      	add	r2, r3
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fe5e 	bl	800174e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	3304      	adds	r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d20c      	bcs.n	8000ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	441a      	add	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	6839      	ldr	r1, [r7, #0]
 8000ab4:	440b      	add	r3, r1
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e7ec      	b.n	8000a9c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	441a      	add	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
     return offset;
 8000ae6:	693b      	ldr	r3, [r7, #16]
    }
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	0800567c 	.word	0x0800567c

08000b08 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	08005690 	.word	0x08005690

08000b20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fc92 	bl	8000454 <_ZN3ros3MsgC1Ev>
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	0800581c 	.word	0x0800581c

08000b7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6859      	ldr	r1, [r3, #4]
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	b2ca      	uxtb	r2, r1
 8000b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	0a19      	lsrs	r1, r3, #8
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	0c19      	lsrs	r1, r3, #16
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2ca      	uxtb	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	0e19      	lsrs	r1, r3, #24
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	3303      	adds	r3, #3
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b2ca      	uxtb	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	6a3a      	ldr	r2, [r7, #32]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d22b      	bcs.n	8000c3a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	0a19      	lsrs	r1, r3, #8
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	3301      	adds	r3, #1
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	0c19      	lsrs	r1, r3, #16
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	3302      	adds	r3, #2
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	b2ca      	uxtb	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	0e19      	lsrs	r1, r3, #24
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	3303      	adds	r3, #3
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	b2ca      	uxtb	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	3304      	adds	r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	3301      	adds	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	e7ce      	b.n	8000bd8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6919      	ldr	r1, [r3, #16]
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	0a19      	lsrs	r1, r3, #8
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	0c19      	lsrs	r1, r3, #16
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3302      	adds	r3, #2
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	0e19      	lsrs	r1, r3, #24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3303      	adds	r3, #3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3304      	adds	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d22b      	bcs.n	8000cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	699a      	ldr	r2, [r3, #24]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000ca0:	68f9      	ldr	r1, [r7, #12]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	0a19      	lsrs	r1, r3, #8
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	0e19      	lsrs	r1, r3, #24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3304      	adds	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	e7ce      	b.n	8000c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69d9      	ldr	r1, [r3, #28]
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	0a19      	lsrs	r1, r3, #8
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	0c19      	lsrs	r1, r3, #16
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3302      	adds	r3, #2
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	0e19      	lsrs	r1, r3, #24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3303      	adds	r3, #3
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3304      	adds	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d228      	bcs.n	8000d94 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff f9fc 	bl	800014c <strlen>
 8000d54:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	6979      	ldr	r1, [r7, #20]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fcd8 	bl	8001714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	3304      	adds	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	18d0      	adds	r0, r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f004 faa0 	bl	80052c4 <memcpy>
      offset += length_stringsi;
 8000d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	4413      	add	r3, r2
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	e7d1      	b.n	8000d38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000d96:	4618      	mov	r0, r3
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b08e      	sub	sp, #56	; 0x38
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db8:	3301      	adds	r3, #1
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dca:	3302      	adds	r3, #2
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	6a3a      	ldr	r2, [r7, #32]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	3303      	adds	r3, #3
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	061b      	lsls	r3, r3, #24
 8000de6:	6a3a      	ldr	r2, [r7, #32]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dee:	3304      	adds	r3, #4
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	6a3a      	ldr	r2, [r7, #32]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d90a      	bls.n	8000e12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4619      	mov	r1, r3
 8000e06:	4610      	mov	r0, r2
 8000e08:	f004 fa72 	bl	80052f0 <realloc>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a3a      	ldr	r2, [r7, #32]
 8000e16:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d236      	bcs.n	8000e94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	440a      	add	r2, r1
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	440b      	add	r3, r1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	4313      	orrs	r3, r2
 8000e48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4e:	3302      	adds	r3, #2
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	440b      	add	r3, r1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	3303      	adds	r3, #3
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	440b      	add	r3, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	061b      	lsls	r3, r3, #24
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e76:	3304      	adds	r3, #4
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8e:	3301      	adds	r3, #1
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
 8000e92:	e7c3      	b.n	8000e1c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec4:	3303      	adds	r3, #3
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d90a      	bls.n	8000efa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4619      	mov	r1, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f004 f9fe 	bl	80052f0 <realloc>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d236      	bcs.n	8000f7c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f16:	6839      	ldr	r1, [r7, #0]
 8000f18:	440a      	add	r2, r1
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f24:	3301      	adds	r3, #1
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	440b      	add	r3, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f36:	3302      	adds	r3, #2
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	440b      	add	r3, r1
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f48:	3303      	adds	r3, #3
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	061b      	lsls	r3, r3, #24
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5e:	3304      	adds	r3, #4
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	3214      	adds	r2, #20
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	3301      	adds	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7a:	e7c3      	b.n	8000f04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f88:	3301      	adds	r3, #1
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fac:	3303      	adds	r3, #3
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d90a      	bls.n	8000fe2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f004 f98a 	bl	80052f0 <realloc>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d23f      	bcs.n	8001076 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	441a      	add	r2, r3
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fba3 	bl	800174e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100a:	3304      	adds	r3, #4
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
 8001012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	429a      	cmp	r2, r3
 800101c:	d20c      	bcs.n	8001038 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	441a      	add	r2, r3
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3b01      	subs	r3, #1
 8001028:	6839      	ldr	r1, [r7, #0]
 800102a:	440b      	add	r3, r1
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	3301      	adds	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
 8001036:	e7ec      	b.n	8001012 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	3b01      	subs	r3, #1
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3b01      	subs	r3, #1
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	441a      	add	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	3220      	adds	r2, #32
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	3301      	adds	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
 8001074:	e7ba      	b.n	8000fec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001078:	4618      	mov	r0, r3
 800107a:	3738      	adds	r7, #56	; 0x38
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	08005788 	.word	0x08005788

08001098 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	080056b4 	.word	0x080056b4

080010b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68d8      	ldr	r0, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6891      	ldr	r1, [r2, #8]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4798      	blx	r3
 80010fa:	4603      	mov	r3, r0
  };
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
  }
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <_ZN13STM32HardwareC1Ev+0x34>)
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200000d8 	.word	0x200000d8

08001178 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f804 	bl	800118e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a2:	4619      	mov	r1, r3
 80011a4:	f003 f926 	bl	80043f4 <HAL_UART_Receive_DMA>
    }
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ffa8 	bl	800111a <_ZN13STM32Hardware10getRdmaIndEv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	429c      	cmp	r4, r3
 80011ce:	bf14      	ite	ne
 80011d0:	2301      	movne	r3, #1
 80011d2:	2300      	moveq	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011e0:	1c59      	adds	r1, r3, #1
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001200:	68fb      	ldr	r3, [r7, #12]
    }
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
	...

0800120c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b20      	cmp	r3, #32
 8001220:	d108      	bne.n	8001234 <_ZN13STM32Hardware5flushEv+0x28>
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f083 0301 	eor.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_ZN13STM32Hardware5flushEv+0x28>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <_ZN13STM32Hardware5flushEv+0x2a>
 8001234:	2300      	movs	r3, #0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d055      	beq.n	80012e6 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <_ZN13STM32Hardware5flushEv+0xe4>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800124c:	429a      	cmp	r2, r3
 800124e:	d047      	beq.n	80012e0 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	81fb      	strh	r3, [r7, #14]
          if(tfind < twind){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001260:	429a      	cmp	r2, r3
 8001262:	d217      	bcs.n	8001294 <_ZN13STM32Hardware5flushEv+0x88>
            len = twind - tfind;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001272:	b29b      	uxth	r3, r3
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001282:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	4619      	mov	r1, r3
 800128e:	f003 f841 	bl	8004314 <HAL_UART_Transmit_DMA>
 8001292:	e01f      	b.n	80012d4 <_ZN13STM32Hardware5flushEv+0xc8>
          }
          else{
            len = tbuflen - tfind;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800129a:	b29b      	uxth	r3, r3
 800129c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012a0:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	4619      	mov	r1, r3
 80012b8:	f003 f82c 	bl	8004314 <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_DMA(huart, tbuf, twind);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	f003 f820 	bl	8004314 <HAL_UART_Transmit_DMA>
          }
          tfind = twind;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <_ZN13STM32Hardware5flushEv+0xe4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
      }
    }
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001a8 	.word	0x200001a8

080012f4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130a:	bfa8      	it	ge
 800130c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001310:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001318:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4293      	cmp	r3, r2
 8001320:	bf28      	it	cs
 8001322:	4613      	movcs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800132c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f003 ffc3 	bl	80052c4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4413      	add	r3, r2
 8001348:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	429a      	cmp	r2, r3
 8001358:	d00b      	beq.n	8001372 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	18d1      	adds	r1, r2, r3
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	461a      	mov	r2, r3
 800136e:	f003 ffa9 	bl	80052c4 <memcpy>
      }

      flush();
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff ff4a 	bl	800120c <_ZN13STM32Hardware5flushEv>
    }
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	f001 f9d2 	bl	8002730 <HAL_GetTick>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
      data(0)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f856 	bl	8000454 <_ZN3ros3MsgC1Ev>
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_ZN8std_msgs5Int16C1Ev+0x28>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	809a      	strh	r2, [r3, #4]
    {
    }
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	080057d8 	.word	0x080057d8

080013c4 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d8:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80013da:	8939      	ldrh	r1, [r7, #8]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	b2ca      	uxtb	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80013e6:	893b      	ldrh	r3, [r7, #8]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	b299      	uxth	r1, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2ca      	uxtb	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3302      	adds	r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80013fe:	68fb      	ldr	r3, [r7, #12]
    }
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800141c:	893a      	ldrh	r2, [r7, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	440b      	add	r3, r1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800142e:	893b      	ldrh	r3, [r7, #8]
 8001430:	b21a      	sxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	440b      	add	r3, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8001448:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3302      	adds	r3, #2
 8001454:	60fb      	str	r3, [r7, #12]
     return offset;
 8001456:	68fb      	ldr	r3, [r7, #12]
    }
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <_ZN8std_msgs5Int167getTypeEv+0x14>)
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	080056d8 	.word	0x080056d8

0800147c <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <_ZN8std_msgs5Int166getMD5Ev+0x14>)
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	080056e8 	.word	0x080056e8

08001494 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	08005808 	.word	0x08005808

080014b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffe8 	bl	8001494 <_ZN3ros15NodeHandleBase_C1Ev>
 80014c4:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3304      	adds	r3, #4
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fe36 	bl	8001140 <_ZN13STM32HardwareC1Ev>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f003 feed 	bl	80052e0 <memset>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fee4 	bl	80052e0 <memset>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800151e:	2264      	movs	r2, #100	; 0x64
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fedc 	bl	80052e0 <memset>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fed4 	bl	80052e0 <memset>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fac6 	bl	8000b20 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	080057c4 	.word	0x080057c4

080015a4 <_Z18leftCmdVelCallBackRKN8std_msgs5Int16E>:
volatile int16_t right_motor_vel = 0;
volatile uint8_t tick = 0;

// ******************* Motor Velocity Callback ************************* 
void leftCmdVelCallBack(const std_msgs::Int16& left_vel)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80015ac:	2102      	movs	r1, #2
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <_Z18leftCmdVelCallBackRKN8std_msgs5Int16E+0x24>)
 80015b0:	f001 fe38 	bl	8003224 <HAL_GPIO_TogglePin>
	left_motor_vel = left_vel.data;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <_Z18leftCmdVelCallBackRKN8std_msgs5Int16E+0x28>)
 80015bc:	801a      	strh	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40010c00 	.word	0x40010c00
 80015cc:	20000af8 	.word	0x20000af8

080015d0 <_Z19rightCmdVelCallBackRKN8std_msgs5Int16E>:

void rightCmdVelCallBack(const std_msgs::Int16& right_vel)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80015d8:	2101      	movs	r1, #1
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <_Z19rightCmdVelCallBackRKN8std_msgs5Int16E+0x24>)
 80015dc:	f001 fe22 	bl	8003224 <HAL_GPIO_TogglePin>
	right_motor_vel = right_vel.data;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <_Z19rightCmdVelCallBackRKN8std_msgs5Int16E+0x28>)
 80015e8:	801a      	strh	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	20000afa 	.word	0x20000afa

080015fc <HAL_UART_TxCpltCallback>:

// ************************** Declare publishers **********************************
ros::Publisher left_motor_pub("left_motor_pos", &left_motor_pos);
ros::Publisher right_motor_pub("right_motor_pos", &right_motor_pos);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_TxCpltCallback+0x20>)
 8001606:	f000 f8fb 	bl	8001800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800160a:	4603      	mov	r3, r0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fdfd 	bl	800120c <_ZN13STM32Hardware5flushEv>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200001ac 	.word	0x200001ac

08001620 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_UART_RxCpltCallback+0x20>)
 800162a:	f000 f8e9 	bl	8001800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdac 	bl	800118e <_ZN13STM32Hardware10reset_rbufEv>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200001ac 	.word	0x200001ac

08001644 <HAL_TIM_PeriodElapsedCallback>:

// Function for timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	if(++tick == 5)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3301      	adds	r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001658:	4619      	mov	r1, r3
 800165a:	7011      	strb	r1, [r2, #0]
 800165c:	2b05      	cmp	r3, #5
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tick = 0;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	    // Publish new data every 100 ms
	    left_motor_pos.data = left_motor_vel;
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b21a      	sxth	r2, r3
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001678:	809a      	strh	r2, [r3, #4]
	    left_motor_pub.publish(&left_motor_pos);
 800167a:	490a      	ldr	r1, [pc, #40]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800167e:	f7ff fd2d 	bl	80010dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	    right_motor_pos.data = right_motor_vel;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800168a:	809a      	strh	r2, [r3, #4]
	    right_motor_pub.publish(&right_motor_pos);
 800168c:	4908      	ldr	r1, [pc, #32]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001690:	f7ff fd24 	bl	80010dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	}
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000afc 	.word	0x20000afc
 80016a0:	20000af8 	.word	0x20000af8
 80016a4:	20000ae8 	.word	0x20000ae8
 80016a8:	20000b38 	.word	0x20000b38
 80016ac:	20000afa 	.word	0x20000afa
 80016b0:	20000af0 	.word	0x20000af0
 80016b4:	20000b4c 	.word	0x20000b4c

080016b8 <setup>:

void setup(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  nh.initNode();
 80016bc:	480a      	ldr	r0, [pc, #40]	; (80016e8 <setup+0x30>)
 80016be:	f000 f8aa 	bl	8001816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  // Initiate publishers and subscribers
  nh.advertise(left_motor_pub);
 80016c2:	490a      	ldr	r1, [pc, #40]	; (80016ec <setup+0x34>)
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <setup+0x30>)
 80016c6:	f000 f8c3 	bl	8001850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(right_motor_pub);
 80016ca:	4909      	ldr	r1, [pc, #36]	; (80016f0 <setup+0x38>)
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <setup+0x30>)
 80016ce:	f000 f8bf 	bl	8001850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

  nh.subscribe(left_motor_vel_sub);
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <setup+0x3c>)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <setup+0x30>)
 80016d6:	f000 f8ea 	bl	80018ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.subscribe(right_motor_vel_sub);
 80016da:	4907      	ldr	r1, [pc, #28]	; (80016f8 <setup+0x40>)
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <setup+0x30>)
 80016de:	f000 f8e6 	bl	80018ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001ac 	.word	0x200001ac
 80016ec:	20000b38 	.word	0x20000b38
 80016f0:	20000b4c 	.word	0x20000b4c
 80016f4:	20000b00 	.word	0x20000b00
 80016f8:	20000b1c 	.word	0x20000b1c

080016fc <loop>:

void loop(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
//  left_motor_pos.data = left_motor_vel;
//  left_motor_pub.publish(&left_motor_pos);
//
//  right_motor_pos.data = right_motor_vel;
//  right_motor_pub.publish(&right_motor_pos);
  nh.spinOnce();
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <loop+0x14>)
 8001702:	f000 f8fe 	bl	8001902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f001 f81c 	bl	8002744 <HAL_Delay>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200001ac 	.word	0x200001ac

08001714 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d80d      	bhi.n	8001744 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	fa22 f103 	lsr.w	r1, r2, r3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3301      	adds	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e7ee      	b.n	8001722 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d811      	bhi.n	800178c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	440a      	add	r2, r1
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	4611      	mov	r1, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	00d2      	lsls	r2, r2, #3
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e7ea      	b.n	8001762 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	080057f0 	.word	0x080057f0

080017b8 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ffe5 	bl	8001798 <_ZN3ros11Subscriber_C1Ev>
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	330c      	adds	r3, #12
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fddd 	bl	8001398 <_ZN8std_msgs5Int16C1Ev>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	609a      	str	r2, [r3, #8]
  };
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080057ac 	.word	0x080057ac

08001800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3304      	adds	r3, #4
  }
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fca8 	bl	8001178 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b18      	cmp	r3, #24
 8001862:	dc1e      	bgt.n	80018a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d111      	bne.n	800189a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	60da      	str	r2, [r3, #12]
        return true;
 8001896:	2301      	movs	r3, #1
 8001898:	e004      	b.n	80018a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3301      	adds	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e7dd      	b.n	800185e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80018a2:	2300      	movs	r3, #0
  }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b18      	cmp	r3, #24
 80018c0:	dc19      	bgt.n	80018f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80018ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10d      	bne.n	80018ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80018da:	6839      	ldr	r1, [r7, #0]
 80018dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	605a      	str	r2, [r3, #4]
        return true;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e004      	b.n	80018f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e7e2      	b.n	80018bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80018f6:	2300      	movs	r3, #0
  }
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3304      	adds	r3, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fd36 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8001914:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001924:	4293      	cmp	r3, r2
 8001926:	d903      	bls.n	8001930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	429a      	cmp	r2, r3
 8001944:	d903      	bls.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001954:	2b00      	cmp	r3, #0
 8001956:	d014      	beq.n	8001982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3304      	adds	r3, #4
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd0f 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800196e:	429a      	cmp	r2, r3
 8001970:	bf8c      	ite	hi
 8001972:	2301      	movhi	r3, #1
 8001974:	2300      	movls	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800197c:	f06f 0301 	mvn.w	r3, #1
 8001980:	e194      	b.n	8001cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc12 	bl	80011b0 <_ZN13STM32Hardware4readEv>
 800198c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f2c0 8174 	blt.w	8001c7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	441a      	add	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d11e      	bne.n	80019ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	460a      	mov	r2, r1
 80019c8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1b4      	bne.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2208      	movs	r2, #8
 80019e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80019ec:	e7af      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d128      	bne.n	8001a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d10d      	bne.n	8001a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f103 0214 	add.w	r2, r3, #20
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001a18:	e799      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fcae 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	bf8c      	ite	hi
 8001a32:	2301      	movhi	r3, #1
 8001a34:	2300      	movls	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d088      	beq.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001a44:	f06f 0301 	mvn.w	r3, #1
 8001a48:	e130      	b.n	8001cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d118      	bne.n	8001a86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2bfe      	cmp	r3, #254	; 0xfe
 8001a58:	d107      	bne.n	8001a6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a68:	e771      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f af68 	bne.w	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f918 	bl	8001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001a84:	e763      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d113      	bne.n	8001ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001ab6:	e74a      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d110      	bne.n	8001ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	441a      	add	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ae2:	e734      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d116      	bne.n	8001b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001af4:	425a      	negs	r2, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	bf58      	it	pl
 8001afc:	4253      	negpl	r3, r2
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d107      	bne.n	8001b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b10:	e71d      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b1a:	e718      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10f      	bne.n	8001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001b44:	e703      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d117      	bne.n	8001b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	441a      	add	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2207      	movs	r2, #7
 8001b66:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f aeec 	bne.w	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b7e:	e6e6      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	f47f aee1 	bne.w	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001b9a:	425a      	negs	r2, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	bf58      	it	pl
 8001ba2:	4253      	negpl	r3, r2
 8001ba4:	2bff      	cmp	r3, #255	; 0xff
 8001ba6:	f47f aed2 	bne.w	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d110      	bne.n	8001bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f87d 	bl	8001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f898 	bl	8001cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e06a      	b.n	8001cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d107      	bne.n	8001bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f961 	bl	8001eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001bee:	e6ae      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d10e      	bne.n	8001c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f7ff f8c8 	bl	8000d9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001c16:	e69a      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c1e:	2b0b      	cmp	r3, #11
 8001c20:	d104      	bne.n	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001c2a:	e690      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c32:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f43f ae84 	beq.w	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c4c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c60:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4798      	blx	r3
    while (true)
 8001c7c:	e667      	b.n	800194e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001c7e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00f      	beq.n	8001caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d906      	bls.n	8001caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f809 	bl	8001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001caa:	2300      	movs	r3, #0
  }
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbd7 	bl	8000474 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f107 020c 	add.w	r2, r7, #12
 8001cd0:	210a      	movs	r1, #10
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
    rt_time = hardware_.time();
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb50 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fca3 	bl	8000648 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	2b18      	cmp	r3, #24
 8001d0a:	dc63      	bgt.n	8001dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d056      	beq.n	8001dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3308      	adds	r3, #8
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4608      	mov	r0, r1
 8001d6c:	4798      	blx	r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	6859      	ldr	r1, [r3, #4]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4798      	blx	r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681c      	ldr	r4, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9a2 	bl	8001104 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	3301      	adds	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	e798      	b.n	8001d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	2b18      	cmp	r3, #24
 8001ddc:	dc5f      	bgt.n	8001e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d053      	beq.n	8001e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4608      	mov	r0, r1
 8001e30:	4798      	blx	r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	330c      	adds	r3, #12
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4798      	blx	r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e60:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681c      	ldr	r4, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3304      	adds	r3, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4608      	mov	r0, r1
 8001e88:	4798      	blx	r3
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	461a      	mov	r2, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	3301      	adds	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9c:	e79c      	b.n	8001dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001ea6:	bf00      	nop
 8001ea8:	372c      	adds	r7, #44	; 0x2c
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
	...

08001eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fad8 	bl	8000474 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fa59 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb36 	bl	8000552 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4915      	ldr	r1, [pc, #84]	; (8001f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001eec:	fba1 1303 	umull	r1, r3, r1, r3
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001ef6:	6939      	ldr	r1, [r7, #16]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001efc:	fba3 0302 	umull	r0, r3, r3, r2
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f06:	fb00 f303 	mul.w	r3, r0, r3
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	440b      	add	r3, r1
 8001f14:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8a6 	bl	8002070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fa29 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	10624dd3 	.word	0x10624dd3
 8001f44:	000f4240 	.word	0x000f4240

08001f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b63      	cmp	r3, #99	; 0x63
 8001f58:	dd09      	ble.n	8001f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f60:	f083 0301 	eor.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e079      	b.n	8002062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001f7a:	3207      	adds	r2, #7
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
 8001f82:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	22fe      	movs	r2, #254	; 0xfe
 8001f90:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	121b      	asrs	r3, r3, #8
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3306      	adds	r3, #6
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dc0d      	bgt.n	8002010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	3301      	adds	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	e7ec      	b.n	8001fea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3307      	adds	r3, #7
 8002014:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	425a      	negs	r2, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	bf58      	it	pl
 8002020:	4253      	negpl	r3, r2
 8002022:	b2da      	uxtb	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	6179      	str	r1, [r7, #20]
 800202a:	43d2      	mvns	r2, r2
 800202c:	b2d1      	uxtb	r1, r2
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	460a      	mov	r2, r1
 8002034:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203e:	dc0a      	bgt.n	8002056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1d18      	adds	r0, r3, #4
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4619      	mov	r1, r3
 800204e:	f7ff f951 	bl	80012f4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	e005      	b.n	8002062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002056:	4905      	ldr	r1, [pc, #20]	; (800206c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f849 	bl	80020f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	0800570c 	.word	0x0800570c

08002070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f97e 	bl	8001380 <_ZN13STM32Hardware4timeEv>
 8002084:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4915      	ldr	r1, [pc, #84]	; (80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800208e:	fba1 1303 	umull	r1, r3, r1, r3
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	1e5a      	subs	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80020a6:	fba3 0302 	umull	r0, r3, r3, r2
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	1aca      	subs	r2, r1, r3
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80020c0:	4413      	add	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 fa80 	bl	80025dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	10624dd3 	.word	0x10624dd3
 80020e8:	000f4240 	.word	0x000f4240
 80020ec:	3b9aca00 	.word	0x3b9aca00

080020f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	2103      	movs	r1, #3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f804 	bl	800210c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	460b      	mov	r3, r1
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fc52 	bl	80009c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f107 0214 	add.w	r2, r7, #20
 8002136:	2107      	movs	r1, #7
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	4798      	blx	r3
  }
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_Z41__static_initialization_and_destruction_0ii>:
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d125      	bne.n	80021a0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215a:	4293      	cmp	r3, r2
 800215c:	d120      	bne.n	80021a0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 800215e:	4812      	ldr	r0, [pc, #72]	; (80021a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002160:	f7ff f9a8 	bl	80014b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 left_motor_pos;
 8002164:	4811      	ldr	r0, [pc, #68]	; (80021ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002166:	f7ff f917 	bl	8001398 <_ZN8std_msgs5Int16C1Ev>
std_msgs::Int16 right_motor_pos;
 800216a:	4811      	ldr	r0, [pc, #68]	; (80021b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800216c:	f7ff f914 	bl	8001398 <_ZN8std_msgs5Int16C1Ev>
ros::Subscriber<std_msgs::Int16> left_motor_vel_sub("left_motor_vel", &leftCmdVelCallBack);
 8002170:	2301      	movs	r3, #1
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002174:	4910      	ldr	r1, [pc, #64]	; (80021b8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002176:	4811      	ldr	r0, [pc, #68]	; (80021bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002178:	f7ff fb1e 	bl	80017b8 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int16> right_motor_vel_sub("right_motor_vel", &rightCmdVelCallBack);
 800217c:	2301      	movs	r3, #1
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002180:	4910      	ldr	r1, [pc, #64]	; (80021c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002182:	4811      	ldr	r0, [pc, #68]	; (80021c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002184:	f7ff fb18 	bl	80017b8 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Publisher left_motor_pub("left_motor_pos", &left_motor_pos);
 8002188:	2300      	movs	r3, #0
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800218c:	490f      	ldr	r1, [pc, #60]	; (80021cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800218e:	4810      	ldr	r0, [pc, #64]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002190:	f7fe ff8e 	bl	80010b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher right_motor_pub("right_motor_pos", &right_motor_pos);
 8002194:	2300      	movs	r3, #0
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800219a:	480f      	ldr	r0, [pc, #60]	; (80021d8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800219c:	f7fe ff88 	bl	80010b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200001ac 	.word	0x200001ac
 80021ac:	20000ae8 	.word	0x20000ae8
 80021b0:	20000af0 	.word	0x20000af0
 80021b4:	080015a5 	.word	0x080015a5
 80021b8:	08005748 	.word	0x08005748
 80021bc:	20000b00 	.word	0x20000b00
 80021c0:	080015d1 	.word	0x080015d1
 80021c4:	08005758 	.word	0x08005758
 80021c8:	20000b1c 	.word	0x20000b1c
 80021cc:	08005768 	.word	0x08005768
 80021d0:	20000b38 	.word	0x20000b38
 80021d4:	08005778 	.word	0x08005778
 80021d8:	20000b4c 	.word	0x20000b4c

080021dc <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	330c      	adds	r3, #12
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f90c 	bl	800140a <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	320c      	adds	r2, #12
 80021fa:	4610      	mov	r0, r2
 80021fc:	4798      	blx	r3
  }
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
  }
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	330c      	adds	r3, #12
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f91b 	bl	8001464 <_ZN8std_msgs5Int167getTypeEv>
 800222e:	4603      	mov	r3, r0
  }
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	330c      	adds	r3, #12
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f919 	bl	800147c <_ZN8std_msgs5Int166getMD5Ev>
 800224a:	4603      	mov	r3, r0
  }
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    return configured_;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <_GLOBAL__sub_I_nh>:
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
 8002270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff ff65 	bl	8002144 <_Z41__static_initialization_and_destruction_0ii>
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_MspInit+0x5c>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_MspInit+0x5c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6193      	str	r3, [r2, #24]
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_MspInit+0x5c>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_MspInit+0x5c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_MspInit+0x5c>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_MspInit+0x5c>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_MspInit+0x60>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_MspInit+0x60>)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000

080022e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_TIM_Base_MspInit+0x44>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d113      	bne.n	800231a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_TIM_Base_MspInit+0x48>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <HAL_TIM_Base_MspInit+0x48>)
 80022f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022fc:	6193      	str	r3, [r2, #24]
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_TIM_Base_MspInit+0x48>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2019      	movs	r0, #25
 8002310:	f000 fb13 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002314:	2019      	movs	r0, #25
 8002316:	f000 fb2c 	bl	8002972 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002348:	4293      	cmp	r3, r2
 800234a:	f040 8086 	bne.w	800245a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_UART_MspInit+0x13c>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_UART_MspInit+0x13c>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6193      	str	r3, [r2, #24]
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_UART_MspInit+0x13c>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_UART_MspInit+0x13c>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <HAL_UART_MspInit+0x13c>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	6193      	str	r3, [r2, #24]
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_UART_MspInit+0x13c>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800237e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4619      	mov	r1, r3
 8002392:	4836      	ldr	r0, [pc, #216]	; (800246c <HAL_UART_MspInit+0x140>)
 8002394:	f000 fdaa 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	482f      	ldr	r0, [pc, #188]	; (800246c <HAL_UART_MspInit+0x140>)
 80023ae:	f000 fd9d 	bl	8002eec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80023b2:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_UART_MspInit+0x148>)
 80023b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023d8:	2220      	movs	r2, #32
 80023da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023e2:	4823      	ldr	r0, [pc, #140]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023e4:	f000 fae0 	bl	80029a8 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80023ee:	f7fe f81b 	bl	8000428 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_UART_MspInit+0x150>)
 8002402:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002406:	2210      	movs	r2, #16
 8002408:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x14c>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_UART_MspInit+0x14c>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_UART_MspInit+0x14c>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800242e:	4812      	ldr	r0, [pc, #72]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002430:	f000 faba 	bl	80029a8 <HAL_DMA_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800243a:	f7fd fff5 	bl	8000428 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
 8002444:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_UART_MspInit+0x14c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2025      	movs	r0, #37	; 0x25
 8002450:	f000 fa73 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002454:	2025      	movs	r0, #37	; 0x25
 8002456:	f000 fa8c 	bl	8002972 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40013800 	.word	0x40013800
 8002468:	40021000 	.word	0x40021000
 800246c:	40010800 	.word	0x40010800
 8002470:	20000120 	.word	0x20000120
 8002474:	40020058 	.word	0x40020058
 8002478:	20000164 	.word	0x20000164
 800247c:	40020044 	.word	0x40020044

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002484:	e7fe      	b.n	8002484 <NMI_Handler+0x4>

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <MemManage_Handler+0x4>

08002492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <UsageFault_Handler+0x4>

0800249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c6:	f000 f921 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA1_Channel4_IRQHandler+0x10>)
 80024d6:	f000 fbd5 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000164 	.word	0x20000164

080024e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA1_Channel5_IRQHandler+0x10>)
 80024ea:	f000 fbcb 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000120 	.word	0x20000120

080024f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM1_UP_IRQHandler+0x10>)
 80024fe:	f001 fb5d 	bl	8003bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000090 	.word	0x20000090

0800250c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <USART1_IRQHandler+0x10>)
 8002512:	f001 ff95 	bl	8004440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200000d8 	.word	0x200000d8

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <_kill>:

int _kill(int pid, int sig)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002538:	f002 fe9a 	bl	8005270 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	2216      	movs	r2, #22
 8002540:	601a      	str	r2, [r3, #0]
  return -1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_exit>:

void _exit (int status)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002556:	f04f 31ff 	mov.w	r1, #4294967295
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffe7 	bl	800252e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002560:	e7fe      	b.n	8002560 <_exit+0x12>
	...

08002564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <_sbrk+0x5c>)
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <_sbrk+0x60>)
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_sbrk+0x64>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <_sbrk+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002594:	f002 fe6c 	bl	8005270 <__errno>
 8002598:	4603      	mov	r3, r0
 800259a:	220c      	movs	r2, #12
 800259c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	e009      	b.n	80025b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_sbrk+0x64>)
 80025b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20005000 	.word	0x20005000
 80025c4:	00000400 	.word	0x00000400
 80025c8:	20000b60 	.word	0x20000b60
 80025cc:	20000b78 	.word	0x20000b78

080025d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0a5a      	lsrs	r2, r3, #9
 80025ec:	490f      	ldr	r1, [pc, #60]	; (800262c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80025ee:	fba1 1202 	umull	r1, r2, r1, r2
 80025f2:	09d2      	lsrs	r2, r2, #7
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80025f6:	fb01 f202 	mul.w	r2, r1, r2
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0a5b      	lsrs	r3, r3, #9
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	09db      	lsrs	r3, r3, #7
 800260c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	00044b83 	.word	0x00044b83
 8002630:	3b9aca00 	.word	0x3b9aca00

08002634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002634:	f7ff ffcc 	bl	80025d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480b      	ldr	r0, [pc, #44]	; (8002668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800263a:	490c      	ldr	r1, [pc, #48]	; (800266c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002650:	4c09      	ldr	r4, [pc, #36]	; (8002678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800265e:	f002 fe0d 	bl	800527c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002662:	f7fd fd7b 	bl	800015c <main>
  bx lr
 8002666:	4770      	bx	lr
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002670:	080058c4 	.word	0x080058c4
  ldr r2, =_sbss
 8002674:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002678:	20000b78 	.word	0x20000b78

0800267c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC1_2_IRQHandler>
	...

08002680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_Init+0x28>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_Init+0x28>)
 800268a:	f043 0310 	orr.w	r3, r3, #16
 800268e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f000 f947 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	200f      	movs	r0, #15
 8002698:	f000 f808 	bl	80026ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269c:	f7ff fdee 	bl	800227c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x54>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x58>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f95f 	bl	800298e <HAL_SYSTICK_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00e      	b.n	80026f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d80a      	bhi.n	80026f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f000 f927 	bl	800293a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <HAL_InitTick+0x5c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000000 	.word	0x20000000
 8002704:	20000008 	.word	0x20000008
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_IncTick+0x1c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_IncTick+0x20>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_IncTick+0x20>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	20000008 	.word	0x20000008
 800272c:	20000b64 	.word	0x20000b64

08002730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <HAL_GetTick+0x10>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000b64 	.word	0x20000b64

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff fff0 	bl	8002730 <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffe0 	bl	8002730 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000008 	.word	0x20000008

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4906      	ldr	r1, [pc, #24]	; (8002824 <__NVIC_EnableIRQ+0x34>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff90 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff2d 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff42 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff90 	bl	800287c <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5f 	bl	8002828 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff35 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa2 	bl	80028e0 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e043      	b.n	8002a46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_DMA_Init+0xa8>)
 80029c6:	4413      	add	r3, r2
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_DMA_Init+0xac>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	009a      	lsls	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_DMA_Init+0xb0>)
 80029da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	bffdfff8 	.word	0xbffdfff8
 8002a54:	cccccccd 	.word	0xcccccccd
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_DMA_Start_IT+0x20>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e04b      	b.n	8002b14 <HAL_DMA_Start_IT+0xb8>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d13a      	bne.n	8002b06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9eb 	bl	8002e90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 020e 	orr.w	r2, r2, #14
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e00f      	b.n	8002af4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 020a 	orr.w	r2, r2, #10
 8002af2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e005      	b.n	8002b12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d008      	beq.n	8002b46 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2204      	movs	r2, #4
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e020      	b.n	8002b88 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 020e 	bic.w	r2, r2, #14
 8002b54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d005      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	e051      	b.n	8002c5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 020e 	bic.w	r2, r2, #14
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_DMA_Abort_IT+0xd4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d029      	beq.n	8002c36 <HAL_DMA_Abort_IT+0xa2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <HAL_DMA_Abort_IT+0xd8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x9e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <HAL_DMA_Abort_IT+0xdc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01a      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x98>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_DMA_Abort_IT+0xe0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d012      	beq.n	8002c26 <HAL_DMA_Abort_IT+0x92>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_DMA_Abort_IT+0xe4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00a      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x8c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <HAL_DMA_Abort_IT+0xe8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d102      	bne.n	8002c1a <HAL_DMA_Abort_IT+0x86>
 8002c14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c18:	e00e      	b.n	8002c38 <HAL_DMA_Abort_IT+0xa4>
 8002c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c1e:	e00b      	b.n	8002c38 <HAL_DMA_Abort_IT+0xa4>
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	e008      	b.n	8002c38 <HAL_DMA_Abort_IT+0xa4>
 8002c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2a:	e005      	b.n	8002c38 <HAL_DMA_Abort_IT+0xa4>
 8002c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c30:	e002      	b.n	8002c38 <HAL_DMA_Abort_IT+0xa4>
 8002c32:	2310      	movs	r3, #16
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_Abort_IT+0xa4>
 8002c36:	2301      	movs	r3, #1
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_DMA_Abort_IT+0xec>)
 8002c3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
    } 
  }
  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40020008 	.word	0x40020008
 8002c6c:	4002001c 	.word	0x4002001c
 8002c70:	40020030 	.word	0x40020030
 8002c74:	40020044 	.word	0x40020044
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	4002006c 	.word	0x4002006c
 8002c80:	40020000 	.word	0x40020000

08002c84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d04f      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xc8>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_DMA_IRQHandler+0x1f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d029      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xae>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_DMA_IRQHandler+0x1f4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xaa>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_DMA_IRQHandler+0x1f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xa4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <HAL_DMA_IRQHandler+0x1fc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d012      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x9e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_DMA_IRQHandler+0x200>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x98>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5f      	ldr	r2, [pc, #380]	; (8002e88 <HAL_DMA_IRQHandler+0x204>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x92>
 8002d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d14:	e00e      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d1a:	e00b      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d20:	e008      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d26:	e005      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	e002      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	e000      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d32:	2304      	movs	r3, #4
 8002d34:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <HAL_DMA_IRQHandler+0x208>)
 8002d36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8094 	beq.w	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d4a:	e08e      	b.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2202      	movs	r2, #2
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d056      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x186>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d051      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 020a 	bic.w	r2, r2, #10
 8002d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_DMA_IRQHandler+0x1f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d029      	beq.n	8002dea <HAL_DMA_IRQHandler+0x166>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <HAL_DMA_IRQHandler+0x1f4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x162>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_DMA_IRQHandler+0x1f8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x15c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_DMA_IRQHandler+0x1fc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d012      	beq.n	8002dda <HAL_DMA_IRQHandler+0x156>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_DMA_IRQHandler+0x200>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x150>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a31      	ldr	r2, [pc, #196]	; (8002e88 <HAL_DMA_IRQHandler+0x204>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_DMA_IRQHandler+0x14a>
 8002dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dcc:	e00e      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	e00b      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	e008      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dde:	e005      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de4:	e002      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002de6:	2320      	movs	r3, #32
 8002de8:	e000      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dea:	2302      	movs	r3, #2
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_DMA_IRQHandler+0x208>)
 8002dee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d034      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e08:	e02f      	b.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2208      	movs	r2, #8
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 020e 	bic.w	r2, r2, #14
 8002e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
    }
  }
  return;
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
}
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40020008 	.word	0x40020008
 8002e78:	4002001c 	.word	0x4002001c
 8002e7c:	40020030 	.word	0x40020030
 8002e80:	40020044 	.word	0x40020044
 8002e84:	40020058 	.word	0x40020058
 8002e88:	4002006c 	.word	0x4002006c
 8002e8c:	40020000 	.word	0x40020000

08002e90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d108      	bne.n	8002ed0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ece:	e007      	b.n	8002ee0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e169      	b.n	80031d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f00:	2201      	movs	r2, #1
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8158 	bne.w	80031ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a9a      	ldr	r2, [pc, #616]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d05e      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f28:	4a98      	ldr	r2, [pc, #608]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d875      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f2e:	4a98      	ldr	r2, [pc, #608]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d058      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f34:	4a96      	ldr	r2, [pc, #600]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d86f      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f3a:	4a96      	ldr	r2, [pc, #600]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d052      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f40:	4a94      	ldr	r2, [pc, #592]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d869      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f46:	4a94      	ldr	r2, [pc, #592]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04c      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f4c:	4a92      	ldr	r2, [pc, #584]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d863      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f52:	4a92      	ldr	r2, [pc, #584]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d046      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f58:	4a90      	ldr	r2, [pc, #576]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d85d      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f5e:	2b12      	cmp	r3, #18
 8002f60:	d82a      	bhi.n	8002fb8 <HAL_GPIO_Init+0xcc>
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d859      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_GPIO_Init+0x80>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fe7 	.word	0x08002fe7
 8002f70:	08002fc1 	.word	0x08002fc1
 8002f74:	08002fd3 	.word	0x08002fd3
 8002f78:	08003015 	.word	0x08003015
 8002f7c:	0800301b 	.word	0x0800301b
 8002f80:	0800301b 	.word	0x0800301b
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800301b 	.word	0x0800301b
 8002f8c:	0800301b 	.word	0x0800301b
 8002f90:	0800301b 	.word	0x0800301b
 8002f94:	0800301b 	.word	0x0800301b
 8002f98:	0800301b 	.word	0x0800301b
 8002f9c:	0800301b 	.word	0x0800301b
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	0800301b 	.word	0x0800301b
 8002fa8:	0800301b 	.word	0x0800301b
 8002fac:	0800301b 	.word	0x0800301b
 8002fb0:	08002fc9 	.word	0x08002fc9
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	4a79      	ldr	r2, [pc, #484]	; (80031a0 <HAL_GPIO_Init+0x2b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fbe:	e02c      	b.n	800301a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	623b      	str	r3, [r7, #32]
          break;
 8002fc6:	e029      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	623b      	str	r3, [r7, #32]
          break;
 8002fd0:	e024      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e01f      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e01a      	b.n	800301c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	623b      	str	r3, [r7, #32]
          break;
 8002ff2:	e013      	b.n	800301c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	611a      	str	r2, [r3, #16]
          break;
 8003006:	e009      	b.n	800301c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003008:	2308      	movs	r3, #8
 800300a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	615a      	str	r2, [r3, #20]
          break;
 8003012:	e003      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x130>
          break;
 800301a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	d801      	bhi.n	8003026 <HAL_GPIO_Init+0x13a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	e001      	b.n	800302a <HAL_GPIO_Init+0x13e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2bff      	cmp	r3, #255	; 0xff
 8003030:	d802      	bhi.n	8003038 <HAL_GPIO_Init+0x14c>
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x152>
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	3b08      	subs	r3, #8
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	210f      	movs	r1, #15
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	401a      	ands	r2, r3
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80b1 	beq.w	80031ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003084:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a40      	ldr	r2, [pc, #256]	; (80031ac <HAL_GPIO_Init+0x2c0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_GPIO_Init+0x1ec>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <HAL_GPIO_Init+0x2c4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00d      	beq.n	80030d4 <HAL_GPIO_Init+0x1e8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <HAL_GPIO_Init+0x2c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <HAL_GPIO_Init+0x1e4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_GPIO_Init+0x1e0>
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e004      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d8:	2300      	movs	r3, #0
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	4093      	lsls	r3, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ea:	492f      	ldr	r1, [pc, #188]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	492c      	ldr	r1, [pc, #176]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	4928      	ldr	r1, [pc, #160]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4922      	ldr	r1, [pc, #136]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	60cb      	str	r3, [r1, #12]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	491e      	ldr	r1, [pc, #120]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4918      	ldr	r1, [pc, #96]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	43db      	mvns	r3, r3
 800316a:	4914      	ldr	r1, [pc, #80]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800316c:	4013      	ands	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d021      	beq.n	80031c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
 8003188:	e021      	b.n	80031ce <HAL_GPIO_Init+0x2e2>
 800318a:	bf00      	nop
 800318c:	10320000 	.word	0x10320000
 8003190:	10310000 	.word	0x10310000
 8003194:	10220000 	.word	0x10220000
 8003198:	10210000 	.word	0x10210000
 800319c:	10120000 	.word	0x10120000
 80031a0:	10110000 	.word	0x10110000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	4909      	ldr	r1, [pc, #36]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	3301      	adds	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f47f ae8e 	bne.w	8002f00 <HAL_GPIO_Init+0x14>
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	372c      	adds	r7, #44	; 0x2c
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40010400 	.word	0x40010400

080031f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	4613      	mov	r3, r2
 8003202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	041a      	lsls	r2, r3, #16
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43d9      	mvns	r1, r3
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	400b      	ands	r3, r1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	611a      	str	r2, [r3, #16]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
	...

08003258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e272      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8087 	beq.w	8003386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003278:	4b92      	ldr	r3, [pc, #584]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b04      	cmp	r3, #4
 8003282:	d00c      	beq.n	800329e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003284:	4b8f      	ldr	r3, [pc, #572]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d112      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5e>
 8003290:	4b8c      	ldr	r3, [pc, #560]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d10b      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329e:	4b89      	ldr	r3, [pc, #548]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d06c      	beq.n	8003384 <HAL_RCC_OscConfig+0x12c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d168      	bne.n	8003384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e24c      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x76>
 80032c0:	4b80      	ldr	r3, [pc, #512]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7f      	ldr	r2, [pc, #508]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e02e      	b.n	800332c <HAL_RCC_OscConfig+0xd4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b7b      	ldr	r3, [pc, #492]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b78      	ldr	r3, [pc, #480]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a77      	ldr	r2, [pc, #476]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e01d      	b.n	800332c <HAL_RCC_OscConfig+0xd4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0xbc>
 80032fa:	4b72      	ldr	r3, [pc, #456]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a71      	ldr	r2, [pc, #452]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6e      	ldr	r2, [pc, #440]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0xd4>
 8003314:	4b6b      	ldr	r3, [pc, #428]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6a      	ldr	r2, [pc, #424]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 800331a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a67      	ldr	r2, [pc, #412]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7ff f9fc 	bl	8002730 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7ff f9f8 	bl	8002730 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e200      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0xe4>
 800335a:	e014      	b.n	8003386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7ff f9e8 	bl	8002730 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003364:	f7ff f9e4 	bl	8002730 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	; 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e1ec      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x10c>
 8003382:	e000      	b.n	8003386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d063      	beq.n	800345a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003392:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800339e:	4b49      	ldr	r3, [pc, #292]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d11c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x18c>
 80033aa:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d116      	bne.n	80033e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_RCC_OscConfig+0x176>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e1c0      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4939      	ldr	r1, [pc, #228]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	e03a      	b.n	800345a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7ff f99d 	bl	8002730 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fa:	f7ff f999 	bl	8002730 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e1a1      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4927      	ldr	r1, [pc, #156]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff f97c 	bl	8002730 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343c:	f7ff f978 	bl	8002730 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e180      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d03a      	beq.n	80034dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d019      	beq.n	80034a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_RCC_OscConfig+0x274>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7ff f95c 	bl	8002730 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347c:	f7ff f958 	bl	8002730 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e160      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <HAL_RCC_OscConfig+0x26c>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800349a:	2001      	movs	r0, #1
 800349c:	f000 face 	bl	8003a3c <RCC_Delay>
 80034a0:	e01c      	b.n	80034dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCC_OscConfig+0x274>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7ff f942 	bl	8002730 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ae:	e00f      	b.n	80034d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7ff f93e 	bl	8002730 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d908      	bls.n	80034d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e146      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	42420000 	.word	0x42420000
 80034cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e9      	bne.n	80034b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80a6 	beq.w	8003636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ee:	4b8b      	ldr	r3, [pc, #556]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10d      	bne.n	8003516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a87      	ldr	r2, [pc, #540]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCC_OscConfig+0x4c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d118      	bne.n	8003554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003522:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x4c8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7e      	ldr	r2, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x4c8>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352e:	f7ff f8ff 	bl	8002730 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7ff f8fb 	bl	8002730 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b64      	cmp	r3, #100	; 0x64
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e103      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	4b75      	ldr	r3, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x4c8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x312>
 800355c:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a6e      	ldr	r2, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e02d      	b.n	80035c6 <HAL_RCC_OscConfig+0x36e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x334>
 8003572:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a69      	ldr	r2, [pc, #420]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6213      	str	r3, [r2, #32]
 800357e:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a66      	ldr	r2, [pc, #408]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	e01c      	b.n	80035c6 <HAL_RCC_OscConfig+0x36e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d10c      	bne.n	80035ae <HAL_RCC_OscConfig+0x356>
 8003594:	4b61      	ldr	r3, [pc, #388]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4a60      	ldr	r2, [pc, #384]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6213      	str	r3, [r2, #32]
 80035a0:	4b5e      	ldr	r3, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a5d      	ldr	r2, [pc, #372]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	e00b      	b.n	80035c6 <HAL_RCC_OscConfig+0x36e>
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a5a      	ldr	r2, [pc, #360]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6213      	str	r3, [r2, #32]
 80035ba:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7ff f8af 	bl	8002730 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7ff f8ab 	bl	8002730 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0b1      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ee      	beq.n	80035d6 <HAL_RCC_OscConfig+0x37e>
 80035f8:	e014      	b.n	8003624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7ff f899 	bl	8002730 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7ff f895 	bl	8002730 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e09b      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ee      	bne.n	8003602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b3c      	ldr	r3, [pc, #240]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4a3b      	ldr	r2, [pc, #236]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8087 	beq.w	800374e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d061      	beq.n	8003710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d146      	bne.n	80036e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003654:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_RCC_OscConfig+0x4cc>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7ff f869 	bl	8002730 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7ff f865 	bl	8002730 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e06d      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d108      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	4921      	ldr	r1, [pc, #132]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a19      	ldr	r1, [r3, #32]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	430b      	orrs	r3, r1
 80036ae:	491b      	ldr	r1, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x4cc>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7ff f839 	bl	8002730 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c2:	f7ff f835 	bl	8002730 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e03d      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x46a>
 80036e0:	e035      	b.n	800374e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_RCC_OscConfig+0x4cc>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7ff f822 	bl	8002730 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7ff f81e 	bl	8002730 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e026      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_OscConfig+0x4c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x498>
 800370e:	e01e      	b.n	800374e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e019      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x500>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	429a      	cmp	r2, r3
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000

0800375c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0d0      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 0207 	bic.w	r2, r3, #7
 8003786:	4965      	ldr	r1, [pc, #404]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0b8      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a58      	ldr	r2, [pc, #352]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d040      	beq.n	800387c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d115      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e073      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e06b      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4936      	ldr	r1, [pc, #216]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800384c:	f7fe ff70 	bl	8002730 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fe ff6c 	bl	8002730 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e053      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d210      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	4922      	ldr	r1, [pc, #136]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e032      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4916      	ldr	r1, [pc, #88]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ea:	f000 f821 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	5ccb      	ldrb	r3, [r1, r3]
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <HAL_RCC_ClockConfig+0x1cc>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1d0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fece 	bl	80026ac <HAL_InitTick>

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	40021000 	.word	0x40021000
 8003924:	0800588c 	.word	0x0800588c
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b04      	cmp	r3, #4
 8003958:	d002      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x30>
 800395a:	2b08      	cmp	r3, #8
 800395c:	d003      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x36>
 800395e:	e027      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003962:	613b      	str	r3, [r7, #16]
      break;
 8003964:	e027      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0c9b      	lsrs	r3, r3, #18
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
 8003972:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	0c5b      	lsrs	r3, r3, #17
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003992:	fb03 f202 	mul.w	r2, r3, r2
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e004      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	613b      	str	r3, [r7, #16]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80039b2:	613b      	str	r3, [r7, #16]
      break;
 80039b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b6:	693b      	ldr	r3, [r7, #16]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	007a1200 	.word	0x007a1200
 80039cc:	080058a4 	.word	0x080058a4
 80039d0:	080058b4 	.word	0x080058b4
 80039d4:	003d0900 	.word	0x003d0900

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	20000000 	.word	0x20000000

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff2 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800589c 	.word	0x0800589c

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a18:	f7ff ffde 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0adb      	lsrs	r3, r3, #11
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800589c 	.word	0x0800589c

08003a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <RCC_Delay+0x34>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <RCC_Delay+0x38>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a5b      	lsrs	r3, r3, #9
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a58:	bf00      	nop
  }
  while (Delay --);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1e5a      	subs	r2, r3, #1
 8003a5e:	60fa      	str	r2, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f9      	bne.n	8003a58 <RCC_Delay+0x1c>
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	20000000 	.word	0x20000000
 8003a74:	10624dd3 	.word	0x10624dd3

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fc1e 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 fa74 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d001      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e03a      	b.n	8003ba6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_TIM_Base_Start_IT+0x98>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0202 	mvn.w	r2, #2
 8003be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9b4 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9a7 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f9b6 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0204 	mvn.w	r2, #4
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f98a 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f97d 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f98c 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0208 	mvn.w	r2, #8
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f960 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f953 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f962 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0210 	mvn.w	r2, #16
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f936 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f929 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f938 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0201 	mvn.w	r2, #1
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd fc82 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa7b 	bl	8004262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8fc 	bl	8003f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0220 	mvn.w	r2, #32
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa46 	bl	8004250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_ConfigClockSource+0x1c>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e0b4      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x186>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e20:	d03e      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e26:	f200 8087 	bhi.w	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	f000 8086 	beq.w	8003f3e <HAL_TIM_ConfigClockSource+0x172>
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e36:	d87f      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b70      	cmp	r3, #112	; 0x70
 8003e3a:	d01a      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xa6>
 8003e3c:	2b70      	cmp	r3, #112	; 0x70
 8003e3e:	d87b      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b60      	cmp	r3, #96	; 0x60
 8003e42:	d050      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8003e44:	2b60      	cmp	r3, #96	; 0x60
 8003e46:	d877      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b50      	cmp	r3, #80	; 0x50
 8003e4a:	d03c      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8003e4c:	2b50      	cmp	r3, #80	; 0x50
 8003e4e:	d873      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d058      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x13a>
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d86f      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b30      	cmp	r3, #48	; 0x30
 8003e5a:	d064      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	2b30      	cmp	r3, #48	; 0x30
 8003e5e:	d86b      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d060      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d867      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05c      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x15a>
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d05a      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x15a>
 8003e70:	e062      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f000 f968 	bl	8004156 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	609a      	str	r2, [r3, #8]
      break;
 8003e9e:	e04f      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f000 f951 	bl	8004156 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec2:	609a      	str	r2, [r3, #8]
      break;
 8003ec4:	e03c      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 f8c8 	bl	8004068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2150      	movs	r1, #80	; 0x50
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f91f 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003ee4:	e02c      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f000 f8e6 	bl	80040c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2160      	movs	r1, #96	; 0x60
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f90f 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003f04:	e01c      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f000 f8a8 	bl	8004068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f8ff 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003f24:	e00c      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f000 f8f6 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003f36:	e003      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3c:	e000      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
	...

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a29      	ldr	r2, [pc, #164]	; (800405c <TIM_Base_SetConfig+0xb8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0x30>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0x30>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a26      	ldr	r2, [pc, #152]	; (8004060 <TIM_Base_SetConfig+0xbc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0x30>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a25      	ldr	r2, [pc, #148]	; (8004064 <TIM_Base_SetConfig+0xc0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d108      	bne.n	8003fe6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <TIM_Base_SetConfig+0xb8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_Base_SetConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d007      	beq.n	8004006 <TIM_Base_SetConfig+0x62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <TIM_Base_SetConfig+0xbc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_Base_SetConfig+0x62>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <TIM_Base_SetConfig+0xc0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d108      	bne.n	8004018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <TIM_Base_SetConfig+0xb8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d103      	bne.n	800404c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	615a      	str	r2, [r3, #20]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800

08004068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0201 	bic.w	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 030a 	bic.w	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	031b      	lsls	r3, r3, #12
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	f043 0307 	orr.w	r3, r3, #7
 8004144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004170:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	431a      	orrs	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4313      	orrs	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e046      	b.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f8:	d009      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10c      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800

08004250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e042      	b.n	800430c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe f846 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	; 0x24
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 ff2f 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	d156      	bne.n	80043dc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_UART_Transmit_DMA+0x26>
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04f      	b.n	80043de <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2221      	movs	r2, #33	; 0x21
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <HAL_UART_Transmit_DMA+0xd4>)
 8004364:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	4a20      	ldr	r2, [pc, #128]	; (80043ec <HAL_UART_Transmit_DMA+0xd8>)
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_UART_Transmit_DMA+0xdc>)
 8004374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	2200      	movs	r2, #0
 800437c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3304      	adds	r3, #4
 8004392:	461a      	mov	r2, r3
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f7fe fb61 	bl	8002a5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	617b      	str	r3, [r7, #20]
   return(result);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c4:	627a      	str	r2, [r7, #36]	; 0x24
 80043c6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6a39      	ldr	r1, [r7, #32]
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e5      	bne.n	80043a4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3730      	adds	r7, #48	; 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	080049b1 	.word	0x080049b1
 80043ec:	08004a4b 	.word	0x08004a4b
 80043f0:	08004bcf 	.word	0x08004bcf

080043f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	d112      	bne.n	8004434 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <HAL_UART_Receive_DMA+0x26>
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e00b      	b.n	8004436 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	461a      	mov	r2, r3
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fc1a 	bl	8004c64 <UART_Start_Receive_DMA>
 8004430:	4603      	mov	r3, r0
 8004432:	e000      	b.n	8004436 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b0ba      	sub	sp, #232	; 0xe8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800447e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_UART_IRQHandler+0x66>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fd7e 	bl	8004fa0 <UART_Receive_IT>
      return;
 80044a4:	e25b      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80de 	beq.w	800466c <HAL_UART_IRQHandler+0x22c>
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80d1 	beq.w	800466c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_UART_IRQHandler+0xae>
 80044d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_UART_IRQHandler+0xd2>
 80044fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xf6>
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <HAL_UART_IRQHandler+0x126>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f043 0208 	orr.w	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 81f2 	beq.w	8004954 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_UART_IRQHandler+0x14e>
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fd09 	bl	8004fa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_UART_IRQHandler+0x17a>
 80045b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04f      	beq.n	800465a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fc13 	bl	8004de6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d041      	beq.n	8004652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1d9      	bne.n	80045ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d013      	beq.n	800464a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	4a7e      	ldr	r2, [pc, #504]	; (8004820 <HAL_UART_IRQHandler+0x3e0>)
 8004628:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fab0 	bl	8002b94 <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00e      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f99c 	bl	8004988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00a      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f998 	bl	8004988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e006      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f994 	bl	8004988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004666:	e175      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	bf00      	nop
    return;
 800466a:	e173      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 814f 	bne.w	8004914 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8148 	beq.w	8004914 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8141 	beq.w	8004914 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80b6 	beq.w	8004824 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8145 	beq.w	8004958 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f080 813e 	bcs.w	8004958 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	f000 8088 	beq.w	8004800 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800471c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004728:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1d9      	bne.n	80046f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800474c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004760:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004764:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004768:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e1      	bne.n	800473c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3314      	adds	r3, #20
 800477e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800478e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800479c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e3      	bne.n	8004778 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	f023 0310 	bic.w	r3, r3, #16
 80047d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80047e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e3      	bne.n	80047be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe f98e 	bl	8002b1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800480e:	b29b      	uxth	r3, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	b29b      	uxth	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8bf 	bl	800499a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800481c:	e09c      	b.n	8004958 <HAL_UART_IRQHandler+0x518>
 800481e:	bf00      	nop
 8004820:	08004eab 	.word	0x08004eab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800482c:	b29b      	uxth	r3, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 808e 	beq.w	800495c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8089 	beq.w	800495c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800486e:	647a      	str	r2, [r7, #68]	; 0x44
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	623b      	str	r3, [r7, #32]
   return(result);
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048a6:	633a      	str	r2, [r7, #48]	; 0x30
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e3      	bne.n	8004882 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048ec:	61fa      	str	r2, [r7, #28]
 80048ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	617b      	str	r3, [r7, #20]
   return(result);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e3      	bne.n	80048c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f844 	bl	800499a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004912:	e023      	b.n	800495c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_UART_IRQHandler+0x4f4>
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fad0 	bl	8004ed2 <UART_Transmit_IT>
    return;
 8004932:	e014      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <HAL_UART_IRQHandler+0x51e>
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fb0f 	bl	8004f70 <UART_EndTransmit_IT>
    return;
 8004952:	e004      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
    return;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
      return;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
      return;
 800495c:	bf00      	nop
  }
}
 800495e:	37e8      	adds	r7, #232	; 0xe8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b090      	sub	sp, #64	; 0x40
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d137      	bne.n	8004a3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	2200      	movs	r2, #0
 80049d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	623b      	str	r3, [r7, #32]
   return(result);
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3314      	adds	r3, #20
 80049f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f2:	633a      	str	r2, [r7, #48]	; 0x30
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e5      	bne.n	80049d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a26:	61fa      	str	r2, [r7, #28]
 8004a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	69b9      	ldr	r1, [r7, #24]
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	617b      	str	r3, [r7, #20]
   return(result);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e5      	bne.n	8004a06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a3a:	e002      	b.n	8004a42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004a3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a3e:	f7fc fddd 	bl	80015fc <HAL_UART_TxCpltCallback>
}
 8004a42:	bf00      	nop
 8004a44:	3740      	adds	r7, #64	; 0x40
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff ff83 	bl	8004964 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b09c      	sub	sp, #112	; 0x70
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d172      	bne.n	8004b68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	2200      	movs	r2, #0
 8004a86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004adc:	647a      	str	r2, [r7, #68]	; 0x44
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	623b      	str	r3, [r7, #32]
   return(result);
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b06:	663b      	str	r3, [r7, #96]	; 0x60
 8004b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3314      	adds	r3, #20
 8004b0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b10:	633a      	str	r2, [r7, #48]	; 0x30
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d119      	bne.n	8004b68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0310 	bic.w	r3, r3, #16
 8004b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	617b      	str	r3, [r7, #20]
   return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b7e:	f7ff ff0c 	bl	800499a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b82:	e002      	b.n	8004b8a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004b84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b86:	f7fc fd4b 	bl	8001620 <HAL_UART_RxCpltCallback>
}
 8004b8a:	bf00      	nop
 8004b8c:	3770      	adds	r7, #112	; 0x70
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d108      	bne.n	8004bc0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff feee 	bl	800499a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bbe:	e002      	b.n	8004bc6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fed8 	bl	8004976 <HAL_UART_RxHalfCpltCallback>
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf14      	ite	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	2300      	moveq	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b21      	cmp	r3, #33	; 0x21
 8004c00:	d108      	bne.n	8004c14 <UART_DMAError+0x46>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c0e:	68b8      	ldr	r0, [r7, #8]
 8004c10:	f000 f8c2 	bl	8004d98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b22      	cmp	r3, #34	; 0x22
 8004c34:	d108      	bne.n	8004c48 <UART_DMAError+0x7a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c42:	68b8      	ldr	r0, [r7, #8]
 8004c44:	f000 f8cf 	bl	8004de6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0210 	orr.w	r2, r3, #16
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c54:	68b8      	ldr	r0, [r7, #8]
 8004c56:	f7ff fe97 	bl	8004988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b098      	sub	sp, #96	; 0x60
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2222      	movs	r2, #34	; 0x22
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	4a3e      	ldr	r2, [pc, #248]	; (8004d8c <UART_Start_Receive_DMA+0x128>)
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	4a3d      	ldr	r2, [pc, #244]	; (8004d90 <UART_Start_Receive_DMA+0x12c>)
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	4a3c      	ldr	r2, [pc, #240]	; (8004d94 <UART_Start_Receive_DMA+0x130>)
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	2200      	movs	r2, #0
 8004caa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	f7fd feca 	bl	8002a5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d019      	beq.n	8004d1a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e5      	bne.n	8004ce6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	657b      	str	r3, [r7, #84]	; 0x54
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3314      	adds	r3, #20
 8004d38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e5      	bne.n	8004d1a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d64:	653b      	str	r3, [r7, #80]	; 0x50
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d6e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6a39      	ldr	r1, [r7, #32]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3760      	adds	r7, #96	; 0x60
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	08004a67 	.word	0x08004a67
 8004d90:	08004b93 	.word	0x08004b93
 8004d94:	08004bcf 	.word	0x08004bcf

08004d98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	330c      	adds	r3, #12
 8004da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	61ba      	str	r2, [r7, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6979      	ldr	r1, [r7, #20]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004ddc:	bf00      	nop
 8004dde:	3724      	adds	r7, #36	; 0x24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b095      	sub	sp, #84	; 0x54
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0e:	643a      	str	r2, [r7, #64]	; 0x40
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3314      	adds	r3, #20
 8004e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d119      	bne.n	8004e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 0310 	bic.w	r3, r3, #16
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7e:	61ba      	str	r2, [r7, #24]
 8004e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ea0:	bf00      	nop
 8004ea2:	3754      	adds	r7, #84	; 0x54
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff fd5f 	bl	8004988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b21      	cmp	r3, #33	; 0x21
 8004ee4:	d13e      	bne.n	8004f64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d114      	bne.n	8004f1a <UART_Transmit_IT+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]
 8004f18:	e008      	b.n	8004f2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6211      	str	r1, [r2, #32]
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10f      	bne.n	8004f60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fc fb33 	bl	80015fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	; 0x30
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b22      	cmp	r3, #34	; 0x22
 8004fb2:	f040 80ae 	bne.w	8005112 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbe:	d117      	bne.n	8004ff0 <UART_Receive_IT+0x50>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
 8004fee:	e026      	b.n	800503e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d007      	beq.n	8005014 <UART_Receive_IT+0x74>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <UART_Receive_IT+0x82>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e008      	b.n	8005034 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800502e:	b2da      	uxtb	r2, r3
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4619      	mov	r1, r3
 800504c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800504e:	2b00      	cmp	r3, #0
 8005050:	d15d      	bne.n	800510e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0220 	bic.w	r2, r2, #32
 8005060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005070:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	d135      	bne.n	8005104 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	613b      	str	r3, [r7, #16]
   return(result);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f023 0310 	bic.w	r3, r3, #16
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	623a      	str	r2, [r7, #32]
 80050c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	69f9      	ldr	r1, [r7, #28]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d10a      	bne.n	80050f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fc4c 	bl	800499a <HAL_UARTEx_RxEventCallback>
 8005102:	e002      	b.n	800510a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fc fa8b 	bl	8001620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e002      	b.n	8005114 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3730      	adds	r7, #48	; 0x30
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005156:	f023 030c 	bic.w	r3, r3, #12
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	430b      	orrs	r3, r1
 8005162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <UART_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fe fc46 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	e002      	b.n	8005192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800518c:	f7fe fc2e 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8005190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009a      	lsls	r2, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <UART_SetConfig+0x118>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	0119      	lsls	r1, r3, #4
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009a      	lsls	r2, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <UART_SetConfig+0x118>)
 80051ca:	fba3 0302 	umull	r0, r3, r3, r2
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2064      	movs	r0, #100	; 0x64
 80051d2:	fb00 f303 	mul.w	r3, r0, r3
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	3332      	adds	r3, #50	; 0x32
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <UART_SetConfig+0x118>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e8:	4419      	add	r1, r3
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009a      	lsls	r2, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <UART_SetConfig+0x118>)
 8005202:	fba3 0302 	umull	r0, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2064      	movs	r0, #100	; 0x64
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	3332      	adds	r3, #50	; 0x32
 8005214:	4a07      	ldr	r2, [pc, #28]	; (8005234 <UART_SetConfig+0x118>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	440a      	add	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40013800 	.word	0x40013800
 8005234:	51eb851f 	.word	0x51eb851f

08005238 <__cxa_pure_virtual>:
 8005238:	b508      	push	{r3, lr}
 800523a:	f000 f80d 	bl	8005258 <_ZSt9terminatev>

0800523e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800523e:	b508      	push	{r3, lr}
 8005240:	4780      	blx	r0
 8005242:	f000 f80e 	bl	8005262 <abort>
	...

08005248 <_ZSt13get_terminatev>:
 8005248:	4b02      	ldr	r3, [pc, #8]	; (8005254 <_ZSt13get_terminatev+0xc>)
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	f3bf 8f5b 	dmb	ish
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000000c 	.word	0x2000000c

08005258 <_ZSt9terminatev>:
 8005258:	b508      	push	{r3, lr}
 800525a:	f7ff fff5 	bl	8005248 <_ZSt13get_terminatev>
 800525e:	f7ff ffee 	bl	800523e <_ZN10__cxxabiv111__terminateEPFvvE>

08005262 <abort>:
 8005262:	2006      	movs	r0, #6
 8005264:	b508      	push	{r3, lr}
 8005266:	f000 f873 	bl	8005350 <raise>
 800526a:	2001      	movs	r0, #1
 800526c:	f7fd f96f 	bl	800254e <_exit>

08005270 <__errno>:
 8005270:	4b01      	ldr	r3, [pc, #4]	; (8005278 <__errno+0x8>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000010 	.word	0x20000010

0800527c <__libc_init_array>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	2600      	movs	r6, #0
 8005280:	4d0c      	ldr	r5, [pc, #48]	; (80052b4 <__libc_init_array+0x38>)
 8005282:	4c0d      	ldr	r4, [pc, #52]	; (80052b8 <__libc_init_array+0x3c>)
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	42a6      	cmp	r6, r4
 800528a:	d109      	bne.n	80052a0 <__libc_init_array+0x24>
 800528c:	f000 f9ae 	bl	80055ec <_init>
 8005290:	2600      	movs	r6, #0
 8005292:	4d0a      	ldr	r5, [pc, #40]	; (80052bc <__libc_init_array+0x40>)
 8005294:	4c0a      	ldr	r4, [pc, #40]	; (80052c0 <__libc_init_array+0x44>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	42a6      	cmp	r6, r4
 800529c:	d105      	bne.n	80052aa <__libc_init_array+0x2e>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a4:	4798      	blx	r3
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7ee      	b.n	8005288 <__libc_init_array+0xc>
 80052aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ae:	4798      	blx	r3
 80052b0:	3601      	adds	r6, #1
 80052b2:	e7f2      	b.n	800529a <__libc_init_array+0x1e>
 80052b4:	080058b8 	.word	0x080058b8
 80052b8:	080058b8 	.word	0x080058b8
 80052bc:	080058b8 	.word	0x080058b8
 80052c0:	080058c0 	.word	0x080058c0

080052c4 <memcpy>:
 80052c4:	440a      	add	r2, r1
 80052c6:	4291      	cmp	r1, r2
 80052c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052cc:	d100      	bne.n	80052d0 <memcpy+0xc>
 80052ce:	4770      	bx	lr
 80052d0:	b510      	push	{r4, lr}
 80052d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d6:	4291      	cmp	r1, r2
 80052d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052dc:	d1f9      	bne.n	80052d2 <memcpy+0xe>
 80052de:	bd10      	pop	{r4, pc}

080052e0 <memset>:
 80052e0:	4603      	mov	r3, r0
 80052e2:	4402      	add	r2, r0
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d100      	bne.n	80052ea <memset+0xa>
 80052e8:	4770      	bx	lr
 80052ea:	f803 1b01 	strb.w	r1, [r3], #1
 80052ee:	e7f9      	b.n	80052e4 <memset+0x4>

080052f0 <realloc>:
 80052f0:	4b02      	ldr	r3, [pc, #8]	; (80052fc <realloc+0xc>)
 80052f2:	460a      	mov	r2, r1
 80052f4:	4601      	mov	r1, r0
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	f000 b8da 	b.w	80054b0 <_realloc_r>
 80052fc:	20000010 	.word	0x20000010

08005300 <_raise_r>:
 8005300:	291f      	cmp	r1, #31
 8005302:	b538      	push	{r3, r4, r5, lr}
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	d904      	bls.n	8005314 <_raise_r+0x14>
 800530a:	2316      	movs	r3, #22
 800530c:	6003      	str	r3, [r0, #0]
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005316:	b112      	cbz	r2, 800531e <_raise_r+0x1e>
 8005318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800531c:	b94b      	cbnz	r3, 8005332 <_raise_r+0x32>
 800531e:	4620      	mov	r0, r4
 8005320:	f000 f830 	bl	8005384 <_getpid_r>
 8005324:	462a      	mov	r2, r5
 8005326:	4601      	mov	r1, r0
 8005328:	4620      	mov	r0, r4
 800532a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800532e:	f000 b817 	b.w	8005360 <_kill_r>
 8005332:	2b01      	cmp	r3, #1
 8005334:	d00a      	beq.n	800534c <_raise_r+0x4c>
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	d103      	bne.n	8005342 <_raise_r+0x42>
 800533a:	2316      	movs	r3, #22
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	2001      	movs	r0, #1
 8005340:	e7e7      	b.n	8005312 <_raise_r+0x12>
 8005342:	2400      	movs	r4, #0
 8005344:	4628      	mov	r0, r5
 8005346:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800534a:	4798      	blx	r3
 800534c:	2000      	movs	r0, #0
 800534e:	e7e0      	b.n	8005312 <_raise_r+0x12>

08005350 <raise>:
 8005350:	4b02      	ldr	r3, [pc, #8]	; (800535c <raise+0xc>)
 8005352:	4601      	mov	r1, r0
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	f7ff bfd3 	b.w	8005300 <_raise_r>
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010

08005360 <_kill_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	2300      	movs	r3, #0
 8005364:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_kill_r+0x20>)
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	f7fd f8de 	bl	800252e <_kill>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d102      	bne.n	800537c <_kill_r+0x1c>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	b103      	cbz	r3, 800537c <_kill_r+0x1c>
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20000b70 	.word	0x20000b70

08005384 <_getpid_r>:
 8005384:	f7fd b8cc 	b.w	8002520 <_getpid>

08005388 <sbrk_aligned>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4e0e      	ldr	r6, [pc, #56]	; (80053c4 <sbrk_aligned+0x3c>)
 800538c:	460c      	mov	r4, r1
 800538e:	6831      	ldr	r1, [r6, #0]
 8005390:	4605      	mov	r5, r0
 8005392:	b911      	cbnz	r1, 800539a <sbrk_aligned+0x12>
 8005394:	f000 f8bc 	bl	8005510 <_sbrk_r>
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f8b7 	bl	8005510 <_sbrk_r>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d00a      	beq.n	80053bc <sbrk_aligned+0x34>
 80053a6:	1cc4      	adds	r4, r0, #3
 80053a8:	f024 0403 	bic.w	r4, r4, #3
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	d007      	beq.n	80053c0 <sbrk_aligned+0x38>
 80053b0:	1a21      	subs	r1, r4, r0
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 f8ac 	bl	8005510 <_sbrk_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d101      	bne.n	80053c0 <sbrk_aligned+0x38>
 80053bc:	f04f 34ff 	mov.w	r4, #4294967295
 80053c0:	4620      	mov	r0, r4
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	20000b6c 	.word	0x20000b6c

080053c8 <_malloc_r>:
 80053c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053cc:	1ccd      	adds	r5, r1, #3
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	2d00      	cmp	r5, #0
 80053dc:	4607      	mov	r7, r0
 80053de:	db01      	blt.n	80053e4 <_malloc_r+0x1c>
 80053e0:	42a9      	cmp	r1, r5
 80053e2:	d905      	bls.n	80053f0 <_malloc_r+0x28>
 80053e4:	230c      	movs	r3, #12
 80053e6:	2600      	movs	r6, #0
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4630      	mov	r0, r6
 80053ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f0:	4e2e      	ldr	r6, [pc, #184]	; (80054ac <_malloc_r+0xe4>)
 80053f2:	f000 f89d 	bl	8005530 <__malloc_lock>
 80053f6:	6833      	ldr	r3, [r6, #0]
 80053f8:	461c      	mov	r4, r3
 80053fa:	bb34      	cbnz	r4, 800544a <_malloc_r+0x82>
 80053fc:	4629      	mov	r1, r5
 80053fe:	4638      	mov	r0, r7
 8005400:	f7ff ffc2 	bl	8005388 <sbrk_aligned>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	4604      	mov	r4, r0
 8005408:	d14d      	bne.n	80054a6 <_malloc_r+0xde>
 800540a:	6834      	ldr	r4, [r6, #0]
 800540c:	4626      	mov	r6, r4
 800540e:	2e00      	cmp	r6, #0
 8005410:	d140      	bne.n	8005494 <_malloc_r+0xcc>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	4631      	mov	r1, r6
 8005416:	4638      	mov	r0, r7
 8005418:	eb04 0803 	add.w	r8, r4, r3
 800541c:	f000 f878 	bl	8005510 <_sbrk_r>
 8005420:	4580      	cmp	r8, r0
 8005422:	d13a      	bne.n	800549a <_malloc_r+0xd2>
 8005424:	6821      	ldr	r1, [r4, #0]
 8005426:	3503      	adds	r5, #3
 8005428:	1a6d      	subs	r5, r5, r1
 800542a:	f025 0503 	bic.w	r5, r5, #3
 800542e:	3508      	adds	r5, #8
 8005430:	2d0c      	cmp	r5, #12
 8005432:	bf38      	it	cc
 8005434:	250c      	movcc	r5, #12
 8005436:	4638      	mov	r0, r7
 8005438:	4629      	mov	r1, r5
 800543a:	f7ff ffa5 	bl	8005388 <sbrk_aligned>
 800543e:	3001      	adds	r0, #1
 8005440:	d02b      	beq.n	800549a <_malloc_r+0xd2>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	442b      	add	r3, r5
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	e00e      	b.n	8005468 <_malloc_r+0xa0>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	1b52      	subs	r2, r2, r5
 800544e:	d41e      	bmi.n	800548e <_malloc_r+0xc6>
 8005450:	2a0b      	cmp	r2, #11
 8005452:	d916      	bls.n	8005482 <_malloc_r+0xba>
 8005454:	1961      	adds	r1, r4, r5
 8005456:	42a3      	cmp	r3, r4
 8005458:	6025      	str	r5, [r4, #0]
 800545a:	bf18      	it	ne
 800545c:	6059      	strne	r1, [r3, #4]
 800545e:	6863      	ldr	r3, [r4, #4]
 8005460:	bf08      	it	eq
 8005462:	6031      	streq	r1, [r6, #0]
 8005464:	5162      	str	r2, [r4, r5]
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	4638      	mov	r0, r7
 800546a:	f104 060b 	add.w	r6, r4, #11
 800546e:	f000 f865 	bl	800553c <__malloc_unlock>
 8005472:	f026 0607 	bic.w	r6, r6, #7
 8005476:	1d23      	adds	r3, r4, #4
 8005478:	1af2      	subs	r2, r6, r3
 800547a:	d0b6      	beq.n	80053ea <_malloc_r+0x22>
 800547c:	1b9b      	subs	r3, r3, r6
 800547e:	50a3      	str	r3, [r4, r2]
 8005480:	e7b3      	b.n	80053ea <_malloc_r+0x22>
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	42a3      	cmp	r3, r4
 8005486:	bf0c      	ite	eq
 8005488:	6032      	streq	r2, [r6, #0]
 800548a:	605a      	strne	r2, [r3, #4]
 800548c:	e7ec      	b.n	8005468 <_malloc_r+0xa0>
 800548e:	4623      	mov	r3, r4
 8005490:	6864      	ldr	r4, [r4, #4]
 8005492:	e7b2      	b.n	80053fa <_malloc_r+0x32>
 8005494:	4634      	mov	r4, r6
 8005496:	6876      	ldr	r6, [r6, #4]
 8005498:	e7b9      	b.n	800540e <_malloc_r+0x46>
 800549a:	230c      	movs	r3, #12
 800549c:	4638      	mov	r0, r7
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	f000 f84c 	bl	800553c <__malloc_unlock>
 80054a4:	e7a1      	b.n	80053ea <_malloc_r+0x22>
 80054a6:	6025      	str	r5, [r4, #0]
 80054a8:	e7de      	b.n	8005468 <_malloc_r+0xa0>
 80054aa:	bf00      	nop
 80054ac:	20000b68 	.word	0x20000b68

080054b0 <_realloc_r>:
 80054b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b4:	4680      	mov	r8, r0
 80054b6:	4614      	mov	r4, r2
 80054b8:	460e      	mov	r6, r1
 80054ba:	b921      	cbnz	r1, 80054c6 <_realloc_r+0x16>
 80054bc:	4611      	mov	r1, r2
 80054be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c2:	f7ff bf81 	b.w	80053c8 <_malloc_r>
 80054c6:	b92a      	cbnz	r2, 80054d4 <_realloc_r+0x24>
 80054c8:	f000 f83e 	bl	8005548 <_free_r>
 80054cc:	4625      	mov	r5, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d4:	f000 f880 	bl	80055d8 <_malloc_usable_size_r>
 80054d8:	4284      	cmp	r4, r0
 80054da:	4607      	mov	r7, r0
 80054dc:	d802      	bhi.n	80054e4 <_realloc_r+0x34>
 80054de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054e2:	d812      	bhi.n	800550a <_realloc_r+0x5a>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff ff6e 	bl	80053c8 <_malloc_r>
 80054ec:	4605      	mov	r5, r0
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d0ed      	beq.n	80054ce <_realloc_r+0x1e>
 80054f2:	42bc      	cmp	r4, r7
 80054f4:	4622      	mov	r2, r4
 80054f6:	4631      	mov	r1, r6
 80054f8:	bf28      	it	cs
 80054fa:	463a      	movcs	r2, r7
 80054fc:	f7ff fee2 	bl	80052c4 <memcpy>
 8005500:	4631      	mov	r1, r6
 8005502:	4640      	mov	r0, r8
 8005504:	f000 f820 	bl	8005548 <_free_r>
 8005508:	e7e1      	b.n	80054ce <_realloc_r+0x1e>
 800550a:	4635      	mov	r5, r6
 800550c:	e7df      	b.n	80054ce <_realloc_r+0x1e>
	...

08005510 <_sbrk_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	2300      	movs	r3, #0
 8005514:	4d05      	ldr	r5, [pc, #20]	; (800552c <_sbrk_r+0x1c>)
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fd f822 	bl	8002564 <_sbrk>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_sbrk_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_sbrk_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000b70 	.word	0x20000b70

08005530 <__malloc_lock>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__malloc_lock+0x8>)
 8005532:	f000 b859 	b.w	80055e8 <__retarget_lock_acquire_recursive>
 8005536:	bf00      	nop
 8005538:	20000b74 	.word	0x20000b74

0800553c <__malloc_unlock>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__malloc_unlock+0x8>)
 800553e:	f000 b854 	b.w	80055ea <__retarget_lock_release_recursive>
 8005542:	bf00      	nop
 8005544:	20000b74 	.word	0x20000b74

08005548 <_free_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	2900      	cmp	r1, #0
 800554e:	d040      	beq.n	80055d2 <_free_r+0x8a>
 8005550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005554:	1f0c      	subs	r4, r1, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfb8      	it	lt
 800555a:	18e4      	addlt	r4, r4, r3
 800555c:	f7ff ffe8 	bl	8005530 <__malloc_lock>
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <_free_r+0x8c>)
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	b933      	cbnz	r3, 8005574 <_free_r+0x2c>
 8005566:	6063      	str	r3, [r4, #4]
 8005568:	6014      	str	r4, [r2, #0]
 800556a:	4628      	mov	r0, r5
 800556c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005570:	f7ff bfe4 	b.w	800553c <__malloc_unlock>
 8005574:	42a3      	cmp	r3, r4
 8005576:	d908      	bls.n	800558a <_free_r+0x42>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	1821      	adds	r1, r4, r0
 800557c:	428b      	cmp	r3, r1
 800557e:	bf01      	itttt	eq
 8005580:	6819      	ldreq	r1, [r3, #0]
 8005582:	685b      	ldreq	r3, [r3, #4]
 8005584:	1809      	addeq	r1, r1, r0
 8005586:	6021      	streq	r1, [r4, #0]
 8005588:	e7ed      	b.n	8005566 <_free_r+0x1e>
 800558a:	461a      	mov	r2, r3
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	b10b      	cbz	r3, 8005594 <_free_r+0x4c>
 8005590:	42a3      	cmp	r3, r4
 8005592:	d9fa      	bls.n	800558a <_free_r+0x42>
 8005594:	6811      	ldr	r1, [r2, #0]
 8005596:	1850      	adds	r0, r2, r1
 8005598:	42a0      	cmp	r0, r4
 800559a:	d10b      	bne.n	80055b4 <_free_r+0x6c>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	4401      	add	r1, r0
 80055a0:	1850      	adds	r0, r2, r1
 80055a2:	4283      	cmp	r3, r0
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	d1e0      	bne.n	800556a <_free_r+0x22>
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4401      	add	r1, r0
 80055ae:	6011      	str	r1, [r2, #0]
 80055b0:	6053      	str	r3, [r2, #4]
 80055b2:	e7da      	b.n	800556a <_free_r+0x22>
 80055b4:	d902      	bls.n	80055bc <_free_r+0x74>
 80055b6:	230c      	movs	r3, #12
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	e7d6      	b.n	800556a <_free_r+0x22>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	1821      	adds	r1, r4, r0
 80055c0:	428b      	cmp	r3, r1
 80055c2:	bf01      	itttt	eq
 80055c4:	6819      	ldreq	r1, [r3, #0]
 80055c6:	685b      	ldreq	r3, [r3, #4]
 80055c8:	1809      	addeq	r1, r1, r0
 80055ca:	6021      	streq	r1, [r4, #0]
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	6054      	str	r4, [r2, #4]
 80055d0:	e7cb      	b.n	800556a <_free_r+0x22>
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20000b68 	.word	0x20000b68

080055d8 <_malloc_usable_size_r>:
 80055d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055dc:	1f18      	subs	r0, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfbc      	itt	lt
 80055e2:	580b      	ldrlt	r3, [r1, r0]
 80055e4:	18c0      	addlt	r0, r0, r3
 80055e6:	4770      	bx	lr

080055e8 <__retarget_lock_acquire_recursive>:
 80055e8:	4770      	bx	lr

080055ea <__retarget_lock_release_recursive>:
 80055ea:	4770      	bx	lr

080055ec <_init>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

080055f8 <_fini>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr
