
STM32F103C8T6_ROS_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08009fe8  08009fe8  0000afe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e8  0800a5e8  0000c288  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e8  0800a5e8  0000b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f0  0800a5f0  0000c288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a5f0  0800a5f0  0000b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f8  0800a5f8  0000b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800a5fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce8  20000288  0800a884  0000c288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f70  0800a884  0000cf70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151ab  00000000  00000000  0000c2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2d  00000000  00000000  0002145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00024290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c58  00000000  00000000  00025278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7f9  00000000  00000000  00025ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118dd  00000000  00000000  000416c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924a2  00000000  00000000  00052fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005444  00000000  00000000  000e548c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ea8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	08009fd0 	.word	0x08009fd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	08009fd0 	.word	0x08009fd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfb8      	it	lt
 800108a:	425b      	neglt	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <_ZL14outputSpeedPIDP9PID_motor>:
static void resetEncoder(PID_motor* motor);
static uint32_t readEncoder(PID_motor* motor);

// Function to get the output value of the PID speed controller
static void outputSpeedPID(PID_motor* motor)
{
 8001096:	b590      	push	{r4, r7, lr}
 8001098:	b087      	sub	sp, #28
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
    float error, output, prop;
    // Get number of the encoder pulse in the last time frame
    if(motor->direction == 0 && (motor->current_encoder < motor->prev_encoder) && (motor->prev_encoder - motor->current_encoder > 16000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11f      	bne.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d219      	bcs.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80010c2:	d911      	bls.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
    {
        motor->real_speed = (65535 / 4) - motor->prev_encoder;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c8:	f5c3 537f 	rsb	r3, r3, #16320	@ 0x3fc0
 80010cc:	333f      	adds	r3, #63	@ 0x3f
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
        motor->real_speed += motor->current_encoder;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e6:	e02c      	b.n	8001142 <_ZL14outputSpeedPIDP9PID_motor+0xac>
    }
    else if(motor->direction == 1 && (motor->current_encoder > motor->prev_encoder) && (motor->current_encoder - motor->prev_encoder > 16000) )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d11f      	bne.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d919      	bls.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800110c:	d911      	bls.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
    {
        motor->real_speed = motor->current_encoder - (65535 / 4);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001112:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8001116:	3b3f      	subs	r3, #63	@ 0x3f
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34
        motor->real_speed -= motor->prev_encoder;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001130:	e007      	b.n	8001142 <_ZL14outputSpeedPIDP9PID_motor+0xac>
    }
    else
        motor->real_speed = motor->current_encoder - motor->prev_encoder;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	635a      	str	r2, [r3, #52]	@ 0x34
    // Get the error of the number of encoder per time frame
    error = motor->targetPulsePerFrame - motor->real_speed;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd56 	bl	8000bfc <__aeabi_i2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fc9b 	bl	8000a90 <__aeabi_fsub>
 800115a:	4603      	mov	r3, r0
 800115c:	613b      	str	r3, [r7, #16]
    // Get the output of the PID controller with the new formula to avoid derivative kick as well as accumulation error when updating PID parameters
    prop = motor->speed_controller.Kp * error;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4619      	mov	r1, r3
 8001164:	6938      	ldr	r0, [r7, #16]
 8001166:	f7ff fd9d 	bl	8000ca4 <__aeabi_fmul>
 800116a:	4603      	mov	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
    motor->integral_error += motor->speed_controller.Ki * error;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fd93 	bl	8000ca4 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	4619      	mov	r1, r3
 8001182:	4620      	mov	r0, r4
 8001184:	f7ff fc86 	bl	8000a94 <__addsf3>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	645a      	str	r2, [r3, #68]	@ 0x44
    // Anti integral wind-up 
    if(motor->MAX_PWM > prop)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	8b1b      	ldrh	r3, [r3, #24]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd31 	bl	8000bfc <__aeabi_i2f>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff1e 	bl	8000fe0 <__aeabi_fcmplt>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00e      	beq.n	80011c8 <_ZL14outputSpeedPIDP9PID_motor+0x132>
        motor->lim_max_integ = motor->MAX_PWM - prop;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8b1b      	ldrh	r3, [r3, #24]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd24 	bl	8000bfc <__aeabi_i2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fc69 	bl	8000a90 <__aeabi_fsub>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	649a      	str	r2, [r3, #72]	@ 0x48
 80011c6:	e003      	b.n	80011d0 <_ZL14outputSpeedPIDP9PID_motor+0x13a>
    else 
        motor->lim_max_integ = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	649a      	str	r2, [r3, #72]	@ 0x48
    
    if(0 < prop)
 80011d0:	f04f 0100 	mov.w	r1, #0
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff21 	bl	800101c <__aeabi_fcmpgt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d009      	beq.n	80011f4 <_ZL14outputSpeedPIDP9PID_motor+0x15e>
        motor->lim_min_integ = 0 - prop;
 80011e0:	68f9      	ldr	r1, [r7, #12]
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	f7ff fc53 	bl	8000a90 <__aeabi_fsub>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011f2:	e003      	b.n	80011fc <_ZL14outputSpeedPIDP9PID_motor+0x166>
    else
        motor->lim_min_integ = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    // Constraint the integral
    if(motor->integral_error > motor->lim_max_integ)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f7ff ff08 	bl	800101c <__aeabi_fcmpgt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <_ZL14outputSpeedPIDP9PID_motor+0x186>
        motor->integral_error = motor->lim_max_integ;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	645a      	str	r2, [r3, #68]	@ 0x44
 800121a:	e00e      	b.n	800123a <_ZL14outputSpeedPIDP9PID_motor+0x1a4>
    else if(motor->integral_error < motor->lim_min_integ)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f7ff feda 	bl	8000fe0 <__aeabi_fcmplt>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <_ZL14outputSpeedPIDP9PID_motor+0x1a4>
        motor->integral_error = motor->lim_min_integ;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	@ 0x44

    output = prop + motor->speed_controller.Kd * (motor->real_speed - motor->prev_encoder_feedback) + motor->integral_error;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	@ 0x40
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fcd6 	bl	8000bfc <__aeabi_i2f>
 8001250:	4603      	mov	r3, r0
 8001252:	4619      	mov	r1, r3
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fd25 	bl	8000ca4 <__aeabi_fmul>
 800125a:	4603      	mov	r3, r0
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc18 	bl	8000a94 <__addsf3>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126c:	4619      	mov	r1, r3
 800126e:	4610      	mov	r0, r2
 8001270:	f7ff fc10 	bl	8000a94 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	617b      	str	r3, [r7, #20]
    // Update the parameters
    motor->prev_encoder = motor->current_encoder;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	63da      	str	r2, [r3, #60]	@ 0x3c
    motor->prev_encoder_feedback = motor->real_speed;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    // Limit the output velocity of the motor
    if(output > motor->MAX_PWM)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8b1b      	ldrh	r3, [r3, #24]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fcb3 	bl	8000bfc <__aeabi_i2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4619      	mov	r1, r3
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff febe 	bl	800101c <__aeabi_fcmpgt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <_ZL14outputSpeedPIDP9PID_motor+0x220>
        output = motor->MAX_PWM;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8b1b      	ldrh	r3, [r3, #24]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fca2 	bl	8000bf4 <__aeabi_ui2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_ZL14outputSpeedPIDP9PID_motor+0x236>
    else if(output < 0)
 80012b6:	f04f 0100 	mov.w	r1, #0
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff fe90 	bl	8000fe0 <__aeabi_fcmplt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <_ZL14outputSpeedPIDP9PID_motor+0x236>
        output = 0;
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    motor->output = output;
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f7ff feaf 	bl	8001030 <__aeabi_f2iz>
 80012d2:	4602      	mov	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}

080012e0 <_ZL11readEncoderP9PID_motor>:

// Function to get the encoder value of the motor
static uint32_t readEncoder(PID_motor* motor)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    return motor->encoder_tim->CNT / 4;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	089b      	lsrs	r3, r3, #2
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
	...

080012fc <_Z9motorInit9PID_motor>:

// -------------------------------------------------------- General function used by users -----------------------------------------------

// Function to initiate the motor GPIO pins
void motorInit(PID_motor motor)
{
 80012fc:	b084      	sub	sp, #16
 80012fe:	b580      	push	{r7, lr}
 8001300:	b08a      	sub	sp, #40	@ 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8001308:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
    // Initiate the GPIO pins of the motor
    for(int i = 0; i < 2; ++i)
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
 800131e:	e08f      	b.n	8001440 <_Z9motorInit9PID_motor+0x144>
    {
        HAL_GPIO_WritePin(motor.motor_ports[i], motor.motor_pins[i], GPIO_PIN_RESET);
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001326:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	3304      	adds	r3, #4
 800132e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	f003 fcc7 	bl	8004ccc <HAL_GPIO_WritePin>
        if(motor.motor_ports[i] == GPIOA)
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	4a43      	ldr	r2, [pc, #268]	@ (8001458 <_Z9motorInit9PID_motor+0x15c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10c      	bne.n	8001368 <_Z9motorInit9PID_motor+0x6c>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b43      	ldr	r3, [pc, #268]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a42      	ldr	r2, [pc, #264]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b40      	ldr	r3, [pc, #256]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	e052      	b.n	800140e <_Z9motorInit9PID_motor+0x112>
        else if (motor.motor_ports[i] == GPIOB)
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	4a3b      	ldr	r2, [pc, #236]	@ (8001460 <_Z9motorInit9PID_motor+0x164>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d10c      	bne.n	8001392 <_Z9motorInit9PID_motor+0x96>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b38      	ldr	r3, [pc, #224]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a37      	ldr	r2, [pc, #220]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b35      	ldr	r3, [pc, #212]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	e03d      	b.n	800140e <_Z9motorInit9PID_motor+0x112>
        else if (motor.motor_ports[i] == GPIOC)
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	4a31      	ldr	r2, [pc, #196]	@ (8001464 <_Z9motorInit9PID_motor+0x168>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10c      	bne.n	80013bc <_Z9motorInit9PID_motor+0xc0>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a2d      	ldr	r2, [pc, #180]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	e028      	b.n	800140e <_Z9motorInit9PID_motor+0x112>
        else if (motor.motor_ports[i] == GPIOD)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <_Z9motorInit9PID_motor+0x16c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10c      	bne.n	80013e6 <_Z9motorInit9PID_motor+0xea>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a22      	ldr	r2, [pc, #136]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	e013      	b.n	800140e <_Z9motorInit9PID_motor+0x112>
        else if (motor.motor_ports[i] == GPIOE)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <_Z9motorInit9PID_motor+0x170>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10b      	bne.n	800140e <_Z9motorInit9PID_motor+0x112>
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a18      	ldr	r2, [pc, #96]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 80013fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <_Z9motorInit9PID_motor+0x160>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
        GPIO_InitStruct.Pin = motor.motor_pins[i];
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	3304      	adds	r3, #4
 8001412:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800141a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(motor.motor_ports[i], &GPIO_InitStruct);
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	f107 0214 	add.w	r2, r7, #20
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fac5 	bl	80049c4 <HAL_GPIO_Init>
    for(int i = 0; i < 2; ++i)
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	2b01      	cmp	r3, #1
 8001444:	f77f af6c 	ble.w	8001320 <_Z9motorInit9PID_motor+0x24>
    }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001454:	b004      	add	sp, #16
 8001456:	4770      	bx	lr
 8001458:	40010800 	.word	0x40010800
 800145c:	40021000 	.word	0x40021000
 8001460:	40010c00 	.word	0x40010c00
 8001464:	40011000 	.word	0x40011000
 8001468:	40011400 	.word	0x40011400
 800146c:	40011800 	.word	0x40011800

08001470 <_Z15dutyCycleUpdatetP9PID_motor>:

// Function to update the PWM duty cycle of the motor
void dutyCycleUpdate(uint16_t duty_cycle, PID_motor* motor)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	80fb      	strh	r3, [r7, #6]
    switch (motor->pwm_channel)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	7d1b      	ldrb	r3, [r3, #20]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d81f      	bhi.n	80014c4 <_Z15dutyCycleUpdatetP9PID_motor+0x54>
 8001484:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <_Z15dutyCycleUpdatetP9PID_motor+0x1c>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014a7 	.word	0x080014a7
 8001494:	080014b1 	.word	0x080014b1
 8001498:	080014bb 	.word	0x080014bb
    {
        case PWM_CHANNEL_1:
            motor->pwm_tim->CCR1 = duty_cycle;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80014a4:	e00f      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_2:
            motor->pwm_tim->CCR2 = duty_cycle;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80014ae:	e00a      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_3:
            motor->pwm_tim->CCR3 = duty_cycle;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 80014b8:	e005      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_4:
            motor->pwm_tim->CCR4 = duty_cycle;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 80014c2:	e000      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
    default:
        break;
 80014c4:	bf00      	nop
    }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <_Z10motorBrakeP9PID_motor>:

// Function to brake the motor immediately
void motorBrake(PID_motor* motor)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_RESET);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	891b      	ldrh	r3, [r3, #8]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	f003 fbf2 	bl	8004ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_RESET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6858      	ldr	r0, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	895b      	ldrh	r3, [r3, #10]
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	f003 fbea 	bl	8004ccc <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_Z18inputSpeedHandlingP9PID_motorf>:
    motor->real_speed = 0;
}

// Function to handle the speed input of the PID controller
void inputSpeedHandling(PID_motor* motor, float speed)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    // Rescale the input rpm speed
    if(speed > motor->MAX_INPUT_SPEED)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	8b5b      	ldrh	r3, [r3, #26]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fb74 	bl	8000bfc <__aeabi_i2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4619      	mov	r1, r3
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7ff fd7f 	bl	800101c <__aeabi_fcmpgt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <_Z18inputSpeedHandlingP9PID_motorf+0x34>
        speed = motor->MAX_INPUT_SPEED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	8b5b      	ldrh	r3, [r3, #26]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb63 	bl	8000bf4 <__aeabi_ui2f>
 800152e:	4603      	mov	r3, r0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	e00a      	b.n	800154a <_Z18inputSpeedHandlingP9PID_motorf+0x4a>
    else if(speed < 0)
 8001534:	f04f 0100 	mov.w	r1, #0
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7ff fd51 	bl	8000fe0 <__aeabi_fcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <_Z18inputSpeedHandlingP9PID_motorf+0x4a>
        speed = 0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	603b      	str	r3, [r7, #0]

    if(speed >= 0)
 800154a:	f04f 0100 	mov.w	r1, #0
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f7ff fd5a 	bl	8001008 <__aeabi_fcmpge>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <_Z18inputSpeedHandlingP9PID_motorf+0x64>
        motor->direction = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001562:	e003      	b.n	800156c <_Z18inputSpeedHandlingP9PID_motorf+0x6c>
    else
        motor->direction = 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    // Check whether the motor is already moving
    if(! motor->moving)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <_Z18inputSpeedHandlingP9PID_motorf+0x7e>
    {
        motor->moving = 1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }
    // Convert the desired speed to pulse per frame and input to the motor
    motor->targetPulsePerFrame = (speed * motor->encoder_rev) * time_frame / 60000.0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	8adb      	ldrh	r3, [r3, #22]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb3a 	bl	8000bfc <__aeabi_i2f>
 8001588:	4603      	mov	r3, r0
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fb89 	bl	8000ca4 <__aeabi_fmul>
 8001592:	4603      	mov	r3, r0
 8001594:	461c      	mov	r4, r3
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <_Z18inputSpeedHandlingP9PID_motorf+0xc4>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb2e 	bl	8000bfc <__aeabi_i2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fb7d 	bl	8000ca4 <__aeabi_fmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4906      	ldr	r1, [pc, #24]	@ (80015c8 <_Z18inputSpeedHandlingP9PID_motorf+0xc8>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc2c 	bl	8000e0c <__aeabi_fdiv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	631a      	str	r2, [r3, #48]	@ 0x30
    return;
 80015bc:	bf00      	nop
}
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	476a6000 	.word	0x476a6000

080015cc <_Z15speedControlPIDP9PID_motor>:

// Function to control the speed of the motor by PID algorithm
void speedControlPID(PID_motor* motor)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    // Update the motor encoder value
    motor->current_encoder = readEncoder(motor);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe83 	bl	80012e0 <_ZL11readEncoderP9PID_motor>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	639a      	str	r2, [r3, #56]	@ 0x38
    // Update the PID output of the controller
    outputSpeedPID(motor);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fd58 	bl	8001096 <_ZL14outputSpeedPIDP9PID_motor>

    // Get the absolute value of the motor
    uint16_t pwm_dutycycle = abs(motor->output);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd46 	bl	800107c <_ZSt3absl>
 80015f0:	4603      	mov	r3, r0
 80015f2:	81fb      	strh	r3, [r7, #14]
    if(pwm_dutycycle < motor->DEAD_BAND)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7f1b      	ldrb	r3, [r3, #28]
 80015f8:	461a      	mov	r2, r3
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d201      	bcs.n	8001604 <_Z15speedControlPIDP9PID_motor+0x38>
        pwm_dutycycle = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	81fb      	strh	r3, [r7, #14]

    // Control the direction of the motor
    if(motor->direction == 0)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d110      	bne.n	8001630 <_Z15speedControlPIDP9PID_motor+0x64>
    {
        HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	891b      	ldrh	r3, [r3, #8]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	f003 fb57 	bl	8004ccc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_RESET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6858      	ldr	r0, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	895b      	ldrh	r3, [r3, #10]
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	f003 fb4f 	bl	8004ccc <HAL_GPIO_WritePin>
 800162e:	e014      	b.n	800165a <_Z15speedControlPIDP9PID_motor+0x8e>
    }
    else if(motor->direction == 1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10f      	bne.n	800165a <_Z15speedControlPIDP9PID_motor+0x8e>
    {
        HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_RESET);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	891b      	ldrh	r3, [r3, #8]
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	f003 fb41 	bl	8004ccc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_SET);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	895b      	ldrh	r3, [r3, #10]
 8001652:	2201      	movs	r2, #1
 8001654:	4619      	mov	r1, r3
 8001656:	f003 fb39 	bl	8004ccc <HAL_GPIO_WritePin>
    }

    // Feed the value of the PWM duty cycle
    dutyCycleUpdate(pwm_dutycycle, motor);
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff06 	bl	8001470 <_Z15dutyCycleUpdatetP9PID_motor>

    if(pwm_dutycycle == 0)
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <_Z15speedControlPIDP9PID_motor+0xa4>
        motorBrake(motor);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff30 	bl	80014d0 <_Z10motorBrakeP9PID_motor>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f002 fd90 	bl	80041a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f82e 	bl	80016e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f000 fa8c 	bl	8001ba0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001688:	f000 fa64 	bl	8001b54 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 800168c:	f000 fa34 	bl	8001af8 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8001690:	f000 f876 	bl	8001780 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001694:	f000 f8d4 	bl	8001840 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001698:	f000 f930 	bl	80018fc <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800169c:	f000 f98c 	bl	80019b8 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 80016a0:	f001 fc8e 	bl	8002fc0 <setup>

  // Initiate the PWM of the 2 motors
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	480a      	ldr	r0, [pc, #40]	@ (80016d0 <main+0x58>)
 80016a8:	f004 f84c 	bl	8005744 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80016ac:	2104      	movs	r1, #4
 80016ae:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <main+0x58>)
 80016b0:	f004 f848 	bl	8005744 <HAL_TIM_PWM_Start>

    // Initiate the Encoder read of 2 motors
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016b4:	213c      	movs	r1, #60	@ 0x3c
 80016b6:	4807      	ldr	r0, [pc, #28]	@ (80016d4 <main+0x5c>)
 80016b8:	f004 f988 	bl	80059cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016bc:	213c      	movs	r1, #60	@ 0x3c
 80016be:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <main+0x60>)
 80016c0:	f004 f984 	bl	80059cc <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <main+0x64>)
 80016c6:	f003 ff93 	bl	80055f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ca:	bf00      	nop
 80016cc:	e7fd      	b.n	80016ca <main+0x52>
 80016ce:	bf00      	nop
 80016d0:	2000037c 	.word	0x2000037c
 80016d4:	200002ec 	.word	0x200002ec
 80016d8:	20000334 	.word	0x20000334
 80016dc:	200002a4 	.word	0x200002a4

080016e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	@ 0x40
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	2228      	movs	r2, #40	@ 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fd3d 	bl	800816e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800170a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800171e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fb01 	bl	8004d30 <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800173e:	f000 fab3 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2102      	movs	r1, #2
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fd69 	bl	8005234 <HAL_RCC_ClockConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001772:	f000 fa99 	bl	8001ca8 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3740      	adds	r7, #64	@ 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179c:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 800179e:	4a27      	ldr	r2, [pc, #156]	@ (800183c <_ZL12MX_TIM1_Initv+0xbc>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017b2:	f240 529f 	movw	r2, #1439	@ 0x59f
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017c6:	2280      	movs	r2, #128	@ 0x80
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ca:	481b      	ldr	r0, [pc, #108]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017cc:	f003 fec0 	bl	8005550 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80017e0:	f000 fa62 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	4811      	ldr	r0, [pc, #68]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017f2:	f004 fb43 	bl	8005e7c <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8001806:	f000 fa4f 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4808      	ldr	r0, [pc, #32]	@ (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 8001818:	f004 fec0 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 800182c:	f000 fa3c 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002a4 	.word	0x200002a4
 800183c:	40012c00 	.word	0x40012c00

08001840 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2224      	movs	r2, #36	@ 0x24
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 fc8d 	bl	800816e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001870:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001880:	2280      	movs	r2, #128	@ 0x80
 8001882:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001884:	2303      	movs	r3, #3
 8001886:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001894:	230f      	movs	r3, #15
 8001896:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80018a4:	230f      	movs	r3, #15
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4812      	ldr	r0, [pc, #72]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 80018b0:	f003 ffea 	bl	8005888 <HAL_TIM_Encoder_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80018c4:	f000 f9f0 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 80018d6:	f004 fe61 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80018ea:	f000 f9dd 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	@ 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002ec 	.word	0x200002ec

080018fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	@ 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2224      	movs	r2, #36	@ 0x24
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f006 fc2f 	bl	800816e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800191a:	4a26      	ldr	r2, [pc, #152]	@ (80019b4 <_ZL12MX_TIM3_Initv+0xb8>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800191e:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800192a:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800192c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800193a:	2280      	movs	r2, #128	@ 0x80
 800193c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800193e:	2303      	movs	r3, #3
 8001940:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800194e:	230f      	movs	r3, #15
 8001950:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001956:	2301      	movs	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800195e:	230f      	movs	r3, #15
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4811      	ldr	r0, [pc, #68]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800196a:	f003 ff8d 	bl	8005888 <HAL_TIM_Encoder_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800197e:	f000 f993 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4808      	ldr	r0, [pc, #32]	@ (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001990:	f004 fe04 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80019a4:	f000 f980 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	@ 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000334 	.word	0x20000334
 80019b4:	40000400 	.word	0x40000400

080019b8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	@ 0x38
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019e8:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019ea:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <_ZL12MX_TIM4_Initv+0x13c>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80019ee:	4b40      	ldr	r3, [pc, #256]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019f0:	2247      	movs	r2, #71	@ 0x47
 80019f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b3e      	ldr	r3, [pc, #248]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80019fa:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019fc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001a00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a0a:	2280      	movs	r2, #128	@ 0x80
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a0e:	4838      	ldr	r0, [pc, #224]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a10:	f003 fd9e 	bl	8005550 <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8001a24:	f000 f940 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a32:	4619      	mov	r1, r3
 8001a34:	482e      	ldr	r0, [pc, #184]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a36:	f004 fa21 	bl	8005e7c <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8001a4a:	f000 f92d 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a4e:	4828      	ldr	r0, [pc, #160]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a50:	f003 fe20 	bl	8005694 <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8001a64:	f000 f920 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4619      	mov	r1, r3
 8001a76:	481e      	ldr	r0, [pc, #120]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a78:	f004 fd90 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8001a8c:	f000 f90c 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a90:	2360      	movs	r3, #96	@ 0x60
 8001a92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001aa8:	f004 f926 	bl	8005cf8 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8001abc:	f000 f8f4 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480a      	ldr	r0, [pc, #40]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001ac8:	f004 f916 	bl	8005cf8 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <_ZL12MX_TIM4_Initv+0x128>
  {
    Error_Handler();
 8001adc:	f000 f8e4 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ae0:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001ae2:	f002 f911 	bl	8003d08 <HAL_TIM_MspPostInit>

}
 8001ae6:	bf00      	nop
 8001ae8:	3738      	adds	r7, #56	@ 0x38
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000037c 	.word	0x2000037c
 8001af4:	40000800 	.word	0x40000800

08001af8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001afe:	4a14      	ldr	r2, [pc, #80]	@ (8001b50 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b30:	f004 fda4 	bl	800667c <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001b44:	f000 f8b0 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200003c4 	.word	0x200003c4
 8001b50:	40013800 	.word	0x40013800

08001b54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <_ZL11MX_DMA_Initv+0x48>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <_ZL11MX_DMA_Initv+0x48>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <_ZL11MX_DMA_Initv+0x48>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	200e      	movs	r0, #14
 8001b78:	f002 fc4b 	bl	8004412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b7c:	200e      	movs	r0, #14
 8001b7e:	f002 fc64 	bl	800444a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	200f      	movs	r0, #15
 8001b88:	f002 fc43 	bl	8004412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b8c:	200f      	movs	r0, #15
 8001b8e:	f002 fc5c 	bl	800444a <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb4:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a37      	ldr	r2, [pc, #220]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b35      	ldr	r3, [pc, #212]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a31      	ldr	r2, [pc, #196]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bd2:	f043 0320 	orr.w	r3, r3, #32
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a25      	ldr	r2, [pc, #148]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c1a:	4820      	ldr	r0, [pc, #128]	@ (8001c9c <_ZL12MX_GPIO_Initv+0xfc>)
 8001c1c:	f003 f856 	bl	8004ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c26:	481e      	ldr	r0, [pc, #120]	@ (8001ca0 <_ZL12MX_GPIO_Initv+0x100>)
 8001c28:	f003 f850 	bl	8004ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2138      	movs	r1, #56	@ 0x38
 8001c30:	481c      	ldr	r0, [pc, #112]	@ (8001ca4 <_ZL12MX_GPIO_Initv+0x104>)
 8001c32:	f003 f84b 	bl	8004ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4813      	ldr	r0, [pc, #76]	@ (8001c9c <_ZL12MX_GPIO_Initv+0xfc>)
 8001c50:	f002 feb8 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <_ZL12MX_GPIO_Initv+0x100>)
 8001c6e:	f002 fea9 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c72:	2338      	movs	r3, #56	@ 0x38
 8001c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <_ZL12MX_GPIO_Initv+0x104>)
 8001c8a:	f002 fe9b 	bl	80049c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <Error_Handler+0x8>

08001cb4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	0800a240 	.word	0x0800a240

08001cf4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
      data()
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffe8 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8001d04:	4a06      	ldr	r2, [pc, #24]	@ (8001d20 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ffd0 	bl	8001cb4 <_ZN3ros4TimeC1Ev>
    {
    }
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	0800a228 	.word	0x0800a228

08001d24 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0a19      	lsrs	r1, r3, #8
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0c19      	lsrs	r1, r3, #16
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2ca      	uxtb	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	0e19      	lsrs	r1, r3, #24
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3303      	adds	r3, #3
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a19      	lsrs	r1, r3, #8
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	0c19      	lsrs	r1, r3, #16
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3302      	adds	r3, #2
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0e19      	lsrs	r1, r3, #24
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3303      	adds	r3, #3
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2ca      	uxtb	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    }
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	440b      	add	r3, r1
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	440b      	add	r3, r1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3303      	adds	r3, #3
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	6839      	ldr	r1, [r7, #0]
 8001e4e:	440b      	add	r3, r1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3302      	adds	r3, #2
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	440b      	add	r3, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3303      	adds	r3, #3
 8001e78:	6839      	ldr	r1, [r7, #0]
 8001e7a:	440b      	add	r3, r1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	4b02      	ldr	r3, [pc, #8]	@ (8001eac <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	08009fe8 	.word	0x08009fe8

08001eb0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	08009ff8 	.word	0x08009ff8

08001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fefe 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ee8:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eee:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ef4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
    {
    }
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0800a210 	.word	0x0800a210
 8001f0c:	0800a01c 	.word	0x0800a01c

08001f10 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8899      	ldrh	r1, [r3, #4]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	889b      	ldrh	r3, [r3, #4]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	b299      	uxth	r1, r3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3302      	adds	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe f900 	bl	8000150 <strlen>
 8001f50:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	69b9      	ldr	r1, [r7, #24]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 f864 	bl	8003028 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3304      	adds	r3, #4
 8001f64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	18d0      	adds	r0, r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4619      	mov	r1, r3
 8001f74:	f006 f989 	bl	800828a <memcpy>
      offset += length_topic_name;
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f8e3 	bl	8000150 <strlen>
 8001f8a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f847 	bl	8003028 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f006 f96c 	bl	800828a <memcpy>
      offset += length_message_type;
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f8c6 	bl	8000150 <strlen>
 8001fc4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 f82a 	bl	8003028 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	18d0      	adds	r0, r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f006 f94f 	bl	800828a <memcpy>
      offset += length_md5sum;
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	b2ca      	uxtb	r2, r1
 8002004:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0a19      	lsrs	r1, r3, #8
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0c19      	lsrs	r1, r3, #16
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3302      	adds	r3, #2
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0e19      	lsrs	r1, r3, #24
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3303      	adds	r3, #3
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	61fb      	str	r3, [r7, #28]
      return offset;
 800203c:	69fb      	ldr	r3, [r7, #28]
    }
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002046:	b580      	push	{r7, lr}
 8002048:	b08a      	sub	sp, #40	@ 0x28
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	889b      	ldrh	r3, [r3, #4]
 8002066:	b21a      	sxth	r2, r3
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	3301      	adds	r3, #1
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	440b      	add	r3, r1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21b      	sxth	r3, r3
 8002076:	4313      	orrs	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	3302      	adds	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	441a      	add	r2, r3
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f000 ffe6 	bl	8003064 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	3304      	adds	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a2:	e00b      	b.n	80020bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	441a      	add	r2, r3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	3b01      	subs	r3, #1
 80020ae:	6839      	ldr	r1, [r7, #0]
 80020b0:	440b      	add	r3, r1
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	4413      	add	r3, r2
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3ed      	bcc.n	80020a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4413      	add	r3, r2
 80020ce:	3b01      	subs	r3, #1
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	3b01      	subs	r3, #1
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	441a      	add	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4413      	add	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	441a      	add	r2, r3
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 ffb3 	bl	8003064 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3304      	adds	r3, #4
 8002102:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	e00b      	b.n	8002122 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	441a      	add	r2, r3
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	3b01      	subs	r3, #1
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	440b      	add	r3, r1
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	3301      	adds	r3, #1
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	429a      	cmp	r2, r3
 800212c:	d3ed      	bcc.n	800210a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	3b01      	subs	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	3b01      	subs	r3, #1
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	441a      	add	r2, r3
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f000 ff80 	bl	8003064 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	3304      	adds	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e00b      	b.n	8002188 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	441a      	add	r2, r3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b01      	subs	r3, #1
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	440b      	add	r3, r1
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3ed      	bcc.n	8002170 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	3b01      	subs	r3, #1
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	441a      	add	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	440a      	add	r2, r1
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	3301      	adds	r3, #1
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	440b      	add	r3, r1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	4313      	orrs	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3302      	adds	r3, #2
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	440b      	add	r3, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	3303      	adds	r3, #3
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	440b      	add	r3, r1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	061b      	lsls	r3, r3, #24
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3304      	adds	r3, #4
 800220a:	61bb      	str	r3, [r7, #24]
     return offset;
 800220c:	69bb      	ldr	r3, [r7, #24]
    }
 800220e:	4618      	mov	r0, r3
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4b02      	ldr	r3, [pc, #8]	@ (800222c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	0800a020 	.word	0x0800a020

08002230 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	4b02      	ldr	r3, [pc, #8]	@ (8002244 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	0800a03c 	.word	0x0800a03c

08002248 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fd3e 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
      level(0),
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	711a      	strb	r2, [r3, #4]
      msg("")
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002268:	609a      	str	r2, [r3, #8]
    {
    }
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	0800a1f8 	.word	0x0800a1f8
 8002278:	0800a01c 	.word	0x0800a01c

0800227c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4413      	add	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	7912      	ldrb	r2, [r2, #4]
 8002294:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fd ff55 	bl	8000150 <strlen>
 80022a6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 feb9 	bl	8003028 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	18d0      	adds	r0, r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f005 ffde 	bl	800828a <memcpy>
      offset += length_msg;
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80022d6:	68fb      	ldr	r3, [r7, #12]
    }
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	441a      	add	r2, r3
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fea9 	bl	8003064 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	3304      	adds	r3, #4
 8002316:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e00b      	b.n	8002336 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	441a      	add	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3b01      	subs	r3, #1
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	440b      	add	r3, r1
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3ed      	bcc.n	800231e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	3b01      	subs	r3, #1
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	3b01      	subs	r3, #1
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
     return offset;
 8002366:	693b      	ldr	r3, [r7, #16]
    }
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	4b02      	ldr	r3, [pc, #8]	@ (8002384 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	0800a060 	.word	0x0800a060

08002388 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4b02      	ldr	r3, [pc, #8]	@ (800239c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	0800a074 	.word	0x0800a074

080023a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fc92 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	0800a1e0 	.word	0x0800a1e0

080023fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	@ 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0a19      	lsrs	r1, r3, #8
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	0c19      	lsrs	r1, r3, #16
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	3302      	adds	r3, #2
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	4413      	add	r3, r2
 8002438:	b2ca      	uxtb	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0e19      	lsrs	r1, r3, #24
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	3303      	adds	r3, #3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	3304      	adds	r3, #4
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	e02a      	b.n	80024b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002468:	6939      	ldr	r1, [r7, #16]
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	0a19      	lsrs	r1, r3, #8
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	3301      	adds	r3, #1
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4413      	add	r3, r2
 8002480:	b2ca      	uxtb	r2, r1
 8002482:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	0c19      	lsrs	r1, r3, #16
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	3302      	adds	r3, #2
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	4413      	add	r3, r2
 8002490:	b2ca      	uxtb	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	0e19      	lsrs	r1, r3, #24
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3303      	adds	r3, #3
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	b2ca      	uxtb	r2, r1
 80024a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	3304      	adds	r3, #4
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	3301      	adds	r3, #1
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d3cf      	bcc.n	800245a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2ca      	uxtb	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	0a19      	lsrs	r1, r3, #8
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	3301      	adds	r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	0c19      	lsrs	r1, r3, #16
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	3302      	adds	r3, #2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	0e19      	lsrs	r1, r3, #24
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	3303      	adds	r3, #3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	3304      	adds	r3, #4
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e02a      	b.n	8002560 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0a19      	lsrs	r1, r3, #8
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0c19      	lsrs	r1, r3, #16
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	3302      	adds	r3, #2
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4413      	add	r3, r2
 8002540:	b2ca      	uxtb	r2, r1
 8002542:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	0e19      	lsrs	r1, r3, #24
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	3303      	adds	r3, #3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	3304      	adds	r3, #4
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	429a      	cmp	r2, r3
 8002568:	d3cf      	bcc.n	800250a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69d9      	ldr	r1, [r3, #28]
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	0a19      	lsrs	r1, r3, #8
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4413      	add	r3, r2
 8002586:	b2ca      	uxtb	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	0c19      	lsrs	r1, r3, #16
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3302      	adds	r3, #2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	0e19      	lsrs	r1, r3, #24
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	3303      	adds	r3, #3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	3304      	adds	r3, #4
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e027      	b.n	800260a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fdc2 	bl	8000150 <strlen>
 80025cc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fd26 	bl	8003028 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	3304      	adds	r3, #4
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	18d0      	adds	r0, r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4619      	mov	r1, r3
 80025f8:	f005 fe47 	bl	800828a <memcpy>
      offset += length_stringsi;
 80025fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4413      	add	r3, r2
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	3301      	adds	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	429a      	cmp	r2, r3
 8002612:	d3d2      	bcc.n	80025ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002616:	4618      	mov	r0, r3
 8002618:	3728      	adds	r7, #40	@ 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800261e:	b580      	push	{r7, lr}
 8002620:	b08e      	sub	sp, #56	@ 0x38
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002638:	3301      	adds	r3, #1
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	6a3a      	ldr	r2, [r7, #32]
 8002644:	4313      	orrs	r3, r2
 8002646:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264a:	3302      	adds	r3, #2
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	4313      	orrs	r3, r2
 8002658:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800265a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265c:	3303      	adds	r3, #3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	6a3a      	ldr	r2, [r7, #32]
 8002668:	4313      	orrs	r3, r2
 800266a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800266c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266e:	3304      	adds	r3, #4
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	d90a      	bls.n	8002692 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f004 ffda 	bl	8007640 <realloc>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30
 800269c:	e035      	b.n	800270a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026a6:	6839      	ldr	r1, [r7, #0]
 80026a8:	440a      	add	r2, r1
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b4:	3301      	adds	r3, #1
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	440b      	add	r3, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	3302      	adds	r3, #2
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	440b      	add	r3, r1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d8:	3303      	adds	r3, #3
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	440b      	add	r3, r1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80026ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ee:	3304      	adds	r3, #4
 80026f0:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002706:	3301      	adds	r3, #1
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002710:	429a      	cmp	r2, r3
 8002712:	d3c4      	bcc.n	800269e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800271e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002720:	3301      	adds	r3, #1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	4313      	orrs	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	3302      	adds	r3, #2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	4313      	orrs	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002744:	3303      	adds	r3, #3
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	4313      	orrs	r3, r2
 8002752:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002756:	3304      	adds	r3, #4
 8002758:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	429a      	cmp	r2, r3
 8002762:	d90a      	bls.n	800277a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f004 ff66 	bl	8007640 <realloc>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	e035      	b.n	80027f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	440a      	add	r2, r1
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279c:	3301      	adds	r3, #1
 800279e:	6839      	ldr	r1, [r7, #0]
 80027a0:	440b      	add	r3, r1
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	3302      	adds	r3, #2
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	440b      	add	r3, r1
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c0:	3303      	adds	r3, #3
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	440b      	add	r3, r1
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80027d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d6:	3304      	adds	r3, #4
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	3214      	adds	r2, #20
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80027ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ee:	3301      	adds	r3, #1
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3c4      	bcc.n	8002786 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002808:	3301      	adds	r3, #1
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281a:	3302      	adds	r3, #2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	3303      	adds	r3, #3
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800283c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283e:	3304      	adds	r3, #4
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	429a      	cmp	r2, r3
 800284a:	d90a      	bls.n	8002862 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f004 fef2 	bl	8007640 <realloc>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800286c:	e03e      	b.n	80028ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800286e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	441a      	add	r2, r3
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fbf2 	bl	8003064 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	3304      	adds	r3, #4
 8002884:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	e00b      	b.n	80028a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	441a      	add	r2, r3
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	3b01      	subs	r3, #1
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	440b      	add	r3, r1
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	3301      	adds	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3ed      	bcc.n	800288c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	3b01      	subs	r3, #1
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80028c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c2:	3b01      	subs	r3, #1
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	441a      	add	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80028cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	3220      	adds	r2, #32
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	3301      	adds	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3bb      	bcc.n	800286e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80028f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3738      	adds	r7, #56	@ 0x38
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	0800a14c 	.word	0x0800a14c

08002918 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	4b02      	ldr	r3, [pc, #8]	@ (800292c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	0800a098 	.word	0x0800a098

08002930 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68d8      	ldr	r0, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6891      	ldr	r1, [r2, #8]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4798      	blx	r3
 800297a:	4603      	mov	r3, r0
  };
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
  }
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80029b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <_ZN13STM32HardwareC1Ev+0x34>)
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200003c4 	.word	0x200003c4

080029f8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f804 	bl	8002a0e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a22:	4619      	mov	r1, r3
 8002a24:	f003 feea 	bl	80067fc <HAL_UART_Receive_DMA>
    }
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a3c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffa8 	bl	800299a <_ZN13STM32Hardware10getRdmaIndEv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	429c      	cmp	r4, r3
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002a60:	1c59      	adds	r1, r3, #1
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002a80:	68fb      	ldr	r3, [r7, #12]
    }
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
	...

08002a8c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d108      	bne.n	8002ab4 <_ZN13STM32Hardware5flushEv+0x28>
 8002aa2:	4b33      	ldr	r3, [pc, #204]	@ (8002b70 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <_ZN13STM32Hardware5flushEv+0x28>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <_ZN13STM32Hardware5flushEv+0x2a>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d055      	beq.n	8002b66 <_ZN13STM32Hardware5flushEv+0xda>
      {
        mutex = true;
 8002aba:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d047      	beq.n	8002b60 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	81fb      	strh	r3, [r7, #14]
          if(tfind < twind){
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d217      	bcs.n	8002b14 <_ZN13STM32Hardware5flushEv+0x88>
            len = twind - tfind;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b02:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	89fa      	ldrh	r2, [r7, #14]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f003 fe05 	bl	800671c <HAL_UART_Transmit_DMA>
 8002b12:	e01f      	b.n	8002b54 <_ZN13STM32Hardware5flushEv+0xc8>
          }
          else{
            len = tbuflen - tfind;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002b20:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b2c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	89fa      	ldrh	r2, [r7, #14]
 8002b36:	4619      	mov	r1, r3
 8002b38:	f003 fdf0 	bl	800671c <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_DMA(huart, &tbuf[0], twind);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f503 7102 	add.w	r1, r3, #520	@ 0x208
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f003 fde4 	bl	800671c <HAL_UART_Transmit_DMA>
          }
          tfind = twind;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000494 	.word	0x20000494

08002b74 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	617b      	str	r3, [r7, #20]
      n = (n <= tbuflen) ? n : tbuflen;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8a:	bfa8      	it	ge
 8002b8c:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8002b90:	617b      	str	r3, [r7, #20]

      int n_tail = (n <= tbuflen - twind) ? n : tbuflen - twind;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002b98:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	bf28      	it	cs
 8002ba2:	4613      	movcs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002bac:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 fb66 	bl	800828a <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d00b      	beq.n	8002bf2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	18d1      	adds	r1, r2, r3
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	f005 fb4c 	bl	800828a <memcpy>
      }
      flush();
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ff4a 	bl	8002a8c <_ZN13STM32Hardware5flushEv>
    }
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	f001 fb22 	bl	8004250 <HAL_GetTick>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
      data(0)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f856 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8002c28:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <_ZN8std_msgs6UInt32C1Ev+0x28>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
    {
    }
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800a19c 	.word	0x0800a19c

08002c44 <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0a19      	lsrs	r1, r3, #8
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2ca      	uxtb	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c19      	lsrs	r1, r3, #16
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0e19      	lsrs	r1, r3, #24
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3303      	adds	r3, #3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2ca      	uxtb	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	440b      	add	r3, r1
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
     return offset;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    }
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	4b02      	ldr	r3, [pc, #8]	@ (8002d2c <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	0800a0bc 	.word	0x0800a0bc

08002d30 <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	4b02      	ldr	r3, [pc, #8]	@ (8002d44 <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	0800a0cc 	.word	0x0800a0cc

08002d48 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	0800a1cc 	.word	0x0800a1cc

08002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ffe8 	bl	8002d48 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d78:	4a36      	ldr	r2, [pc, #216]	@ (8002e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe1c 	bl	80029c0 <_ZN13STM32HardwareC1Ev>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f005 f9da 	bl	800816e <memset>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8002dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f005 f9d1 	bl	800816e <memset>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8002dd2:	2264      	movs	r2, #100	@ 0x64
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f005 f9c9 	bl	800816e <memset>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8002de2:	2264      	movs	r2, #100	@ 0x64
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 f9c1 	bl	800816e <memset>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff faac 	bl	80023a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0800a188 	.word	0x0800a188

08002e58 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E>:
static int16_t left_enc_ticks = 0;
static int16_t right_enc_ticks = 0;

// ******************* Motor Velocity Callback ************************* 
void robotCmdVelCallBack(const std_msgs::UInt32& robot_vel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002e60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e64:	4810      	ldr	r0, [pc, #64]	@ (8002ea8 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x50>)
 8002e66:	f001 ff49 	bl	8004cfc <HAL_GPIO_TogglePin>
	rcv_buffer.robot_vel_msg = robot_vel.data;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002eac <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002e70:	6013      	str	r3, [r2, #0]
	inputSpeedHandling(&motor_left, (float)rcv_buffer.robot_wheels_vel[0]);
 8002e72:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd febf 	bl	8000bfc <__aeabi_i2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4619      	mov	r1, r3
 8002e82:	480b      	ldr	r0, [pc, #44]	@ (8002eb0 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x58>)
 8002e84:	f7fe fb3c 	bl	8001500 <_Z18inputSpeedHandlingP9PID_motorf>
	inputSpeedHandling(&motor_right, (float)rcv_buffer.robot_wheels_vel[1]);
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002e8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd feb4 	bl	8000bfc <__aeabi_i2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4806      	ldr	r0, [pc, #24]	@ (8002eb4 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x5c>)
 8002e9a:	f7fe fb31 	bl	8001500 <_Z18inputSpeedHandlingP9PID_motorf>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	20000de0 	.word	0x20000de0
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	2000005c 	.word	0x2000005c

08002eb8 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt32> robot_vel_sub("robot_wheel_vel", &robotCmdVelCallBack);

// ************************** Declare publishers **********************************
ros::Publisher robot_pos_pub("robot_wheel_pos", &robot_wheels_pos);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002ec0:	4805      	ldr	r0, [pc, #20]	@ (8002ed8 <HAL_UART_TxCpltCallback+0x20>)
 8002ec2:	f000 f929 	bl	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fddf 	bl	8002a8c <_ZN13STM32Hardware5flushEv>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000498 	.word	0x20000498

08002edc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002ee4:	4805      	ldr	r0, [pc, #20]	@ (8002efc <HAL_UART_RxCpltCallback+0x20>)
 8002ee6:	f000 f917 	bl	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd8e 	bl	8002a0e <_ZN13STM32Hardware10reset_rbufEv>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000498 	.word	0x20000498

08002f00 <HAL_TIM_PeriodElapsedCallback>:

// Function for timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	speedControlPID(&motor_left);
 8002f08:	4825      	ldr	r0, [pc, #148]	@ (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002f0a:	f7fe fb5f 	bl	80015cc <_Z15speedControlPIDP9PID_motor>
	speedControlPID(&motor_right);
 8002f0e:	4825      	ldr	r0, [pc, #148]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002f10:	f7fe fb5c 	bl	80015cc <_Z15speedControlPIDP9PID_motor>

	left_enc_ticks += motor_left.real_speed;
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b23      	ldr	r3, [pc, #140]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f2a:	801a      	strh	r2, [r3, #0]
	right_enc_ticks += motor_right.real_speed;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	4b1e      	ldr	r3, [pc, #120]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f42:	801a      	strh	r2, [r3, #0]

	// Publish new data every 100 ms
	if(++tick == 5)
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4a18      	ldr	r2, [pc, #96]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f50:	4619      	mov	r1, r3
 8002f52:	7011      	strb	r1, [r2, #0]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01a      	beq.n	8002f98 <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		tick = 0;
 8002f62:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
		send_buffer.robot_wheels_pos[0] = left_enc_ticks;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f6e:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f70:	801a      	strh	r2, [r3, #0]
		send_buffer.robot_wheels_pos[1] = right_enc_ticks;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f7a:	805a      	strh	r2, [r3, #2]
		robot_wheels_pos.data = send_buffer.robot_pos_msg;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f82:	6053      	str	r3, [r2, #4]
		robot_pos_pub.publish(&robot_wheels_pos);
 8002f84:	490c      	ldr	r1, [pc, #48]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f86:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f88:	f7ff fce8 	bl	800295c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		// Reset the encoders tick
		left_enc_ticks = 0;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	801a      	strh	r2, [r3, #0]
		right_enc_ticks = 0;
 8002f92:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	801a      	strh	r2, [r3, #0]
	}
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	2000005c 	.word	0x2000005c
 8002fa8:	20000de6 	.word	0x20000de6
 8002fac:	20000de8 	.word	0x20000de8
 8002fb0:	20000de4 	.word	0x20000de4
 8002fb4:	20000ddc 	.word	0x20000ddc
 8002fb8:	20000dd4 	.word	0x20000dd4
 8002fbc:	20000e08 	.word	0x20000e08

08002fc0 <setup>:

void setup(void)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b093      	sub	sp, #76	@ 0x4c
 8002fc4:	af12      	add	r7, sp, #72	@ 0x48
  nh.initNode();
 8002fc6:	4813      	ldr	r0, [pc, #76]	@ (8003014 <setup+0x54>)
 8002fc8:	f000 f8b1 	bl	800312e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  // Initiate publishers and subscribers
  nh.advertise(robot_pos_pub);
 8002fcc:	4912      	ldr	r1, [pc, #72]	@ (8003018 <setup+0x58>)
 8002fce:	4811      	ldr	r0, [pc, #68]	@ (8003014 <setup+0x54>)
 8002fd0:	f000 f8ca 	bl	8003168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(robot_vel_sub);
 8002fd4:	4911      	ldr	r1, [pc, #68]	@ (800301c <setup+0x5c>)
 8002fd6:	480f      	ldr	r0, [pc, #60]	@ (8003014 <setup+0x54>)
 8002fd8:	f000 f8f5 	bl	80031c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

  motorInit(motor_left);
 8002fdc:	4c10      	ldr	r4, [pc, #64]	@ (8003020 <setup+0x60>)
 8002fde:	4668      	mov	r0, sp
 8002fe0:	f104 0310 	add.w	r3, r4, #16
 8002fe4:	2248      	movs	r2, #72	@ 0x48
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f005 f94f 	bl	800828a <memcpy>
 8002fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ff0:	f7fe f984 	bl	80012fc <_Z9motorInit9PID_motor>
  motorInit(motor_right);
 8002ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8003024 <setup+0x64>)
 8002ff6:	4668      	mov	r0, sp
 8002ff8:	f104 0310 	add.w	r3, r4, #16
 8002ffc:	2248      	movs	r2, #72	@ 0x48
 8002ffe:	4619      	mov	r1, r3
 8003000:	f005 f943 	bl	800828a <memcpy>
 8003004:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003008:	f7fe f978 	bl	80012fc <_Z9motorInit9PID_motor>
}
 800300c:	bf00      	nop
 800300e:	3704      	adds	r7, #4
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	20000498 	.word	0x20000498
 8003018:	20000e08 	.word	0x20000e08
 800301c:	20000dec 	.word	0x20000dec
 8003020:	20000004 	.word	0x20000004
 8003024:	2000005c 	.word	0x2000005c

08003028 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e00c      	b.n	8003052 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	fa22 f103 	lsr.w	r1, r2, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	b2ca      	uxtb	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d9ef      	bls.n	8003038 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e010      	b.n	800309c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	440a      	add	r2, r1
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	4611      	mov	r1, r2
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	00d2      	lsls	r2, r2, #3
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d9eb      	bls.n	800307a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
	...

080030b0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	0800a1b4 	.word	0x0800a1b4

080030d0 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ffe5 	bl	80030b0 <_ZN3ros11Subscriber_C1Ev>
 80030e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003114 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	330c      	adds	r3, #12
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fd91 	bl	8002c18 <_ZN8std_msgs6UInt32C1Ev>
    cb_(cb),
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]
  };
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	0800a170 	.word	0x0800a170

08003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
  }
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fc5c 	bl	80029f8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e01d      	b.n	80031b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d111      	bne.n	80031ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	60da      	str	r2, [r3, #12]
        return true;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e006      	b.n	80031bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b18      	cmp	r3, #24
 80031b8:	ddde      	ble.n	8003178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80031ba:	2300      	movs	r3, #0
  }
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e018      	b.n	8003208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	605a      	str	r2, [r3, #4]
        return true;
 80031fe:	2301      	movs	r3, #1
 8003200:	e006      	b.n	8003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b18      	cmp	r3, #24
 800320c:	dde3      	ble.n	80031d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800320e:	2300      	movs	r3, #0
  }
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fcea 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800322c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800323c:	4293      	cmp	r3, r2
 800323e:	d903      	bls.n	8003248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	429a      	cmp	r2, r3
 800325c:	d903      	bls.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fcc3 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003286:	429a      	cmp	r2, r3
 8003288:	bf8c      	ite	hi
 800328a:	2301      	movhi	r3, #1
 800328c:	2300      	movls	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003294:	f06f 0301 	mvn.w	r3, #1
 8003298:	e194      	b.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fbc6 	bl	8002a30 <_ZN13STM32Hardware4readEv>
 80032a4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f2c0 8174 	blt.w	8003596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	d11e      	bne.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80032ce:	1c59      	adds	r1, r3, #1
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	b2d1      	uxtb	r1, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	460a      	mov	r2, r1
 80032e0:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80032ea:	1e5a      	subs	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1b4      	bne.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2208      	movs	r2, #8
 8003300:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003304:	e7af      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800330c:	2b00      	cmp	r3, #0
 800330e:	d128      	bne.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2bff      	cmp	r3, #255	@ 0xff
 8003314:	d10d      	bne.n	8003332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f103 0214 	add.w	r2, r3, #20
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8003330:	e799      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fc62 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	bf8c      	ite	hi
 800334a:	2301      	movhi	r3, #1
 800334c:	2300      	movls	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d088      	beq.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 800335c:	f06f 0301 	mvn.w	r3, #1
 8003360:	e130      	b.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003368:	2b01      	cmp	r3, #1
 800336a:	d118      	bne.n	800339e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003370:	d107      	bne.n	8003382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003380:	e771      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f af68 	bne.w	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f918 	bl	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800339c:	e763      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d113      	bne.n	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80033ce:	e74a      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d110      	bne.n	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80033fa:	e734      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003402:	2b04      	cmp	r3, #4
 8003404:	d116      	bne.n	8003434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800340c:	425a      	negs	r2, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	bf58      	it	pl
 8003414:	4253      	negpl	r3, r2
 8003416:	2bff      	cmp	r3, #255	@ 0xff
 8003418:	d107      	bne.n	800342a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003428:	e71d      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003432:	e718      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800343a:	2b05      	cmp	r3, #5
 800343c:	d10f      	bne.n	800345e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800345c:	e703      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003464:	2b06      	cmp	r3, #6
 8003466:	d117      	bne.n	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	441a      	add	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2207      	movs	r2, #7
 800347e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f aeec 	bne.w	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2208      	movs	r2, #8
 8003492:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003496:	e6e6      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800349e:	2b08      	cmp	r3, #8
 80034a0:	f47f aee1 	bne.w	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80034b2:	425a      	negs	r2, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	bf58      	it	pl
 80034ba:	4253      	negpl	r3, r2
 80034bc:	2bff      	cmp	r3, #255	@ 0xff
 80034be:	f47f aed2 	bne.w	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d110      	bne.n	80034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f87d 	bl	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f898 	bl	8003608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034ec:	e06a      	b.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80034f4:	2b0a      	cmp	r3, #10
 80034f6:	d107      	bne.n	8003508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f961 	bl	80037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003506:	e6ae      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d10e      	bne.n	8003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7ff f87c 	bl	800261e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 800352e:	e69a      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003536:	2b0b      	cmp	r3, #11
 8003538:	d104      	bne.n	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8003542:	e690      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800354a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f43f ae84 	beq.w	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003564:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800356e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003578:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8003590:	4611      	mov	r1, r2
 8003592:	4798      	blx	r3
    while (true)
 8003594:	e667      	b.n	8003266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003596:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00f      	beq.n	80035c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d906      	bls.n	80035c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f809 	bl	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80035c2:	2300      	movs	r3, #0
  }
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe fb8b 	bl	8001cf4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f107 020c 	add.w	r2, r7, #12
 80035e8:	210a      	movs	r1, #10
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
    rt_time = hardware_.time();
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fb04 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8003600:	bf00      	nop
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b08b      	sub	sp, #44	@ 0x2c
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fc57 	bl	8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
 800361e:	e062      	b.n	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d056      	beq.n	80036e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	b29b      	uxth	r3, r3
 8003644:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3308      	adds	r3, #8
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4608      	mov	r0, r1
 8003680:	4798      	blx	r3
 8003682:	4603      	mov	r3, r0
 8003684:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4798      	blx	r3
 80036b0:	4603      	mov	r3, r0
 80036b2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80036b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036b8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681c      	ldr	r4, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f958 	bl	8002984 <_ZN3ros9Publisher15getEndpointTypeEv>
 80036d4:	4601      	mov	r1, r0
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	461a      	mov	r2, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	3301      	adds	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	2b18      	cmp	r3, #24
 80036ea:	dd99      	ble.n	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f0:	e05e      	b.n	80037b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80036fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d053      	beq.n	80037aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003706:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800370a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b29b      	uxth	r3, r3
 8003712:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003728:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800372c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003734:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3308      	adds	r3, #8
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4608      	mov	r0, r1
 8003744:	4798      	blx	r3
 8003746:	4603      	mov	r3, r0
 8003748:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003752:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800375e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4608      	mov	r0, r1
 800376a:	4798      	blx	r3
 800376c:	4603      	mov	r3, r0
 800376e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003774:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003780:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3304      	adds	r3, #4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4608      	mov	r0, r1
 800379c:	4798      	blx	r3
 800379e:	4601      	mov	r1, r0
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	461a      	mov	r2, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	3301      	adds	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	2b18      	cmp	r3, #24
 80037b4:	dd9d      	ble.n	80036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 80037be:	bf00      	nop
 80037c0:	372c      	adds	r7, #44	@ 0x2c
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}
	...

080037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fa8c 	bl	8001cf4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fa0d 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe faea 	bl	8001dd2 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4915      	ldr	r1, [pc, #84]	@ (8003858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003804:	fba1 1303 	umull	r1, r3, r1, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	4413      	add	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800380e:	6939      	ldr	r1, [r7, #16]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003814:	fba3 0302 	umull	r0, r3, r3, r2
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800381e:	fb00 f303 	mul.w	r3, r0, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	440b      	add	r3, r1
 800382c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8a6 	bl	8003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f9dd 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	10624dd3 	.word	0x10624dd3
 800385c:	000f4240 	.word	0x000f4240

08003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b63      	cmp	r3, #99	@ 0x63
 8003870:	dd09      	ble.n	8003886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003882:	2300      	movs	r3, #0
 8003884:	e079      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8003892:	3207      	adds	r2, #7
 8003894:	4611      	mov	r1, r2
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	22ff      	movs	r2, #255	@ 0xff
 80038a0:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	22fe      	movs	r2, #254	@ 0xfe
 80038a8:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 80038d2:	4413      	add	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	121b      	asrs	r3, r3, #8
 80038f0:	b21b      	sxth	r3, r3
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80038fe:	2305      	movs	r3, #5
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e00c      	b.n	800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4413      	add	r3, r2
 800390a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	3301      	adds	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3306      	adds	r3, #6
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	dded      	ble.n	8003904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3307      	adds	r3, #7
 800392c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	425a      	negs	r2, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	bf58      	it	pl
 8003938:	4253      	negpl	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	6179      	str	r1, [r7, #20]
 8003942:	43d2      	mvns	r2, r2
 8003944:	b2d1      	uxtb	r1, r2
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	460a      	mov	r2, r1
 800394c:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	dc0a      	bgt.n	800396e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1d18      	adds	r0, r3, #4
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4619      	mov	r1, r3
 8003966:	f7ff f905 	bl	8002b74 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	e005      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800396e:	4905      	ldr	r1, [pc, #20]	@ (8003984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f849 	bl	8003a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	0800a0f0 	.word	0x0800a0f0

08003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f932 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800399c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4915      	ldr	r1, [pc, #84]	@ (80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039a6:	fba1 1303 	umull	r1, r3, r1, r3
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	1aca      	subs	r2, r1, r3
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80039d8:	4413      	add	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f000 fb84 	bl	80040fc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	10624dd3 	.word	0x10624dd3
 8003a00:	000f4240 	.word	0x000f4240
 8003a04:	3b9aca00 	.word	0x3b9aca00

08003a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	2103      	movs	r1, #3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f804 	bl	8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fc06 	bl	8002248 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f107 0214 	add.w	r2, r7, #20
 8003a4e:	2107      	movs	r1, #7
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	4798      	blx	r3
  }
 8003a54:	bf00      	nop
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_Z41__static_initialization_and_destruction_0ii>:
#ifdef STM32F3xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#endif

  nh.spinOnce();
}
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d116      	bne.n	8003a9a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d111      	bne.n	8003a9a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003a76:	480b      	ldr	r0, [pc, #44]	@ (8003aa4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003a78:	f7ff f976 	bl	8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt32 robot_wheels_pos;
 8003a7c:	480a      	ldr	r0, [pc, #40]	@ (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a7e:	f7ff f8cb 	bl	8002c18 <_ZN8std_msgs6UInt32C1Ev>
ros::Subscriber<std_msgs::UInt32> robot_vel_sub("robot_wheel_vel", &robotCmdVelCallBack);
 8003a82:	2301      	movs	r3, #1
 8003a84:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003a86:	490a      	ldr	r1, [pc, #40]	@ (8003ab0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003a88:	480a      	ldr	r0, [pc, #40]	@ (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003a8a:	f7ff fb21 	bl	80030d0 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher robot_pos_pub("robot_wheel_pos", &robot_wheels_pos);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	4a05      	ldr	r2, [pc, #20]	@ (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a92:	4909      	ldr	r1, [pc, #36]	@ (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003a94:	4809      	ldr	r0, [pc, #36]	@ (8003abc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003a96:	f7fe ff4b 	bl	8002930 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000498 	.word	0x20000498
 8003aa8:	20000dd4 	.word	0x20000dd4
 8003aac:	08002e59 	.word	0x08002e59
 8003ab0:	0800a12c 	.word	0x0800a12c
 8003ab4:	20000dec 	.word	0x20000dec
 8003ab8:	0800a13c 	.word	0x0800a13c
 8003abc:	20000e08 	.word	0x20000e08

08003ac0 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	330c      	adds	r3, #12
 8003ace:	6839      	ldr	r1, [r7, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff f8e9 	bl	8002ca8 <_ZN8std_msgs6UInt3211deserializeEPh>
    this->cb_(msg);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	320c      	adds	r2, #12
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4798      	blx	r3
  }
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
  }
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f903 	bl	8002d18 <_ZN8std_msgs6UInt327getTypeEv>
 8003b12:	4603      	mov	r3, r0
  }
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	330c      	adds	r3, #12
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f901 	bl	8002d30 <_ZN8std_msgs6UInt326getMD5Ev>
 8003b2e:	4603      	mov	r3, r0
  }
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <_GLOBAL__sub_I_nh>:
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7ff ff7f 	bl	8003a5c <_Z41__static_initialization_and_destruction_0ii>
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_MspInit+0x5c>)
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <HAL_MspInit+0x5c>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6193      	str	r3, [r2, #24]
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_MspInit+0x5c>)
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <HAL_MspInit+0x5c>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	4a0e      	ldr	r2, [pc, #56]	@ (8003bbc <HAL_MspInit+0x5c>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	61d3      	str	r3, [r2, #28]
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <HAL_MspInit+0x5c>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_MspInit+0x60>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	4a04      	ldr	r2, [pc, #16]	@ (8003bc0 <HAL_MspInit+0x60>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40010000 	.word	0x40010000

08003bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <HAL_TIM_Base_MspInit+0x68>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d114      	bne.n	8003c00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bd6:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <HAL_TIM_Base_MspInit+0x6c>)
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	4a15      	ldr	r2, [pc, #84]	@ (8003c30 <HAL_TIM_Base_MspInit+0x6c>)
 8003bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003be0:	6193      	str	r3, [r2, #24]
 8003be2:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <HAL_TIM_Base_MspInit+0x6c>)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2019      	movs	r0, #25
 8003bf4:	f000 fc0d 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003bf8:	2019      	movs	r0, #25
 8003bfa:	f000 fc26 	bl	800444a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003bfe:	e010      	b.n	8003c22 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0b      	ldr	r2, [pc, #44]	@ (8003c34 <HAL_TIM_Base_MspInit+0x70>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10b      	bne.n	8003c22 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c0a:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_TIM_Base_MspInit+0x6c>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4a08      	ldr	r2, [pc, #32]	@ (8003c30 <HAL_TIM_Base_MspInit+0x6c>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	61d3      	str	r3, [r2, #28]
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_TIM_Base_MspInit+0x6c>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40000800 	.word	0x40000800

08003c38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c40:	f107 0318 	add.w	r3, r7, #24
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c56:	d124      	bne.n	8003ca2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c58:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	61d3      	str	r3, [r2, #28]
 8003c64:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c70:	4b22      	ldr	r3, [pc, #136]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	6193      	str	r3, [r2, #24]
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 0318 	add.w	r3, r7, #24
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4819      	ldr	r0, [pc, #100]	@ (8003d00 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c9c:	f000 fe92 	bl	80049c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ca0:	e028      	b.n	8003cf4 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	@ (8003d04 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d123      	bne.n	8003cf4 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cac:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	61d3      	str	r3, [r2, #28]
 8003cb8:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	6193      	str	r3, [r2, #24]
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cdc:	23c0      	movs	r3, #192	@ 0xc0
 8003cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	f107 0318 	add.w	r3, r7, #24
 8003cec:	4619      	mov	r1, r3
 8003cee:	4804      	ldr	r0, [pc, #16]	@ (8003d00 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003cf0:	f000 fe68 	bl	80049c4 <HAL_GPIO_Init>
}
 8003cf4:	bf00      	nop
 8003cf6:	3728      	adds	r7, #40	@ 0x28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010800 	.word	0x40010800
 8003d04:	40000400 	.word	0x40000400

08003d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a0f      	ldr	r2, [pc, #60]	@ (8003d60 <HAL_TIM_MspPostInit+0x58>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d117      	bne.n	8003d58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d28:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <HAL_TIM_MspPostInit+0x5c>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <HAL_TIM_MspPostInit+0x5c>)
 8003d2e:	f043 0308 	orr.w	r3, r3, #8
 8003d32:	6193      	str	r3, [r2, #24]
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_TIM_MspPostInit+0x5c>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d40:	23c0      	movs	r3, #192	@ 0xc0
 8003d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4c:	f107 0310 	add.w	r3, r7, #16
 8003d50:	4619      	mov	r1, r3
 8003d52:	4805      	ldr	r0, [pc, #20]	@ (8003d68 <HAL_TIM_MspPostInit+0x60>)
 8003d54:	f000 fe36 	bl	80049c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d58:	bf00      	nop
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010c00 	.word	0x40010c00

08003d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a48      	ldr	r2, [pc, #288]	@ (8003ea8 <HAL_UART_MspInit+0x13c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	f040 8088 	bne.w	8003e9e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d8e:	4b47      	ldr	r3, [pc, #284]	@ (8003eac <HAL_UART_MspInit+0x140>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	4a46      	ldr	r2, [pc, #280]	@ (8003eac <HAL_UART_MspInit+0x140>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d98:	6193      	str	r3, [r2, #24]
 8003d9a:	4b44      	ldr	r3, [pc, #272]	@ (8003eac <HAL_UART_MspInit+0x140>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <HAL_UART_MspInit+0x140>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	4a40      	ldr	r2, [pc, #256]	@ (8003eac <HAL_UART_MspInit+0x140>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6193      	str	r3, [r2, #24]
 8003db2:	4b3e      	ldr	r3, [pc, #248]	@ (8003eac <HAL_UART_MspInit+0x140>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dcc:	f107 0310 	add.w	r3, r7, #16
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4837      	ldr	r0, [pc, #220]	@ (8003eb0 <HAL_UART_MspInit+0x144>)
 8003dd4:	f000 fdf6 	bl	80049c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	4619      	mov	r1, r3
 8003dec:	4830      	ldr	r0, [pc, #192]	@ (8003eb0 <HAL_UART_MspInit+0x144>)
 8003dee:	f000 fde9 	bl	80049c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003df2:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003df4:	4a30      	ldr	r2, [pc, #192]	@ (8003eb8 <HAL_UART_MspInit+0x14c>)
 8003df6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003df8:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e06:	2280      	movs	r2, #128	@ 0x80
 8003e08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e10:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e16:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e18:	2220      	movs	r2, #32
 8003e1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e24:	4823      	ldr	r0, [pc, #140]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e26:	f000 fb2b 	bl	8004480 <HAL_DMA_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003e30:	f7fd ff3a 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb4 <HAL_UART_MspInit+0x148>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003e40:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec0 <HAL_UART_MspInit+0x154>)
 8003e44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e46:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e48:	2210      	movs	r2, #16
 8003e4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e58:	4b18      	ldr	r3, [pc, #96]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e5e:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e64:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e72:	4812      	ldr	r0, [pc, #72]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e74:	f000 fb04 	bl	8004480 <HAL_DMA_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003e7e:	f7fd ff13 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e86:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e88:	4a0c      	ldr	r2, [pc, #48]	@ (8003ebc <HAL_UART_MspInit+0x150>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	2025      	movs	r0, #37	@ 0x25
 8003e94:	f000 fabd 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e98:	2025      	movs	r0, #37	@ 0x25
 8003e9a:	f000 fad6 	bl	800444a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003e9e:	bf00      	nop
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40010800 	.word	0x40010800
 8003eb4:	2000040c 	.word	0x2000040c
 8003eb8:	40020058 	.word	0x40020058
 8003ebc:	20000450 	.word	0x20000450
 8003ec0:	40020044 	.word	0x40020044

08003ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <NMI_Handler+0x4>

08003ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <HardFault_Handler+0x4>

08003ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <MemManage_Handler+0x4>

08003edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <BusFault_Handler+0x4>

08003ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <UsageFault_Handler+0x4>

08003eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f14:	f000 f98a 	bl	800422c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f20:	4802      	ldr	r0, [pc, #8]	@ (8003f2c <DMA1_Channel4_IRQHandler+0x10>)
 8003f22:	f000 fc1b 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000450 	.word	0x20000450

08003f30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f34:	4802      	ldr	r0, [pc, #8]	@ (8003f40 <DMA1_Channel5_IRQHandler+0x10>)
 8003f36:	f000 fc11 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000040c 	.word	0x2000040c

08003f44 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <TIM1_UP_IRQHandler+0x10>)
 8003f4a:	f001 fdcd 	bl	8005ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200002a4 	.word	0x200002a4

08003f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <USART1_IRQHandler+0x10>)
 8003f5e:	f002 fc73 	bl	8006848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200003c4 	.word	0x200003c4

08003f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return 1;
 8003f70:	2301      	movs	r3, #1
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <_kill>:

int _kill(int pid, int sig)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f84:	f004 f946 	bl	8008214 <__errno>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2216      	movs	r2, #22
 8003f8c:	601a      	str	r2, [r3, #0]
  return -1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_exit>:

void _exit (int status)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fa2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffe7 	bl	8003f7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <_exit+0x12>

08003fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e00a      	b.n	8003fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fc2:	f3af 8000 	nop.w
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	60ba      	str	r2, [r7, #8]
 8003fce:	b2ca      	uxtb	r2, r1
 8003fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	dbf0      	blt.n	8003fc2 <_read+0x12>
  }

  return len;
 8003fe0:	687b      	ldr	r3, [r7, #4]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b086      	sub	sp, #24
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e009      	b.n	8004010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	60ba      	str	r2, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	dbf1      	blt.n	8003ffc <_write+0x12>
  }
  return len;
 8004018:	687b      	ldr	r3, [r7, #4]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_close>:

int _close(int file)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800402a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004048:	605a      	str	r2, [r3, #4]
  return 0;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <_isatty>:

int _isatty(int file)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800405e:	2301      	movs	r3, #1
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
	...

08004084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800408c:	4a14      	ldr	r2, [pc, #80]	@ (80040e0 <_sbrk+0x5c>)
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <_sbrk+0x60>)
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004098:	4b13      	ldr	r3, [pc, #76]	@ (80040e8 <_sbrk+0x64>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a0:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <_sbrk+0x64>)
 80040a2:	4a12      	ldr	r2, [pc, #72]	@ (80040ec <_sbrk+0x68>)
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <_sbrk+0x64>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d207      	bcs.n	80040c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040b4:	f004 f8ae 	bl	8008214 <__errno>
 80040b8:	4603      	mov	r3, r0
 80040ba:	220c      	movs	r2, #12
 80040bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040c2:	e009      	b.n	80040d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040c4:	4b08      	ldr	r3, [pc, #32]	@ (80040e8 <_sbrk+0x64>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ca:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <_sbrk+0x64>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	4a05      	ldr	r2, [pc, #20]	@ (80040e8 <_sbrk+0x64>)
 80040d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20005000 	.word	0x20005000
 80040e4:	00000400 	.word	0x00000400
 80040e8:	20000e1c 	.word	0x20000e1c
 80040ec:	20000f70 	.word	0x20000f70

080040f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0a5a      	lsrs	r2, r3, #9
 800410c:	490f      	ldr	r1, [pc, #60]	@ (800414c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800410e:	fba1 1202 	umull	r1, r2, r1, r2
 8004112:	09d2      	lsrs	r2, r2, #7
 8004114:	490e      	ldr	r1, [pc, #56]	@ (8004150 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004116:	fb01 f202 	mul.w	r2, r1, r2
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0a5b      	lsrs	r3, r3, #9
 8004124:	4a09      	ldr	r2, [pc, #36]	@ (800414c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	09db      	lsrs	r3, r3, #7
 800412c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	00044b83 	.word	0x00044b83
 8004150:	3b9aca00 	.word	0x3b9aca00

08004154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004154:	f7ff ffcc 	bl	80040f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004158:	480b      	ldr	r0, [pc, #44]	@ (8004188 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800415a:	490c      	ldr	r1, [pc, #48]	@ (800418c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800415c:	4a0c      	ldr	r2, [pc, #48]	@ (8004190 <LoopFillZerobss+0x16>)
  movs r3, #0
 800415e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004160:	e002      	b.n	8004168 <LoopCopyDataInit>

08004162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004166:	3304      	adds	r3, #4

08004168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800416a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800416c:	d3f9      	bcc.n	8004162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800416e:	4a09      	ldr	r2, [pc, #36]	@ (8004194 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004170:	4c09      	ldr	r4, [pc, #36]	@ (8004198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004174:	e001      	b.n	800417a <LoopFillZerobss>

08004176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004178:	3204      	adds	r2, #4

0800417a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800417a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800417c:	d3fb      	bcc.n	8004176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800417e:	f004 f84f 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004182:	f7fd fa79 	bl	8001678 <main>
  bx lr
 8004186:	4770      	bx	lr
  ldr r0, =_sdata
 8004188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800418c:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8004190:	0800a5fc 	.word	0x0800a5fc
  ldr r2, =_sbss
 8004194:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004198:	20000f70 	.word	0x20000f70

0800419c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800419c:	e7fe      	b.n	800419c <ADC1_2_IRQHandler>
	...

080041a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041a4:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <HAL_Init+0x28>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a07      	ldr	r2, [pc, #28]	@ (80041c8 <HAL_Init+0x28>)
 80041aa:	f043 0310 	orr.w	r3, r3, #16
 80041ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b0:	2003      	movs	r0, #3
 80041b2:	f000 f923 	bl	80043fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041b6:	200f      	movs	r0, #15
 80041b8:	f000 f808 	bl	80041cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041bc:	f7ff fcd0 	bl	8003b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40022000 	.word	0x40022000

080041cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041d4:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <HAL_InitTick+0x54>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b12      	ldr	r3, [pc, #72]	@ (8004224 <HAL_InitTick+0x58>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f93b 	bl	8004466 <HAL_SYSTICK_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00e      	b.n	8004218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0f      	cmp	r3, #15
 80041fe:	d80a      	bhi.n	8004216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004200:	2200      	movs	r2, #0
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004208:	f000 f903 	bl	8004412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800420c:	4a06      	ldr	r2, [pc, #24]	@ (8004228 <HAL_InitTick+0x5c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	200000b4 	.word	0x200000b4
 8004224:	200000bc 	.word	0x200000bc
 8004228:	200000b8 	.word	0x200000b8

0800422c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_IncTick+0x1c>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_IncTick+0x20>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4413      	add	r3, r2
 800423c:	4a03      	ldr	r2, [pc, #12]	@ (800424c <HAL_IncTick+0x20>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	200000bc 	.word	0x200000bc
 800424c:	20000e20 	.word	0x20000e20

08004250 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return uwTick;
 8004254:	4b02      	ldr	r3, [pc, #8]	@ (8004260 <HAL_GetTick+0x10>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	20000e20 	.word	0x20000e20

08004264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800428c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004296:	4a04      	ldr	r2, [pc, #16]	@ (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60d3      	str	r3, [r2, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	db0b      	blt.n	80042f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	4906      	ldr	r1, [pc, #24]	@ (80042fc <__NVIC_EnableIRQ+0x34>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2001      	movs	r0, #1
 80042ea:	fa00 f202 	lsl.w	r2, r0, r2
 80042ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	e000e100 	.word	0xe000e100

08004300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db0a      	blt.n	800432a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	490c      	ldr	r1, [pc, #48]	@ (800434c <__NVIC_SetPriority+0x4c>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	440b      	add	r3, r1
 8004324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004328:	e00a      	b.n	8004340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4908      	ldr	r1, [pc, #32]	@ (8004350 <__NVIC_SetPriority+0x50>)
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	3b04      	subs	r3, #4
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	440b      	add	r3, r1
 800433e:	761a      	strb	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000e100 	.word	0xe000e100
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	@ 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f1c3 0307 	rsb	r3, r3, #7
 800436e:	2b04      	cmp	r3, #4
 8004370:	bf28      	it	cs
 8004372:	2304      	movcs	r3, #4
 8004374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3304      	adds	r3, #4
 800437a:	2b06      	cmp	r3, #6
 800437c:	d902      	bls.n	8004384 <NVIC_EncodePriority+0x30>
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3b03      	subs	r3, #3
 8004382:	e000      	b.n	8004386 <NVIC_EncodePriority+0x32>
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	401a      	ands	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800439c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43d9      	mvns	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	4313      	orrs	r3, r2
         );
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	@ 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c8:	d301      	bcc.n	80043ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ce:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <SysTick_Config+0x40>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d6:	210f      	movs	r1, #15
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043dc:	f7ff ff90 	bl	8004300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <SysTick_Config+0x40>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e6:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <SysTick_Config+0x40>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	e000e010 	.word	0xe000e010

080043fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff2d 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004424:	f7ff ff42 	bl	80042ac <__NVIC_GetPriorityGrouping>
 8004428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	6978      	ldr	r0, [r7, #20]
 8004430:	f7ff ff90 	bl	8004354 <NVIC_EncodePriority>
 8004434:	4602      	mov	r2, r0
 8004436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff5f 	bl	8004300 <__NVIC_SetPriority>
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff35 	bl	80042c8 <__NVIC_EnableIRQ>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ffa2 	bl	80043b8 <SysTick_Config>
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e043      	b.n	800451e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <HAL_DMA_Init+0xa8>)
 800449e:	4413      	add	r3, r2
 80044a0:	4a22      	ldr	r2, [pc, #136]	@ (800452c <HAL_DMA_Init+0xac>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	009a      	lsls	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004530 <HAL_DMA_Init+0xb0>)
 80044b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80044ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80044ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	bffdfff8 	.word	0xbffdfff8
 800452c:	cccccccd 	.word	0xcccccccd
 8004530:	40020000 	.word	0x40020000

08004534 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_DMA_Start_IT+0x20>
 8004550:	2302      	movs	r3, #2
 8004552:	e04b      	b.n	80045ec <HAL_DMA_Start_IT+0xb8>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d13a      	bne.n	80045de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f9eb 	bl	8004968 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 020e 	orr.w	r2, r2, #14
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e00f      	b.n	80045cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 020a 	orr.w	r2, r2, #10
 80045ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e005      	b.n	80045ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d008      	beq.n	800461e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e020      	b.n	8004660 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 020e 	bic.w	r2, r2, #14
 800462c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004646:	2101      	movs	r1, #1
 8004648:	fa01 f202 	lsl.w	r2, r1, r2
 800464c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
	...

0800466c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d005      	beq.n	8004690 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2204      	movs	r2, #4
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e051      	b.n	8004734 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 020e 	bic.w	r2, r2, #14
 800469e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a22      	ldr	r2, [pc, #136]	@ (8004740 <HAL_DMA_Abort_IT+0xd4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d029      	beq.n	800470e <HAL_DMA_Abort_IT+0xa2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a21      	ldr	r2, [pc, #132]	@ (8004744 <HAL_DMA_Abort_IT+0xd8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_DMA_Abort_IT+0x9e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004748 <HAL_DMA_Abort_IT+0xdc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01a      	beq.n	8004704 <HAL_DMA_Abort_IT+0x98>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1e      	ldr	r2, [pc, #120]	@ (800474c <HAL_DMA_Abort_IT+0xe0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d012      	beq.n	80046fe <HAL_DMA_Abort_IT+0x92>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_DMA_Abort_IT+0xe4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00a      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x8c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_DMA_Abort_IT+0xe8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d102      	bne.n	80046f2 <HAL_DMA_Abort_IT+0x86>
 80046ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80046f0:	e00e      	b.n	8004710 <HAL_DMA_Abort_IT+0xa4>
 80046f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046f6:	e00b      	b.n	8004710 <HAL_DMA_Abort_IT+0xa4>
 80046f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046fc:	e008      	b.n	8004710 <HAL_DMA_Abort_IT+0xa4>
 80046fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004702:	e005      	b.n	8004710 <HAL_DMA_Abort_IT+0xa4>
 8004704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004708:	e002      	b.n	8004710 <HAL_DMA_Abort_IT+0xa4>
 800470a:	2310      	movs	r3, #16
 800470c:	e000      	b.n	8004710 <HAL_DMA_Abort_IT+0xa4>
 800470e:	2301      	movs	r3, #1
 8004710:	4a11      	ldr	r2, [pc, #68]	@ (8004758 <HAL_DMA_Abort_IT+0xec>)
 8004712:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
    } 
  }
  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40020008 	.word	0x40020008
 8004744:	4002001c 	.word	0x4002001c
 8004748:	40020030 	.word	0x40020030
 800474c:	40020044 	.word	0x40020044
 8004750:	40020058 	.word	0x40020058
 8004754:	4002006c 	.word	0x4002006c
 8004758:	40020000 	.word	0x40020000

0800475c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	2204      	movs	r2, #4
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d04f      	beq.n	8004824 <HAL_DMA_IRQHandler+0xc8>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04a      	beq.n	8004824 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0204 	bic.w	r2, r2, #4
 80047aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a66      	ldr	r2, [pc, #408]	@ (800494c <HAL_DMA_IRQHandler+0x1f0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d029      	beq.n	800480a <HAL_DMA_IRQHandler+0xae>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a65      	ldr	r2, [pc, #404]	@ (8004950 <HAL_DMA_IRQHandler+0x1f4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0xaa>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a63      	ldr	r2, [pc, #396]	@ (8004954 <HAL_DMA_IRQHandler+0x1f8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01a      	beq.n	8004800 <HAL_DMA_IRQHandler+0xa4>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a62      	ldr	r2, [pc, #392]	@ (8004958 <HAL_DMA_IRQHandler+0x1fc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d012      	beq.n	80047fa <HAL_DMA_IRQHandler+0x9e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a60      	ldr	r2, [pc, #384]	@ (800495c <HAL_DMA_IRQHandler+0x200>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00a      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x98>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004960 <HAL_DMA_IRQHandler+0x204>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d102      	bne.n	80047ee <HAL_DMA_IRQHandler+0x92>
 80047e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047ec:	e00e      	b.n	800480c <HAL_DMA_IRQHandler+0xb0>
 80047ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80047f2:	e00b      	b.n	800480c <HAL_DMA_IRQHandler+0xb0>
 80047f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80047f8:	e008      	b.n	800480c <HAL_DMA_IRQHandler+0xb0>
 80047fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047fe:	e005      	b.n	800480c <HAL_DMA_IRQHandler+0xb0>
 8004800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004804:	e002      	b.n	800480c <HAL_DMA_IRQHandler+0xb0>
 8004806:	2340      	movs	r3, #64	@ 0x40
 8004808:	e000      	b.n	800480c <HAL_DMA_IRQHandler+0xb0>
 800480a:	2304      	movs	r3, #4
 800480c:	4a55      	ldr	r2, [pc, #340]	@ (8004964 <HAL_DMA_IRQHandler+0x208>)
 800480e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8094 	beq.w	8004942 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004822:	e08e      	b.n	8004942 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	2202      	movs	r2, #2
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d056      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x186>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d051      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 020a 	bic.w	r2, r2, #10
 800485a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a38      	ldr	r2, [pc, #224]	@ (800494c <HAL_DMA_IRQHandler+0x1f0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d029      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x166>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a37      	ldr	r2, [pc, #220]	@ (8004950 <HAL_DMA_IRQHandler+0x1f4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_DMA_IRQHandler+0x162>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a35      	ldr	r2, [pc, #212]	@ (8004954 <HAL_DMA_IRQHandler+0x1f8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01a      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x15c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a34      	ldr	r2, [pc, #208]	@ (8004958 <HAL_DMA_IRQHandler+0x1fc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d012      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x156>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a32      	ldr	r2, [pc, #200]	@ (800495c <HAL_DMA_IRQHandler+0x200>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00a      	beq.n	80048ac <HAL_DMA_IRQHandler+0x150>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a31      	ldr	r2, [pc, #196]	@ (8004960 <HAL_DMA_IRQHandler+0x204>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d102      	bne.n	80048a6 <HAL_DMA_IRQHandler+0x14a>
 80048a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80048a4:	e00e      	b.n	80048c4 <HAL_DMA_IRQHandler+0x168>
 80048a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048aa:	e00b      	b.n	80048c4 <HAL_DMA_IRQHandler+0x168>
 80048ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048b0:	e008      	b.n	80048c4 <HAL_DMA_IRQHandler+0x168>
 80048b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048b6:	e005      	b.n	80048c4 <HAL_DMA_IRQHandler+0x168>
 80048b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048bc:	e002      	b.n	80048c4 <HAL_DMA_IRQHandler+0x168>
 80048be:	2320      	movs	r3, #32
 80048c0:	e000      	b.n	80048c4 <HAL_DMA_IRQHandler+0x168>
 80048c2:	2302      	movs	r3, #2
 80048c4:	4a27      	ldr	r2, [pc, #156]	@ (8004964 <HAL_DMA_IRQHandler+0x208>)
 80048c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d034      	beq.n	8004942 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048e0:	e02f      	b.n	8004942 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2208      	movs	r2, #8
 80048e8:	409a      	lsls	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d028      	beq.n	8004944 <HAL_DMA_IRQHandler+0x1e8>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d023      	beq.n	8004944 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 020e 	bic.w	r2, r2, #14
 800490a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f202 	lsl.w	r2, r1, r2
 800491a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
    }
  }
  return;
 8004942:	bf00      	nop
 8004944:	bf00      	nop
}
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40020008 	.word	0x40020008
 8004950:	4002001c 	.word	0x4002001c
 8004954:	40020030 	.word	0x40020030
 8004958:	40020044 	.word	0x40020044
 800495c:	40020058 	.word	0x40020058
 8004960:	4002006c 	.word	0x4002006c
 8004964:	40020000 	.word	0x40020000

08004968 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f202 	lsl.w	r2, r1, r2
 8004984:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b10      	cmp	r3, #16
 8004994:	d108      	bne.n	80049a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049a6:	e007      	b.n	80049b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b08b      	sub	sp, #44	@ 0x2c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d6:	e169      	b.n	8004cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049d8:	2201      	movs	r2, #1
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	f040 8158 	bne.w	8004ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4a9a      	ldr	r2, [pc, #616]	@ (8004c64 <HAL_GPIO_Init+0x2a0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d05e      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a00:	4a98      	ldr	r2, [pc, #608]	@ (8004c64 <HAL_GPIO_Init+0x2a0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d875      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a06:	4a98      	ldr	r2, [pc, #608]	@ (8004c68 <HAL_GPIO_Init+0x2a4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d058      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a0c:	4a96      	ldr	r2, [pc, #600]	@ (8004c68 <HAL_GPIO_Init+0x2a4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d86f      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a12:	4a96      	ldr	r2, [pc, #600]	@ (8004c6c <HAL_GPIO_Init+0x2a8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d052      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a18:	4a94      	ldr	r2, [pc, #592]	@ (8004c6c <HAL_GPIO_Init+0x2a8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d869      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a1e:	4a94      	ldr	r2, [pc, #592]	@ (8004c70 <HAL_GPIO_Init+0x2ac>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d04c      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a24:	4a92      	ldr	r2, [pc, #584]	@ (8004c70 <HAL_GPIO_Init+0x2ac>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d863      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a2a:	4a92      	ldr	r2, [pc, #584]	@ (8004c74 <HAL_GPIO_Init+0x2b0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d046      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a30:	4a90      	ldr	r2, [pc, #576]	@ (8004c74 <HAL_GPIO_Init+0x2b0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d85d      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a36:	2b12      	cmp	r3, #18
 8004a38:	d82a      	bhi.n	8004a90 <HAL_GPIO_Init+0xcc>
 8004a3a:	2b12      	cmp	r3, #18
 8004a3c:	d859      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a44 <HAL_GPIO_Init+0x80>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004abf 	.word	0x08004abf
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	08004aab 	.word	0x08004aab
 8004a50:	08004aed 	.word	0x08004aed
 8004a54:	08004af3 	.word	0x08004af3
 8004a58:	08004af3 	.word	0x08004af3
 8004a5c:	08004af3 	.word	0x08004af3
 8004a60:	08004af3 	.word	0x08004af3
 8004a64:	08004af3 	.word	0x08004af3
 8004a68:	08004af3 	.word	0x08004af3
 8004a6c:	08004af3 	.word	0x08004af3
 8004a70:	08004af3 	.word	0x08004af3
 8004a74:	08004af3 	.word	0x08004af3
 8004a78:	08004af3 	.word	0x08004af3
 8004a7c:	08004af3 	.word	0x08004af3
 8004a80:	08004af3 	.word	0x08004af3
 8004a84:	08004af3 	.word	0x08004af3
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	4a79      	ldr	r2, [pc, #484]	@ (8004c78 <HAL_GPIO_Init+0x2b4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a96:	e02c      	b.n	8004af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	623b      	str	r3, [r7, #32]
          break;
 8004a9e:	e029      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	623b      	str	r3, [r7, #32]
          break;
 8004aa8:	e024      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	3308      	adds	r3, #8
 8004ab0:	623b      	str	r3, [r7, #32]
          break;
 8004ab2:	e01f      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	623b      	str	r3, [r7, #32]
          break;
 8004abc:	e01a      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	623b      	str	r3, [r7, #32]
          break;
 8004aca:	e013      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	611a      	str	r2, [r3, #16]
          break;
 8004ade:	e009      	b.n	8004af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	615a      	str	r2, [r3, #20]
          break;
 8004aea:	e003      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
          break;
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          break;
 8004af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2bff      	cmp	r3, #255	@ 0xff
 8004af8:	d801      	bhi.n	8004afe <HAL_GPIO_Init+0x13a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	e001      	b.n	8004b02 <HAL_GPIO_Init+0x13e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2bff      	cmp	r3, #255	@ 0xff
 8004b08:	d802      	bhi.n	8004b10 <HAL_GPIO_Init+0x14c>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	e002      	b.n	8004b16 <HAL_GPIO_Init+0x152>
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	3b08      	subs	r3, #8
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	210f      	movs	r1, #15
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	6a39      	ldr	r1, [r7, #32]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80b1 	beq.w	8004ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b44:	4b4d      	ldr	r3, [pc, #308]	@ (8004c7c <HAL_GPIO_Init+0x2b8>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	4a4c      	ldr	r2, [pc, #304]	@ (8004c7c <HAL_GPIO_Init+0x2b8>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6193      	str	r3, [r2, #24]
 8004b50:	4b4a      	ldr	r3, [pc, #296]	@ (8004c7c <HAL_GPIO_Init+0x2b8>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b5c:	4a48      	ldr	r2, [pc, #288]	@ (8004c80 <HAL_GPIO_Init+0x2bc>)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	3302      	adds	r3, #2
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	220f      	movs	r2, #15
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <HAL_GPIO_Init+0x2c0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_GPIO_Init+0x1ec>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c88 <HAL_GPIO_Init+0x2c4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1e8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3e      	ldr	r2, [pc, #248]	@ (8004c8c <HAL_GPIO_Init+0x2c8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1e4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c90 <HAL_GPIO_Init+0x2cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1e0>
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e006      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	e004      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e002      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb4:	f002 0203 	and.w	r2, r2, #3
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	4093      	lsls	r3, r2
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bc2:	492f      	ldr	r1, [pc, #188]	@ (8004c80 <HAL_GPIO_Init+0x2bc>)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	3302      	adds	r3, #2
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	492c      	ldr	r1, [pc, #176]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
 8004be8:	e006      	b.n	8004bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bea:	4b2a      	ldr	r3, [pc, #168]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	4928      	ldr	r1, [pc, #160]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c04:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	4922      	ldr	r1, [pc, #136]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60cb      	str	r3, [r1, #12]
 8004c10:	e006      	b.n	8004c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c12:	4b20      	ldr	r3, [pc, #128]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	491e      	ldr	r1, [pc, #120]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c2c:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4918      	ldr	r1, [pc, #96]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
 8004c38:	e006      	b.n	8004c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c3a:	4b16      	ldr	r3, [pc, #88]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	4914      	ldr	r1, [pc, #80]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d021      	beq.n	8004c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c54:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	490e      	ldr	r1, [pc, #56]	@ (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
 8004c60:	e021      	b.n	8004ca6 <HAL_GPIO_Init+0x2e2>
 8004c62:	bf00      	nop
 8004c64:	10320000 	.word	0x10320000
 8004c68:	10310000 	.word	0x10310000
 8004c6c:	10220000 	.word	0x10220000
 8004c70:	10210000 	.word	0x10210000
 8004c74:	10120000 	.word	0x10120000
 8004c78:	10110000 	.word	0x10110000
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010800 	.word	0x40010800
 8004c88:	40010c00 	.word	0x40010c00
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40011400 	.word	0x40011400
 8004c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_GPIO_Init+0x304>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	4909      	ldr	r1, [pc, #36]	@ (8004cc8 <HAL_GPIO_Init+0x304>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f47f ae8e 	bne.w	80049d8 <HAL_GPIO_Init+0x14>
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	372c      	adds	r7, #44	@ 0x2c
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cdc:	787b      	ldrb	r3, [r7, #1]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ce8:	e003      	b.n	8004cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	041a      	lsls	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d0e:	887a      	ldrh	r2, [r7, #2]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4013      	ands	r3, r2
 8004d14:	041a      	lsls	r2, r3, #16
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	43d9      	mvns	r1, r3
 8004d1a:	887b      	ldrh	r3, [r7, #2]
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	611a      	str	r2, [r3, #16]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e272      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8087 	beq.w	8004e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d50:	4b92      	ldr	r3, [pc, #584]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d112      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5e>
 8004d68:	4b8c      	ldr	r3, [pc, #560]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d74:	d10b      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d76:	4b89      	ldr	r3, [pc, #548]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d06c      	beq.n	8004e5c <HAL_RCC_OscConfig+0x12c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d168      	bne.n	8004e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e24c      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x76>
 8004d98:	4b80      	ldr	r3, [pc, #512]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7f      	ldr	r2, [pc, #508]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e02e      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x98>
 8004dae:	4b7b      	ldr	r3, [pc, #492]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7a      	ldr	r2, [pc, #488]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b78      	ldr	r3, [pc, #480]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a77      	ldr	r2, [pc, #476]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e01d      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0xbc>
 8004dd2:	4b72      	ldr	r3, [pc, #456]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a71      	ldr	r2, [pc, #452]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b6f      	ldr	r3, [pc, #444]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6e      	ldr	r2, [pc, #440]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004dec:	4b6b      	ldr	r3, [pc, #428]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b68      	ldr	r3, [pc, #416]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a67      	ldr	r2, [pc, #412]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7ff fa20 	bl	8004250 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7ff fa1c 	bl	8004250 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	@ 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e200      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b5d      	ldr	r3, [pc, #372]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0xe4>
 8004e32:	e014      	b.n	8004e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7ff fa0c 	bl	8004250 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7ff fa08 	bl	8004250 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	@ 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e1ec      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	4b53      	ldr	r3, [pc, #332]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x10c>
 8004e5a:	e000      	b.n	8004e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d063      	beq.n	8004f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e76:	4b49      	ldr	r3, [pc, #292]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d11c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x18c>
 8004e82:	4b46      	ldr	r3, [pc, #280]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d116      	bne.n	8004ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e8e:	4b43      	ldr	r3, [pc, #268]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x176>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e1c0      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4939      	ldr	r1, [pc, #228]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	e03a      	b.n	8004f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec4:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7ff f9c1 	bl	8004250 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed2:	f7ff f9bd 	bl	8004250 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e1a1      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4927      	ldr	r1, [pc, #156]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]
 8004f04:	e015      	b.n	8004f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f06:	4b26      	ldr	r3, [pc, #152]	@ (8004fa0 <HAL_RCC_OscConfig+0x270>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7ff f9a0 	bl	8004250 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7ff f99c 	bl	8004250 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e180      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d03a      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f46:	4b17      	ldr	r3, [pc, #92]	@ (8004fa4 <HAL_RCC_OscConfig+0x274>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4c:	f7ff f980 	bl	8004250 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f54:	f7ff f97c 	bl	8004250 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e160      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <HAL_RCC_OscConfig+0x26c>)
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f72:	2001      	movs	r0, #1
 8004f74:	f000 face 	bl	8005514 <RCC_Delay>
 8004f78:	e01c      	b.n	8004fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f80:	f7ff f966 	bl	8004250 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f86:	e00f      	b.n	8004fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f88:	f7ff f962 	bl	8004250 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d908      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e146      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	42420000 	.word	0x42420000
 8004fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b92      	ldr	r3, [pc, #584]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e9      	bne.n	8004f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80a6 	beq.w	800510e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4b88      	ldr	r3, [pc, #544]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4a87      	ldr	r2, [pc, #540]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	61d3      	str	r3, [r2, #28]
 8004fde:	4b85      	ldr	r3, [pc, #532]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	4b82      	ldr	r3, [pc, #520]	@ (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d118      	bne.n	800502c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7ff f923 	bl	8004250 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500e:	f7ff f91f 	bl	8004250 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	@ 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e103      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	4b75      	ldr	r3, [pc, #468]	@ (80051f8 <HAL_RCC_OscConfig+0x4c8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x312>
 8005034:	4b6f      	ldr	r3, [pc, #444]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4a6e      	ldr	r2, [pc, #440]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6213      	str	r3, [r2, #32]
 8005040:	e02d      	b.n	800509e <HAL_RCC_OscConfig+0x36e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x334>
 800504a:	4b6a      	ldr	r3, [pc, #424]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a69      	ldr	r2, [pc, #420]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6213      	str	r3, [r2, #32]
 8005056:	4b67      	ldr	r3, [pc, #412]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4a66      	ldr	r2, [pc, #408]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6213      	str	r3, [r2, #32]
 8005062:	e01c      	b.n	800509e <HAL_RCC_OscConfig+0x36e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b05      	cmp	r3, #5
 800506a:	d10c      	bne.n	8005086 <HAL_RCC_OscConfig+0x356>
 800506c:	4b61      	ldr	r3, [pc, #388]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4a60      	ldr	r2, [pc, #384]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005072:	f043 0304 	orr.w	r3, r3, #4
 8005076:	6213      	str	r3, [r2, #32]
 8005078:	4b5e      	ldr	r3, [pc, #376]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4a5d      	ldr	r2, [pc, #372]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6213      	str	r3, [r2, #32]
 8005084:	e00b      	b.n	800509e <HAL_RCC_OscConfig+0x36e>
 8005086:	4b5b      	ldr	r3, [pc, #364]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4a5a      	ldr	r2, [pc, #360]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6213      	str	r3, [r2, #32]
 8005092:	4b58      	ldr	r3, [pc, #352]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a57      	ldr	r2, [pc, #348]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d015      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a6:	f7ff f8d3 	bl	8004250 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ae:	f7ff f8cf 	bl	8004250 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e0b1      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	4b4b      	ldr	r3, [pc, #300]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ee      	beq.n	80050ae <HAL_RCC_OscConfig+0x37e>
 80050d0:	e014      	b.n	80050fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d2:	f7ff f8bd 	bl	8004250 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d8:	e00a      	b.n	80050f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7ff f8b9 	bl	8004250 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e09b      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f0:	4b40      	ldr	r3, [pc, #256]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ee      	bne.n	80050da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4b3c      	ldr	r3, [pc, #240]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4a3b      	ldr	r2, [pc, #236]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800510c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8087 	beq.w	8005226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005118:	4b36      	ldr	r3, [pc, #216]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d061      	beq.n	80051e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d146      	bne.n	80051ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b33      	ldr	r3, [pc, #204]	@ (80051fc <HAL_RCC_OscConfig+0x4cc>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7ff f88d 	bl	8004250 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513a:	f7ff f889 	bl	8004250 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e06d      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514c:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005160:	d108      	bne.n	8005174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005162:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4921      	ldr	r1, [pc, #132]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005174:	4b1f      	ldr	r3, [pc, #124]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a19      	ldr	r1, [r3, #32]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	430b      	orrs	r3, r1
 8005186:	491b      	ldr	r1, [pc, #108]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <HAL_RCC_OscConfig+0x4cc>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7ff f85d 	bl	8004250 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7ff f859 	bl	8004250 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e03d      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ac:	4b11      	ldr	r3, [pc, #68]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x46a>
 80051b8:	e035      	b.n	8005226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <HAL_RCC_OscConfig+0x4cc>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7ff f846 	bl	8004250 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7ff f842 	bl	8004250 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e026      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051da:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x498>
 80051e6:	e01e      	b.n	8005226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e019      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40007000 	.word	0x40007000
 80051fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_OscConfig+0x500>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	429a      	cmp	r2, r3
 8005212:	d106      	bne.n	8005222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d001      	beq.n	8005226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000

08005234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0d0      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b6a      	ldr	r3, [pc, #424]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d910      	bls.n	8005278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b67      	ldr	r3, [pc, #412]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 0207 	bic.w	r2, r3, #7
 800525e:	4965      	ldr	r1, [pc, #404]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b63      	ldr	r3, [pc, #396]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b8      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005290:	4b59      	ldr	r3, [pc, #356]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a58      	ldr	r2, [pc, #352]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800529a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a8:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a52      	ldr	r2, [pc, #328]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80052b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b50      	ldr	r3, [pc, #320]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494d      	ldr	r1, [pc, #308]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d040      	beq.n	8005354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b47      	ldr	r3, [pc, #284]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d115      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f2:	4b41      	ldr	r3, [pc, #260]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e073      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005302:	4b3d      	ldr	r3, [pc, #244]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e06b      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4936      	ldr	r1, [pc, #216]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005324:	f7fe ff94 	bl	8004250 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fe ff90 	bl	8004250 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e053      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 020c 	and.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	429a      	cmp	r2, r3
 8005352:	d1eb      	bne.n	800532c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005354:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d210      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 0207 	bic.w	r2, r3, #7
 800536a:	4922      	ldr	r1, [pc, #136]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4916      	ldr	r1, [pc, #88]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ae:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490e      	ldr	r1, [pc, #56]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053c2:	f000 f821 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490a      	ldr	r1, [pc, #40]	@ (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <HAL_RCC_ClockConfig+0x1cc>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_ClockConfig+0x1d0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fef2 	bl	80041cc <HAL_InitTick>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40022000 	.word	0x40022000
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800a250 	.word	0x0800a250
 8005400:	200000b4 	.word	0x200000b4
 8005404:	200000b8 	.word	0x200000b8

08005408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	2300      	movs	r3, #0
 800541c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005422:	4b1e      	ldr	r3, [pc, #120]	@ (800549c <HAL_RCC_GetSysClockFreq+0x94>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b04      	cmp	r3, #4
 8005430:	d002      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x30>
 8005432:	2b08      	cmp	r3, #8
 8005434:	d003      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0x36>
 8005436:	e027      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005438:	4b19      	ldr	r3, [pc, #100]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800543a:	613b      	str	r3, [r7, #16]
      break;
 800543c:	e027      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	0c9b      	lsrs	r3, r3, #18
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	4a17      	ldr	r2, [pc, #92]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
 800544a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005456:	4b11      	ldr	r3, [pc, #68]	@ (800549c <HAL_RCC_GetSysClockFreq+0x94>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0c5b      	lsrs	r3, r3, #17
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	4a11      	ldr	r2, [pc, #68]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a0d      	ldr	r2, [pc, #52]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800546a:	fb03 f202 	mul.w	r2, r3, r2
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e004      	b.n	8005482 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a0c      	ldr	r2, [pc, #48]	@ (80054ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	613b      	str	r3, [r7, #16]
      break;
 8005486:	e002      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800548a:	613b      	str	r3, [r7, #16]
      break;
 800548c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800548e:	693b      	ldr	r3, [r7, #16]
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	007a1200 	.word	0x007a1200
 80054a4:	0800a268 	.word	0x0800a268
 80054a8:	0800a278 	.word	0x0800a278
 80054ac:	003d0900 	.word	0x003d0900

080054b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b4:	4b02      	ldr	r3, [pc, #8]	@ (80054c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	200000b4 	.word	0x200000b4

080054c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054c8:	f7ff fff2 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	0a1b      	lsrs	r3, r3, #8
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4903      	ldr	r1, [pc, #12]	@ (80054e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054da:	5ccb      	ldrb	r3, [r1, r3]
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000
 80054e8:	0800a260 	.word	0x0800a260

080054ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f0:	f7ff ffde 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0adb      	lsrs	r3, r3, #11
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	@ (8005510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000
 8005510:	0800a260 	.word	0x0800a260

08005514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <RCC_Delay+0x34>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <RCC_Delay+0x38>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	0a5b      	lsrs	r3, r3, #9
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005530:	bf00      	nop
  }
  while (Delay --);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1e5a      	subs	r2, r3, #1
 8005536:	60fa      	str	r2, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f9      	bne.n	8005530 <RCC_Delay+0x1c>
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	200000b4 	.word	0x200000b4
 800554c:	10624dd3 	.word	0x10624dd3

08005550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e041      	b.n	80055e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fe fb24 	bl	8003bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f000 fd60 	bl	8006054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e03a      	b.n	800567e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a18      	ldr	r2, [pc, #96]	@ (8005688 <HAL_TIM_Base_Start_IT+0x98>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x58>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005632:	d009      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x58>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a14      	ldr	r2, [pc, #80]	@ (800568c <HAL_TIM_Base_Start_IT+0x9c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x58>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a13      	ldr	r2, [pc, #76]	@ (8005690 <HAL_TIM_Base_Start_IT+0xa0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d111      	bne.n	800566c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b06      	cmp	r3, #6
 8005658:	d010      	beq.n	800567c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	e007      	b.n	800567c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800

08005694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e041      	b.n	800572a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f839 	bl	8005732 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f000 fcbe 	bl	8006054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <HAL_TIM_PWM_Start+0x24>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e022      	b.n	80057ae <HAL_TIM_PWM_Start+0x6a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b04      	cmp	r3, #4
 800576c:	d109      	bne.n	8005782 <HAL_TIM_PWM_Start+0x3e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	bf14      	ite	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2300      	moveq	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	e015      	b.n	80057ae <HAL_TIM_PWM_Start+0x6a>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d109      	bne.n	800579c <HAL_TIM_PWM_Start+0x58>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e008      	b.n	80057ae <HAL_TIM_PWM_Start+0x6a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e05e      	b.n	8005874 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0x82>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c4:	e013      	b.n	80057ee <HAL_TIM_PWM_Start+0xaa>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x92>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d4:	e00b      	b.n	80057ee <HAL_TIM_PWM_Start+0xaa>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e4:	e003      	b.n	80057ee <HAL_TIM_PWM_Start+0xaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 feac 	bl	8006554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <HAL_TIM_PWM_Start+0x138>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d107      	bne.n	8005816 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	@ (800587c <HAL_TIM_PWM_Start+0x138>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00e      	beq.n	800583e <HAL_TIM_PWM_Start+0xfa>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005828:	d009      	beq.n	800583e <HAL_TIM_PWM_Start+0xfa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a14      	ldr	r2, [pc, #80]	@ (8005880 <HAL_TIM_PWM_Start+0x13c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <HAL_TIM_PWM_Start+0xfa>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a12      	ldr	r2, [pc, #72]	@ (8005884 <HAL_TIM_PWM_Start+0x140>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b06      	cmp	r3, #6
 800584e:	d010      	beq.n	8005872 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	e007      	b.n	8005872 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800

08005888 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e093      	b.n	80059c4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe f9c1 	bl	8003c38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058cc:	f023 0307 	bic.w	r3, r3, #7
 80058d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f000 fbb9 	bl	8006054 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	4313      	orrs	r3, r2
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005928:	f023 030c 	bic.w	r3, r3, #12
 800592c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005934:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	4313      	orrs	r3, r2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	011a      	lsls	r2, r3, #4
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	031b      	lsls	r3, r3, #12
 8005958:	4313      	orrs	r3, r2
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	4313      	orrs	r3, r2
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d110      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a02:	7b7b      	ldrb	r3, [r7, #13]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d001      	beq.n	8005a0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e069      	b.n	8005ae0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a1c:	e031      	b.n	8005a82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d110      	bne.n	8005a46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d102      	bne.n	8005a30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a2a:	7b3b      	ldrb	r3, [r7, #12]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d001      	beq.n	8005a34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e055      	b.n	8005ae0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a44:	e01d      	b.n	8005a82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d108      	bne.n	8005a5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a52:	7b7b      	ldrb	r3, [r7, #13]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d102      	bne.n	8005a5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a58:	7b3b      	ldrb	r3, [r7, #12]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d001      	beq.n	8005a62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e03e      	b.n	8005ae0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_TIM_Encoder_Start+0xc4>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d008      	beq.n	8005aa0 <HAL_TIM_Encoder_Start+0xd4>
 8005a8e:	e00f      	b.n	8005ab0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2201      	movs	r2, #1
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fd5b 	bl	8006554 <TIM_CCxChannelCmd>
      break;
 8005a9e:	e016      	b.n	8005ace <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	2104      	movs	r1, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fd53 	bl	8006554 <TIM_CCxChannelCmd>
      break;
 8005aae:	e00e      	b.n	8005ace <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fd4b 	bl	8006554 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fd44 	bl	8006554 <TIM_CCxChannelCmd>
      break;
 8005acc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0202 	mvn.w	r2, #2
 8005b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa76 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa69 	bl	800600a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fa78 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0204 	mvn.w	r2, #4
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa4c 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa3f 	bl	800600a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa4e 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d122      	bne.n	8005bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0208 	mvn.w	r2, #8
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa22 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa15 	bl	800600a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fa24 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0210 	mvn.w	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9f8 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9eb 	bl	800600a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9fa 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d10e      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0201 	mvn.w	r2, #1
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fd f94a 	bl	8002f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c76:	2b80      	cmp	r3, #128	@ 0x80
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c84:	2b80      	cmp	r3, #128	@ 0x80
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fce9 	bl	800666a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d10e      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb0:	2b40      	cmp	r3, #64	@ 0x40
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f9be 	bl	8006040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0220 	mvn.w	r2, #32
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fcb4 	bl	8006658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e0ae      	b.n	8005e74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	f200 809f 	bhi.w	8005e64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d26:	a201      	add	r2, pc, #4	@ (adr r2, 8005d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005e65 	.word	0x08005e65
 8005d34:	08005e65 	.word	0x08005e65
 8005d38:	08005e65 	.word	0x08005e65
 8005d3c:	08005da1 	.word	0x08005da1
 8005d40:	08005e65 	.word	0x08005e65
 8005d44:	08005e65 	.word	0x08005e65
 8005d48:	08005e65 	.word	0x08005e65
 8005d4c:	08005de3 	.word	0x08005de3
 8005d50:	08005e65 	.word	0x08005e65
 8005d54:	08005e65 	.word	0x08005e65
 8005d58:	08005e65 	.word	0x08005e65
 8005d5c:	08005e23 	.word	0x08005e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f9d6 	bl	8006118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0208 	orr.w	r2, r2, #8
 8005d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0204 	bic.w	r2, r2, #4
 8005d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6999      	ldr	r1, [r3, #24]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	619a      	str	r2, [r3, #24]
      break;
 8005d9e:	e064      	b.n	8005e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fa1c 	bl	80061e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6999      	ldr	r1, [r3, #24]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	021a      	lsls	r2, r3, #8
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	619a      	str	r2, [r3, #24]
      break;
 8005de0:	e043      	b.n	8005e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fa65 	bl	80062b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0208 	orr.w	r2, r2, #8
 8005dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0204 	bic.w	r2, r2, #4
 8005e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69d9      	ldr	r1, [r3, #28]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	61da      	str	r2, [r3, #28]
      break;
 8005e20:	e023      	b.n	8005e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 faaf 	bl	800638c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69d9      	ldr	r1, [r3, #28]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	021a      	lsls	r2, r3, #8
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	61da      	str	r2, [r3, #28]
      break;
 8005e62:	e002      	b.n	8005e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
      break;
 8005e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIM_ConfigClockSource+0x1c>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e0b4      	b.n	8006002 <HAL_TIM_ConfigClockSource+0x186>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed0:	d03e      	beq.n	8005f50 <HAL_TIM_ConfigClockSource+0xd4>
 8005ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed6:	f200 8087 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ede:	f000 8086 	beq.w	8005fee <HAL_TIM_ConfigClockSource+0x172>
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee6:	d87f      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee8:	2b70      	cmp	r3, #112	@ 0x70
 8005eea:	d01a      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0xa6>
 8005eec:	2b70      	cmp	r3, #112	@ 0x70
 8005eee:	d87b      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef0:	2b60      	cmp	r3, #96	@ 0x60
 8005ef2:	d050      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x11a>
 8005ef4:	2b60      	cmp	r3, #96	@ 0x60
 8005ef6:	d877      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef8:	2b50      	cmp	r3, #80	@ 0x50
 8005efa:	d03c      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0xfa>
 8005efc:	2b50      	cmp	r3, #80	@ 0x50
 8005efe:	d873      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d058      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0x13a>
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d86f      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b30      	cmp	r3, #48	@ 0x30
 8005f0a:	d064      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0c:	2b30      	cmp	r3, #48	@ 0x30
 8005f0e:	d86b      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d060      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d867      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d05c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d05a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f20:	e062      	b.n	8005fe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f32:	f000 faf0 	bl	8006516 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	609a      	str	r2, [r3, #8]
      break;
 8005f4e:	e04f      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f60:	f000 fad9 	bl	8006516 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f72:	609a      	str	r2, [r3, #8]
      break;
 8005f74:	e03c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 fa50 	bl	8006428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2150      	movs	r1, #80	@ 0x50
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 faa7 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e02c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f000 fa6e 	bl	8006484 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2160      	movs	r1, #96	@ 0x60
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fa97 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005fb4:	e01c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f000 fa30 	bl	8006428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2140      	movs	r1, #64	@ 0x40
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fa87 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005fd4:	e00c      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f000 fa7e 	bl	80064e2 <TIM_ITRx_SetConfig>
      break;
 8005fe6:	e003      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e000      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
	...

08006054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a29      	ldr	r2, [pc, #164]	@ (800610c <TIM_Base_SetConfig+0xb8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00b      	beq.n	8006084 <TIM_Base_SetConfig+0x30>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006072:	d007      	beq.n	8006084 <TIM_Base_SetConfig+0x30>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <TIM_Base_SetConfig+0xbc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0x30>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a25      	ldr	r2, [pc, #148]	@ (8006114 <TIM_Base_SetConfig+0xc0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d108      	bne.n	8006096 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1c      	ldr	r2, [pc, #112]	@ (800610c <TIM_Base_SetConfig+0xb8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0x62>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0x62>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a19      	ldr	r2, [pc, #100]	@ (8006110 <TIM_Base_SetConfig+0xbc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0x62>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a18      	ldr	r2, [pc, #96]	@ (8006114 <TIM_Base_SetConfig+0xc0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d108      	bne.n	80060c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a07      	ldr	r2, [pc, #28]	@ (800610c <TIM_Base_SetConfig+0xb8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d103      	bne.n	80060fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	615a      	str	r2, [r3, #20]
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800

08006118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f023 0201 	bic.w	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 0302 	bic.w	r3, r3, #2
 8006160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <TIM_OC1_SetConfig+0xc8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0308 	bic.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a13      	ldr	r2, [pc, #76]	@ (80061e0 <TIM_OC1_SetConfig+0xc8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d111      	bne.n	80061ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800619c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00

080061e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f023 0210 	bic.w	r2, r3, #16
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0320 	bic.w	r3, r3, #32
 800622e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1d      	ldr	r2, [pc, #116]	@ (80062b4 <TIM_OC2_SetConfig+0xd0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10d      	bne.n	8006260 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a14      	ldr	r2, [pc, #80]	@ (80062b4 <TIM_OC2_SetConfig+0xd0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d113      	bne.n	8006290 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800626e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr
 80062b4:	40012c00 	.word	0x40012c00

080062b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <TIM_OC3_SetConfig+0xd0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10d      	bne.n	8006332 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800631c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a14      	ldr	r2, [pc, #80]	@ (8006388 <TIM_OC3_SetConfig+0xd0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d113      	bne.n	8006362 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	621a      	str	r2, [r3, #32]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00

0800638c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006424 <TIM_OC4_SetConfig+0x98>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d109      	bne.n	8006400 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	019b      	lsls	r3, r3, #6
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr
 8006424:	40012c00 	.word	0x40012c00

08006428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f023 030a 	bic.w	r3, r3, #10
 8006464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr

08006484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f023 0210 	bic.w	r2, r3, #16
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	031b      	lsls	r3, r3, #12
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	f043 0307 	orr.w	r3, r3, #7
 8006504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	609a      	str	r2, [r3, #8]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr

08006516 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006516:	b480      	push	{r7}
 8006518:	b087      	sub	sp, #28
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006530:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	021a      	lsls	r2, r3, #8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	431a      	orrs	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	609a      	str	r2, [r3, #8]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr

08006554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2201      	movs	r2, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	43db      	mvns	r3, r3
 8006576:	401a      	ands	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1a      	ldr	r2, [r3, #32]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	431a      	orrs	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e046      	b.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a16      	ldr	r2, [pc, #88]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006600:	d009      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a10      	ldr	r2, [pc, #64]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d10c      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800661c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	4313      	orrs	r3, r2
 8006626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800

08006658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e042      	b.n	8006714 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fd fb62 	bl	8003d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	@ 0x24
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 ff2f 	bl	8007524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08c      	sub	sp, #48	@ 0x30
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b20      	cmp	r3, #32
 8006734:	d156      	bne.n	80067e4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_Transmit_DMA+0x26>
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e04f      	b.n	80067e6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2221      	movs	r2, #33	@ 0x21
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <HAL_UART_Transmit_DMA+0xd4>)
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006772:	4a20      	ldr	r2, [pc, #128]	@ (80067f4 <HAL_UART_Transmit_DMA+0xd8>)
 8006774:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677a:	4a1f      	ldr	r2, [pc, #124]	@ (80067f8 <HAL_UART_Transmit_DMA+0xdc>)
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006782:	2200      	movs	r2, #0
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3304      	adds	r3, #4
 800679a:	461a      	mov	r2, r3
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	f7fd fec9 	bl	8004534 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3314      	adds	r3, #20
 80067b2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	617b      	str	r3, [r7, #20]
   return(result);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80067ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6a39      	ldr	r1, [r7, #32]
 80067d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e000      	b.n	80067e6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
  }
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3730      	adds	r7, #48	@ 0x30
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	08006db9 	.word	0x08006db9
 80067f4:	08006e53 	.word	0x08006e53
 80067f8:	08006fd7 	.word	0x08006fd7

080067fc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b20      	cmp	r3, #32
 8006814:	d112      	bne.n	800683c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <HAL_UART_Receive_DMA+0x26>
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e00b      	b.n	800683e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	461a      	mov	r2, r3
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fc1a 	bl	800706c <UART_Start_Receive_DMA>
 8006838:	4603      	mov	r3, r0
 800683a:	e000      	b.n	800683e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b0ba      	sub	sp, #232	@ 0xe8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006874:	2300      	movs	r3, #0
 8006876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10f      	bne.n	80068ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <HAL_UART_IRQHandler+0x66>
 800689a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fd7e 	bl	80073a8 <UART_Receive_IT>
      return;
 80068ac:	e25b      	b.n	8006d66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80de 	beq.w	8006a74 <HAL_UART_IRQHandler+0x22c>
 80068b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80d1 	beq.w	8006a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xae>
 80068de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	f043 0201 	orr.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_UART_IRQHandler+0xd2>
 8006902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	f043 0202 	orr.w	r2, r3, #2
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <HAL_UART_IRQHandler+0xf6>
 8006926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f043 0204 	orr.w	r2, r3, #4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <HAL_UART_IRQHandler+0x126>
 800694a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	f043 0208 	orr.w	r2, r3, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 81f2 	beq.w	8006d5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_UART_IRQHandler+0x14e>
 8006984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fd09 	bl	80073a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d103      	bne.n	80069c2 <HAL_UART_IRQHandler+0x17a>
 80069ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d04f      	beq.n	8006a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fc13 	bl	80071ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d041      	beq.n	8006a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3314      	adds	r3, #20
 80069dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3314      	adds	r3, #20
 80069fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1d9      	bne.n	80069d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d013      	beq.n	8006a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c28 <HAL_UART_IRQHandler+0x3e0>)
 8006a30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd fe18 	bl	800466c <HAL_DMA_Abort_IT>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d016      	beq.n	8006a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00e      	b.n	8006a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f99c 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e00a      	b.n	8006a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f998 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e006      	b.n	8006a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f994 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a6e:	e175      	b.n	8006d5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	bf00      	nop
    return;
 8006a72:	e173      	b.n	8006d5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f040 814f 	bne.w	8006d1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8148 	beq.w	8006d1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8141 	beq.w	8006d1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80b6 	beq.w	8006c2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8145 	beq.w	8006d60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	f080 813e 	bcs.w	8006d60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	f000 8088 	beq.w	8006c08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1d9      	bne.n	8006af8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e1      	bne.n	8006b44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ba4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006baa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e3      	bne.n	8006b80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd8:	f023 0310 	bic.w	r3, r3, #16
 8006bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e3      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fd fcf6 	bl	80045f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8bf 	bl	8006da2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c24:	e09c      	b.n	8006d60 <HAL_UART_IRQHandler+0x518>
 8006c26:	bf00      	nop
 8006c28:	080072b3 	.word	0x080072b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 808e 	beq.w	8006d64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8089 	beq.w	8006d64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e3      	bne.n	8006c52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e3      	bne.n	8006c8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
 8006ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cf4:	61fa      	str	r2, [r7, #28]
 8006cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	617b      	str	r3, [r7, #20]
   return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e3      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f844 	bl	8006da2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d1a:	e023      	b.n	8006d64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d009      	beq.n	8006d3c <HAL_UART_IRQHandler+0x4f4>
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fad0 	bl	80072da <UART_Transmit_IT>
    return;
 8006d3a:	e014      	b.n	8006d66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <HAL_UART_IRQHandler+0x51e>
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb0f 	bl	8007378 <UART_EndTransmit_IT>
    return;
 8006d5a:	e004      	b.n	8006d66 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d5c:	bf00      	nop
 8006d5e:	e002      	b.n	8006d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d60:	bf00      	nop
 8006d62:	e000      	b.n	8006d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d64:	bf00      	nop
  }
}
 8006d66:	37e8      	adds	r7, #232	@ 0xe8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b090      	sub	sp, #64	@ 0x40
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d137      	bne.n	8006e44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3314      	adds	r3, #20
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3314      	adds	r3, #20
 8006df8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e2e:	61fa      	str	r2, [r7, #28]
 8006e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e42:	e002      	b.n	8006e4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e46:	f7fc f837 	bl	8002eb8 <HAL_UART_TxCpltCallback>
}
 8006e4a:	bf00      	nop
 8006e4c:	3740      	adds	r7, #64	@ 0x40
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff ff83 	bl	8006d6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b09c      	sub	sp, #112	@ 0x70
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d172      	bne.n	8006f70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ea2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006eb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006eb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006eb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	667b      	str	r3, [r7, #100]	@ 0x64
 8006edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ee4:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ee6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	623b      	str	r3, [r7, #32]
   return(result);
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f18:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d119      	bne.n	8006f70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0310 	bic.w	r3, r3, #16
 8006f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f5c:	61fa      	str	r2, [r7, #28]
 8006f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e5      	bne.n	8006f3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f72:	2200      	movs	r2, #0
 8006f74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d106      	bne.n	8006f8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f82:	4619      	mov	r1, r3
 8006f84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f86:	f7ff ff0c 	bl	8006da2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f8a:	e002      	b.n	8006f92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f8e:	f7fb ffa5 	bl	8002edc <HAL_UART_RxCpltCallback>
}
 8006f92:	bf00      	nop
 8006f94:	3770      	adds	r7, #112	@ 0x70
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d108      	bne.n	8006fc8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff feee 	bl	8006da2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fc6:	e002      	b.n	8006fce <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fed8 	bl	8006d7e <HAL_UART_RxHalfCpltCallback>
}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bf14      	ite	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	2300      	moveq	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b21      	cmp	r3, #33	@ 0x21
 8007008:	d108      	bne.n	800701c <UART_DMAError+0x46>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f000 f8c2 	bl	80071a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b22      	cmp	r3, #34	@ 0x22
 800703c:	d108      	bne.n	8007050 <UART_DMAError+0x7a>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800704a:	68b8      	ldr	r0, [r7, #8]
 800704c:	f000 f8cf 	bl	80071ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007054:	f043 0210 	orr.w	r2, r3, #16
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800705c:	68b8      	ldr	r0, [r7, #8]
 800705e:	f7ff fe97 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b098      	sub	sp, #96	@ 0x60
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2222      	movs	r2, #34	@ 0x22
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007098:	4a3e      	ldr	r2, [pc, #248]	@ (8007194 <UART_Start_Receive_DMA+0x128>)
 800709a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a0:	4a3d      	ldr	r2, [pc, #244]	@ (8007198 <UART_Start_Receive_DMA+0x12c>)
 80070a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a8:	4a3c      	ldr	r2, [pc, #240]	@ (800719c <UART_Start_Receive_DMA+0x130>)
 80070aa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b0:	2200      	movs	r2, #0
 80070b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80070b4:	f107 0308 	add.w	r3, r7, #8
 80070b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	f7fd fa32 	bl	8004534 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d019      	beq.n	8007122 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800710e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007110:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800711c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e5      	bne.n	80070ee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	657b      	str	r3, [r7, #84]	@ 0x54
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3314      	adds	r3, #20
 8007140:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007142:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3314      	adds	r3, #20
 800715c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	617b      	str	r3, [r7, #20]
   return(result);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716c:	653b      	str	r3, [r7, #80]	@ 0x50
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3314      	adds	r3, #20
 8007174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007176:	627a      	str	r2, [r7, #36]	@ 0x24
 8007178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6a39      	ldr	r1, [r7, #32]
 800717c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	61fb      	str	r3, [r7, #28]
   return(result);
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e5      	bne.n	8007156 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3760      	adds	r7, #96	@ 0x60
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	08006e6f 	.word	0x08006e6f
 8007198:	08006f9b 	.word	0x08006f9b
 800719c:	08006fd7 	.word	0x08006fd7

080071a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	@ 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	61ba      	str	r2, [r7, #24]
 80071ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80071e4:	bf00      	nop
 80071e6:	3724      	adds	r7, #36	@ 0x24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b095      	sub	sp, #84	@ 0x54
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	330c      	adds	r3, #12
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800720c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007216:	643a      	str	r2, [r7, #64]	@ 0x40
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800721c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3314      	adds	r3, #20
 8007230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	61fb      	str	r3, [r7, #28]
   return(result);
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3314      	adds	r3, #20
 8007248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800724a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800724c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e5      	bne.n	800722a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007262:	2b01      	cmp	r3, #1
 8007264:	d119      	bne.n	800729a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	330c      	adds	r3, #12
 800726c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	60bb      	str	r3, [r7, #8]
   return(result);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f023 0310 	bic.w	r3, r3, #16
 800727c:	647b      	str	r3, [r7, #68]	@ 0x44
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007286:	61ba      	str	r2, [r7, #24]
 8007288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6979      	ldr	r1, [r7, #20]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	613b      	str	r3, [r7, #16]
   return(result);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e5      	bne.n	8007266 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072a8:	bf00      	nop
 80072aa:	3754      	adds	r7, #84	@ 0x54
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr

080072b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fd5f 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b21      	cmp	r3, #33	@ 0x21
 80072ec:	d13e      	bne.n	800736c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f6:	d114      	bne.n	8007322 <UART_Transmit_IT+0x48>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d110      	bne.n	8007322 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007314:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	1c9a      	adds	r2, r3, #2
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	621a      	str	r2, [r3, #32]
 8007320:	e008      	b.n	8007334 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	1c59      	adds	r1, r3, #1
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6211      	str	r1, [r2, #32]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29b      	uxth	r3, r3
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4619      	mov	r1, r3
 8007342:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10f      	bne.n	8007368 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007356:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007366:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e000      	b.n	800736e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800736c:	2302      	movs	r3, #2
  }
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800738e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7fb fd8d 	bl	8002eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	@ 0x30
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b22      	cmp	r3, #34	@ 0x22
 80073ba:	f040 80ae 	bne.w	800751a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c6:	d117      	bne.n	80073f8 <UART_Receive_IT+0x50>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d113      	bne.n	80073f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	1c9a      	adds	r2, r3, #2
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80073f6:	e026      	b.n	8007446 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800740a:	d007      	beq.n	800741c <UART_Receive_IT+0x74>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <UART_Receive_IT+0x82>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	e008      	b.n	800743c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007436:	b2da      	uxtb	r2, r3
 8007438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29b      	uxth	r3, r3
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007456:	2b00      	cmp	r3, #0
 8007458:	d15d      	bne.n	8007516 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0220 	bic.w	r2, r2, #32
 8007468:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749c:	2b01      	cmp	r3, #1
 800749e:	d135      	bne.n	800750c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	613b      	str	r3, [r7, #16]
   return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f023 0310 	bic.w	r3, r3, #16
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c6:	623a      	str	r2, [r7, #32]
 80074c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	6a3a      	ldr	r2, [r7, #32]
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d10a      	bne.n	80074fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff fc4c 	bl	8006da2 <HAL_UARTEx_RxEventCallback>
 800750a:	e002      	b.n	8007512 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fb fce5 	bl	8002edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e002      	b.n	800751c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e000      	b.n	800751c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800751a:	2302      	movs	r3, #2
  }
}
 800751c:	4618      	mov	r0, r3
 800751e:	3730      	adds	r7, #48	@ 0x30
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800755e:	f023 030c 	bic.w	r3, r3, #12
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	430b      	orrs	r3, r1
 800756a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2c      	ldr	r2, [pc, #176]	@ (8007638 <UART_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d103      	bne.n	8007594 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800758c:	f7fd ffae 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	e002      	b.n	800759a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007594:	f7fd ff96 	bl	80054c4 <HAL_RCC_GetPCLK1Freq>
 8007598:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009a      	lsls	r2, r3, #2
 80075a4:	441a      	add	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	4a22      	ldr	r2, [pc, #136]	@ (800763c <UART_SetConfig+0x118>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	0119      	lsls	r1, r3, #4
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009a      	lsls	r2, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80075d0:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <UART_SetConfig+0x118>)
 80075d2:	fba3 0302 	umull	r0, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2064      	movs	r0, #100	@ 0x64
 80075da:	fb00 f303 	mul.w	r3, r0, r3
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	3332      	adds	r3, #50	@ 0x32
 80075e4:	4a15      	ldr	r2, [pc, #84]	@ (800763c <UART_SetConfig+0x118>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075f0:	4419      	add	r1, r3
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009a      	lsls	r2, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	fbb2 f2f3 	udiv	r2, r2, r3
 8007608:	4b0c      	ldr	r3, [pc, #48]	@ (800763c <UART_SetConfig+0x118>)
 800760a:	fba3 0302 	umull	r0, r3, r3, r2
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	2064      	movs	r0, #100	@ 0x64
 8007612:	fb00 f303 	mul.w	r3, r0, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	3332      	adds	r3, #50	@ 0x32
 800761c:	4a07      	ldr	r2, [pc, #28]	@ (800763c <UART_SetConfig+0x118>)
 800761e:	fba2 2303 	umull	r2, r3, r2, r3
 8007622:	095b      	lsrs	r3, r3, #5
 8007624:	f003 020f 	and.w	r2, r3, #15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	440a      	add	r2, r1
 800762e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40013800 	.word	0x40013800
 800763c:	51eb851f 	.word	0x51eb851f

08007640 <realloc>:
 8007640:	4b02      	ldr	r3, [pc, #8]	@ (800764c <realloc+0xc>)
 8007642:	460a      	mov	r2, r1
 8007644:	4601      	mov	r1, r0
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	f000 b802 	b.w	8007650 <_realloc_r>
 800764c:	200000cc 	.word	0x200000cc

08007650 <_realloc_r>:
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	4680      	mov	r8, r0
 8007656:	4615      	mov	r5, r2
 8007658:	460c      	mov	r4, r1
 800765a:	b921      	cbnz	r1, 8007666 <_realloc_r+0x16>
 800765c:	4611      	mov	r1, r2
 800765e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007662:	f001 bce3 	b.w	800902c <_malloc_r>
 8007666:	b92a      	cbnz	r2, 8007674 <_realloc_r+0x24>
 8007668:	f001 fc6e 	bl	8008f48 <_free_r>
 800766c:	2400      	movs	r4, #0
 800766e:	4620      	mov	r0, r4
 8007670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007674:	f002 f8e6 	bl	8009844 <_malloc_usable_size_r>
 8007678:	4285      	cmp	r5, r0
 800767a:	4606      	mov	r6, r0
 800767c:	d802      	bhi.n	8007684 <_realloc_r+0x34>
 800767e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007682:	d8f4      	bhi.n	800766e <_realloc_r+0x1e>
 8007684:	4629      	mov	r1, r5
 8007686:	4640      	mov	r0, r8
 8007688:	f001 fcd0 	bl	800902c <_malloc_r>
 800768c:	4607      	mov	r7, r0
 800768e:	2800      	cmp	r0, #0
 8007690:	d0ec      	beq.n	800766c <_realloc_r+0x1c>
 8007692:	42b5      	cmp	r5, r6
 8007694:	462a      	mov	r2, r5
 8007696:	4621      	mov	r1, r4
 8007698:	bf28      	it	cs
 800769a:	4632      	movcs	r2, r6
 800769c:	f000 fdf5 	bl	800828a <memcpy>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4640      	mov	r0, r8
 80076a4:	f001 fc50 	bl	8008f48 <_free_r>
 80076a8:	463c      	mov	r4, r7
 80076aa:	e7e0      	b.n	800766e <_realloc_r+0x1e>

080076ac <__cvt>:
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b2:	461d      	mov	r5, r3
 80076b4:	bfbb      	ittet	lt
 80076b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80076ba:	461d      	movlt	r5, r3
 80076bc:	2300      	movge	r3, #0
 80076be:	232d      	movlt	r3, #45	@ 0x2d
 80076c0:	b088      	sub	sp, #32
 80076c2:	4614      	mov	r4, r2
 80076c4:	bfb8      	it	lt
 80076c6:	4614      	movlt	r4, r2
 80076c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80076cc:	7013      	strb	r3, [r2, #0]
 80076ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80076d4:	f023 0820 	bic.w	r8, r3, #32
 80076d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076dc:	d005      	beq.n	80076ea <__cvt+0x3e>
 80076de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076e2:	d100      	bne.n	80076e6 <__cvt+0x3a>
 80076e4:	3601      	adds	r6, #1
 80076e6:	2302      	movs	r3, #2
 80076e8:	e000      	b.n	80076ec <__cvt+0x40>
 80076ea:	2303      	movs	r3, #3
 80076ec:	aa07      	add	r2, sp, #28
 80076ee:	9204      	str	r2, [sp, #16]
 80076f0:	aa06      	add	r2, sp, #24
 80076f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80076f6:	e9cd 3600 	strd	r3, r6, [sp]
 80076fa:	4622      	mov	r2, r4
 80076fc:	462b      	mov	r3, r5
 80076fe:	f000 fe5b 	bl	80083b8 <_dtoa_r>
 8007702:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007706:	4607      	mov	r7, r0
 8007708:	d119      	bne.n	800773e <__cvt+0x92>
 800770a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800770c:	07db      	lsls	r3, r3, #31
 800770e:	d50e      	bpl.n	800772e <__cvt+0x82>
 8007710:	eb00 0906 	add.w	r9, r0, r6
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f9 f944 	bl	80009a8 <__aeabi_dcmpeq>
 8007720:	b108      	cbz	r0, 8007726 <__cvt+0x7a>
 8007722:	f8cd 901c 	str.w	r9, [sp, #28]
 8007726:	2230      	movs	r2, #48	@ 0x30
 8007728:	9b07      	ldr	r3, [sp, #28]
 800772a:	454b      	cmp	r3, r9
 800772c:	d31e      	bcc.n	800776c <__cvt+0xc0>
 800772e:	4638      	mov	r0, r7
 8007730:	9b07      	ldr	r3, [sp, #28]
 8007732:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007734:	1bdb      	subs	r3, r3, r7
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	b008      	add	sp, #32
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007742:	eb00 0906 	add.w	r9, r0, r6
 8007746:	d1e5      	bne.n	8007714 <__cvt+0x68>
 8007748:	7803      	ldrb	r3, [r0, #0]
 800774a:	2b30      	cmp	r3, #48	@ 0x30
 800774c:	d10a      	bne.n	8007764 <__cvt+0xb8>
 800774e:	2200      	movs	r2, #0
 8007750:	2300      	movs	r3, #0
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f9 f927 	bl	80009a8 <__aeabi_dcmpeq>
 800775a:	b918      	cbnz	r0, 8007764 <__cvt+0xb8>
 800775c:	f1c6 0601 	rsb	r6, r6, #1
 8007760:	f8ca 6000 	str.w	r6, [sl]
 8007764:	f8da 3000 	ldr.w	r3, [sl]
 8007768:	4499      	add	r9, r3
 800776a:	e7d3      	b.n	8007714 <__cvt+0x68>
 800776c:	1c59      	adds	r1, r3, #1
 800776e:	9107      	str	r1, [sp, #28]
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e7d9      	b.n	8007728 <__cvt+0x7c>

08007774 <__exponent>:
 8007774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007776:	2900      	cmp	r1, #0
 8007778:	bfb6      	itet	lt
 800777a:	232d      	movlt	r3, #45	@ 0x2d
 800777c:	232b      	movge	r3, #43	@ 0x2b
 800777e:	4249      	neglt	r1, r1
 8007780:	2909      	cmp	r1, #9
 8007782:	7002      	strb	r2, [r0, #0]
 8007784:	7043      	strb	r3, [r0, #1]
 8007786:	dd29      	ble.n	80077dc <__exponent+0x68>
 8007788:	f10d 0307 	add.w	r3, sp, #7
 800778c:	461d      	mov	r5, r3
 800778e:	270a      	movs	r7, #10
 8007790:	fbb1 f6f7 	udiv	r6, r1, r7
 8007794:	461a      	mov	r2, r3
 8007796:	fb07 1416 	mls	r4, r7, r6, r1
 800779a:	3430      	adds	r4, #48	@ 0x30
 800779c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077a0:	460c      	mov	r4, r1
 80077a2:	2c63      	cmp	r4, #99	@ 0x63
 80077a4:	4631      	mov	r1, r6
 80077a6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80077aa:	dcf1      	bgt.n	8007790 <__exponent+0x1c>
 80077ac:	3130      	adds	r1, #48	@ 0x30
 80077ae:	1e94      	subs	r4, r2, #2
 80077b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077b4:	4623      	mov	r3, r4
 80077b6:	1c41      	adds	r1, r0, #1
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	d30a      	bcc.n	80077d2 <__exponent+0x5e>
 80077bc:	f10d 0309 	add.w	r3, sp, #9
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	42ac      	cmp	r4, r5
 80077c4:	bf88      	it	hi
 80077c6:	2300      	movhi	r3, #0
 80077c8:	3302      	adds	r3, #2
 80077ca:	4403      	add	r3, r0
 80077cc:	1a18      	subs	r0, r3, r0
 80077ce:	b003      	add	sp, #12
 80077d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077da:	e7ed      	b.n	80077b8 <__exponent+0x44>
 80077dc:	2330      	movs	r3, #48	@ 0x30
 80077de:	3130      	adds	r1, #48	@ 0x30
 80077e0:	7083      	strb	r3, [r0, #2]
 80077e2:	70c1      	strb	r1, [r0, #3]
 80077e4:	1d03      	adds	r3, r0, #4
 80077e6:	e7f1      	b.n	80077cc <__exponent+0x58>

080077e8 <_printf_float>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	b091      	sub	sp, #68	@ 0x44
 80077ee:	460c      	mov	r4, r1
 80077f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80077f4:	4616      	mov	r6, r2
 80077f6:	461f      	mov	r7, r3
 80077f8:	4605      	mov	r5, r0
 80077fa:	f000 fcc1 	bl	8008180 <_localeconv_r>
 80077fe:	6803      	ldr	r3, [r0, #0]
 8007800:	4618      	mov	r0, r3
 8007802:	9308      	str	r3, [sp, #32]
 8007804:	f7f8 fca4 	bl	8000150 <strlen>
 8007808:	2300      	movs	r3, #0
 800780a:	930e      	str	r3, [sp, #56]	@ 0x38
 800780c:	f8d8 3000 	ldr.w	r3, [r8]
 8007810:	9009      	str	r0, [sp, #36]	@ 0x24
 8007812:	3307      	adds	r3, #7
 8007814:	f023 0307 	bic.w	r3, r3, #7
 8007818:	f103 0208 	add.w	r2, r3, #8
 800781c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007820:	f8d4 b000 	ldr.w	fp, [r4]
 8007824:	f8c8 2000 	str.w	r2, [r8]
 8007828:	e9d3 8900 	ldrd	r8, r9, [r3]
 800782c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007832:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800783a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800783e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007842:	4b9c      	ldr	r3, [pc, #624]	@ (8007ab4 <_printf_float+0x2cc>)
 8007844:	f7f9 f8e2 	bl	8000a0c <__aeabi_dcmpun>
 8007848:	bb70      	cbnz	r0, 80078a8 <_printf_float+0xc0>
 800784a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800784e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007852:	4b98      	ldr	r3, [pc, #608]	@ (8007ab4 <_printf_float+0x2cc>)
 8007854:	f7f9 f8bc 	bl	80009d0 <__aeabi_dcmple>
 8007858:	bb30      	cbnz	r0, 80078a8 <_printf_float+0xc0>
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4640      	mov	r0, r8
 8007860:	4649      	mov	r1, r9
 8007862:	f7f9 f8ab 	bl	80009bc <__aeabi_dcmplt>
 8007866:	b110      	cbz	r0, 800786e <_printf_float+0x86>
 8007868:	232d      	movs	r3, #45	@ 0x2d
 800786a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800786e:	4a92      	ldr	r2, [pc, #584]	@ (8007ab8 <_printf_float+0x2d0>)
 8007870:	4b92      	ldr	r3, [pc, #584]	@ (8007abc <_printf_float+0x2d4>)
 8007872:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007876:	bf94      	ite	ls
 8007878:	4690      	movls	r8, r2
 800787a:	4698      	movhi	r8, r3
 800787c:	2303      	movs	r3, #3
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	f02b 0304 	bic.w	r3, fp, #4
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	4633      	mov	r3, r6
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	9700      	str	r7, [sp, #0]
 8007892:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007894:	f000 f9d4 	bl	8007c40 <_printf_common>
 8007898:	3001      	adds	r0, #1
 800789a:	f040 8090 	bne.w	80079be <_printf_float+0x1d6>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078a2:	b011      	add	sp, #68	@ 0x44
 80078a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f9 f8ac 	bl	8000a0c <__aeabi_dcmpun>
 80078b4:	b148      	cbz	r0, 80078ca <_printf_float+0xe2>
 80078b6:	464b      	mov	r3, r9
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfb8      	it	lt
 80078bc:	232d      	movlt	r3, #45	@ 0x2d
 80078be:	4a80      	ldr	r2, [pc, #512]	@ (8007ac0 <_printf_float+0x2d8>)
 80078c0:	bfb8      	it	lt
 80078c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078c6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ac4 <_printf_float+0x2dc>)
 80078c8:	e7d3      	b.n	8007872 <_printf_float+0x8a>
 80078ca:	6863      	ldr	r3, [r4, #4]
 80078cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	d13f      	bne.n	8007954 <_printf_float+0x16c>
 80078d4:	2306      	movs	r3, #6
 80078d6:	6063      	str	r3, [r4, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	9206      	str	r2, [sp, #24]
 80078e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80078e4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80078e8:	aa0d      	add	r2, sp, #52	@ 0x34
 80078ea:	9203      	str	r2, [sp, #12]
 80078ec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80078f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80078f4:	6863      	ldr	r3, [r4, #4]
 80078f6:	4642      	mov	r2, r8
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	4628      	mov	r0, r5
 80078fc:	464b      	mov	r3, r9
 80078fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8007900:	f7ff fed4 	bl	80076ac <__cvt>
 8007904:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007906:	4680      	mov	r8, r0
 8007908:	2947      	cmp	r1, #71	@ 0x47
 800790a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800790c:	d128      	bne.n	8007960 <_printf_float+0x178>
 800790e:	1cc8      	adds	r0, r1, #3
 8007910:	db02      	blt.n	8007918 <_printf_float+0x130>
 8007912:	6863      	ldr	r3, [r4, #4]
 8007914:	4299      	cmp	r1, r3
 8007916:	dd40      	ble.n	800799a <_printf_float+0x1b2>
 8007918:	f1aa 0a02 	sub.w	sl, sl, #2
 800791c:	fa5f fa8a 	uxtb.w	sl, sl
 8007920:	4652      	mov	r2, sl
 8007922:	3901      	subs	r1, #1
 8007924:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007928:	910d      	str	r1, [sp, #52]	@ 0x34
 800792a:	f7ff ff23 	bl	8007774 <__exponent>
 800792e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007930:	4681      	mov	r9, r0
 8007932:	1813      	adds	r3, r2, r0
 8007934:	2a01      	cmp	r2, #1
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	dc02      	bgt.n	8007940 <_printf_float+0x158>
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	07d2      	lsls	r2, r2, #31
 800793e:	d501      	bpl.n	8007944 <_printf_float+0x15c>
 8007940:	3301      	adds	r3, #1
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007948:	2b00      	cmp	r3, #0
 800794a:	d09e      	beq.n	800788a <_printf_float+0xa2>
 800794c:	232d      	movs	r3, #45	@ 0x2d
 800794e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007952:	e79a      	b.n	800788a <_printf_float+0xa2>
 8007954:	2947      	cmp	r1, #71	@ 0x47
 8007956:	d1bf      	bne.n	80078d8 <_printf_float+0xf0>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1bd      	bne.n	80078d8 <_printf_float+0xf0>
 800795c:	2301      	movs	r3, #1
 800795e:	e7ba      	b.n	80078d6 <_printf_float+0xee>
 8007960:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007964:	d9dc      	bls.n	8007920 <_printf_float+0x138>
 8007966:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800796a:	d118      	bne.n	800799e <_printf_float+0x1b6>
 800796c:	2900      	cmp	r1, #0
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	dd0b      	ble.n	800798a <_printf_float+0x1a2>
 8007972:	6121      	str	r1, [r4, #16]
 8007974:	b913      	cbnz	r3, 800797c <_printf_float+0x194>
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	07d0      	lsls	r0, r2, #31
 800797a:	d502      	bpl.n	8007982 <_printf_float+0x19a>
 800797c:	3301      	adds	r3, #1
 800797e:	440b      	add	r3, r1
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	f04f 0900 	mov.w	r9, #0
 8007986:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007988:	e7dc      	b.n	8007944 <_printf_float+0x15c>
 800798a:	b913      	cbnz	r3, 8007992 <_printf_float+0x1aa>
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	07d2      	lsls	r2, r2, #31
 8007990:	d501      	bpl.n	8007996 <_printf_float+0x1ae>
 8007992:	3302      	adds	r3, #2
 8007994:	e7f4      	b.n	8007980 <_printf_float+0x198>
 8007996:	2301      	movs	r3, #1
 8007998:	e7f2      	b.n	8007980 <_printf_float+0x198>
 800799a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800799e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079a0:	4299      	cmp	r1, r3
 80079a2:	db05      	blt.n	80079b0 <_printf_float+0x1c8>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	6121      	str	r1, [r4, #16]
 80079a8:	07d8      	lsls	r0, r3, #31
 80079aa:	d5ea      	bpl.n	8007982 <_printf_float+0x19a>
 80079ac:	1c4b      	adds	r3, r1, #1
 80079ae:	e7e7      	b.n	8007980 <_printf_float+0x198>
 80079b0:	2900      	cmp	r1, #0
 80079b2:	bfcc      	ite	gt
 80079b4:	2201      	movgt	r2, #1
 80079b6:	f1c1 0202 	rsble	r2, r1, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	e7e0      	b.n	8007980 <_printf_float+0x198>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	055a      	lsls	r2, r3, #21
 80079c2:	d407      	bmi.n	80079d4 <_printf_float+0x1ec>
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	4642      	mov	r2, r8
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	d12b      	bne.n	8007a2a <_printf_float+0x242>
 80079d2:	e764      	b.n	800789e <_printf_float+0xb6>
 80079d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079d8:	f240 80dc 	bls.w	8007b94 <_printf_float+0x3ac>
 80079dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079e0:	2200      	movs	r2, #0
 80079e2:	2300      	movs	r3, #0
 80079e4:	f7f8 ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d033      	beq.n	8007a54 <_printf_float+0x26c>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	4a35      	ldr	r2, [pc, #212]	@ (8007ac8 <_printf_float+0x2e0>)
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	f43f af51 	beq.w	800789e <_printf_float+0xb6>
 80079fc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007a00:	4543      	cmp	r3, r8
 8007a02:	db02      	blt.n	8007a0a <_printf_float+0x222>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	07d8      	lsls	r0, r3, #31
 8007a08:	d50f      	bpl.n	8007a2a <_printf_float+0x242>
 8007a0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	f43f af42 	beq.w	800789e <_printf_float+0xb6>
 8007a1a:	f04f 0900 	mov.w	r9, #0
 8007a1e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007a22:	f104 0a1a 	add.w	sl, r4, #26
 8007a26:	45c8      	cmp	r8, r9
 8007a28:	dc09      	bgt.n	8007a3e <_printf_float+0x256>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	079b      	lsls	r3, r3, #30
 8007a2e:	f100 8102 	bmi.w	8007c36 <_printf_float+0x44e>
 8007a32:	68e0      	ldr	r0, [r4, #12]
 8007a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a36:	4298      	cmp	r0, r3
 8007a38:	bfb8      	it	lt
 8007a3a:	4618      	movlt	r0, r3
 8007a3c:	e731      	b.n	80078a2 <_printf_float+0xba>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4652      	mov	r2, sl
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	f43f af28 	beq.w	800789e <_printf_float+0xb6>
 8007a4e:	f109 0901 	add.w	r9, r9, #1
 8007a52:	e7e8      	b.n	8007a26 <_printf_float+0x23e>
 8007a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dc38      	bgt.n	8007acc <_printf_float+0x2e4>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <_printf_float+0x2e0>)
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	f43f af1a 	beq.w	800789e <_printf_float+0xb6>
 8007a6a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007a6e:	ea59 0303 	orrs.w	r3, r9, r3
 8007a72:	d102      	bne.n	8007a7a <_printf_float+0x292>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d5d7      	bpl.n	8007a2a <_printf_float+0x242>
 8007a7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b8      	blx	r7
 8007a84:	3001      	adds	r0, #1
 8007a86:	f43f af0a 	beq.w	800789e <_printf_float+0xb6>
 8007a8a:	f04f 0a00 	mov.w	sl, #0
 8007a8e:	f104 0b1a 	add.w	fp, r4, #26
 8007a92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a94:	425b      	negs	r3, r3
 8007a96:	4553      	cmp	r3, sl
 8007a98:	dc01      	bgt.n	8007a9e <_printf_float+0x2b6>
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	e793      	b.n	80079c6 <_printf_float+0x1de>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	465a      	mov	r2, fp
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f43f aef8 	beq.w	800789e <_printf_float+0xb6>
 8007aae:	f10a 0a01 	add.w	sl, sl, #1
 8007ab2:	e7ee      	b.n	8007a92 <_printf_float+0x2aa>
 8007ab4:	7fefffff 	.word	0x7fefffff
 8007ab8:	0800a27a 	.word	0x0800a27a
 8007abc:	0800a27e 	.word	0x0800a27e
 8007ac0:	0800a282 	.word	0x0800a282
 8007ac4:	0800a286 	.word	0x0800a286
 8007ac8:	0800a28a 	.word	0x0800a28a
 8007acc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ace:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007ad2:	4553      	cmp	r3, sl
 8007ad4:	bfa8      	it	ge
 8007ad6:	4653      	movge	r3, sl
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	4699      	mov	r9, r3
 8007adc:	dc36      	bgt.n	8007b4c <_printf_float+0x364>
 8007ade:	f04f 0b00 	mov.w	fp, #0
 8007ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae6:	f104 021a 	add.w	r2, r4, #26
 8007aea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aec:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aee:	eba3 0309 	sub.w	r3, r3, r9
 8007af2:	455b      	cmp	r3, fp
 8007af4:	dc31      	bgt.n	8007b5a <_printf_float+0x372>
 8007af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007af8:	459a      	cmp	sl, r3
 8007afa:	dc3a      	bgt.n	8007b72 <_printf_float+0x38a>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d437      	bmi.n	8007b72 <_printf_float+0x38a>
 8007b02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b04:	ebaa 0903 	sub.w	r9, sl, r3
 8007b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b0a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b0e:	4599      	cmp	r9, r3
 8007b10:	bfa8      	it	ge
 8007b12:	4699      	movge	r9, r3
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	dc33      	bgt.n	8007b82 <_printf_float+0x39a>
 8007b1a:	f04f 0800 	mov.w	r8, #0
 8007b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b22:	f104 0b1a 	add.w	fp, r4, #26
 8007b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b28:	ebaa 0303 	sub.w	r3, sl, r3
 8007b2c:	eba3 0309 	sub.w	r3, r3, r9
 8007b30:	4543      	cmp	r3, r8
 8007b32:	f77f af7a 	ble.w	8007a2a <_printf_float+0x242>
 8007b36:	2301      	movs	r3, #1
 8007b38:	465a      	mov	r2, fp
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f aeac 	beq.w	800789e <_printf_float+0xb6>
 8007b46:	f108 0801 	add.w	r8, r8, #1
 8007b4a:	e7ec      	b.n	8007b26 <_printf_float+0x33e>
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	d1c2      	bne.n	8007ade <_printf_float+0x2f6>
 8007b58:	e6a1      	b.n	800789e <_printf_float+0xb6>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	920a      	str	r2, [sp, #40]	@ 0x28
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f ae9a 	beq.w	800789e <_printf_float+0xb6>
 8007b6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b6c:	f10b 0b01 	add.w	fp, fp, #1
 8007b70:	e7bb      	b.n	8007aea <_printf_float+0x302>
 8007b72:	4631      	mov	r1, r6
 8007b74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1c0      	bne.n	8007b02 <_printf_float+0x31a>
 8007b80:	e68d      	b.n	800789e <_printf_float+0xb6>
 8007b82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b84:	464b      	mov	r3, r9
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	4442      	add	r2, r8
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d1c3      	bne.n	8007b1a <_printf_float+0x332>
 8007b92:	e684      	b.n	800789e <_printf_float+0xb6>
 8007b94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007b98:	f1ba 0f01 	cmp.w	sl, #1
 8007b9c:	dc01      	bgt.n	8007ba2 <_printf_float+0x3ba>
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d536      	bpl.n	8007c10 <_printf_float+0x428>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae76 	beq.w	800789e <_printf_float+0xb6>
 8007bb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae6e 	beq.w	800789e <_printf_float+0xb6>
 8007bc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007bce:	f7f8 feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd2:	b9c0      	cbnz	r0, 8007c06 <_printf_float+0x41e>
 8007bd4:	4653      	mov	r3, sl
 8007bd6:	f108 0201 	add.w	r2, r8, #1
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d10c      	bne.n	8007bfe <_printf_float+0x416>
 8007be4:	e65b      	b.n	800789e <_printf_float+0xb6>
 8007be6:	2301      	movs	r3, #1
 8007be8:	465a      	mov	r2, fp
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae54 	beq.w	800789e <_printf_float+0xb6>
 8007bf6:	f108 0801 	add.w	r8, r8, #1
 8007bfa:	45d0      	cmp	r8, sl
 8007bfc:	dbf3      	blt.n	8007be6 <_printf_float+0x3fe>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c04:	e6e0      	b.n	80079c8 <_printf_float+0x1e0>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 0b1a 	add.w	fp, r4, #26
 8007c0e:	e7f4      	b.n	8007bfa <_printf_float+0x412>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4642      	mov	r2, r8
 8007c14:	e7e1      	b.n	8007bda <_printf_float+0x3f2>
 8007c16:	2301      	movs	r3, #1
 8007c18:	464a      	mov	r2, r9
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae3c 	beq.w	800789e <_printf_float+0xb6>
 8007c26:	f108 0801 	add.w	r8, r8, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	4543      	cmp	r3, r8
 8007c32:	dcf0      	bgt.n	8007c16 <_printf_float+0x42e>
 8007c34:	e6fd      	b.n	8007a32 <_printf_float+0x24a>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f104 0919 	add.w	r9, r4, #25
 8007c3e:	e7f4      	b.n	8007c2a <_printf_float+0x442>

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4698      	mov	r8, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bfb8      	it	lt
 8007c52:	4613      	movlt	r3, r2
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc2b      	bgt.n	8007ce0 <_printf_common+0xa0>
 8007c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	3b00      	subs	r3, #0
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d430      	bmi.n	8007cfa <_printf_common+0xba>
 8007c98:	4641      	mov	r1, r8
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ca0:	47c8      	blx	r9
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d023      	beq.n	8007cee <_printf_common+0xae>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	6922      	ldr	r2, [r4, #16]
 8007caa:	f003 0306 	and.w	r3, r3, #6
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	bf14      	ite	ne
 8007cb2:	2500      	movne	r5, #0
 8007cb4:	6833      	ldreq	r3, [r6, #0]
 8007cb6:	f04f 0600 	mov.w	r6, #0
 8007cba:	bf08      	it	eq
 8007cbc:	68e5      	ldreq	r5, [r4, #12]
 8007cbe:	f104 041a 	add.w	r4, r4, #26
 8007cc2:	bf08      	it	eq
 8007cc4:	1aed      	subeq	r5, r5, r3
 8007cc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007cca:	bf08      	it	eq
 8007ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	bfc4      	itt	gt
 8007cd4:	1a9b      	subgt	r3, r3, r2
 8007cd6:	18ed      	addgt	r5, r5, r3
 8007cd8:	42b5      	cmp	r5, r6
 8007cda:	d11a      	bne.n	8007d12 <_printf_common+0xd2>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e008      	b.n	8007cf2 <_printf_common+0xb2>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	47c8      	blx	r9
 8007cea:	3001      	adds	r0, #1
 8007cec:	d103      	bne.n	8007cf6 <_printf_common+0xb6>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	3501      	adds	r5, #1
 8007cf8:	e7c1      	b.n	8007c7e <_printf_common+0x3e>
 8007cfa:	2030      	movs	r0, #48	@ 0x30
 8007cfc:	18e1      	adds	r1, r4, r3
 8007cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d08:	4422      	add	r2, r4
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d10:	e7c2      	b.n	8007c98 <_printf_common+0x58>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4622      	mov	r2, r4
 8007d16:	4641      	mov	r1, r8
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c8      	blx	r9
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d0e6      	beq.n	8007cee <_printf_common+0xae>
 8007d20:	3601      	adds	r6, #1
 8007d22:	e7d9      	b.n	8007cd8 <_printf_common+0x98>

08007d24 <_printf_i>:
 8007d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	7e0f      	ldrb	r7, [r1, #24]
 8007d2a:	4691      	mov	r9, r2
 8007d2c:	2f78      	cmp	r7, #120	@ 0x78
 8007d2e:	4680      	mov	r8, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	469a      	mov	sl, r3
 8007d34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d3a:	d807      	bhi.n	8007d4c <_printf_i+0x28>
 8007d3c:	2f62      	cmp	r7, #98	@ 0x62
 8007d3e:	d80a      	bhi.n	8007d56 <_printf_i+0x32>
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f000 80d3 	beq.w	8007eec <_printf_i+0x1c8>
 8007d46:	2f58      	cmp	r7, #88	@ 0x58
 8007d48:	f000 80ba 	beq.w	8007ec0 <_printf_i+0x19c>
 8007d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d54:	e03a      	b.n	8007dcc <_printf_i+0xa8>
 8007d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d5a:	2b15      	cmp	r3, #21
 8007d5c:	d8f6      	bhi.n	8007d4c <_printf_i+0x28>
 8007d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d64 <_printf_i+0x40>)
 8007d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dd1 	.word	0x08007dd1
 8007d6c:	08007d4d 	.word	0x08007d4d
 8007d70:	08007d4d 	.word	0x08007d4d
 8007d74:	08007d4d 	.word	0x08007d4d
 8007d78:	08007d4d 	.word	0x08007d4d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d4d 	.word	0x08007d4d
 8007d84:	08007d4d 	.word	0x08007d4d
 8007d88:	08007d4d 	.word	0x08007d4d
 8007d8c:	08007d4d 	.word	0x08007d4d
 8007d90:	08007ed3 	.word	0x08007ed3
 8007d94:	08007dfb 	.word	0x08007dfb
 8007d98:	08007e8d 	.word	0x08007e8d
 8007d9c:	08007d4d 	.word	0x08007d4d
 8007da0:	08007d4d 	.word	0x08007d4d
 8007da4:	08007ef5 	.word	0x08007ef5
 8007da8:	08007d4d 	.word	0x08007d4d
 8007dac:	08007dfb 	.word	0x08007dfb
 8007db0:	08007d4d 	.word	0x08007d4d
 8007db4:	08007d4d 	.word	0x08007d4d
 8007db8:	08007e95 	.word	0x08007e95
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6032      	str	r2, [r6, #0]
 8007dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e09e      	b.n	8007f0e <_printf_i+0x1ea>
 8007dd0:	6833      	ldr	r3, [r6, #0]
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	6031      	str	r1, [r6, #0]
 8007dd8:	0606      	lsls	r6, r0, #24
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0xbc>
 8007ddc:	681d      	ldr	r5, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <_printf_i+0xc4>
 8007de0:	0645      	lsls	r5, r0, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0xb8>
 8007de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	da03      	bge.n	8007df4 <_printf_i+0xd0>
 8007dec:	232d      	movs	r3, #45	@ 0x2d
 8007dee:	426d      	negs	r5, r5
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007df4:	230a      	movs	r3, #10
 8007df6:	4859      	ldr	r0, [pc, #356]	@ (8007f5c <_printf_i+0x238>)
 8007df8:	e011      	b.n	8007e1e <_printf_i+0xfa>
 8007dfa:	6821      	ldr	r1, [r4, #0]
 8007dfc:	6833      	ldr	r3, [r6, #0]
 8007dfe:	0608      	lsls	r0, r1, #24
 8007e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e04:	d402      	bmi.n	8007e0c <_printf_i+0xe8>
 8007e06:	0649      	lsls	r1, r1, #25
 8007e08:	bf48      	it	mi
 8007e0a:	b2ad      	uxthmi	r5, r5
 8007e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	bf14      	ite	ne
 8007e12:	230a      	movne	r3, #10
 8007e14:	2308      	moveq	r3, #8
 8007e16:	4851      	ldr	r0, [pc, #324]	@ (8007f5c <_printf_i+0x238>)
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e1e:	6866      	ldr	r6, [r4, #4]
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	bfa8      	it	ge
 8007e24:	6821      	ldrge	r1, [r4, #0]
 8007e26:	60a6      	str	r6, [r4, #8]
 8007e28:	bfa4      	itt	ge
 8007e2a:	f021 0104 	bicge.w	r1, r1, #4
 8007e2e:	6021      	strge	r1, [r4, #0]
 8007e30:	b90d      	cbnz	r5, 8007e36 <_printf_i+0x112>
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	d04b      	beq.n	8007ece <_printf_i+0x1aa>
 8007e36:	4616      	mov	r6, r2
 8007e38:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e3c:	fb03 5711 	mls	r7, r3, r1, r5
 8007e40:	5dc7      	ldrb	r7, [r0, r7]
 8007e42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e46:	462f      	mov	r7, r5
 8007e48:	42bb      	cmp	r3, r7
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	d9f4      	bls.n	8007e38 <_printf_i+0x114>
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d10b      	bne.n	8007e6a <_printf_i+0x146>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	07df      	lsls	r7, r3, #31
 8007e56:	d508      	bpl.n	8007e6a <_printf_i+0x146>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	6861      	ldr	r1, [r4, #4]
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	bfde      	ittt	le
 8007e60:	2330      	movle	r3, #48	@ 0x30
 8007e62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e66:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e6a:	1b92      	subs	r2, r2, r6
 8007e6c:	6122      	str	r2, [r4, #16]
 8007e6e:	464b      	mov	r3, r9
 8007e70:	4621      	mov	r1, r4
 8007e72:	4640      	mov	r0, r8
 8007e74:	f8cd a000 	str.w	sl, [sp]
 8007e78:	aa03      	add	r2, sp, #12
 8007e7a:	f7ff fee1 	bl	8007c40 <_printf_common>
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d14a      	bne.n	8007f18 <_printf_i+0x1f4>
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e86:	b004      	add	sp, #16
 8007e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	f043 0320 	orr.w	r3, r3, #32
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	2778      	movs	r7, #120	@ 0x78
 8007e96:	4832      	ldr	r0, [pc, #200]	@ (8007f60 <_printf_i+0x23c>)
 8007e98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	6831      	ldr	r1, [r6, #0]
 8007ea0:	061f      	lsls	r7, r3, #24
 8007ea2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ea6:	d402      	bmi.n	8007eae <_printf_i+0x18a>
 8007ea8:	065f      	lsls	r7, r3, #25
 8007eaa:	bf48      	it	mi
 8007eac:	b2ad      	uxthmi	r5, r5
 8007eae:	6031      	str	r1, [r6, #0]
 8007eb0:	07d9      	lsls	r1, r3, #31
 8007eb2:	bf44      	itt	mi
 8007eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8007eb8:	6023      	strmi	r3, [r4, #0]
 8007eba:	b11d      	cbz	r5, 8007ec4 <_printf_i+0x1a0>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	e7ab      	b.n	8007e18 <_printf_i+0xf4>
 8007ec0:	4826      	ldr	r0, [pc, #152]	@ (8007f5c <_printf_i+0x238>)
 8007ec2:	e7e9      	b.n	8007e98 <_printf_i+0x174>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	f023 0320 	bic.w	r3, r3, #32
 8007eca:	6023      	str	r3, [r4, #0]
 8007ecc:	e7f6      	b.n	8007ebc <_printf_i+0x198>
 8007ece:	4616      	mov	r6, r2
 8007ed0:	e7bd      	b.n	8007e4e <_printf_i+0x12a>
 8007ed2:	6833      	ldr	r3, [r6, #0]
 8007ed4:	6825      	ldr	r5, [r4, #0]
 8007ed6:	1d18      	adds	r0, r3, #4
 8007ed8:	6961      	ldr	r1, [r4, #20]
 8007eda:	6030      	str	r0, [r6, #0]
 8007edc:	062e      	lsls	r6, r5, #24
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	d501      	bpl.n	8007ee6 <_printf_i+0x1c2>
 8007ee2:	6019      	str	r1, [r3, #0]
 8007ee4:	e002      	b.n	8007eec <_printf_i+0x1c8>
 8007ee6:	0668      	lsls	r0, r5, #25
 8007ee8:	d5fb      	bpl.n	8007ee2 <_printf_i+0x1be>
 8007eea:	8019      	strh	r1, [r3, #0]
 8007eec:	2300      	movs	r3, #0
 8007eee:	4616      	mov	r6, r2
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	e7bc      	b.n	8007e6e <_printf_i+0x14a>
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	6032      	str	r2, [r6, #0]
 8007efc:	681e      	ldr	r6, [r3, #0]
 8007efe:	6862      	ldr	r2, [r4, #4]
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f9b4 	bl	800826e <memchr>
 8007f06:	b108      	cbz	r0, 8007f0c <_printf_i+0x1e8>
 8007f08:	1b80      	subs	r0, r0, r6
 8007f0a:	6060      	str	r0, [r4, #4]
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	2300      	movs	r3, #0
 8007f12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f16:	e7aa      	b.n	8007e6e <_printf_i+0x14a>
 8007f18:	4632      	mov	r2, r6
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	47d0      	blx	sl
 8007f22:	3001      	adds	r0, #1
 8007f24:	d0ad      	beq.n	8007e82 <_printf_i+0x15e>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	079b      	lsls	r3, r3, #30
 8007f2a:	d413      	bmi.n	8007f54 <_printf_i+0x230>
 8007f2c:	68e0      	ldr	r0, [r4, #12]
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	4298      	cmp	r0, r3
 8007f32:	bfb8      	it	lt
 8007f34:	4618      	movlt	r0, r3
 8007f36:	e7a6      	b.n	8007e86 <_printf_i+0x162>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4640      	mov	r0, r8
 8007f40:	47d0      	blx	sl
 8007f42:	3001      	adds	r0, #1
 8007f44:	d09d      	beq.n	8007e82 <_printf_i+0x15e>
 8007f46:	3501      	adds	r5, #1
 8007f48:	68e3      	ldr	r3, [r4, #12]
 8007f4a:	9903      	ldr	r1, [sp, #12]
 8007f4c:	1a5b      	subs	r3, r3, r1
 8007f4e:	42ab      	cmp	r3, r5
 8007f50:	dcf2      	bgt.n	8007f38 <_printf_i+0x214>
 8007f52:	e7eb      	b.n	8007f2c <_printf_i+0x208>
 8007f54:	2500      	movs	r5, #0
 8007f56:	f104 0619 	add.w	r6, r4, #25
 8007f5a:	e7f5      	b.n	8007f48 <_printf_i+0x224>
 8007f5c:	0800a28c 	.word	0x0800a28c
 8007f60:	0800a29d 	.word	0x0800a29d

08007f64 <std>:
 8007f64:	2300      	movs	r3, #0
 8007f66:	b510      	push	{r4, lr}
 8007f68:	4604      	mov	r4, r0
 8007f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f72:	6083      	str	r3, [r0, #8]
 8007f74:	8181      	strh	r1, [r0, #12]
 8007f76:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f78:	81c2      	strh	r2, [r0, #14]
 8007f7a:	6183      	str	r3, [r0, #24]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	2208      	movs	r2, #8
 8007f80:	305c      	adds	r0, #92	@ 0x5c
 8007f82:	f000 f8f4 	bl	800816e <memset>
 8007f86:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <std+0x58>)
 8007f88:	6224      	str	r4, [r4, #32]
 8007f8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc0 <std+0x5c>)
 8007f8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f90:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <std+0x60>)
 8007f92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f94:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc8 <std+0x64>)
 8007f96:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f98:	4b0c      	ldr	r3, [pc, #48]	@ (8007fcc <std+0x68>)
 8007f9a:	429c      	cmp	r4, r3
 8007f9c:	d006      	beq.n	8007fac <std+0x48>
 8007f9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fa2:	4294      	cmp	r4, r2
 8007fa4:	d002      	beq.n	8007fac <std+0x48>
 8007fa6:	33d0      	adds	r3, #208	@ 0xd0
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d105      	bne.n	8007fb8 <std+0x54>
 8007fac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f000 b958 	b.w	8008268 <__retarget_lock_init_recursive>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	080080e9 	.word	0x080080e9
 8007fc0:	0800810b 	.word	0x0800810b
 8007fc4:	08008143 	.word	0x08008143
 8007fc8:	08008167 	.word	0x08008167
 8007fcc:	20000e24 	.word	0x20000e24

08007fd0 <stdio_exit_handler>:
 8007fd0:	4a02      	ldr	r2, [pc, #8]	@ (8007fdc <stdio_exit_handler+0xc>)
 8007fd2:	4903      	ldr	r1, [pc, #12]	@ (8007fe0 <stdio_exit_handler+0x10>)
 8007fd4:	4803      	ldr	r0, [pc, #12]	@ (8007fe4 <stdio_exit_handler+0x14>)
 8007fd6:	f000 b869 	b.w	80080ac <_fwalk_sglue>
 8007fda:	bf00      	nop
 8007fdc:	200000c0 	.word	0x200000c0
 8007fe0:	08009955 	.word	0x08009955
 8007fe4:	200000d0 	.word	0x200000d0

08007fe8 <cleanup_stdio>:
 8007fe8:	6841      	ldr	r1, [r0, #4]
 8007fea:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <cleanup_stdio+0x34>)
 8007fec:	b510      	push	{r4, lr}
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	d001      	beq.n	8007ff8 <cleanup_stdio+0x10>
 8007ff4:	f001 fcae 	bl	8009954 <_fflush_r>
 8007ff8:	68a1      	ldr	r1, [r4, #8]
 8007ffa:	4b09      	ldr	r3, [pc, #36]	@ (8008020 <cleanup_stdio+0x38>)
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	d002      	beq.n	8008006 <cleanup_stdio+0x1e>
 8008000:	4620      	mov	r0, r4
 8008002:	f001 fca7 	bl	8009954 <_fflush_r>
 8008006:	68e1      	ldr	r1, [r4, #12]
 8008008:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <cleanup_stdio+0x3c>)
 800800a:	4299      	cmp	r1, r3
 800800c:	d004      	beq.n	8008018 <cleanup_stdio+0x30>
 800800e:	4620      	mov	r0, r4
 8008010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008014:	f001 bc9e 	b.w	8009954 <_fflush_r>
 8008018:	bd10      	pop	{r4, pc}
 800801a:	bf00      	nop
 800801c:	20000e24 	.word	0x20000e24
 8008020:	20000e8c 	.word	0x20000e8c
 8008024:	20000ef4 	.word	0x20000ef4

08008028 <global_stdio_init.part.0>:
 8008028:	b510      	push	{r4, lr}
 800802a:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <global_stdio_init.part.0+0x30>)
 800802c:	4c0b      	ldr	r4, [pc, #44]	@ (800805c <global_stdio_init.part.0+0x34>)
 800802e:	4a0c      	ldr	r2, [pc, #48]	@ (8008060 <global_stdio_init.part.0+0x38>)
 8008030:	4620      	mov	r0, r4
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	2104      	movs	r1, #4
 8008036:	2200      	movs	r2, #0
 8008038:	f7ff ff94 	bl	8007f64 <std>
 800803c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008040:	2201      	movs	r2, #1
 8008042:	2109      	movs	r1, #9
 8008044:	f7ff ff8e 	bl	8007f64 <std>
 8008048:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800804c:	2202      	movs	r2, #2
 800804e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008052:	2112      	movs	r1, #18
 8008054:	f7ff bf86 	b.w	8007f64 <std>
 8008058:	20000f5c 	.word	0x20000f5c
 800805c:	20000e24 	.word	0x20000e24
 8008060:	08007fd1 	.word	0x08007fd1

08008064 <__sfp_lock_acquire>:
 8008064:	4801      	ldr	r0, [pc, #4]	@ (800806c <__sfp_lock_acquire+0x8>)
 8008066:	f000 b900 	b.w	800826a <__retarget_lock_acquire_recursive>
 800806a:	bf00      	nop
 800806c:	20000f65 	.word	0x20000f65

08008070 <__sfp_lock_release>:
 8008070:	4801      	ldr	r0, [pc, #4]	@ (8008078 <__sfp_lock_release+0x8>)
 8008072:	f000 b8fb 	b.w	800826c <__retarget_lock_release_recursive>
 8008076:	bf00      	nop
 8008078:	20000f65 	.word	0x20000f65

0800807c <__sinit>:
 800807c:	b510      	push	{r4, lr}
 800807e:	4604      	mov	r4, r0
 8008080:	f7ff fff0 	bl	8008064 <__sfp_lock_acquire>
 8008084:	6a23      	ldr	r3, [r4, #32]
 8008086:	b11b      	cbz	r3, 8008090 <__sinit+0x14>
 8008088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800808c:	f7ff bff0 	b.w	8008070 <__sfp_lock_release>
 8008090:	4b04      	ldr	r3, [pc, #16]	@ (80080a4 <__sinit+0x28>)
 8008092:	6223      	str	r3, [r4, #32]
 8008094:	4b04      	ldr	r3, [pc, #16]	@ (80080a8 <__sinit+0x2c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f5      	bne.n	8008088 <__sinit+0xc>
 800809c:	f7ff ffc4 	bl	8008028 <global_stdio_init.part.0>
 80080a0:	e7f2      	b.n	8008088 <__sinit+0xc>
 80080a2:	bf00      	nop
 80080a4:	08007fe9 	.word	0x08007fe9
 80080a8:	20000f5c 	.word	0x20000f5c

080080ac <_fwalk_sglue>:
 80080ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b0:	4607      	mov	r7, r0
 80080b2:	4688      	mov	r8, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	2600      	movs	r6, #0
 80080b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080bc:	f1b9 0901 	subs.w	r9, r9, #1
 80080c0:	d505      	bpl.n	80080ce <_fwalk_sglue+0x22>
 80080c2:	6824      	ldr	r4, [r4, #0]
 80080c4:	2c00      	cmp	r4, #0
 80080c6:	d1f7      	bne.n	80080b8 <_fwalk_sglue+0xc>
 80080c8:	4630      	mov	r0, r6
 80080ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d907      	bls.n	80080e4 <_fwalk_sglue+0x38>
 80080d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080d8:	3301      	adds	r3, #1
 80080da:	d003      	beq.n	80080e4 <_fwalk_sglue+0x38>
 80080dc:	4629      	mov	r1, r5
 80080de:	4638      	mov	r0, r7
 80080e0:	47c0      	blx	r8
 80080e2:	4306      	orrs	r6, r0
 80080e4:	3568      	adds	r5, #104	@ 0x68
 80080e6:	e7e9      	b.n	80080bc <_fwalk_sglue+0x10>

080080e8 <__sread>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	460c      	mov	r4, r1
 80080ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f0:	f000 f86c 	bl	80081cc <_read_r>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	bfab      	itete	ge
 80080f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080fa:	89a3      	ldrhlt	r3, [r4, #12]
 80080fc:	181b      	addge	r3, r3, r0
 80080fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008102:	bfac      	ite	ge
 8008104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008106:	81a3      	strhlt	r3, [r4, #12]
 8008108:	bd10      	pop	{r4, pc}

0800810a <__swrite>:
 800810a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810e:	461f      	mov	r7, r3
 8008110:	898b      	ldrh	r3, [r1, #12]
 8008112:	4605      	mov	r5, r0
 8008114:	05db      	lsls	r3, r3, #23
 8008116:	460c      	mov	r4, r1
 8008118:	4616      	mov	r6, r2
 800811a:	d505      	bpl.n	8008128 <__swrite+0x1e>
 800811c:	2302      	movs	r3, #2
 800811e:	2200      	movs	r2, #0
 8008120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008124:	f000 f840 	bl	80081a8 <_lseek_r>
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	4632      	mov	r2, r6
 800812c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	4628      	mov	r0, r5
 8008134:	463b      	mov	r3, r7
 8008136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813e:	f000 b857 	b.w	80081f0 <_write_r>

08008142 <__sseek>:
 8008142:	b510      	push	{r4, lr}
 8008144:	460c      	mov	r4, r1
 8008146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814a:	f000 f82d 	bl	80081a8 <_lseek_r>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	bf15      	itete	ne
 8008154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800815a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800815e:	81a3      	strheq	r3, [r4, #12]
 8008160:	bf18      	it	ne
 8008162:	81a3      	strhne	r3, [r4, #12]
 8008164:	bd10      	pop	{r4, pc}

08008166 <__sclose>:
 8008166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816a:	f000 b80d 	b.w	8008188 <_close_r>

0800816e <memset>:
 800816e:	4603      	mov	r3, r0
 8008170:	4402      	add	r2, r0
 8008172:	4293      	cmp	r3, r2
 8008174:	d100      	bne.n	8008178 <memset+0xa>
 8008176:	4770      	bx	lr
 8008178:	f803 1b01 	strb.w	r1, [r3], #1
 800817c:	e7f9      	b.n	8008172 <memset+0x4>
	...

08008180 <_localeconv_r>:
 8008180:	4800      	ldr	r0, [pc, #0]	@ (8008184 <_localeconv_r+0x4>)
 8008182:	4770      	bx	lr
 8008184:	2000020c 	.word	0x2000020c

08008188 <_close_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	2300      	movs	r3, #0
 800818c:	4d05      	ldr	r5, [pc, #20]	@ (80081a4 <_close_r+0x1c>)
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7fb ff45 	bl	8004022 <_close>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_close_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_close_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20000f60 	.word	0x20000f60

080081a8 <_lseek_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4604      	mov	r4, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	4611      	mov	r1, r2
 80081b0:	2200      	movs	r2, #0
 80081b2:	4d05      	ldr	r5, [pc, #20]	@ (80081c8 <_lseek_r+0x20>)
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7fb ff57 	bl	800406a <_lseek>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_lseek_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_lseek_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000f60 	.word	0x20000f60

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	4611      	mov	r1, r2
 80081d4:	2200      	movs	r2, #0
 80081d6:	4d05      	ldr	r5, [pc, #20]	@ (80081ec <_read_r+0x20>)
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7fb fee8 	bl	8003fb0 <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	20000f60 	.word	0x20000f60

080081f0 <_write_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	4608      	mov	r0, r1
 80081f6:	4611      	mov	r1, r2
 80081f8:	2200      	movs	r2, #0
 80081fa:	4d05      	ldr	r5, [pc, #20]	@ (8008210 <_write_r+0x20>)
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7fb fef3 	bl	8003fea <_write>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_write_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_write_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	20000f60 	.word	0x20000f60

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	@ (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	200000cc 	.word	0x200000cc

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	2600      	movs	r6, #0
 8008224:	4d0c      	ldr	r5, [pc, #48]	@ (8008258 <__libc_init_array+0x38>)
 8008226:	4c0d      	ldr	r4, [pc, #52]	@ (800825c <__libc_init_array+0x3c>)
 8008228:	1b64      	subs	r4, r4, r5
 800822a:	10a4      	asrs	r4, r4, #2
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	f001 fece 	bl	8009fd0 <_init>
 8008234:	2600      	movs	r6, #0
 8008236:	4d0a      	ldr	r5, [pc, #40]	@ (8008260 <__libc_init_array+0x40>)
 8008238:	4c0a      	ldr	r4, [pc, #40]	@ (8008264 <__libc_init_array+0x44>)
 800823a:	1b64      	subs	r4, r4, r5
 800823c:	10a4      	asrs	r4, r4, #2
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f855 3b04 	ldr.w	r3, [r5], #4
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	0800a5f0 	.word	0x0800a5f0
 800825c:	0800a5f0 	.word	0x0800a5f0
 8008260:	0800a5f0 	.word	0x0800a5f0
 8008264:	0800a5f8 	.word	0x0800a5f8

08008268 <__retarget_lock_init_recursive>:
 8008268:	4770      	bx	lr

0800826a <__retarget_lock_acquire_recursive>:
 800826a:	4770      	bx	lr

0800826c <__retarget_lock_release_recursive>:
 800826c:	4770      	bx	lr

0800826e <memchr>:
 800826e:	4603      	mov	r3, r0
 8008270:	b510      	push	{r4, lr}
 8008272:	b2c9      	uxtb	r1, r1
 8008274:	4402      	add	r2, r0
 8008276:	4293      	cmp	r3, r2
 8008278:	4618      	mov	r0, r3
 800827a:	d101      	bne.n	8008280 <memchr+0x12>
 800827c:	2000      	movs	r0, #0
 800827e:	e003      	b.n	8008288 <memchr+0x1a>
 8008280:	7804      	ldrb	r4, [r0, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	428c      	cmp	r4, r1
 8008286:	d1f6      	bne.n	8008276 <memchr+0x8>
 8008288:	bd10      	pop	{r4, pc}

0800828a <memcpy>:
 800828a:	440a      	add	r2, r1
 800828c:	4291      	cmp	r1, r2
 800828e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008292:	d100      	bne.n	8008296 <memcpy+0xc>
 8008294:	4770      	bx	lr
 8008296:	b510      	push	{r4, lr}
 8008298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829c:	4291      	cmp	r1, r2
 800829e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082a2:	d1f9      	bne.n	8008298 <memcpy+0xe>
 80082a4:	bd10      	pop	{r4, pc}

080082a6 <quorem>:
 80082a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	6903      	ldr	r3, [r0, #16]
 80082ac:	690c      	ldr	r4, [r1, #16]
 80082ae:	4607      	mov	r7, r0
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	db7e      	blt.n	80083b2 <quorem+0x10c>
 80082b4:	3c01      	subs	r4, #1
 80082b6:	00a3      	lsls	r3, r4, #2
 80082b8:	f100 0514 	add.w	r5, r0, #20
 80082bc:	f101 0814 	add.w	r8, r1, #20
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d0:	3301      	adds	r3, #1
 80082d2:	429a      	cmp	r2, r3
 80082d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082dc:	d32e      	bcc.n	800833c <quorem+0x96>
 80082de:	f04f 0a00 	mov.w	sl, #0
 80082e2:	46c4      	mov	ip, r8
 80082e4:	46ae      	mov	lr, r5
 80082e6:	46d3      	mov	fp, sl
 80082e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082ec:	b298      	uxth	r0, r3
 80082ee:	fb06 a000 	mla	r0, r6, r0, sl
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	0c02      	lsrs	r2, r0, #16
 80082f6:	fb06 2303 	mla	r3, r6, r3, r2
 80082fa:	f8de 2000 	ldr.w	r2, [lr]
 80082fe:	b280      	uxth	r0, r0
 8008300:	b292      	uxth	r2, r2
 8008302:	1a12      	subs	r2, r2, r0
 8008304:	445a      	add	r2, fp
 8008306:	f8de 0000 	ldr.w	r0, [lr]
 800830a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800830e:	b29b      	uxth	r3, r3
 8008310:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008314:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008318:	b292      	uxth	r2, r2
 800831a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800831e:	45e1      	cmp	r9, ip
 8008320:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008324:	f84e 2b04 	str.w	r2, [lr], #4
 8008328:	d2de      	bcs.n	80082e8 <quorem+0x42>
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	58eb      	ldr	r3, [r5, r3]
 800832e:	b92b      	cbnz	r3, 800833c <quorem+0x96>
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	3b04      	subs	r3, #4
 8008334:	429d      	cmp	r5, r3
 8008336:	461a      	mov	r2, r3
 8008338:	d32f      	bcc.n	800839a <quorem+0xf4>
 800833a:	613c      	str	r4, [r7, #16]
 800833c:	4638      	mov	r0, r7
 800833e:	f001 f979 	bl	8009634 <__mcmp>
 8008342:	2800      	cmp	r0, #0
 8008344:	db25      	blt.n	8008392 <quorem+0xec>
 8008346:	4629      	mov	r1, r5
 8008348:	2000      	movs	r0, #0
 800834a:	f858 2b04 	ldr.w	r2, [r8], #4
 800834e:	f8d1 c000 	ldr.w	ip, [r1]
 8008352:	fa1f fe82 	uxth.w	lr, r2
 8008356:	fa1f f38c 	uxth.w	r3, ip
 800835a:	eba3 030e 	sub.w	r3, r3, lr
 800835e:	4403      	add	r3, r0
 8008360:	0c12      	lsrs	r2, r2, #16
 8008362:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008366:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008370:	45c1      	cmp	r9, r8
 8008372:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008376:	f841 3b04 	str.w	r3, [r1], #4
 800837a:	d2e6      	bcs.n	800834a <quorem+0xa4>
 800837c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008380:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008384:	b922      	cbnz	r2, 8008390 <quorem+0xea>
 8008386:	3b04      	subs	r3, #4
 8008388:	429d      	cmp	r5, r3
 800838a:	461a      	mov	r2, r3
 800838c:	d30b      	bcc.n	80083a6 <quorem+0x100>
 800838e:	613c      	str	r4, [r7, #16]
 8008390:	3601      	adds	r6, #1
 8008392:	4630      	mov	r0, r6
 8008394:	b003      	add	sp, #12
 8008396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	3b04      	subs	r3, #4
 800839e:	2a00      	cmp	r2, #0
 80083a0:	d1cb      	bne.n	800833a <quorem+0x94>
 80083a2:	3c01      	subs	r4, #1
 80083a4:	e7c6      	b.n	8008334 <quorem+0x8e>
 80083a6:	6812      	ldr	r2, [r2, #0]
 80083a8:	3b04      	subs	r3, #4
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	d1ef      	bne.n	800838e <quorem+0xe8>
 80083ae:	3c01      	subs	r4, #1
 80083b0:	e7ea      	b.n	8008388 <quorem+0xe2>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7ee      	b.n	8008394 <quorem+0xee>
	...

080083b8 <_dtoa_r>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	4614      	mov	r4, r2
 80083be:	461d      	mov	r5, r3
 80083c0:	69c7      	ldr	r7, [r0, #28]
 80083c2:	b097      	sub	sp, #92	@ 0x5c
 80083c4:	4683      	mov	fp, r0
 80083c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80083cc:	b97f      	cbnz	r7, 80083ee <_dtoa_r+0x36>
 80083ce:	2010      	movs	r0, #16
 80083d0:	f000 fe02 	bl	8008fd8 <malloc>
 80083d4:	4602      	mov	r2, r0
 80083d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80083da:	b920      	cbnz	r0, 80083e6 <_dtoa_r+0x2e>
 80083dc:	21ef      	movs	r1, #239	@ 0xef
 80083de:	4ba8      	ldr	r3, [pc, #672]	@ (8008680 <_dtoa_r+0x2c8>)
 80083e0:	48a8      	ldr	r0, [pc, #672]	@ (8008684 <_dtoa_r+0x2cc>)
 80083e2:	f001 faef 	bl	80099c4 <__assert_func>
 80083e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083ea:	6007      	str	r7, [r0, #0]
 80083ec:	60c7      	str	r7, [r0, #12]
 80083ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	b159      	cbz	r1, 800840e <_dtoa_r+0x56>
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	2301      	movs	r3, #1
 80083fa:	4093      	lsls	r3, r2
 80083fc:	604a      	str	r2, [r1, #4]
 80083fe:	608b      	str	r3, [r1, #8]
 8008400:	4658      	mov	r0, fp
 8008402:	f000 fedf 	bl	80091c4 <_Bfree>
 8008406:	2200      	movs	r2, #0
 8008408:	f8db 301c 	ldr.w	r3, [fp, #28]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	1e2b      	subs	r3, r5, #0
 8008410:	bfaf      	iteee	ge
 8008412:	2300      	movge	r3, #0
 8008414:	2201      	movlt	r2, #1
 8008416:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800841a:	9303      	strlt	r3, [sp, #12]
 800841c:	bfa8      	it	ge
 800841e:	6033      	strge	r3, [r6, #0]
 8008420:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008424:	4b98      	ldr	r3, [pc, #608]	@ (8008688 <_dtoa_r+0x2d0>)
 8008426:	bfb8      	it	lt
 8008428:	6032      	strlt	r2, [r6, #0]
 800842a:	ea33 0308 	bics.w	r3, r3, r8
 800842e:	d112      	bne.n	8008456 <_dtoa_r+0x9e>
 8008430:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008434:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800843c:	4323      	orrs	r3, r4
 800843e:	f000 8550 	beq.w	8008ee2 <_dtoa_r+0xb2a>
 8008442:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008444:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800868c <_dtoa_r+0x2d4>
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8552 	beq.w	8008ef2 <_dtoa_r+0xb3a>
 800844e:	f10a 0303 	add.w	r3, sl, #3
 8008452:	f000 bd4c 	b.w	8008eee <_dtoa_r+0xb36>
 8008456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800845a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800845e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	f7f8 fa9f 	bl	80009a8 <__aeabi_dcmpeq>
 800846a:	4607      	mov	r7, r0
 800846c:	b158      	cbz	r0, 8008486 <_dtoa_r+0xce>
 800846e:	2301      	movs	r3, #1
 8008470:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008476:	b113      	cbz	r3, 800847e <_dtoa_r+0xc6>
 8008478:	4b85      	ldr	r3, [pc, #532]	@ (8008690 <_dtoa_r+0x2d8>)
 800847a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008694 <_dtoa_r+0x2dc>
 8008482:	f000 bd36 	b.w	8008ef2 <_dtoa_r+0xb3a>
 8008486:	ab14      	add	r3, sp, #80	@ 0x50
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	ab15      	add	r3, sp, #84	@ 0x54
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	4658      	mov	r0, fp
 8008490:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008494:	f001 f97e 	bl	8009794 <__d2b>
 8008498:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800849c:	4681      	mov	r9, r0
 800849e:	2e00      	cmp	r6, #0
 80084a0:	d077      	beq.n	8008592 <_dtoa_r+0x1da>
 80084a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80084ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80084b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80084b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80084ba:	4619      	mov	r1, r3
 80084bc:	2200      	movs	r2, #0
 80084be:	4b76      	ldr	r3, [pc, #472]	@ (8008698 <_dtoa_r+0x2e0>)
 80084c0:	f7f7 fe52 	bl	8000168 <__aeabi_dsub>
 80084c4:	a368      	add	r3, pc, #416	@ (adr r3, 8008668 <_dtoa_r+0x2b0>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f8 f805 	bl	80004d8 <__aeabi_dmul>
 80084ce:	a368      	add	r3, pc, #416	@ (adr r3, 8008670 <_dtoa_r+0x2b8>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f7 fe4a 	bl	800016c <__adddf3>
 80084d8:	4604      	mov	r4, r0
 80084da:	4630      	mov	r0, r6
 80084dc:	460d      	mov	r5, r1
 80084de:	f7f7 ff91 	bl	8000404 <__aeabi_i2d>
 80084e2:	a365      	add	r3, pc, #404	@ (adr r3, 8008678 <_dtoa_r+0x2c0>)
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f7f7 fff6 	bl	80004d8 <__aeabi_dmul>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f7 fe3a 	bl	800016c <__adddf3>
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	f7f8 fa9c 	bl	8000a38 <__aeabi_d2iz>
 8008500:	2200      	movs	r2, #0
 8008502:	4607      	mov	r7, r0
 8008504:	2300      	movs	r3, #0
 8008506:	4620      	mov	r0, r4
 8008508:	4629      	mov	r1, r5
 800850a:	f7f8 fa57 	bl	80009bc <__aeabi_dcmplt>
 800850e:	b140      	cbz	r0, 8008522 <_dtoa_r+0x16a>
 8008510:	4638      	mov	r0, r7
 8008512:	f7f7 ff77 	bl	8000404 <__aeabi_i2d>
 8008516:	4622      	mov	r2, r4
 8008518:	462b      	mov	r3, r5
 800851a:	f7f8 fa45 	bl	80009a8 <__aeabi_dcmpeq>
 800851e:	b900      	cbnz	r0, 8008522 <_dtoa_r+0x16a>
 8008520:	3f01      	subs	r7, #1
 8008522:	2f16      	cmp	r7, #22
 8008524:	d853      	bhi.n	80085ce <_dtoa_r+0x216>
 8008526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800852a:	4b5c      	ldr	r3, [pc, #368]	@ (800869c <_dtoa_r+0x2e4>)
 800852c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f8 fa42 	bl	80009bc <__aeabi_dcmplt>
 8008538:	2800      	cmp	r0, #0
 800853a:	d04a      	beq.n	80085d2 <_dtoa_r+0x21a>
 800853c:	2300      	movs	r3, #0
 800853e:	3f01      	subs	r7, #1
 8008540:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008542:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008544:	1b9b      	subs	r3, r3, r6
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	bf46      	itte	mi
 800854a:	f1c3 0801 	rsbmi	r8, r3, #1
 800854e:	2300      	movmi	r3, #0
 8008550:	f04f 0800 	movpl.w	r8, #0
 8008554:	9209      	str	r2, [sp, #36]	@ 0x24
 8008556:	bf48      	it	mi
 8008558:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800855a:	2f00      	cmp	r7, #0
 800855c:	db3b      	blt.n	80085d6 <_dtoa_r+0x21e>
 800855e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008560:	970e      	str	r7, [sp, #56]	@ 0x38
 8008562:	443b      	add	r3, r7
 8008564:	9309      	str	r3, [sp, #36]	@ 0x24
 8008566:	2300      	movs	r3, #0
 8008568:	930a      	str	r3, [sp, #40]	@ 0x28
 800856a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800856c:	2b09      	cmp	r3, #9
 800856e:	d866      	bhi.n	800863e <_dtoa_r+0x286>
 8008570:	2b05      	cmp	r3, #5
 8008572:	bfc4      	itt	gt
 8008574:	3b04      	subgt	r3, #4
 8008576:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008578:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800857a:	bfc8      	it	gt
 800857c:	2400      	movgt	r4, #0
 800857e:	f1a3 0302 	sub.w	r3, r3, #2
 8008582:	bfd8      	it	le
 8008584:	2401      	movle	r4, #1
 8008586:	2b03      	cmp	r3, #3
 8008588:	d864      	bhi.n	8008654 <_dtoa_r+0x29c>
 800858a:	e8df f003 	tbb	[pc, r3]
 800858e:	382b      	.short	0x382b
 8008590:	5636      	.short	0x5636
 8008592:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008596:	441e      	add	r6, r3
 8008598:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800859c:	2b20      	cmp	r3, #32
 800859e:	bfc1      	itttt	gt
 80085a0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80085a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80085a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80085ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 80085b0:	bfd6      	itet	le
 80085b2:	f1c3 0320 	rsble	r3, r3, #32
 80085b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80085ba:	fa04 f003 	lslle.w	r0, r4, r3
 80085be:	f7f7 ff11 	bl	80003e4 <__aeabi_ui2d>
 80085c2:	2201      	movs	r2, #1
 80085c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80085c8:	3e01      	subs	r6, #1
 80085ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80085cc:	e775      	b.n	80084ba <_dtoa_r+0x102>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e7b6      	b.n	8008540 <_dtoa_r+0x188>
 80085d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80085d4:	e7b5      	b.n	8008542 <_dtoa_r+0x18a>
 80085d6:	427b      	negs	r3, r7
 80085d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085da:	2300      	movs	r3, #0
 80085dc:	eba8 0807 	sub.w	r8, r8, r7
 80085e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80085e2:	e7c2      	b.n	800856a <_dtoa_r+0x1b2>
 80085e4:	2300      	movs	r3, #0
 80085e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dc35      	bgt.n	800865a <_dtoa_r+0x2a2>
 80085ee:	2301      	movs	r3, #1
 80085f0:	461a      	mov	r2, r3
 80085f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80085f6:	9221      	str	r2, [sp, #132]	@ 0x84
 80085f8:	e00b      	b.n	8008612 <_dtoa_r+0x25a>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e7f3      	b.n	80085e6 <_dtoa_r+0x22e>
 80085fe:	2300      	movs	r3, #0
 8008600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008604:	18fb      	adds	r3, r7, r3
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	3301      	adds	r3, #1
 800860a:	2b01      	cmp	r3, #1
 800860c:	9307      	str	r3, [sp, #28]
 800860e:	bfb8      	it	lt
 8008610:	2301      	movlt	r3, #1
 8008612:	2100      	movs	r1, #0
 8008614:	2204      	movs	r2, #4
 8008616:	f8db 001c 	ldr.w	r0, [fp, #28]
 800861a:	f102 0514 	add.w	r5, r2, #20
 800861e:	429d      	cmp	r5, r3
 8008620:	d91f      	bls.n	8008662 <_dtoa_r+0x2aa>
 8008622:	6041      	str	r1, [r0, #4]
 8008624:	4658      	mov	r0, fp
 8008626:	f000 fd8d 	bl	8009144 <_Balloc>
 800862a:	4682      	mov	sl, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	d139      	bne.n	80086a4 <_dtoa_r+0x2ec>
 8008630:	4602      	mov	r2, r0
 8008632:	f240 11af 	movw	r1, #431	@ 0x1af
 8008636:	4b1a      	ldr	r3, [pc, #104]	@ (80086a0 <_dtoa_r+0x2e8>)
 8008638:	e6d2      	b.n	80083e0 <_dtoa_r+0x28>
 800863a:	2301      	movs	r3, #1
 800863c:	e7e0      	b.n	8008600 <_dtoa_r+0x248>
 800863e:	2401      	movs	r4, #1
 8008640:	2300      	movs	r3, #0
 8008642:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008644:	9320      	str	r3, [sp, #128]	@ 0x80
 8008646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800864a:	2200      	movs	r2, #0
 800864c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008650:	2312      	movs	r3, #18
 8008652:	e7d0      	b.n	80085f6 <_dtoa_r+0x23e>
 8008654:	2301      	movs	r3, #1
 8008656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008658:	e7f5      	b.n	8008646 <_dtoa_r+0x28e>
 800865a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800865c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008660:	e7d7      	b.n	8008612 <_dtoa_r+0x25a>
 8008662:	3101      	adds	r1, #1
 8008664:	0052      	lsls	r2, r2, #1
 8008666:	e7d8      	b.n	800861a <_dtoa_r+0x262>
 8008668:	636f4361 	.word	0x636f4361
 800866c:	3fd287a7 	.word	0x3fd287a7
 8008670:	8b60c8b3 	.word	0x8b60c8b3
 8008674:	3fc68a28 	.word	0x3fc68a28
 8008678:	509f79fb 	.word	0x509f79fb
 800867c:	3fd34413 	.word	0x3fd34413
 8008680:	0800a2bb 	.word	0x0800a2bb
 8008684:	0800a2d2 	.word	0x0800a2d2
 8008688:	7ff00000 	.word	0x7ff00000
 800868c:	0800a2b7 	.word	0x0800a2b7
 8008690:	0800a28b 	.word	0x0800a28b
 8008694:	0800a28a 	.word	0x0800a28a
 8008698:	3ff80000 	.word	0x3ff80000
 800869c:	0800a3c8 	.word	0x0800a3c8
 80086a0:	0800a32a 	.word	0x0800a32a
 80086a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086a8:	6018      	str	r0, [r3, #0]
 80086aa:	9b07      	ldr	r3, [sp, #28]
 80086ac:	2b0e      	cmp	r3, #14
 80086ae:	f200 80a4 	bhi.w	80087fa <_dtoa_r+0x442>
 80086b2:	2c00      	cmp	r4, #0
 80086b4:	f000 80a1 	beq.w	80087fa <_dtoa_r+0x442>
 80086b8:	2f00      	cmp	r7, #0
 80086ba:	dd33      	ble.n	8008724 <_dtoa_r+0x36c>
 80086bc:	4b86      	ldr	r3, [pc, #536]	@ (80088d8 <_dtoa_r+0x520>)
 80086be:	f007 020f 	and.w	r2, r7, #15
 80086c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086c6:	05f8      	lsls	r0, r7, #23
 80086c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086d4:	d516      	bpl.n	8008704 <_dtoa_r+0x34c>
 80086d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086da:	4b80      	ldr	r3, [pc, #512]	@ (80088dc <_dtoa_r+0x524>)
 80086dc:	2603      	movs	r6, #3
 80086de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086e2:	f7f8 f823 	bl	800072c <__aeabi_ddiv>
 80086e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ea:	f004 040f 	and.w	r4, r4, #15
 80086ee:	4d7b      	ldr	r5, [pc, #492]	@ (80088dc <_dtoa_r+0x524>)
 80086f0:	b954      	cbnz	r4, 8008708 <_dtoa_r+0x350>
 80086f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086fa:	f7f8 f817 	bl	800072c <__aeabi_ddiv>
 80086fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008702:	e028      	b.n	8008756 <_dtoa_r+0x39e>
 8008704:	2602      	movs	r6, #2
 8008706:	e7f2      	b.n	80086ee <_dtoa_r+0x336>
 8008708:	07e1      	lsls	r1, r4, #31
 800870a:	d508      	bpl.n	800871e <_dtoa_r+0x366>
 800870c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008710:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008714:	f7f7 fee0 	bl	80004d8 <__aeabi_dmul>
 8008718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800871c:	3601      	adds	r6, #1
 800871e:	1064      	asrs	r4, r4, #1
 8008720:	3508      	adds	r5, #8
 8008722:	e7e5      	b.n	80086f0 <_dtoa_r+0x338>
 8008724:	f000 80d2 	beq.w	80088cc <_dtoa_r+0x514>
 8008728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800872c:	427c      	negs	r4, r7
 800872e:	4b6a      	ldr	r3, [pc, #424]	@ (80088d8 <_dtoa_r+0x520>)
 8008730:	f004 020f 	and.w	r2, r4, #15
 8008734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	f7f7 fecc 	bl	80004d8 <__aeabi_dmul>
 8008740:	2602      	movs	r6, #2
 8008742:	2300      	movs	r3, #0
 8008744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008748:	4d64      	ldr	r5, [pc, #400]	@ (80088dc <_dtoa_r+0x524>)
 800874a:	1124      	asrs	r4, r4, #4
 800874c:	2c00      	cmp	r4, #0
 800874e:	f040 80b2 	bne.w	80088b6 <_dtoa_r+0x4fe>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1d3      	bne.n	80086fe <_dtoa_r+0x346>
 8008756:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800875a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80b7 	beq.w	80088d0 <_dtoa_r+0x518>
 8008762:	2200      	movs	r2, #0
 8008764:	4620      	mov	r0, r4
 8008766:	4629      	mov	r1, r5
 8008768:	4b5d      	ldr	r3, [pc, #372]	@ (80088e0 <_dtoa_r+0x528>)
 800876a:	f7f8 f927 	bl	80009bc <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f000 80ae 	beq.w	80088d0 <_dtoa_r+0x518>
 8008774:	9b07      	ldr	r3, [sp, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80aa 	beq.w	80088d0 <_dtoa_r+0x518>
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dd37      	ble.n	80087f2 <_dtoa_r+0x43a>
 8008782:	1e7b      	subs	r3, r7, #1
 8008784:	4620      	mov	r0, r4
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	2200      	movs	r2, #0
 800878a:	4629      	mov	r1, r5
 800878c:	4b55      	ldr	r3, [pc, #340]	@ (80088e4 <_dtoa_r+0x52c>)
 800878e:	f7f7 fea3 	bl	80004d8 <__aeabi_dmul>
 8008792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008796:	9c08      	ldr	r4, [sp, #32]
 8008798:	3601      	adds	r6, #1
 800879a:	4630      	mov	r0, r6
 800879c:	f7f7 fe32 	bl	8000404 <__aeabi_i2d>
 80087a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a4:	f7f7 fe98 	bl	80004d8 <__aeabi_dmul>
 80087a8:	2200      	movs	r2, #0
 80087aa:	4b4f      	ldr	r3, [pc, #316]	@ (80088e8 <_dtoa_r+0x530>)
 80087ac:	f7f7 fcde 	bl	800016c <__adddf3>
 80087b0:	4605      	mov	r5, r0
 80087b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80087b6:	2c00      	cmp	r4, #0
 80087b8:	f040 809a 	bne.w	80088f0 <_dtoa_r+0x538>
 80087bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c0:	2200      	movs	r2, #0
 80087c2:	4b4a      	ldr	r3, [pc, #296]	@ (80088ec <_dtoa_r+0x534>)
 80087c4:	f7f7 fcd0 	bl	8000168 <__aeabi_dsub>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087d0:	462a      	mov	r2, r5
 80087d2:	4633      	mov	r3, r6
 80087d4:	f7f8 f910 	bl	80009f8 <__aeabi_dcmpgt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	f040 828e 	bne.w	8008cfa <_dtoa_r+0x942>
 80087de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e2:	462a      	mov	r2, r5
 80087e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087e8:	f7f8 f8e8 	bl	80009bc <__aeabi_dcmplt>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f040 8127 	bne.w	8008a40 <_dtoa_r+0x688>
 80087f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80087f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f2c0 8163 	blt.w	8008ac8 <_dtoa_r+0x710>
 8008802:	2f0e      	cmp	r7, #14
 8008804:	f300 8160 	bgt.w	8008ac8 <_dtoa_r+0x710>
 8008808:	4b33      	ldr	r3, [pc, #204]	@ (80088d8 <_dtoa_r+0x520>)
 800880a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800880e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008812:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008816:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008818:	2b00      	cmp	r3, #0
 800881a:	da03      	bge.n	8008824 <_dtoa_r+0x46c>
 800881c:	9b07      	ldr	r3, [sp, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f340 8100 	ble.w	8008a24 <_dtoa_r+0x66c>
 8008824:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008828:	4656      	mov	r6, sl
 800882a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	f7f7 ff7b 	bl	800072c <__aeabi_ddiv>
 8008836:	f7f8 f8ff 	bl	8000a38 <__aeabi_d2iz>
 800883a:	4680      	mov	r8, r0
 800883c:	f7f7 fde2 	bl	8000404 <__aeabi_i2d>
 8008840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008844:	f7f7 fe48 	bl	80004d8 <__aeabi_dmul>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f7 fc8a 	bl	8000168 <__aeabi_dsub>
 8008854:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008858:	9d07      	ldr	r5, [sp, #28]
 800885a:	f806 4b01 	strb.w	r4, [r6], #1
 800885e:	eba6 040a 	sub.w	r4, r6, sl
 8008862:	42a5      	cmp	r5, r4
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	f040 8116 	bne.w	8008a98 <_dtoa_r+0x6e0>
 800886c:	f7f7 fc7e 	bl	800016c <__adddf3>
 8008870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008874:	4604      	mov	r4, r0
 8008876:	460d      	mov	r5, r1
 8008878:	f7f8 f8be 	bl	80009f8 <__aeabi_dcmpgt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f040 80f8 	bne.w	8008a72 <_dtoa_r+0x6ba>
 8008882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f8 f88d 	bl	80009a8 <__aeabi_dcmpeq>
 800888e:	b118      	cbz	r0, 8008898 <_dtoa_r+0x4e0>
 8008890:	f018 0f01 	tst.w	r8, #1
 8008894:	f040 80ed 	bne.w	8008a72 <_dtoa_r+0x6ba>
 8008898:	4649      	mov	r1, r9
 800889a:	4658      	mov	r0, fp
 800889c:	f000 fc92 	bl	80091c4 <_Bfree>
 80088a0:	2300      	movs	r3, #0
 80088a2:	7033      	strb	r3, [r6, #0]
 80088a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80088a6:	3701      	adds	r7, #1
 80088a8:	601f      	str	r7, [r3, #0]
 80088aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8320 	beq.w	8008ef2 <_dtoa_r+0xb3a>
 80088b2:	601e      	str	r6, [r3, #0]
 80088b4:	e31d      	b.n	8008ef2 <_dtoa_r+0xb3a>
 80088b6:	07e2      	lsls	r2, r4, #31
 80088b8:	d505      	bpl.n	80088c6 <_dtoa_r+0x50e>
 80088ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088be:	f7f7 fe0b 	bl	80004d8 <__aeabi_dmul>
 80088c2:	2301      	movs	r3, #1
 80088c4:	3601      	adds	r6, #1
 80088c6:	1064      	asrs	r4, r4, #1
 80088c8:	3508      	adds	r5, #8
 80088ca:	e73f      	b.n	800874c <_dtoa_r+0x394>
 80088cc:	2602      	movs	r6, #2
 80088ce:	e742      	b.n	8008756 <_dtoa_r+0x39e>
 80088d0:	9c07      	ldr	r4, [sp, #28]
 80088d2:	9704      	str	r7, [sp, #16]
 80088d4:	e761      	b.n	800879a <_dtoa_r+0x3e2>
 80088d6:	bf00      	nop
 80088d8:	0800a3c8 	.word	0x0800a3c8
 80088dc:	0800a3a0 	.word	0x0800a3a0
 80088e0:	3ff00000 	.word	0x3ff00000
 80088e4:	40240000 	.word	0x40240000
 80088e8:	401c0000 	.word	0x401c0000
 80088ec:	40140000 	.word	0x40140000
 80088f0:	4b70      	ldr	r3, [pc, #448]	@ (8008ab4 <_dtoa_r+0x6fc>)
 80088f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088fc:	4454      	add	r4, sl
 80088fe:	2900      	cmp	r1, #0
 8008900:	d045      	beq.n	800898e <_dtoa_r+0x5d6>
 8008902:	2000      	movs	r0, #0
 8008904:	496c      	ldr	r1, [pc, #432]	@ (8008ab8 <_dtoa_r+0x700>)
 8008906:	f7f7 ff11 	bl	800072c <__aeabi_ddiv>
 800890a:	4633      	mov	r3, r6
 800890c:	462a      	mov	r2, r5
 800890e:	f7f7 fc2b 	bl	8000168 <__aeabi_dsub>
 8008912:	4656      	mov	r6, sl
 8008914:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891c:	f7f8 f88c 	bl	8000a38 <__aeabi_d2iz>
 8008920:	4605      	mov	r5, r0
 8008922:	f7f7 fd6f 	bl	8000404 <__aeabi_i2d>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892e:	f7f7 fc1b 	bl	8000168 <__aeabi_dsub>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	3530      	adds	r5, #48	@ 0x30
 8008938:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800893c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008940:	f806 5b01 	strb.w	r5, [r6], #1
 8008944:	f7f8 f83a 	bl	80009bc <__aeabi_dcmplt>
 8008948:	2800      	cmp	r0, #0
 800894a:	d163      	bne.n	8008a14 <_dtoa_r+0x65c>
 800894c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008950:	2000      	movs	r0, #0
 8008952:	495a      	ldr	r1, [pc, #360]	@ (8008abc <_dtoa_r+0x704>)
 8008954:	f7f7 fc08 	bl	8000168 <__aeabi_dsub>
 8008958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800895c:	f7f8 f82e 	bl	80009bc <__aeabi_dcmplt>
 8008960:	2800      	cmp	r0, #0
 8008962:	f040 8087 	bne.w	8008a74 <_dtoa_r+0x6bc>
 8008966:	42a6      	cmp	r6, r4
 8008968:	f43f af43 	beq.w	80087f2 <_dtoa_r+0x43a>
 800896c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008970:	2200      	movs	r2, #0
 8008972:	4b53      	ldr	r3, [pc, #332]	@ (8008ac0 <_dtoa_r+0x708>)
 8008974:	f7f7 fdb0 	bl	80004d8 <__aeabi_dmul>
 8008978:	2200      	movs	r2, #0
 800897a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800897e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008982:	4b4f      	ldr	r3, [pc, #316]	@ (8008ac0 <_dtoa_r+0x708>)
 8008984:	f7f7 fda8 	bl	80004d8 <__aeabi_dmul>
 8008988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800898c:	e7c4      	b.n	8008918 <_dtoa_r+0x560>
 800898e:	4631      	mov	r1, r6
 8008990:	4628      	mov	r0, r5
 8008992:	f7f7 fda1 	bl	80004d8 <__aeabi_dmul>
 8008996:	4656      	mov	r6, sl
 8008998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800899c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800899e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a2:	f7f8 f849 	bl	8000a38 <__aeabi_d2iz>
 80089a6:	4605      	mov	r5, r0
 80089a8:	f7f7 fd2c 	bl	8000404 <__aeabi_i2d>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b4:	f7f7 fbd8 	bl	8000168 <__aeabi_dsub>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	3530      	adds	r5, #48	@ 0x30
 80089be:	f806 5b01 	strb.w	r5, [r6], #1
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	d124      	bne.n	8008a18 <_dtoa_r+0x660>
 80089ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089d2:	4b39      	ldr	r3, [pc, #228]	@ (8008ab8 <_dtoa_r+0x700>)
 80089d4:	f7f7 fbca 	bl	800016c <__adddf3>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e0:	f7f8 f80a 	bl	80009f8 <__aeabi_dcmpgt>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d145      	bne.n	8008a74 <_dtoa_r+0x6bc>
 80089e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089ec:	2000      	movs	r0, #0
 80089ee:	4932      	ldr	r1, [pc, #200]	@ (8008ab8 <_dtoa_r+0x700>)
 80089f0:	f7f7 fbba 	bl	8000168 <__aeabi_dsub>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089fc:	f7f7 ffde 	bl	80009bc <__aeabi_dcmplt>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f43f aef6 	beq.w	80087f2 <_dtoa_r+0x43a>
 8008a06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008a08:	1e73      	subs	r3, r6, #1
 8008a0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a10:	2b30      	cmp	r3, #48	@ 0x30
 8008a12:	d0f8      	beq.n	8008a06 <_dtoa_r+0x64e>
 8008a14:	9f04      	ldr	r7, [sp, #16]
 8008a16:	e73f      	b.n	8008898 <_dtoa_r+0x4e0>
 8008a18:	4b29      	ldr	r3, [pc, #164]	@ (8008ac0 <_dtoa_r+0x708>)
 8008a1a:	f7f7 fd5d 	bl	80004d8 <__aeabi_dmul>
 8008a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a22:	e7bc      	b.n	800899e <_dtoa_r+0x5e6>
 8008a24:	d10c      	bne.n	8008a40 <_dtoa_r+0x688>
 8008a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4b25      	ldr	r3, [pc, #148]	@ (8008ac4 <_dtoa_r+0x70c>)
 8008a2e:	f7f7 fd53 	bl	80004d8 <__aeabi_dmul>
 8008a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a36:	f7f7 ffd5 	bl	80009e4 <__aeabi_dcmpge>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f000 815b 	beq.w	8008cf6 <_dtoa_r+0x93e>
 8008a40:	2400      	movs	r4, #0
 8008a42:	4625      	mov	r5, r4
 8008a44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a46:	4656      	mov	r6, sl
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	2700      	movs	r7, #0
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4658      	mov	r0, fp
 8008a52:	f000 fbb7 	bl	80091c4 <_Bfree>
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d0dc      	beq.n	8008a14 <_dtoa_r+0x65c>
 8008a5a:	b12f      	cbz	r7, 8008a68 <_dtoa_r+0x6b0>
 8008a5c:	42af      	cmp	r7, r5
 8008a5e:	d003      	beq.n	8008a68 <_dtoa_r+0x6b0>
 8008a60:	4639      	mov	r1, r7
 8008a62:	4658      	mov	r0, fp
 8008a64:	f000 fbae 	bl	80091c4 <_Bfree>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f000 fbaa 	bl	80091c4 <_Bfree>
 8008a70:	e7d0      	b.n	8008a14 <_dtoa_r+0x65c>
 8008a72:	9704      	str	r7, [sp, #16]
 8008a74:	4633      	mov	r3, r6
 8008a76:	461e      	mov	r6, r3
 8008a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a7c:	2a39      	cmp	r2, #57	@ 0x39
 8008a7e:	d107      	bne.n	8008a90 <_dtoa_r+0x6d8>
 8008a80:	459a      	cmp	sl, r3
 8008a82:	d1f8      	bne.n	8008a76 <_dtoa_r+0x6be>
 8008a84:	9a04      	ldr	r2, [sp, #16]
 8008a86:	3201      	adds	r2, #1
 8008a88:	9204      	str	r2, [sp, #16]
 8008a8a:	2230      	movs	r2, #48	@ 0x30
 8008a8c:	f88a 2000 	strb.w	r2, [sl]
 8008a90:	781a      	ldrb	r2, [r3, #0]
 8008a92:	3201      	adds	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e7bd      	b.n	8008a14 <_dtoa_r+0x65c>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4b09      	ldr	r3, [pc, #36]	@ (8008ac0 <_dtoa_r+0x708>)
 8008a9c:	f7f7 fd1c 	bl	80004d8 <__aeabi_dmul>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	f7f7 ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f43f aebc 	beq.w	800882a <_dtoa_r+0x472>
 8008ab2:	e6f1      	b.n	8008898 <_dtoa_r+0x4e0>
 8008ab4:	0800a3c8 	.word	0x0800a3c8
 8008ab8:	3fe00000 	.word	0x3fe00000
 8008abc:	3ff00000 	.word	0x3ff00000
 8008ac0:	40240000 	.word	0x40240000
 8008ac4:	40140000 	.word	0x40140000
 8008ac8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 80db 	beq.w	8008c86 <_dtoa_r+0x8ce>
 8008ad0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ad2:	2a01      	cmp	r2, #1
 8008ad4:	f300 80bf 	bgt.w	8008c56 <_dtoa_r+0x89e>
 8008ad8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	f000 80b7 	beq.w	8008c4e <_dtoa_r+0x896>
 8008ae0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008ae4:	4646      	mov	r6, r8
 8008ae6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aea:	2101      	movs	r1, #1
 8008aec:	441a      	add	r2, r3
 8008aee:	4658      	mov	r0, fp
 8008af0:	4498      	add	r8, r3
 8008af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008af4:	f000 fc1a 	bl	800932c <__i2b>
 8008af8:	4605      	mov	r5, r0
 8008afa:	b15e      	cbz	r6, 8008b14 <_dtoa_r+0x75c>
 8008afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd08      	ble.n	8008b14 <_dtoa_r+0x75c>
 8008b02:	42b3      	cmp	r3, r6
 8008b04:	bfa8      	it	ge
 8008b06:	4633      	movge	r3, r6
 8008b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b0a:	eba8 0803 	sub.w	r8, r8, r3
 8008b0e:	1af6      	subs	r6, r6, r3
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b16:	b1f3      	cbz	r3, 8008b56 <_dtoa_r+0x79e>
 8008b18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 80b7 	beq.w	8008c8e <_dtoa_r+0x8d6>
 8008b20:	b18c      	cbz	r4, 8008b46 <_dtoa_r+0x78e>
 8008b22:	4629      	mov	r1, r5
 8008b24:	4622      	mov	r2, r4
 8008b26:	4658      	mov	r0, fp
 8008b28:	f000 fcbe 	bl	80094a8 <__pow5mult>
 8008b2c:	464a      	mov	r2, r9
 8008b2e:	4601      	mov	r1, r0
 8008b30:	4605      	mov	r5, r0
 8008b32:	4658      	mov	r0, fp
 8008b34:	f000 fc10 	bl	8009358 <__multiply>
 8008b38:	4649      	mov	r1, r9
 8008b3a:	9004      	str	r0, [sp, #16]
 8008b3c:	4658      	mov	r0, fp
 8008b3e:	f000 fb41 	bl	80091c4 <_Bfree>
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	4699      	mov	r9, r3
 8008b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b48:	1b1a      	subs	r2, r3, r4
 8008b4a:	d004      	beq.n	8008b56 <_dtoa_r+0x79e>
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	4658      	mov	r0, fp
 8008b50:	f000 fcaa 	bl	80094a8 <__pow5mult>
 8008b54:	4681      	mov	r9, r0
 8008b56:	2101      	movs	r1, #1
 8008b58:	4658      	mov	r0, fp
 8008b5a:	f000 fbe7 	bl	800932c <__i2b>
 8008b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b60:	4604      	mov	r4, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 81c9 	beq.w	8008efa <_dtoa_r+0xb42>
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f000 fc9b 	bl	80094a8 <__pow5mult>
 8008b72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b74:	4604      	mov	r4, r0
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	f300 808f 	bgt.w	8008c9a <_dtoa_r+0x8e2>
 8008b7c:	9b02      	ldr	r3, [sp, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f040 8087 	bne.w	8008c92 <_dtoa_r+0x8da>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f040 8083 	bne.w	8008c96 <_dtoa_r+0x8de>
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b96:	0d1b      	lsrs	r3, r3, #20
 8008b98:	051b      	lsls	r3, r3, #20
 8008b9a:	b12b      	cbz	r3, 8008ba8 <_dtoa_r+0x7f0>
 8008b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9e:	f108 0801 	add.w	r8, r8, #1
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 81aa 	beq.w	8008f06 <_dtoa_r+0xb4e>
 8008bb2:	6923      	ldr	r3, [r4, #16]
 8008bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bb8:	6918      	ldr	r0, [r3, #16]
 8008bba:	f000 fb6b 	bl	8009294 <__hi0bits>
 8008bbe:	f1c0 0020 	rsb	r0, r0, #32
 8008bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc4:	4418      	add	r0, r3
 8008bc6:	f010 001f 	ands.w	r0, r0, #31
 8008bca:	d071      	beq.n	8008cb0 <_dtoa_r+0x8f8>
 8008bcc:	f1c0 0320 	rsb	r3, r0, #32
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	dd65      	ble.n	8008ca0 <_dtoa_r+0x8e8>
 8008bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd6:	f1c0 001c 	rsb	r0, r0, #28
 8008bda:	4403      	add	r3, r0
 8008bdc:	4480      	add	r8, r0
 8008bde:	4406      	add	r6, r0
 8008be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be2:	f1b8 0f00 	cmp.w	r8, #0
 8008be6:	dd05      	ble.n	8008bf4 <_dtoa_r+0x83c>
 8008be8:	4649      	mov	r1, r9
 8008bea:	4642      	mov	r2, r8
 8008bec:	4658      	mov	r0, fp
 8008bee:	f000 fcb5 	bl	800955c <__lshift>
 8008bf2:	4681      	mov	r9, r0
 8008bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dd05      	ble.n	8008c06 <_dtoa_r+0x84e>
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4658      	mov	r0, fp
 8008c00:	f000 fcac 	bl	800955c <__lshift>
 8008c04:	4604      	mov	r4, r0
 8008c06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d053      	beq.n	8008cb4 <_dtoa_r+0x8fc>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4648      	mov	r0, r9
 8008c10:	f000 fd10 	bl	8009634 <__mcmp>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	da4d      	bge.n	8008cb4 <_dtoa_r+0x8fc>
 8008c18:	1e7b      	subs	r3, r7, #1
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	220a      	movs	r2, #10
 8008c20:	2300      	movs	r3, #0
 8008c22:	4658      	mov	r0, fp
 8008c24:	f000 faf0 	bl	8009208 <__multadd>
 8008c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c2a:	4681      	mov	r9, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 816c 	beq.w	8008f0a <_dtoa_r+0xb52>
 8008c32:	2300      	movs	r3, #0
 8008c34:	4629      	mov	r1, r5
 8008c36:	220a      	movs	r2, #10
 8008c38:	4658      	mov	r0, fp
 8008c3a:	f000 fae5 	bl	8009208 <__multadd>
 8008c3e:	9b08      	ldr	r3, [sp, #32]
 8008c40:	4605      	mov	r5, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc61      	bgt.n	8008d0a <_dtoa_r+0x952>
 8008c46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	dc3b      	bgt.n	8008cc4 <_dtoa_r+0x90c>
 8008c4c:	e05d      	b.n	8008d0a <_dtoa_r+0x952>
 8008c4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c54:	e746      	b.n	8008ae4 <_dtoa_r+0x72c>
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	1e5c      	subs	r4, r3, #1
 8008c5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	bfbf      	itttt	lt
 8008c60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008c64:	1ae3      	sublt	r3, r4, r3
 8008c66:	18d2      	addlt	r2, r2, r3
 8008c68:	bfa8      	it	ge
 8008c6a:	1b1c      	subge	r4, r3, r4
 8008c6c:	9b07      	ldr	r3, [sp, #28]
 8008c6e:	bfbe      	ittt	lt
 8008c70:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008c74:	2400      	movlt	r4, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfb5      	itete	lt
 8008c7a:	eba8 0603 	sublt.w	r6, r8, r3
 8008c7e:	4646      	movge	r6, r8
 8008c80:	2300      	movlt	r3, #0
 8008c82:	9b07      	ldrge	r3, [sp, #28]
 8008c84:	e730      	b.n	8008ae8 <_dtoa_r+0x730>
 8008c86:	4646      	mov	r6, r8
 8008c88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c8c:	e735      	b.n	8008afa <_dtoa_r+0x742>
 8008c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c90:	e75c      	b.n	8008b4c <_dtoa_r+0x794>
 8008c92:	2300      	movs	r3, #0
 8008c94:	e788      	b.n	8008ba8 <_dtoa_r+0x7f0>
 8008c96:	9b02      	ldr	r3, [sp, #8]
 8008c98:	e786      	b.n	8008ba8 <_dtoa_r+0x7f0>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c9e:	e788      	b.n	8008bb2 <_dtoa_r+0x7fa>
 8008ca0:	d09f      	beq.n	8008be2 <_dtoa_r+0x82a>
 8008ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ca4:	331c      	adds	r3, #28
 8008ca6:	441a      	add	r2, r3
 8008ca8:	4498      	add	r8, r3
 8008caa:	441e      	add	r6, r3
 8008cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cae:	e798      	b.n	8008be2 <_dtoa_r+0x82a>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	e7f6      	b.n	8008ca2 <_dtoa_r+0x8ea>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	9704      	str	r7, [sp, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dc20      	bgt.n	8008cfe <_dtoa_r+0x946>
 8008cbc:	9308      	str	r3, [sp, #32]
 8008cbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	dd1e      	ble.n	8008d02 <_dtoa_r+0x94a>
 8008cc4:	9b08      	ldr	r3, [sp, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f47f aebc 	bne.w	8008a44 <_dtoa_r+0x68c>
 8008ccc:	4621      	mov	r1, r4
 8008cce:	2205      	movs	r2, #5
 8008cd0:	4658      	mov	r0, fp
 8008cd2:	f000 fa99 	bl	8009208 <__multadd>
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4648      	mov	r0, r9
 8008cdc:	f000 fcaa 	bl	8009634 <__mcmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f77f aeaf 	ble.w	8008a44 <_dtoa_r+0x68c>
 8008ce6:	2331      	movs	r3, #49	@ 0x31
 8008ce8:	4656      	mov	r6, sl
 8008cea:	f806 3b01 	strb.w	r3, [r6], #1
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	e6aa      	b.n	8008a4c <_dtoa_r+0x694>
 8008cf6:	9c07      	ldr	r4, [sp, #28]
 8008cf8:	9704      	str	r7, [sp, #16]
 8008cfa:	4625      	mov	r5, r4
 8008cfc:	e7f3      	b.n	8008ce6 <_dtoa_r+0x92e>
 8008cfe:	9b07      	ldr	r3, [sp, #28]
 8008d00:	9308      	str	r3, [sp, #32]
 8008d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8104 	beq.w	8008f12 <_dtoa_r+0xb5a>
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	dd05      	ble.n	8008d1a <_dtoa_r+0x962>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4632      	mov	r2, r6
 8008d12:	4658      	mov	r0, fp
 8008d14:	f000 fc22 	bl	800955c <__lshift>
 8008d18:	4605      	mov	r5, r0
 8008d1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d05a      	beq.n	8008dd6 <_dtoa_r+0xa1e>
 8008d20:	4658      	mov	r0, fp
 8008d22:	6869      	ldr	r1, [r5, #4]
 8008d24:	f000 fa0e 	bl	8009144 <_Balloc>
 8008d28:	4606      	mov	r6, r0
 8008d2a:	b928      	cbnz	r0, 8008d38 <_dtoa_r+0x980>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d32:	4b83      	ldr	r3, [pc, #524]	@ (8008f40 <_dtoa_r+0xb88>)
 8008d34:	f7ff bb54 	b.w	80083e0 <_dtoa_r+0x28>
 8008d38:	692a      	ldr	r2, [r5, #16]
 8008d3a:	f105 010c 	add.w	r1, r5, #12
 8008d3e:	3202      	adds	r2, #2
 8008d40:	0092      	lsls	r2, r2, #2
 8008d42:	300c      	adds	r0, #12
 8008d44:	f7ff faa1 	bl	800828a <memcpy>
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f000 fc05 	bl	800955c <__lshift>
 8008d52:	462f      	mov	r7, r5
 8008d54:	4605      	mov	r5, r0
 8008d56:	f10a 0301 	add.w	r3, sl, #1
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	9b08      	ldr	r3, [sp, #32]
 8008d5e:	4453      	add	r3, sl
 8008d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d62:	9b02      	ldr	r3, [sp, #8]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d6a:	9b07      	ldr	r3, [sp, #28]
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	4648      	mov	r0, r9
 8008d72:	9302      	str	r3, [sp, #8]
 8008d74:	f7ff fa97 	bl	80082a6 <quorem>
 8008d78:	4639      	mov	r1, r7
 8008d7a:	9008      	str	r0, [sp, #32]
 8008d7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d80:	4648      	mov	r0, r9
 8008d82:	f000 fc57 	bl	8009634 <__mcmp>
 8008d86:	462a      	mov	r2, r5
 8008d88:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	f000 fc6d 	bl	800966c <__mdiff>
 8008d92:	68c2      	ldr	r2, [r0, #12]
 8008d94:	4606      	mov	r6, r0
 8008d96:	bb02      	cbnz	r2, 8008dda <_dtoa_r+0xa22>
 8008d98:	4601      	mov	r1, r0
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f000 fc4a 	bl	8009634 <__mcmp>
 8008da0:	4602      	mov	r2, r0
 8008da2:	4631      	mov	r1, r6
 8008da4:	4658      	mov	r0, fp
 8008da6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008da8:	f000 fa0c 	bl	80091c4 <_Bfree>
 8008dac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008db0:	9e07      	ldr	r6, [sp, #28]
 8008db2:	ea43 0102 	orr.w	r1, r3, r2
 8008db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008db8:	4319      	orrs	r1, r3
 8008dba:	d110      	bne.n	8008dde <_dtoa_r+0xa26>
 8008dbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dc0:	d029      	beq.n	8008e16 <_dtoa_r+0xa5e>
 8008dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dd02      	ble.n	8008dce <_dtoa_r+0xa16>
 8008dc8:	9b08      	ldr	r3, [sp, #32]
 8008dca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008dce:	9b02      	ldr	r3, [sp, #8]
 8008dd0:	f883 8000 	strb.w	r8, [r3]
 8008dd4:	e63b      	b.n	8008a4e <_dtoa_r+0x696>
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	e7bb      	b.n	8008d52 <_dtoa_r+0x99a>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	e7e1      	b.n	8008da2 <_dtoa_r+0x9ea>
 8008dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db04      	blt.n	8008dee <_dtoa_r+0xa36>
 8008de4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008de6:	430b      	orrs	r3, r1
 8008de8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dea:	430b      	orrs	r3, r1
 8008dec:	d120      	bne.n	8008e30 <_dtoa_r+0xa78>
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	dded      	ble.n	8008dce <_dtoa_r+0xa16>
 8008df2:	4649      	mov	r1, r9
 8008df4:	2201      	movs	r2, #1
 8008df6:	4658      	mov	r0, fp
 8008df8:	f000 fbb0 	bl	800955c <__lshift>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4681      	mov	r9, r0
 8008e00:	f000 fc18 	bl	8009634 <__mcmp>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	dc03      	bgt.n	8008e10 <_dtoa_r+0xa58>
 8008e08:	d1e1      	bne.n	8008dce <_dtoa_r+0xa16>
 8008e0a:	f018 0f01 	tst.w	r8, #1
 8008e0e:	d0de      	beq.n	8008dce <_dtoa_r+0xa16>
 8008e10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e14:	d1d8      	bne.n	8008dc8 <_dtoa_r+0xa10>
 8008e16:	2339      	movs	r3, #57	@ 0x39
 8008e18:	9a02      	ldr	r2, [sp, #8]
 8008e1a:	7013      	strb	r3, [r2, #0]
 8008e1c:	4633      	mov	r3, r6
 8008e1e:	461e      	mov	r6, r3
 8008e20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	2a39      	cmp	r2, #57	@ 0x39
 8008e28:	d052      	beq.n	8008ed0 <_dtoa_r+0xb18>
 8008e2a:	3201      	adds	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e60e      	b.n	8008a4e <_dtoa_r+0x696>
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	dd07      	ble.n	8008e44 <_dtoa_r+0xa8c>
 8008e34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e38:	d0ed      	beq.n	8008e16 <_dtoa_r+0xa5e>
 8008e3a:	9a02      	ldr	r2, [sp, #8]
 8008e3c:	f108 0301 	add.w	r3, r8, #1
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	e604      	b.n	8008a4e <_dtoa_r+0x696>
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	9a07      	ldr	r2, [sp, #28]
 8008e48:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d028      	beq.n	8008ea4 <_dtoa_r+0xaec>
 8008e52:	4649      	mov	r1, r9
 8008e54:	2300      	movs	r3, #0
 8008e56:	220a      	movs	r2, #10
 8008e58:	4658      	mov	r0, fp
 8008e5a:	f000 f9d5 	bl	8009208 <__multadd>
 8008e5e:	42af      	cmp	r7, r5
 8008e60:	4681      	mov	r9, r0
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	f04f 020a 	mov.w	r2, #10
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4658      	mov	r0, fp
 8008e6e:	d107      	bne.n	8008e80 <_dtoa_r+0xac8>
 8008e70:	f000 f9ca 	bl	8009208 <__multadd>
 8008e74:	4607      	mov	r7, r0
 8008e76:	4605      	mov	r5, r0
 8008e78:	9b07      	ldr	r3, [sp, #28]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9307      	str	r3, [sp, #28]
 8008e7e:	e774      	b.n	8008d6a <_dtoa_r+0x9b2>
 8008e80:	f000 f9c2 	bl	8009208 <__multadd>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4607      	mov	r7, r0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	220a      	movs	r2, #10
 8008e8c:	4658      	mov	r0, fp
 8008e8e:	f000 f9bb 	bl	8009208 <__multadd>
 8008e92:	4605      	mov	r5, r0
 8008e94:	e7f0      	b.n	8008e78 <_dtoa_r+0xac0>
 8008e96:	9b08      	ldr	r3, [sp, #32]
 8008e98:	2700      	movs	r7, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bfcc      	ite	gt
 8008e9e:	461e      	movgt	r6, r3
 8008ea0:	2601      	movle	r6, #1
 8008ea2:	4456      	add	r6, sl
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4658      	mov	r0, fp
 8008eaa:	f000 fb57 	bl	800955c <__lshift>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4681      	mov	r9, r0
 8008eb2:	f000 fbbf 	bl	8009634 <__mcmp>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	dcb0      	bgt.n	8008e1c <_dtoa_r+0xa64>
 8008eba:	d102      	bne.n	8008ec2 <_dtoa_r+0xb0a>
 8008ebc:	f018 0f01 	tst.w	r8, #1
 8008ec0:	d1ac      	bne.n	8008e1c <_dtoa_r+0xa64>
 8008ec2:	4633      	mov	r3, r6
 8008ec4:	461e      	mov	r6, r3
 8008ec6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eca:	2a30      	cmp	r2, #48	@ 0x30
 8008ecc:	d0fa      	beq.n	8008ec4 <_dtoa_r+0xb0c>
 8008ece:	e5be      	b.n	8008a4e <_dtoa_r+0x696>
 8008ed0:	459a      	cmp	sl, r3
 8008ed2:	d1a4      	bne.n	8008e1e <_dtoa_r+0xa66>
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	2331      	movs	r3, #49	@ 0x31
 8008edc:	f88a 3000 	strb.w	r3, [sl]
 8008ee0:	e5b5      	b.n	8008a4e <_dtoa_r+0x696>
 8008ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ee4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f44 <_dtoa_r+0xb8c>
 8008ee8:	b11b      	cbz	r3, 8008ef2 <_dtoa_r+0xb3a>
 8008eea:	f10a 0308 	add.w	r3, sl, #8
 8008eee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	b017      	add	sp, #92	@ 0x5c
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	f77f ae3d 	ble.w	8008b7c <_dtoa_r+0x7c4>
 8008f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f06:	2001      	movs	r0, #1
 8008f08:	e65b      	b.n	8008bc2 <_dtoa_r+0x80a>
 8008f0a:	9b08      	ldr	r3, [sp, #32]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f77f aed6 	ble.w	8008cbe <_dtoa_r+0x906>
 8008f12:	4656      	mov	r6, sl
 8008f14:	4621      	mov	r1, r4
 8008f16:	4648      	mov	r0, r9
 8008f18:	f7ff f9c5 	bl	80082a6 <quorem>
 8008f1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f20:	9b08      	ldr	r3, [sp, #32]
 8008f22:	f806 8b01 	strb.w	r8, [r6], #1
 8008f26:	eba6 020a 	sub.w	r2, r6, sl
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	ddb3      	ble.n	8008e96 <_dtoa_r+0xade>
 8008f2e:	4649      	mov	r1, r9
 8008f30:	2300      	movs	r3, #0
 8008f32:	220a      	movs	r2, #10
 8008f34:	4658      	mov	r0, fp
 8008f36:	f000 f967 	bl	8009208 <__multadd>
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	e7ea      	b.n	8008f14 <_dtoa_r+0xb5c>
 8008f3e:	bf00      	nop
 8008f40:	0800a32a 	.word	0x0800a32a
 8008f44:	0800a2ae 	.word	0x0800a2ae

08008f48 <_free_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	d040      	beq.n	8008fd2 <_free_r+0x8a>
 8008f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f54:	1f0c      	subs	r4, r1, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bfb8      	it	lt
 8008f5a:	18e4      	addlt	r4, r4, r3
 8008f5c:	f000 f8e6 	bl	800912c <__malloc_lock>
 8008f60:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd4 <_free_r+0x8c>)
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	b933      	cbnz	r3, 8008f74 <_free_r+0x2c>
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f70:	f000 b8e2 	b.w	8009138 <__malloc_unlock>
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d908      	bls.n	8008f8a <_free_r+0x42>
 8008f78:	6820      	ldr	r0, [r4, #0]
 8008f7a:	1821      	adds	r1, r4, r0
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf01      	itttt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	1809      	addeq	r1, r1, r0
 8008f86:	6021      	streq	r1, [r4, #0]
 8008f88:	e7ed      	b.n	8008f66 <_free_r+0x1e>
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b10b      	cbz	r3, 8008f94 <_free_r+0x4c>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d9fa      	bls.n	8008f8a <_free_r+0x42>
 8008f94:	6811      	ldr	r1, [r2, #0]
 8008f96:	1850      	adds	r0, r2, r1
 8008f98:	42a0      	cmp	r0, r4
 8008f9a:	d10b      	bne.n	8008fb4 <_free_r+0x6c>
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	4401      	add	r1, r0
 8008fa0:	1850      	adds	r0, r2, r1
 8008fa2:	4283      	cmp	r3, r0
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	d1e0      	bne.n	8008f6a <_free_r+0x22>
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	4408      	add	r0, r1
 8008fae:	6010      	str	r0, [r2, #0]
 8008fb0:	6053      	str	r3, [r2, #4]
 8008fb2:	e7da      	b.n	8008f6a <_free_r+0x22>
 8008fb4:	d902      	bls.n	8008fbc <_free_r+0x74>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	e7d6      	b.n	8008f6a <_free_r+0x22>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	1821      	adds	r1, r4, r0
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf01      	itttt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	1809      	addeq	r1, r1, r0
 8008fca:	6021      	streq	r1, [r4, #0]
 8008fcc:	6063      	str	r3, [r4, #4]
 8008fce:	6054      	str	r4, [r2, #4]
 8008fd0:	e7cb      	b.n	8008f6a <_free_r+0x22>
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	20000f6c 	.word	0x20000f6c

08008fd8 <malloc>:
 8008fd8:	4b02      	ldr	r3, [pc, #8]	@ (8008fe4 <malloc+0xc>)
 8008fda:	4601      	mov	r1, r0
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f000 b825 	b.w	800902c <_malloc_r>
 8008fe2:	bf00      	nop
 8008fe4:	200000cc 	.word	0x200000cc

08008fe8 <sbrk_aligned>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	4e0f      	ldr	r6, [pc, #60]	@ (8009028 <sbrk_aligned+0x40>)
 8008fec:	460c      	mov	r4, r1
 8008fee:	6831      	ldr	r1, [r6, #0]
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	b911      	cbnz	r1, 8008ffa <sbrk_aligned+0x12>
 8008ff4:	f000 fcd6 	bl	80099a4 <_sbrk_r>
 8008ff8:	6030      	str	r0, [r6, #0]
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f000 fcd1 	bl	80099a4 <_sbrk_r>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d103      	bne.n	800900e <sbrk_aligned+0x26>
 8009006:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800900a:	4620      	mov	r0, r4
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	1cc4      	adds	r4, r0, #3
 8009010:	f024 0403 	bic.w	r4, r4, #3
 8009014:	42a0      	cmp	r0, r4
 8009016:	d0f8      	beq.n	800900a <sbrk_aligned+0x22>
 8009018:	1a21      	subs	r1, r4, r0
 800901a:	4628      	mov	r0, r5
 800901c:	f000 fcc2 	bl	80099a4 <_sbrk_r>
 8009020:	3001      	adds	r0, #1
 8009022:	d1f2      	bne.n	800900a <sbrk_aligned+0x22>
 8009024:	e7ef      	b.n	8009006 <sbrk_aligned+0x1e>
 8009026:	bf00      	nop
 8009028:	20000f68 	.word	0x20000f68

0800902c <_malloc_r>:
 800902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009030:	1ccd      	adds	r5, r1, #3
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	2d00      	cmp	r5, #0
 8009040:	4606      	mov	r6, r0
 8009042:	db01      	blt.n	8009048 <_malloc_r+0x1c>
 8009044:	42a9      	cmp	r1, r5
 8009046:	d904      	bls.n	8009052 <_malloc_r+0x26>
 8009048:	230c      	movs	r3, #12
 800904a:	6033      	str	r3, [r6, #0]
 800904c:	2000      	movs	r0, #0
 800904e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009128 <_malloc_r+0xfc>
 8009056:	f000 f869 	bl	800912c <__malloc_lock>
 800905a:	f8d8 3000 	ldr.w	r3, [r8]
 800905e:	461c      	mov	r4, r3
 8009060:	bb44      	cbnz	r4, 80090b4 <_malloc_r+0x88>
 8009062:	4629      	mov	r1, r5
 8009064:	4630      	mov	r0, r6
 8009066:	f7ff ffbf 	bl	8008fe8 <sbrk_aligned>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	4604      	mov	r4, r0
 800906e:	d158      	bne.n	8009122 <_malloc_r+0xf6>
 8009070:	f8d8 4000 	ldr.w	r4, [r8]
 8009074:	4627      	mov	r7, r4
 8009076:	2f00      	cmp	r7, #0
 8009078:	d143      	bne.n	8009102 <_malloc_r+0xd6>
 800907a:	2c00      	cmp	r4, #0
 800907c:	d04b      	beq.n	8009116 <_malloc_r+0xea>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	4639      	mov	r1, r7
 8009082:	4630      	mov	r0, r6
 8009084:	eb04 0903 	add.w	r9, r4, r3
 8009088:	f000 fc8c 	bl	80099a4 <_sbrk_r>
 800908c:	4581      	cmp	r9, r0
 800908e:	d142      	bne.n	8009116 <_malloc_r+0xea>
 8009090:	6821      	ldr	r1, [r4, #0]
 8009092:	4630      	mov	r0, r6
 8009094:	1a6d      	subs	r5, r5, r1
 8009096:	4629      	mov	r1, r5
 8009098:	f7ff ffa6 	bl	8008fe8 <sbrk_aligned>
 800909c:	3001      	adds	r0, #1
 800909e:	d03a      	beq.n	8009116 <_malloc_r+0xea>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	442b      	add	r3, r5
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	f8d8 3000 	ldr.w	r3, [r8]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	bb62      	cbnz	r2, 8009108 <_malloc_r+0xdc>
 80090ae:	f8c8 7000 	str.w	r7, [r8]
 80090b2:	e00f      	b.n	80090d4 <_malloc_r+0xa8>
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	1b52      	subs	r2, r2, r5
 80090b8:	d420      	bmi.n	80090fc <_malloc_r+0xd0>
 80090ba:	2a0b      	cmp	r2, #11
 80090bc:	d917      	bls.n	80090ee <_malloc_r+0xc2>
 80090be:	1961      	adds	r1, r4, r5
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	bf18      	it	ne
 80090c6:	6059      	strne	r1, [r3, #4]
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	bf08      	it	eq
 80090cc:	f8c8 1000 	streq.w	r1, [r8]
 80090d0:	5162      	str	r2, [r4, r5]
 80090d2:	604b      	str	r3, [r1, #4]
 80090d4:	4630      	mov	r0, r6
 80090d6:	f000 f82f 	bl	8009138 <__malloc_unlock>
 80090da:	f104 000b 	add.w	r0, r4, #11
 80090de:	1d23      	adds	r3, r4, #4
 80090e0:	f020 0007 	bic.w	r0, r0, #7
 80090e4:	1ac2      	subs	r2, r0, r3
 80090e6:	bf1c      	itt	ne
 80090e8:	1a1b      	subne	r3, r3, r0
 80090ea:	50a3      	strne	r3, [r4, r2]
 80090ec:	e7af      	b.n	800904e <_malloc_r+0x22>
 80090ee:	6862      	ldr	r2, [r4, #4]
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	bf0c      	ite	eq
 80090f4:	f8c8 2000 	streq.w	r2, [r8]
 80090f8:	605a      	strne	r2, [r3, #4]
 80090fa:	e7eb      	b.n	80090d4 <_malloc_r+0xa8>
 80090fc:	4623      	mov	r3, r4
 80090fe:	6864      	ldr	r4, [r4, #4]
 8009100:	e7ae      	b.n	8009060 <_malloc_r+0x34>
 8009102:	463c      	mov	r4, r7
 8009104:	687f      	ldr	r7, [r7, #4]
 8009106:	e7b6      	b.n	8009076 <_malloc_r+0x4a>
 8009108:	461a      	mov	r2, r3
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	42a3      	cmp	r3, r4
 800910e:	d1fb      	bne.n	8009108 <_malloc_r+0xdc>
 8009110:	2300      	movs	r3, #0
 8009112:	6053      	str	r3, [r2, #4]
 8009114:	e7de      	b.n	80090d4 <_malloc_r+0xa8>
 8009116:	230c      	movs	r3, #12
 8009118:	4630      	mov	r0, r6
 800911a:	6033      	str	r3, [r6, #0]
 800911c:	f000 f80c 	bl	8009138 <__malloc_unlock>
 8009120:	e794      	b.n	800904c <_malloc_r+0x20>
 8009122:	6005      	str	r5, [r0, #0]
 8009124:	e7d6      	b.n	80090d4 <_malloc_r+0xa8>
 8009126:	bf00      	nop
 8009128:	20000f6c 	.word	0x20000f6c

0800912c <__malloc_lock>:
 800912c:	4801      	ldr	r0, [pc, #4]	@ (8009134 <__malloc_lock+0x8>)
 800912e:	f7ff b89c 	b.w	800826a <__retarget_lock_acquire_recursive>
 8009132:	bf00      	nop
 8009134:	20000f64 	.word	0x20000f64

08009138 <__malloc_unlock>:
 8009138:	4801      	ldr	r0, [pc, #4]	@ (8009140 <__malloc_unlock+0x8>)
 800913a:	f7ff b897 	b.w	800826c <__retarget_lock_release_recursive>
 800913e:	bf00      	nop
 8009140:	20000f64 	.word	0x20000f64

08009144 <_Balloc>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	69c6      	ldr	r6, [r0, #28]
 8009148:	4604      	mov	r4, r0
 800914a:	460d      	mov	r5, r1
 800914c:	b976      	cbnz	r6, 800916c <_Balloc+0x28>
 800914e:	2010      	movs	r0, #16
 8009150:	f7ff ff42 	bl	8008fd8 <malloc>
 8009154:	4602      	mov	r2, r0
 8009156:	61e0      	str	r0, [r4, #28]
 8009158:	b920      	cbnz	r0, 8009164 <_Balloc+0x20>
 800915a:	216b      	movs	r1, #107	@ 0x6b
 800915c:	4b17      	ldr	r3, [pc, #92]	@ (80091bc <_Balloc+0x78>)
 800915e:	4818      	ldr	r0, [pc, #96]	@ (80091c0 <_Balloc+0x7c>)
 8009160:	f000 fc30 	bl	80099c4 <__assert_func>
 8009164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009168:	6006      	str	r6, [r0, #0]
 800916a:	60c6      	str	r6, [r0, #12]
 800916c:	69e6      	ldr	r6, [r4, #28]
 800916e:	68f3      	ldr	r3, [r6, #12]
 8009170:	b183      	cbz	r3, 8009194 <_Balloc+0x50>
 8009172:	69e3      	ldr	r3, [r4, #28]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800917a:	b9b8      	cbnz	r0, 80091ac <_Balloc+0x68>
 800917c:	2101      	movs	r1, #1
 800917e:	fa01 f605 	lsl.w	r6, r1, r5
 8009182:	1d72      	adds	r2, r6, #5
 8009184:	4620      	mov	r0, r4
 8009186:	0092      	lsls	r2, r2, #2
 8009188:	f000 fc3a 	bl	8009a00 <_calloc_r>
 800918c:	b160      	cbz	r0, 80091a8 <_Balloc+0x64>
 800918e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009192:	e00e      	b.n	80091b2 <_Balloc+0x6e>
 8009194:	2221      	movs	r2, #33	@ 0x21
 8009196:	2104      	movs	r1, #4
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fc31 	bl	8009a00 <_calloc_r>
 800919e:	69e3      	ldr	r3, [r4, #28]
 80091a0:	60f0      	str	r0, [r6, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e4      	bne.n	8009172 <_Balloc+0x2e>
 80091a8:	2000      	movs	r0, #0
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	6802      	ldr	r2, [r0, #0]
 80091ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091b2:	2300      	movs	r3, #0
 80091b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091b8:	e7f7      	b.n	80091aa <_Balloc+0x66>
 80091ba:	bf00      	nop
 80091bc:	0800a2bb 	.word	0x0800a2bb
 80091c0:	0800a33b 	.word	0x0800a33b

080091c4 <_Bfree>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	69c6      	ldr	r6, [r0, #28]
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b976      	cbnz	r6, 80091ec <_Bfree+0x28>
 80091ce:	2010      	movs	r0, #16
 80091d0:	f7ff ff02 	bl	8008fd8 <malloc>
 80091d4:	4602      	mov	r2, r0
 80091d6:	61e8      	str	r0, [r5, #28]
 80091d8:	b920      	cbnz	r0, 80091e4 <_Bfree+0x20>
 80091da:	218f      	movs	r1, #143	@ 0x8f
 80091dc:	4b08      	ldr	r3, [pc, #32]	@ (8009200 <_Bfree+0x3c>)
 80091de:	4809      	ldr	r0, [pc, #36]	@ (8009204 <_Bfree+0x40>)
 80091e0:	f000 fbf0 	bl	80099c4 <__assert_func>
 80091e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e8:	6006      	str	r6, [r0, #0]
 80091ea:	60c6      	str	r6, [r0, #12]
 80091ec:	b13c      	cbz	r4, 80091fe <_Bfree+0x3a>
 80091ee:	69eb      	ldr	r3, [r5, #28]
 80091f0:	6862      	ldr	r2, [r4, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091f8:	6021      	str	r1, [r4, #0]
 80091fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	0800a2bb 	.word	0x0800a2bb
 8009204:	0800a33b 	.word	0x0800a33b

08009208 <__multadd>:
 8009208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920c:	4607      	mov	r7, r0
 800920e:	460c      	mov	r4, r1
 8009210:	461e      	mov	r6, r3
 8009212:	2000      	movs	r0, #0
 8009214:	690d      	ldr	r5, [r1, #16]
 8009216:	f101 0c14 	add.w	ip, r1, #20
 800921a:	f8dc 3000 	ldr.w	r3, [ip]
 800921e:	3001      	adds	r0, #1
 8009220:	b299      	uxth	r1, r3
 8009222:	fb02 6101 	mla	r1, r2, r1, r6
 8009226:	0c1e      	lsrs	r6, r3, #16
 8009228:	0c0b      	lsrs	r3, r1, #16
 800922a:	fb02 3306 	mla	r3, r2, r6, r3
 800922e:	b289      	uxth	r1, r1
 8009230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009234:	4285      	cmp	r5, r0
 8009236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800923a:	f84c 1b04 	str.w	r1, [ip], #4
 800923e:	dcec      	bgt.n	800921a <__multadd+0x12>
 8009240:	b30e      	cbz	r6, 8009286 <__multadd+0x7e>
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	42ab      	cmp	r3, r5
 8009246:	dc19      	bgt.n	800927c <__multadd+0x74>
 8009248:	6861      	ldr	r1, [r4, #4]
 800924a:	4638      	mov	r0, r7
 800924c:	3101      	adds	r1, #1
 800924e:	f7ff ff79 	bl	8009144 <_Balloc>
 8009252:	4680      	mov	r8, r0
 8009254:	b928      	cbnz	r0, 8009262 <__multadd+0x5a>
 8009256:	4602      	mov	r2, r0
 8009258:	21ba      	movs	r1, #186	@ 0xba
 800925a:	4b0c      	ldr	r3, [pc, #48]	@ (800928c <__multadd+0x84>)
 800925c:	480c      	ldr	r0, [pc, #48]	@ (8009290 <__multadd+0x88>)
 800925e:	f000 fbb1 	bl	80099c4 <__assert_func>
 8009262:	6922      	ldr	r2, [r4, #16]
 8009264:	f104 010c 	add.w	r1, r4, #12
 8009268:	3202      	adds	r2, #2
 800926a:	0092      	lsls	r2, r2, #2
 800926c:	300c      	adds	r0, #12
 800926e:	f7ff f80c 	bl	800828a <memcpy>
 8009272:	4621      	mov	r1, r4
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ffa5 	bl	80091c4 <_Bfree>
 800927a:	4644      	mov	r4, r8
 800927c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009280:	3501      	adds	r5, #1
 8009282:	615e      	str	r6, [r3, #20]
 8009284:	6125      	str	r5, [r4, #16]
 8009286:	4620      	mov	r0, r4
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	0800a32a 	.word	0x0800a32a
 8009290:	0800a33b 	.word	0x0800a33b

08009294 <__hi0bits>:
 8009294:	4603      	mov	r3, r0
 8009296:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800929a:	bf3a      	itte	cc
 800929c:	0403      	lslcc	r3, r0, #16
 800929e:	2010      	movcc	r0, #16
 80092a0:	2000      	movcs	r0, #0
 80092a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092a6:	bf3c      	itt	cc
 80092a8:	021b      	lslcc	r3, r3, #8
 80092aa:	3008      	addcc	r0, #8
 80092ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092b0:	bf3c      	itt	cc
 80092b2:	011b      	lslcc	r3, r3, #4
 80092b4:	3004      	addcc	r0, #4
 80092b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ba:	bf3c      	itt	cc
 80092bc:	009b      	lslcc	r3, r3, #2
 80092be:	3002      	addcc	r0, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	db05      	blt.n	80092d0 <__hi0bits+0x3c>
 80092c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092c8:	f100 0001 	add.w	r0, r0, #1
 80092cc:	bf08      	it	eq
 80092ce:	2020      	moveq	r0, #32
 80092d0:	4770      	bx	lr

080092d2 <__lo0bits>:
 80092d2:	6803      	ldr	r3, [r0, #0]
 80092d4:	4602      	mov	r2, r0
 80092d6:	f013 0007 	ands.w	r0, r3, #7
 80092da:	d00b      	beq.n	80092f4 <__lo0bits+0x22>
 80092dc:	07d9      	lsls	r1, r3, #31
 80092de:	d421      	bmi.n	8009324 <__lo0bits+0x52>
 80092e0:	0798      	lsls	r0, r3, #30
 80092e2:	bf49      	itett	mi
 80092e4:	085b      	lsrmi	r3, r3, #1
 80092e6:	089b      	lsrpl	r3, r3, #2
 80092e8:	2001      	movmi	r0, #1
 80092ea:	6013      	strmi	r3, [r2, #0]
 80092ec:	bf5c      	itt	pl
 80092ee:	2002      	movpl	r0, #2
 80092f0:	6013      	strpl	r3, [r2, #0]
 80092f2:	4770      	bx	lr
 80092f4:	b299      	uxth	r1, r3
 80092f6:	b909      	cbnz	r1, 80092fc <__lo0bits+0x2a>
 80092f8:	2010      	movs	r0, #16
 80092fa:	0c1b      	lsrs	r3, r3, #16
 80092fc:	b2d9      	uxtb	r1, r3
 80092fe:	b909      	cbnz	r1, 8009304 <__lo0bits+0x32>
 8009300:	3008      	adds	r0, #8
 8009302:	0a1b      	lsrs	r3, r3, #8
 8009304:	0719      	lsls	r1, r3, #28
 8009306:	bf04      	itt	eq
 8009308:	091b      	lsreq	r3, r3, #4
 800930a:	3004      	addeq	r0, #4
 800930c:	0799      	lsls	r1, r3, #30
 800930e:	bf04      	itt	eq
 8009310:	089b      	lsreq	r3, r3, #2
 8009312:	3002      	addeq	r0, #2
 8009314:	07d9      	lsls	r1, r3, #31
 8009316:	d403      	bmi.n	8009320 <__lo0bits+0x4e>
 8009318:	085b      	lsrs	r3, r3, #1
 800931a:	f100 0001 	add.w	r0, r0, #1
 800931e:	d003      	beq.n	8009328 <__lo0bits+0x56>
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	4770      	bx	lr
 8009324:	2000      	movs	r0, #0
 8009326:	4770      	bx	lr
 8009328:	2020      	movs	r0, #32
 800932a:	4770      	bx	lr

0800932c <__i2b>:
 800932c:	b510      	push	{r4, lr}
 800932e:	460c      	mov	r4, r1
 8009330:	2101      	movs	r1, #1
 8009332:	f7ff ff07 	bl	8009144 <_Balloc>
 8009336:	4602      	mov	r2, r0
 8009338:	b928      	cbnz	r0, 8009346 <__i2b+0x1a>
 800933a:	f240 1145 	movw	r1, #325	@ 0x145
 800933e:	4b04      	ldr	r3, [pc, #16]	@ (8009350 <__i2b+0x24>)
 8009340:	4804      	ldr	r0, [pc, #16]	@ (8009354 <__i2b+0x28>)
 8009342:	f000 fb3f 	bl	80099c4 <__assert_func>
 8009346:	2301      	movs	r3, #1
 8009348:	6144      	str	r4, [r0, #20]
 800934a:	6103      	str	r3, [r0, #16]
 800934c:	bd10      	pop	{r4, pc}
 800934e:	bf00      	nop
 8009350:	0800a32a 	.word	0x0800a32a
 8009354:	0800a33b 	.word	0x0800a33b

08009358 <__multiply>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4614      	mov	r4, r2
 800935e:	690a      	ldr	r2, [r1, #16]
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	460f      	mov	r7, r1
 8009364:	429a      	cmp	r2, r3
 8009366:	bfa2      	ittt	ge
 8009368:	4623      	movge	r3, r4
 800936a:	460c      	movge	r4, r1
 800936c:	461f      	movge	r7, r3
 800936e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009372:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	6861      	ldr	r1, [r4, #4]
 800937a:	eb0a 0609 	add.w	r6, sl, r9
 800937e:	42b3      	cmp	r3, r6
 8009380:	b085      	sub	sp, #20
 8009382:	bfb8      	it	lt
 8009384:	3101      	addlt	r1, #1
 8009386:	f7ff fedd 	bl	8009144 <_Balloc>
 800938a:	b930      	cbnz	r0, 800939a <__multiply+0x42>
 800938c:	4602      	mov	r2, r0
 800938e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009392:	4b43      	ldr	r3, [pc, #268]	@ (80094a0 <__multiply+0x148>)
 8009394:	4843      	ldr	r0, [pc, #268]	@ (80094a4 <__multiply+0x14c>)
 8009396:	f000 fb15 	bl	80099c4 <__assert_func>
 800939a:	f100 0514 	add.w	r5, r0, #20
 800939e:	462b      	mov	r3, r5
 80093a0:	2200      	movs	r2, #0
 80093a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093a6:	4543      	cmp	r3, r8
 80093a8:	d321      	bcc.n	80093ee <__multiply+0x96>
 80093aa:	f107 0114 	add.w	r1, r7, #20
 80093ae:	f104 0214 	add.w	r2, r4, #20
 80093b2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80093b6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80093ba:	9302      	str	r3, [sp, #8]
 80093bc:	1b13      	subs	r3, r2, r4
 80093be:	3b15      	subs	r3, #21
 80093c0:	f023 0303 	bic.w	r3, r3, #3
 80093c4:	3304      	adds	r3, #4
 80093c6:	f104 0715 	add.w	r7, r4, #21
 80093ca:	42ba      	cmp	r2, r7
 80093cc:	bf38      	it	cc
 80093ce:	2304      	movcc	r3, #4
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	9103      	str	r1, [sp, #12]
 80093d6:	428b      	cmp	r3, r1
 80093d8:	d80c      	bhi.n	80093f4 <__multiply+0x9c>
 80093da:	2e00      	cmp	r6, #0
 80093dc:	dd03      	ble.n	80093e6 <__multiply+0x8e>
 80093de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d05a      	beq.n	800949c <__multiply+0x144>
 80093e6:	6106      	str	r6, [r0, #16]
 80093e8:	b005      	add	sp, #20
 80093ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	f843 2b04 	str.w	r2, [r3], #4
 80093f2:	e7d8      	b.n	80093a6 <__multiply+0x4e>
 80093f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80093f8:	f1ba 0f00 	cmp.w	sl, #0
 80093fc:	d023      	beq.n	8009446 <__multiply+0xee>
 80093fe:	46a9      	mov	r9, r5
 8009400:	f04f 0c00 	mov.w	ip, #0
 8009404:	f104 0e14 	add.w	lr, r4, #20
 8009408:	f85e 7b04 	ldr.w	r7, [lr], #4
 800940c:	f8d9 3000 	ldr.w	r3, [r9]
 8009410:	fa1f fb87 	uxth.w	fp, r7
 8009414:	b29b      	uxth	r3, r3
 8009416:	fb0a 330b 	mla	r3, sl, fp, r3
 800941a:	4463      	add	r3, ip
 800941c:	f8d9 c000 	ldr.w	ip, [r9]
 8009420:	0c3f      	lsrs	r7, r7, #16
 8009422:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009426:	fb0a c707 	mla	r7, sl, r7, ip
 800942a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800942e:	b29b      	uxth	r3, r3
 8009430:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009434:	4572      	cmp	r2, lr
 8009436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800943a:	f849 3b04 	str.w	r3, [r9], #4
 800943e:	d8e3      	bhi.n	8009408 <__multiply+0xb0>
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	f845 c003 	str.w	ip, [r5, r3]
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	3104      	adds	r1, #4
 800944a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800944e:	f1b9 0f00 	cmp.w	r9, #0
 8009452:	d021      	beq.n	8009498 <__multiply+0x140>
 8009454:	46ae      	mov	lr, r5
 8009456:	f04f 0a00 	mov.w	sl, #0
 800945a:	682b      	ldr	r3, [r5, #0]
 800945c:	f104 0c14 	add.w	ip, r4, #20
 8009460:	f8bc b000 	ldrh.w	fp, [ip]
 8009464:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009468:	b29b      	uxth	r3, r3
 800946a:	fb09 770b 	mla	r7, r9, fp, r7
 800946e:	4457      	add	r7, sl
 8009470:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009474:	f84e 3b04 	str.w	r3, [lr], #4
 8009478:	f85c 3b04 	ldr.w	r3, [ip], #4
 800947c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009480:	f8be 3000 	ldrh.w	r3, [lr]
 8009484:	4562      	cmp	r2, ip
 8009486:	fb09 330a 	mla	r3, r9, sl, r3
 800948a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800948e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009492:	d8e5      	bhi.n	8009460 <__multiply+0x108>
 8009494:	9f01      	ldr	r7, [sp, #4]
 8009496:	51eb      	str	r3, [r5, r7]
 8009498:	3504      	adds	r5, #4
 800949a:	e79a      	b.n	80093d2 <__multiply+0x7a>
 800949c:	3e01      	subs	r6, #1
 800949e:	e79c      	b.n	80093da <__multiply+0x82>
 80094a0:	0800a32a 	.word	0x0800a32a
 80094a4:	0800a33b 	.word	0x0800a33b

080094a8 <__pow5mult>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	4615      	mov	r5, r2
 80094ae:	f012 0203 	ands.w	r2, r2, #3
 80094b2:	4607      	mov	r7, r0
 80094b4:	460e      	mov	r6, r1
 80094b6:	d007      	beq.n	80094c8 <__pow5mult+0x20>
 80094b8:	4c25      	ldr	r4, [pc, #148]	@ (8009550 <__pow5mult+0xa8>)
 80094ba:	3a01      	subs	r2, #1
 80094bc:	2300      	movs	r3, #0
 80094be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094c2:	f7ff fea1 	bl	8009208 <__multadd>
 80094c6:	4606      	mov	r6, r0
 80094c8:	10ad      	asrs	r5, r5, #2
 80094ca:	d03d      	beq.n	8009548 <__pow5mult+0xa0>
 80094cc:	69fc      	ldr	r4, [r7, #28]
 80094ce:	b97c      	cbnz	r4, 80094f0 <__pow5mult+0x48>
 80094d0:	2010      	movs	r0, #16
 80094d2:	f7ff fd81 	bl	8008fd8 <malloc>
 80094d6:	4602      	mov	r2, r0
 80094d8:	61f8      	str	r0, [r7, #28]
 80094da:	b928      	cbnz	r0, 80094e8 <__pow5mult+0x40>
 80094dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009554 <__pow5mult+0xac>)
 80094e2:	481d      	ldr	r0, [pc, #116]	@ (8009558 <__pow5mult+0xb0>)
 80094e4:	f000 fa6e 	bl	80099c4 <__assert_func>
 80094e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094ec:	6004      	str	r4, [r0, #0]
 80094ee:	60c4      	str	r4, [r0, #12]
 80094f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094f8:	b94c      	cbnz	r4, 800950e <__pow5mult+0x66>
 80094fa:	f240 2171 	movw	r1, #625	@ 0x271
 80094fe:	4638      	mov	r0, r7
 8009500:	f7ff ff14 	bl	800932c <__i2b>
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	f8c8 0008 	str.w	r0, [r8, #8]
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	f04f 0900 	mov.w	r9, #0
 8009512:	07eb      	lsls	r3, r5, #31
 8009514:	d50a      	bpl.n	800952c <__pow5mult+0x84>
 8009516:	4631      	mov	r1, r6
 8009518:	4622      	mov	r2, r4
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff ff1c 	bl	8009358 <__multiply>
 8009520:	4680      	mov	r8, r0
 8009522:	4631      	mov	r1, r6
 8009524:	4638      	mov	r0, r7
 8009526:	f7ff fe4d 	bl	80091c4 <_Bfree>
 800952a:	4646      	mov	r6, r8
 800952c:	106d      	asrs	r5, r5, #1
 800952e:	d00b      	beq.n	8009548 <__pow5mult+0xa0>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	b938      	cbnz	r0, 8009544 <__pow5mult+0x9c>
 8009534:	4622      	mov	r2, r4
 8009536:	4621      	mov	r1, r4
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ff0d 	bl	8009358 <__multiply>
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	f8c0 9000 	str.w	r9, [r0]
 8009544:	4604      	mov	r4, r0
 8009546:	e7e4      	b.n	8009512 <__pow5mult+0x6a>
 8009548:	4630      	mov	r0, r6
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954e:	bf00      	nop
 8009550:	0800a394 	.word	0x0800a394
 8009554:	0800a2bb 	.word	0x0800a2bb
 8009558:	0800a33b 	.word	0x0800a33b

0800955c <__lshift>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	4607      	mov	r7, r0
 8009564:	4691      	mov	r9, r2
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	6849      	ldr	r1, [r1, #4]
 800956a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800956e:	68a3      	ldr	r3, [r4, #8]
 8009570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009574:	f108 0601 	add.w	r6, r8, #1
 8009578:	42b3      	cmp	r3, r6
 800957a:	db0b      	blt.n	8009594 <__lshift+0x38>
 800957c:	4638      	mov	r0, r7
 800957e:	f7ff fde1 	bl	8009144 <_Balloc>
 8009582:	4605      	mov	r5, r0
 8009584:	b948      	cbnz	r0, 800959a <__lshift+0x3e>
 8009586:	4602      	mov	r2, r0
 8009588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800958c:	4b27      	ldr	r3, [pc, #156]	@ (800962c <__lshift+0xd0>)
 800958e:	4828      	ldr	r0, [pc, #160]	@ (8009630 <__lshift+0xd4>)
 8009590:	f000 fa18 	bl	80099c4 <__assert_func>
 8009594:	3101      	adds	r1, #1
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	e7ee      	b.n	8009578 <__lshift+0x1c>
 800959a:	2300      	movs	r3, #0
 800959c:	f100 0114 	add.w	r1, r0, #20
 80095a0:	f100 0210 	add.w	r2, r0, #16
 80095a4:	4618      	mov	r0, r3
 80095a6:	4553      	cmp	r3, sl
 80095a8:	db33      	blt.n	8009612 <__lshift+0xb6>
 80095aa:	6920      	ldr	r0, [r4, #16]
 80095ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095b0:	f104 0314 	add.w	r3, r4, #20
 80095b4:	f019 091f 	ands.w	r9, r9, #31
 80095b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095c0:	d02b      	beq.n	800961a <__lshift+0xbe>
 80095c2:	468a      	mov	sl, r1
 80095c4:	2200      	movs	r2, #0
 80095c6:	f1c9 0e20 	rsb	lr, r9, #32
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	fa00 f009 	lsl.w	r0, r0, r9
 80095d0:	4310      	orrs	r0, r2
 80095d2:	f84a 0b04 	str.w	r0, [sl], #4
 80095d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095da:	459c      	cmp	ip, r3
 80095dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80095e0:	d8f3      	bhi.n	80095ca <__lshift+0x6e>
 80095e2:	ebac 0304 	sub.w	r3, ip, r4
 80095e6:	3b15      	subs	r3, #21
 80095e8:	f023 0303 	bic.w	r3, r3, #3
 80095ec:	3304      	adds	r3, #4
 80095ee:	f104 0015 	add.w	r0, r4, #21
 80095f2:	4584      	cmp	ip, r0
 80095f4:	bf38      	it	cc
 80095f6:	2304      	movcc	r3, #4
 80095f8:	50ca      	str	r2, [r1, r3]
 80095fa:	b10a      	cbz	r2, 8009600 <__lshift+0xa4>
 80095fc:	f108 0602 	add.w	r6, r8, #2
 8009600:	3e01      	subs	r6, #1
 8009602:	4638      	mov	r0, r7
 8009604:	4621      	mov	r1, r4
 8009606:	612e      	str	r6, [r5, #16]
 8009608:	f7ff fddc 	bl	80091c4 <_Bfree>
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	f842 0f04 	str.w	r0, [r2, #4]!
 8009616:	3301      	adds	r3, #1
 8009618:	e7c5      	b.n	80095a6 <__lshift+0x4a>
 800961a:	3904      	subs	r1, #4
 800961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009620:	459c      	cmp	ip, r3
 8009622:	f841 2f04 	str.w	r2, [r1, #4]!
 8009626:	d8f9      	bhi.n	800961c <__lshift+0xc0>
 8009628:	e7ea      	b.n	8009600 <__lshift+0xa4>
 800962a:	bf00      	nop
 800962c:	0800a32a 	.word	0x0800a32a
 8009630:	0800a33b 	.word	0x0800a33b

08009634 <__mcmp>:
 8009634:	4603      	mov	r3, r0
 8009636:	690a      	ldr	r2, [r1, #16]
 8009638:	6900      	ldr	r0, [r0, #16]
 800963a:	b530      	push	{r4, r5, lr}
 800963c:	1a80      	subs	r0, r0, r2
 800963e:	d10e      	bne.n	800965e <__mcmp+0x2a>
 8009640:	3314      	adds	r3, #20
 8009642:	3114      	adds	r1, #20
 8009644:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800964c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009650:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009654:	4295      	cmp	r5, r2
 8009656:	d003      	beq.n	8009660 <__mcmp+0x2c>
 8009658:	d205      	bcs.n	8009666 <__mcmp+0x32>
 800965a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800965e:	bd30      	pop	{r4, r5, pc}
 8009660:	42a3      	cmp	r3, r4
 8009662:	d3f3      	bcc.n	800964c <__mcmp+0x18>
 8009664:	e7fb      	b.n	800965e <__mcmp+0x2a>
 8009666:	2001      	movs	r0, #1
 8009668:	e7f9      	b.n	800965e <__mcmp+0x2a>
	...

0800966c <__mdiff>:
 800966c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	4689      	mov	r9, r1
 8009672:	4606      	mov	r6, r0
 8009674:	4611      	mov	r1, r2
 8009676:	4648      	mov	r0, r9
 8009678:	4614      	mov	r4, r2
 800967a:	f7ff ffdb 	bl	8009634 <__mcmp>
 800967e:	1e05      	subs	r5, r0, #0
 8009680:	d112      	bne.n	80096a8 <__mdiff+0x3c>
 8009682:	4629      	mov	r1, r5
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff fd5d 	bl	8009144 <_Balloc>
 800968a:	4602      	mov	r2, r0
 800968c:	b928      	cbnz	r0, 800969a <__mdiff+0x2e>
 800968e:	f240 2137 	movw	r1, #567	@ 0x237
 8009692:	4b3e      	ldr	r3, [pc, #248]	@ (800978c <__mdiff+0x120>)
 8009694:	483e      	ldr	r0, [pc, #248]	@ (8009790 <__mdiff+0x124>)
 8009696:	f000 f995 	bl	80099c4 <__assert_func>
 800969a:	2301      	movs	r3, #1
 800969c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096a0:	4610      	mov	r0, r2
 80096a2:	b003      	add	sp, #12
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	bfbc      	itt	lt
 80096aa:	464b      	movlt	r3, r9
 80096ac:	46a1      	movlt	r9, r4
 80096ae:	4630      	mov	r0, r6
 80096b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096b4:	bfba      	itte	lt
 80096b6:	461c      	movlt	r4, r3
 80096b8:	2501      	movlt	r5, #1
 80096ba:	2500      	movge	r5, #0
 80096bc:	f7ff fd42 	bl	8009144 <_Balloc>
 80096c0:	4602      	mov	r2, r0
 80096c2:	b918      	cbnz	r0, 80096cc <__mdiff+0x60>
 80096c4:	f240 2145 	movw	r1, #581	@ 0x245
 80096c8:	4b30      	ldr	r3, [pc, #192]	@ (800978c <__mdiff+0x120>)
 80096ca:	e7e3      	b.n	8009694 <__mdiff+0x28>
 80096cc:	f100 0b14 	add.w	fp, r0, #20
 80096d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096d4:	f109 0310 	add.w	r3, r9, #16
 80096d8:	60c5      	str	r5, [r0, #12]
 80096da:	f04f 0c00 	mov.w	ip, #0
 80096de:	f109 0514 	add.w	r5, r9, #20
 80096e2:	46d9      	mov	r9, fp
 80096e4:	6926      	ldr	r6, [r4, #16]
 80096e6:	f104 0e14 	add.w	lr, r4, #20
 80096ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096fe:	b281      	uxth	r1, r0
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	fa1f f38a 	uxth.w	r3, sl
 8009706:	1a5b      	subs	r3, r3, r1
 8009708:	0c00      	lsrs	r0, r0, #16
 800970a:	4463      	add	r3, ip
 800970c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009710:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009714:	b29b      	uxth	r3, r3
 8009716:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800971a:	4576      	cmp	r6, lr
 800971c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009720:	f849 3b04 	str.w	r3, [r9], #4
 8009724:	d8e6      	bhi.n	80096f4 <__mdiff+0x88>
 8009726:	1b33      	subs	r3, r6, r4
 8009728:	3b15      	subs	r3, #21
 800972a:	f023 0303 	bic.w	r3, r3, #3
 800972e:	3415      	adds	r4, #21
 8009730:	3304      	adds	r3, #4
 8009732:	42a6      	cmp	r6, r4
 8009734:	bf38      	it	cc
 8009736:	2304      	movcc	r3, #4
 8009738:	441d      	add	r5, r3
 800973a:	445b      	add	r3, fp
 800973c:	461e      	mov	r6, r3
 800973e:	462c      	mov	r4, r5
 8009740:	4544      	cmp	r4, r8
 8009742:	d30e      	bcc.n	8009762 <__mdiff+0xf6>
 8009744:	f108 0103 	add.w	r1, r8, #3
 8009748:	1b49      	subs	r1, r1, r5
 800974a:	f021 0103 	bic.w	r1, r1, #3
 800974e:	3d03      	subs	r5, #3
 8009750:	45a8      	cmp	r8, r5
 8009752:	bf38      	it	cc
 8009754:	2100      	movcc	r1, #0
 8009756:	440b      	add	r3, r1
 8009758:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800975c:	b199      	cbz	r1, 8009786 <__mdiff+0x11a>
 800975e:	6117      	str	r7, [r2, #16]
 8009760:	e79e      	b.n	80096a0 <__mdiff+0x34>
 8009762:	46e6      	mov	lr, ip
 8009764:	f854 1b04 	ldr.w	r1, [r4], #4
 8009768:	fa1f fc81 	uxth.w	ip, r1
 800976c:	44f4      	add	ip, lr
 800976e:	0c08      	lsrs	r0, r1, #16
 8009770:	4471      	add	r1, lr
 8009772:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009776:	b289      	uxth	r1, r1
 8009778:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800977c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009780:	f846 1b04 	str.w	r1, [r6], #4
 8009784:	e7dc      	b.n	8009740 <__mdiff+0xd4>
 8009786:	3f01      	subs	r7, #1
 8009788:	e7e6      	b.n	8009758 <__mdiff+0xec>
 800978a:	bf00      	nop
 800978c:	0800a32a 	.word	0x0800a32a
 8009790:	0800a33b 	.word	0x0800a33b

08009794 <__d2b>:
 8009794:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009798:	2101      	movs	r1, #1
 800979a:	4690      	mov	r8, r2
 800979c:	4699      	mov	r9, r3
 800979e:	9e08      	ldr	r6, [sp, #32]
 80097a0:	f7ff fcd0 	bl	8009144 <_Balloc>
 80097a4:	4604      	mov	r4, r0
 80097a6:	b930      	cbnz	r0, 80097b6 <__d2b+0x22>
 80097a8:	4602      	mov	r2, r0
 80097aa:	f240 310f 	movw	r1, #783	@ 0x30f
 80097ae:	4b23      	ldr	r3, [pc, #140]	@ (800983c <__d2b+0xa8>)
 80097b0:	4823      	ldr	r0, [pc, #140]	@ (8009840 <__d2b+0xac>)
 80097b2:	f000 f907 	bl	80099c4 <__assert_func>
 80097b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097be:	b10d      	cbz	r5, 80097c4 <__d2b+0x30>
 80097c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f1b8 0300 	subs.w	r3, r8, #0
 80097ca:	d024      	beq.n	8009816 <__d2b+0x82>
 80097cc:	4668      	mov	r0, sp
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	f7ff fd7f 	bl	80092d2 <__lo0bits>
 80097d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097d8:	b1d8      	cbz	r0, 8009812 <__d2b+0x7e>
 80097da:	f1c0 0320 	rsb	r3, r0, #32
 80097de:	fa02 f303 	lsl.w	r3, r2, r3
 80097e2:	430b      	orrs	r3, r1
 80097e4:	40c2      	lsrs	r2, r0
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	9201      	str	r2, [sp, #4]
 80097ea:	9b01      	ldr	r3, [sp, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bf0c      	ite	eq
 80097f0:	2201      	moveq	r2, #1
 80097f2:	2202      	movne	r2, #2
 80097f4:	61a3      	str	r3, [r4, #24]
 80097f6:	6122      	str	r2, [r4, #16]
 80097f8:	b1ad      	cbz	r5, 8009826 <__d2b+0x92>
 80097fa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097fe:	4405      	add	r5, r0
 8009800:	6035      	str	r5, [r6, #0]
 8009802:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009808:	6018      	str	r0, [r3, #0]
 800980a:	4620      	mov	r0, r4
 800980c:	b002      	add	sp, #8
 800980e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009812:	6161      	str	r1, [r4, #20]
 8009814:	e7e9      	b.n	80097ea <__d2b+0x56>
 8009816:	a801      	add	r0, sp, #4
 8009818:	f7ff fd5b 	bl	80092d2 <__lo0bits>
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	6163      	str	r3, [r4, #20]
 8009822:	3020      	adds	r0, #32
 8009824:	e7e7      	b.n	80097f6 <__d2b+0x62>
 8009826:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800982a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800982e:	6030      	str	r0, [r6, #0]
 8009830:	6918      	ldr	r0, [r3, #16]
 8009832:	f7ff fd2f 	bl	8009294 <__hi0bits>
 8009836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800983a:	e7e4      	b.n	8009806 <__d2b+0x72>
 800983c:	0800a32a 	.word	0x0800a32a
 8009840:	0800a33b 	.word	0x0800a33b

08009844 <_malloc_usable_size_r>:
 8009844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009848:	1f18      	subs	r0, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	bfbc      	itt	lt
 800984e:	580b      	ldrlt	r3, [r1, r0]
 8009850:	18c0      	addlt	r0, r0, r3
 8009852:	4770      	bx	lr

08009854 <__sflush_r>:
 8009854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	0716      	lsls	r6, r2, #28
 800985c:	4605      	mov	r5, r0
 800985e:	460c      	mov	r4, r1
 8009860:	d454      	bmi.n	800990c <__sflush_r+0xb8>
 8009862:	684b      	ldr	r3, [r1, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	dc02      	bgt.n	800986e <__sflush_r+0x1a>
 8009868:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	dd48      	ble.n	8009900 <__sflush_r+0xac>
 800986e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009870:	2e00      	cmp	r6, #0
 8009872:	d045      	beq.n	8009900 <__sflush_r+0xac>
 8009874:	2300      	movs	r3, #0
 8009876:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800987a:	682f      	ldr	r7, [r5, #0]
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	602b      	str	r3, [r5, #0]
 8009880:	d030      	beq.n	80098e4 <__sflush_r+0x90>
 8009882:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	0759      	lsls	r1, r3, #29
 8009888:	d505      	bpl.n	8009896 <__sflush_r+0x42>
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	1ad2      	subs	r2, r2, r3
 800988e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009890:	b10b      	cbz	r3, 8009896 <__sflush_r+0x42>
 8009892:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009894:	1ad2      	subs	r2, r2, r3
 8009896:	2300      	movs	r3, #0
 8009898:	4628      	mov	r0, r5
 800989a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800989c:	6a21      	ldr	r1, [r4, #32]
 800989e:	47b0      	blx	r6
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	d106      	bne.n	80098b4 <__sflush_r+0x60>
 80098a6:	6829      	ldr	r1, [r5, #0]
 80098a8:	291d      	cmp	r1, #29
 80098aa:	d82b      	bhi.n	8009904 <__sflush_r+0xb0>
 80098ac:	4a28      	ldr	r2, [pc, #160]	@ (8009950 <__sflush_r+0xfc>)
 80098ae:	410a      	asrs	r2, r1
 80098b0:	07d6      	lsls	r6, r2, #31
 80098b2:	d427      	bmi.n	8009904 <__sflush_r+0xb0>
 80098b4:	2200      	movs	r2, #0
 80098b6:	6062      	str	r2, [r4, #4]
 80098b8:	6922      	ldr	r2, [r4, #16]
 80098ba:	04d9      	lsls	r1, r3, #19
 80098bc:	6022      	str	r2, [r4, #0]
 80098be:	d504      	bpl.n	80098ca <__sflush_r+0x76>
 80098c0:	1c42      	adds	r2, r0, #1
 80098c2:	d101      	bne.n	80098c8 <__sflush_r+0x74>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b903      	cbnz	r3, 80098ca <__sflush_r+0x76>
 80098c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80098ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098cc:	602f      	str	r7, [r5, #0]
 80098ce:	b1b9      	cbz	r1, 8009900 <__sflush_r+0xac>
 80098d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d002      	beq.n	80098de <__sflush_r+0x8a>
 80098d8:	4628      	mov	r0, r5
 80098da:	f7ff fb35 	bl	8008f48 <_free_r>
 80098de:	2300      	movs	r3, #0
 80098e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098e2:	e00d      	b.n	8009900 <__sflush_r+0xac>
 80098e4:	2301      	movs	r3, #1
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b0      	blx	r6
 80098ea:	4602      	mov	r2, r0
 80098ec:	1c50      	adds	r0, r2, #1
 80098ee:	d1c9      	bne.n	8009884 <__sflush_r+0x30>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0c6      	beq.n	8009884 <__sflush_r+0x30>
 80098f6:	2b1d      	cmp	r3, #29
 80098f8:	d001      	beq.n	80098fe <__sflush_r+0xaa>
 80098fa:	2b16      	cmp	r3, #22
 80098fc:	d11d      	bne.n	800993a <__sflush_r+0xe6>
 80098fe:	602f      	str	r7, [r5, #0]
 8009900:	2000      	movs	r0, #0
 8009902:	e021      	b.n	8009948 <__sflush_r+0xf4>
 8009904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009908:	b21b      	sxth	r3, r3
 800990a:	e01a      	b.n	8009942 <__sflush_r+0xee>
 800990c:	690f      	ldr	r7, [r1, #16]
 800990e:	2f00      	cmp	r7, #0
 8009910:	d0f6      	beq.n	8009900 <__sflush_r+0xac>
 8009912:	0793      	lsls	r3, r2, #30
 8009914:	bf18      	it	ne
 8009916:	2300      	movne	r3, #0
 8009918:	680e      	ldr	r6, [r1, #0]
 800991a:	bf08      	it	eq
 800991c:	694b      	ldreq	r3, [r1, #20]
 800991e:	1bf6      	subs	r6, r6, r7
 8009920:	600f      	str	r7, [r1, #0]
 8009922:	608b      	str	r3, [r1, #8]
 8009924:	2e00      	cmp	r6, #0
 8009926:	ddeb      	ble.n	8009900 <__sflush_r+0xac>
 8009928:	4633      	mov	r3, r6
 800992a:	463a      	mov	r2, r7
 800992c:	4628      	mov	r0, r5
 800992e:	6a21      	ldr	r1, [r4, #32]
 8009930:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009934:	47e0      	blx	ip
 8009936:	2800      	cmp	r0, #0
 8009938:	dc07      	bgt.n	800994a <__sflush_r+0xf6>
 800993a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800994a:	4407      	add	r7, r0
 800994c:	1a36      	subs	r6, r6, r0
 800994e:	e7e9      	b.n	8009924 <__sflush_r+0xd0>
 8009950:	dfbffffe 	.word	0xdfbffffe

08009954 <_fflush_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	690b      	ldr	r3, [r1, #16]
 8009958:	4605      	mov	r5, r0
 800995a:	460c      	mov	r4, r1
 800995c:	b913      	cbnz	r3, 8009964 <_fflush_r+0x10>
 800995e:	2500      	movs	r5, #0
 8009960:	4628      	mov	r0, r5
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	b118      	cbz	r0, 800996e <_fflush_r+0x1a>
 8009966:	6a03      	ldr	r3, [r0, #32]
 8009968:	b90b      	cbnz	r3, 800996e <_fflush_r+0x1a>
 800996a:	f7fe fb87 	bl	800807c <__sinit>
 800996e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0f3      	beq.n	800995e <_fflush_r+0xa>
 8009976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009978:	07d0      	lsls	r0, r2, #31
 800997a:	d404      	bmi.n	8009986 <_fflush_r+0x32>
 800997c:	0599      	lsls	r1, r3, #22
 800997e:	d402      	bmi.n	8009986 <_fflush_r+0x32>
 8009980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009982:	f7fe fc72 	bl	800826a <__retarget_lock_acquire_recursive>
 8009986:	4628      	mov	r0, r5
 8009988:	4621      	mov	r1, r4
 800998a:	f7ff ff63 	bl	8009854 <__sflush_r>
 800998e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009990:	4605      	mov	r5, r0
 8009992:	07da      	lsls	r2, r3, #31
 8009994:	d4e4      	bmi.n	8009960 <_fflush_r+0xc>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	059b      	lsls	r3, r3, #22
 800999a:	d4e1      	bmi.n	8009960 <_fflush_r+0xc>
 800999c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800999e:	f7fe fc65 	bl	800826c <__retarget_lock_release_recursive>
 80099a2:	e7dd      	b.n	8009960 <_fflush_r+0xc>

080099a4 <_sbrk_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	2300      	movs	r3, #0
 80099a8:	4d05      	ldr	r5, [pc, #20]	@ (80099c0 <_sbrk_r+0x1c>)
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	f7fa fb68 	bl	8004084 <_sbrk>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_sbrk_r+0x1a>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b103      	cbz	r3, 80099be <_sbrk_r+0x1a>
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	20000f60 	.word	0x20000f60

080099c4 <__assert_func>:
 80099c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099c6:	4614      	mov	r4, r2
 80099c8:	461a      	mov	r2, r3
 80099ca:	4b09      	ldr	r3, [pc, #36]	@ (80099f0 <__assert_func+0x2c>)
 80099cc:	4605      	mov	r5, r0
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68d8      	ldr	r0, [r3, #12]
 80099d2:	b954      	cbnz	r4, 80099ea <__assert_func+0x26>
 80099d4:	4b07      	ldr	r3, [pc, #28]	@ (80099f4 <__assert_func+0x30>)
 80099d6:	461c      	mov	r4, r3
 80099d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099dc:	9100      	str	r1, [sp, #0]
 80099de:	462b      	mov	r3, r5
 80099e0:	4905      	ldr	r1, [pc, #20]	@ (80099f8 <__assert_func+0x34>)
 80099e2:	f000 f841 	bl	8009a68 <fiprintf>
 80099e6:	f000 f851 	bl	8009a8c <abort>
 80099ea:	4b04      	ldr	r3, [pc, #16]	@ (80099fc <__assert_func+0x38>)
 80099ec:	e7f4      	b.n	80099d8 <__assert_func+0x14>
 80099ee:	bf00      	nop
 80099f0:	200000cc 	.word	0x200000cc
 80099f4:	0800a4d5 	.word	0x0800a4d5
 80099f8:	0800a4a7 	.word	0x0800a4a7
 80099fc:	0800a49a 	.word	0x0800a49a

08009a00 <_calloc_r>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	fba1 5402 	umull	r5, r4, r1, r2
 8009a06:	b93c      	cbnz	r4, 8009a18 <_calloc_r+0x18>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f7ff fb0f 	bl	800902c <_malloc_r>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	b928      	cbnz	r0, 8009a1e <_calloc_r+0x1e>
 8009a12:	2600      	movs	r6, #0
 8009a14:	4630      	mov	r0, r6
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	220c      	movs	r2, #12
 8009a1a:	6002      	str	r2, [r0, #0]
 8009a1c:	e7f9      	b.n	8009a12 <_calloc_r+0x12>
 8009a1e:	462a      	mov	r2, r5
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7fe fba4 	bl	800816e <memset>
 8009a26:	e7f5      	b.n	8009a14 <_calloc_r+0x14>

08009a28 <__ascii_mbtowc>:
 8009a28:	b082      	sub	sp, #8
 8009a2a:	b901      	cbnz	r1, 8009a2e <__ascii_mbtowc+0x6>
 8009a2c:	a901      	add	r1, sp, #4
 8009a2e:	b142      	cbz	r2, 8009a42 <__ascii_mbtowc+0x1a>
 8009a30:	b14b      	cbz	r3, 8009a46 <__ascii_mbtowc+0x1e>
 8009a32:	7813      	ldrb	r3, [r2, #0]
 8009a34:	600b      	str	r3, [r1, #0]
 8009a36:	7812      	ldrb	r2, [r2, #0]
 8009a38:	1e10      	subs	r0, r2, #0
 8009a3a:	bf18      	it	ne
 8009a3c:	2001      	movne	r0, #1
 8009a3e:	b002      	add	sp, #8
 8009a40:	4770      	bx	lr
 8009a42:	4610      	mov	r0, r2
 8009a44:	e7fb      	b.n	8009a3e <__ascii_mbtowc+0x16>
 8009a46:	f06f 0001 	mvn.w	r0, #1
 8009a4a:	e7f8      	b.n	8009a3e <__ascii_mbtowc+0x16>

08009a4c <__ascii_wctomb>:
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4608      	mov	r0, r1
 8009a50:	b141      	cbz	r1, 8009a64 <__ascii_wctomb+0x18>
 8009a52:	2aff      	cmp	r2, #255	@ 0xff
 8009a54:	d904      	bls.n	8009a60 <__ascii_wctomb+0x14>
 8009a56:	228a      	movs	r2, #138	@ 0x8a
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	4770      	bx	lr
 8009a60:	2001      	movs	r0, #1
 8009a62:	700a      	strb	r2, [r1, #0]
 8009a64:	4770      	bx	lr
	...

08009a68 <fiprintf>:
 8009a68:	b40e      	push	{r1, r2, r3}
 8009a6a:	b503      	push	{r0, r1, lr}
 8009a6c:	4601      	mov	r1, r0
 8009a6e:	ab03      	add	r3, sp, #12
 8009a70:	4805      	ldr	r0, [pc, #20]	@ (8009a88 <fiprintf+0x20>)
 8009a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a76:	6800      	ldr	r0, [r0, #0]
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	f000 f835 	bl	8009ae8 <_vfiprintf_r>
 8009a7e:	b002      	add	sp, #8
 8009a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a84:	b003      	add	sp, #12
 8009a86:	4770      	bx	lr
 8009a88:	200000cc 	.word	0x200000cc

08009a8c <abort>:
 8009a8c:	2006      	movs	r0, #6
 8009a8e:	b508      	push	{r3, lr}
 8009a90:	f000 f9fe 	bl	8009e90 <raise>
 8009a94:	2001      	movs	r0, #1
 8009a96:	f7fa fa80 	bl	8003f9a <_exit>

08009a9a <__sfputc_r>:
 8009a9a:	6893      	ldr	r3, [r2, #8]
 8009a9c:	b410      	push	{r4}
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	6093      	str	r3, [r2, #8]
 8009aa4:	da07      	bge.n	8009ab6 <__sfputc_r+0x1c>
 8009aa6:	6994      	ldr	r4, [r2, #24]
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	db01      	blt.n	8009ab0 <__sfputc_r+0x16>
 8009aac:	290a      	cmp	r1, #10
 8009aae:	d102      	bne.n	8009ab6 <__sfputc_r+0x1c>
 8009ab0:	bc10      	pop	{r4}
 8009ab2:	f000 b931 	b.w	8009d18 <__swbuf_r>
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	1c58      	adds	r0, r3, #1
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	7019      	strb	r1, [r3, #0]
 8009abe:	4608      	mov	r0, r1
 8009ac0:	bc10      	pop	{r4}
 8009ac2:	4770      	bx	lr

08009ac4 <__sfputs_r>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	4614      	mov	r4, r2
 8009acc:	18d5      	adds	r5, r2, r3
 8009ace:	42ac      	cmp	r4, r5
 8009ad0:	d101      	bne.n	8009ad6 <__sfputs_r+0x12>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e007      	b.n	8009ae6 <__sfputs_r+0x22>
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ade:	f7ff ffdc 	bl	8009a9a <__sfputc_r>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d1f3      	bne.n	8009ace <__sfputs_r+0xa>
 8009ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ae8 <_vfiprintf_r>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	460d      	mov	r5, r1
 8009aee:	4614      	mov	r4, r2
 8009af0:	4698      	mov	r8, r3
 8009af2:	4606      	mov	r6, r0
 8009af4:	b09d      	sub	sp, #116	@ 0x74
 8009af6:	b118      	cbz	r0, 8009b00 <_vfiprintf_r+0x18>
 8009af8:	6a03      	ldr	r3, [r0, #32]
 8009afa:	b90b      	cbnz	r3, 8009b00 <_vfiprintf_r+0x18>
 8009afc:	f7fe fabe 	bl	800807c <__sinit>
 8009b00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b0e:	f7fe fbac 	bl	800826a <__retarget_lock_acquire_recursive>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	071b      	lsls	r3, r3, #28
 8009b16:	d501      	bpl.n	8009b1c <_vfiprintf_r+0x34>
 8009b18:	692b      	ldr	r3, [r5, #16]
 8009b1a:	b99b      	cbnz	r3, 8009b44 <_vfiprintf_r+0x5c>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f000 f938 	bl	8009d94 <__swsetup_r>
 8009b24:	b170      	cbz	r0, 8009b44 <_vfiprintf_r+0x5c>
 8009b26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b28:	07dc      	lsls	r4, r3, #31
 8009b2a:	d504      	bpl.n	8009b36 <_vfiprintf_r+0x4e>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b30:	b01d      	add	sp, #116	@ 0x74
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	0598      	lsls	r0, r3, #22
 8009b3a:	d4f7      	bmi.n	8009b2c <_vfiprintf_r+0x44>
 8009b3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b3e:	f7fe fb95 	bl	800826c <__retarget_lock_release_recursive>
 8009b42:	e7f3      	b.n	8009b2c <_vfiprintf_r+0x44>
 8009b44:	2300      	movs	r3, #0
 8009b46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b4e:	2330      	movs	r3, #48	@ 0x30
 8009b50:	f04f 0901 	mov.w	r9, #1
 8009b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b58:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d04 <_vfiprintf_r+0x21c>
 8009b5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b60:	4623      	mov	r3, r4
 8009b62:	469a      	mov	sl, r3
 8009b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b68:	b10a      	cbz	r2, 8009b6e <_vfiprintf_r+0x86>
 8009b6a:	2a25      	cmp	r2, #37	@ 0x25
 8009b6c:	d1f9      	bne.n	8009b62 <_vfiprintf_r+0x7a>
 8009b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b72:	d00b      	beq.n	8009b8c <_vfiprintf_r+0xa4>
 8009b74:	465b      	mov	r3, fp
 8009b76:	4622      	mov	r2, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ffa2 	bl	8009ac4 <__sfputs_r>
 8009b80:	3001      	adds	r0, #1
 8009b82:	f000 80a7 	beq.w	8009cd4 <_vfiprintf_r+0x1ec>
 8009b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b88:	445a      	add	r2, fp
 8009b8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 809f 	beq.w	8009cd4 <_vfiprintf_r+0x1ec>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bac:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bae:	4654      	mov	r4, sl
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb6:	4853      	ldr	r0, [pc, #332]	@ (8009d04 <_vfiprintf_r+0x21c>)
 8009bb8:	f7fe fb59 	bl	800826e <memchr>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	b9d8      	cbnz	r0, 8009bf8 <_vfiprintf_r+0x110>
 8009bc0:	06d1      	lsls	r1, r2, #27
 8009bc2:	bf44      	itt	mi
 8009bc4:	2320      	movmi	r3, #32
 8009bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bca:	0713      	lsls	r3, r2, #28
 8009bcc:	bf44      	itt	mi
 8009bce:	232b      	movmi	r3, #43	@ 0x2b
 8009bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bda:	d015      	beq.n	8009c08 <_vfiprintf_r+0x120>
 8009bdc:	4654      	mov	r4, sl
 8009bde:	2000      	movs	r0, #0
 8009be0:	f04f 0c0a 	mov.w	ip, #10
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	4621      	mov	r1, r4
 8009be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bec:	3b30      	subs	r3, #48	@ 0x30
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d94b      	bls.n	8009c8a <_vfiprintf_r+0x1a2>
 8009bf2:	b1b0      	cbz	r0, 8009c22 <_vfiprintf_r+0x13a>
 8009bf4:	9207      	str	r2, [sp, #28]
 8009bf6:	e014      	b.n	8009c22 <_vfiprintf_r+0x13a>
 8009bf8:	eba0 0308 	sub.w	r3, r0, r8
 8009bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009c00:	4313      	orrs	r3, r2
 8009c02:	46a2      	mov	sl, r4
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	e7d2      	b.n	8009bae <_vfiprintf_r+0xc6>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	1d19      	adds	r1, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	9103      	str	r1, [sp, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfbb      	ittet	lt
 8009c14:	425b      	neglt	r3, r3
 8009c16:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1a:	9307      	strge	r3, [sp, #28]
 8009c1c:	9307      	strlt	r3, [sp, #28]
 8009c1e:	bfb8      	it	lt
 8009c20:	9204      	strlt	r2, [sp, #16]
 8009c22:	7823      	ldrb	r3, [r4, #0]
 8009c24:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c26:	d10a      	bne.n	8009c3e <_vfiprintf_r+0x156>
 8009c28:	7863      	ldrb	r3, [r4, #1]
 8009c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2c:	d132      	bne.n	8009c94 <_vfiprintf_r+0x1ac>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	3402      	adds	r4, #2
 8009c32:	1d1a      	adds	r2, r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	9203      	str	r2, [sp, #12]
 8009c38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d08 <_vfiprintf_r+0x220>
 8009c42:	2203      	movs	r2, #3
 8009c44:	4650      	mov	r0, sl
 8009c46:	7821      	ldrb	r1, [r4, #0]
 8009c48:	f7fe fb11 	bl	800826e <memchr>
 8009c4c:	b138      	cbz	r0, 8009c5e <_vfiprintf_r+0x176>
 8009c4e:	2240      	movs	r2, #64	@ 0x40
 8009c50:	9b04      	ldr	r3, [sp, #16]
 8009c52:	eba0 000a 	sub.w	r0, r0, sl
 8009c56:	4082      	lsls	r2, r0
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	3401      	adds	r4, #1
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c62:	2206      	movs	r2, #6
 8009c64:	4829      	ldr	r0, [pc, #164]	@ (8009d0c <_vfiprintf_r+0x224>)
 8009c66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c6a:	f7fe fb00 	bl	800826e <memchr>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d03f      	beq.n	8009cf2 <_vfiprintf_r+0x20a>
 8009c72:	4b27      	ldr	r3, [pc, #156]	@ (8009d10 <_vfiprintf_r+0x228>)
 8009c74:	bb1b      	cbnz	r3, 8009cbe <_vfiprintf_r+0x1d6>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	3307      	adds	r3, #7
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	3308      	adds	r3, #8
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c84:	443b      	add	r3, r7
 8009c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c88:	e76a      	b.n	8009b60 <_vfiprintf_r+0x78>
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c92:	e7a8      	b.n	8009be6 <_vfiprintf_r+0xfe>
 8009c94:	2300      	movs	r3, #0
 8009c96:	f04f 0c0a 	mov.w	ip, #10
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	3401      	adds	r4, #1
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca6:	3a30      	subs	r2, #48	@ 0x30
 8009ca8:	2a09      	cmp	r2, #9
 8009caa:	d903      	bls.n	8009cb4 <_vfiprintf_r+0x1cc>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0c6      	beq.n	8009c3e <_vfiprintf_r+0x156>
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	e7c4      	b.n	8009c3e <_vfiprintf_r+0x156>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cbc:	e7f0      	b.n	8009ca0 <_vfiprintf_r+0x1b8>
 8009cbe:	ab03      	add	r3, sp, #12
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4b13      	ldr	r3, [pc, #76]	@ (8009d14 <_vfiprintf_r+0x22c>)
 8009cc8:	a904      	add	r1, sp, #16
 8009cca:	f7fd fd8d 	bl	80077e8 <_printf_float>
 8009cce:	4607      	mov	r7, r0
 8009cd0:	1c78      	adds	r0, r7, #1
 8009cd2:	d1d6      	bne.n	8009c82 <_vfiprintf_r+0x19a>
 8009cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cd6:	07d9      	lsls	r1, r3, #31
 8009cd8:	d405      	bmi.n	8009ce6 <_vfiprintf_r+0x1fe>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	059a      	lsls	r2, r3, #22
 8009cde:	d402      	bmi.n	8009ce6 <_vfiprintf_r+0x1fe>
 8009ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce2:	f7fe fac3 	bl	800826c <__retarget_lock_release_recursive>
 8009ce6:	89ab      	ldrh	r3, [r5, #12]
 8009ce8:	065b      	lsls	r3, r3, #25
 8009cea:	f53f af1f 	bmi.w	8009b2c <_vfiprintf_r+0x44>
 8009cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cf0:	e71e      	b.n	8009b30 <_vfiprintf_r+0x48>
 8009cf2:	ab03      	add	r3, sp, #12
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	462a      	mov	r2, r5
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <_vfiprintf_r+0x22c>)
 8009cfc:	a904      	add	r1, sp, #16
 8009cfe:	f7fe f811 	bl	8007d24 <_printf_i>
 8009d02:	e7e4      	b.n	8009cce <_vfiprintf_r+0x1e6>
 8009d04:	0800a5d7 	.word	0x0800a5d7
 8009d08:	0800a5dd 	.word	0x0800a5dd
 8009d0c:	0800a5e1 	.word	0x0800a5e1
 8009d10:	080077e9 	.word	0x080077e9
 8009d14:	08009ac5 	.word	0x08009ac5

08009d18 <__swbuf_r>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	460e      	mov	r6, r1
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	4605      	mov	r5, r0
 8009d20:	b118      	cbz	r0, 8009d2a <__swbuf_r+0x12>
 8009d22:	6a03      	ldr	r3, [r0, #32]
 8009d24:	b90b      	cbnz	r3, 8009d2a <__swbuf_r+0x12>
 8009d26:	f7fe f9a9 	bl	800807c <__sinit>
 8009d2a:	69a3      	ldr	r3, [r4, #24]
 8009d2c:	60a3      	str	r3, [r4, #8]
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	071a      	lsls	r2, r3, #28
 8009d32:	d501      	bpl.n	8009d38 <__swbuf_r+0x20>
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	b943      	cbnz	r3, 8009d4a <__swbuf_r+0x32>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f82a 	bl	8009d94 <__swsetup_r>
 8009d40:	b118      	cbz	r0, 8009d4a <__swbuf_r+0x32>
 8009d42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009d46:	4638      	mov	r0, r7
 8009d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	6922      	ldr	r2, [r4, #16]
 8009d4e:	b2f6      	uxtb	r6, r6
 8009d50:	1a98      	subs	r0, r3, r2
 8009d52:	6963      	ldr	r3, [r4, #20]
 8009d54:	4637      	mov	r7, r6
 8009d56:	4283      	cmp	r3, r0
 8009d58:	dc05      	bgt.n	8009d66 <__swbuf_r+0x4e>
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f7ff fdf9 	bl	8009954 <_fflush_r>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d1ed      	bne.n	8009d42 <__swbuf_r+0x2a>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	60a3      	str	r3, [r4, #8]
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	6022      	str	r2, [r4, #0]
 8009d72:	701e      	strb	r6, [r3, #0]
 8009d74:	6962      	ldr	r2, [r4, #20]
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d004      	beq.n	8009d86 <__swbuf_r+0x6e>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	07db      	lsls	r3, r3, #31
 8009d80:	d5e1      	bpl.n	8009d46 <__swbuf_r+0x2e>
 8009d82:	2e0a      	cmp	r6, #10
 8009d84:	d1df      	bne.n	8009d46 <__swbuf_r+0x2e>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f7ff fde3 	bl	8009954 <_fflush_r>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0d9      	beq.n	8009d46 <__swbuf_r+0x2e>
 8009d92:	e7d6      	b.n	8009d42 <__swbuf_r+0x2a>

08009d94 <__swsetup_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4b29      	ldr	r3, [pc, #164]	@ (8009e3c <__swsetup_r+0xa8>)
 8009d98:	4605      	mov	r5, r0
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	b118      	cbz	r0, 8009da8 <__swsetup_r+0x14>
 8009da0:	6a03      	ldr	r3, [r0, #32]
 8009da2:	b90b      	cbnz	r3, 8009da8 <__swsetup_r+0x14>
 8009da4:	f7fe f96a 	bl	800807c <__sinit>
 8009da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dac:	0719      	lsls	r1, r3, #28
 8009dae:	d422      	bmi.n	8009df6 <__swsetup_r+0x62>
 8009db0:	06da      	lsls	r2, r3, #27
 8009db2:	d407      	bmi.n	8009dc4 <__swsetup_r+0x30>
 8009db4:	2209      	movs	r2, #9
 8009db6:	602a      	str	r2, [r5, #0]
 8009db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	e033      	b.n	8009e2c <__swsetup_r+0x98>
 8009dc4:	0758      	lsls	r0, r3, #29
 8009dc6:	d512      	bpl.n	8009dee <__swsetup_r+0x5a>
 8009dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dca:	b141      	cbz	r1, 8009dde <__swsetup_r+0x4a>
 8009dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dd0:	4299      	cmp	r1, r3
 8009dd2:	d002      	beq.n	8009dda <__swsetup_r+0x46>
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f7ff f8b7 	bl	8008f48 <_free_r>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	2300      	movs	r3, #0
 8009de8:	6063      	str	r3, [r4, #4]
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f043 0308 	orr.w	r3, r3, #8
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	b94b      	cbnz	r3, 8009e0e <__swsetup_r+0x7a>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e04:	d003      	beq.n	8009e0e <__swsetup_r+0x7a>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f000 f882 	bl	8009f12 <__smakebuf_r>
 8009e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e12:	f013 0201 	ands.w	r2, r3, #1
 8009e16:	d00a      	beq.n	8009e2e <__swsetup_r+0x9a>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	60a2      	str	r2, [r4, #8]
 8009e1c:	6962      	ldr	r2, [r4, #20]
 8009e1e:	4252      	negs	r2, r2
 8009e20:	61a2      	str	r2, [r4, #24]
 8009e22:	6922      	ldr	r2, [r4, #16]
 8009e24:	b942      	cbnz	r2, 8009e38 <__swsetup_r+0xa4>
 8009e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e2a:	d1c5      	bne.n	8009db8 <__swsetup_r+0x24>
 8009e2c:	bd38      	pop	{r3, r4, r5, pc}
 8009e2e:	0799      	lsls	r1, r3, #30
 8009e30:	bf58      	it	pl
 8009e32:	6962      	ldrpl	r2, [r4, #20]
 8009e34:	60a2      	str	r2, [r4, #8]
 8009e36:	e7f4      	b.n	8009e22 <__swsetup_r+0x8e>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e7f7      	b.n	8009e2c <__swsetup_r+0x98>
 8009e3c:	200000cc 	.word	0x200000cc

08009e40 <_raise_r>:
 8009e40:	291f      	cmp	r1, #31
 8009e42:	b538      	push	{r3, r4, r5, lr}
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	d904      	bls.n	8009e54 <_raise_r+0x14>
 8009e4a:	2316      	movs	r3, #22
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e56:	b112      	cbz	r2, 8009e5e <_raise_r+0x1e>
 8009e58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e5c:	b94b      	cbnz	r3, 8009e72 <_raise_r+0x32>
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f830 	bl	8009ec4 <_getpid_r>
 8009e64:	4622      	mov	r2, r4
 8009e66:	4601      	mov	r1, r0
 8009e68:	4628      	mov	r0, r5
 8009e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6e:	f000 b817 	b.w	8009ea0 <_kill_r>
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d00a      	beq.n	8009e8c <_raise_r+0x4c>
 8009e76:	1c59      	adds	r1, r3, #1
 8009e78:	d103      	bne.n	8009e82 <_raise_r+0x42>
 8009e7a:	2316      	movs	r3, #22
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	2001      	movs	r0, #1
 8009e80:	e7e7      	b.n	8009e52 <_raise_r+0x12>
 8009e82:	2100      	movs	r1, #0
 8009e84:	4620      	mov	r0, r4
 8009e86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e8a:	4798      	blx	r3
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e7e0      	b.n	8009e52 <_raise_r+0x12>

08009e90 <raise>:
 8009e90:	4b02      	ldr	r3, [pc, #8]	@ (8009e9c <raise+0xc>)
 8009e92:	4601      	mov	r1, r0
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	f7ff bfd3 	b.w	8009e40 <_raise_r>
 8009e9a:	bf00      	nop
 8009e9c:	200000cc 	.word	0x200000cc

08009ea0 <_kill_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4d06      	ldr	r5, [pc, #24]	@ (8009ec0 <_kill_r+0x20>)
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	f7fa f864 	bl	8003f7a <_kill>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d102      	bne.n	8009ebc <_kill_r+0x1c>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b103      	cbz	r3, 8009ebc <_kill_r+0x1c>
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000f60 	.word	0x20000f60

08009ec4 <_getpid_r>:
 8009ec4:	f7fa b852 	b.w	8003f6c <_getpid>

08009ec8 <__swhatbuf_r>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	460c      	mov	r4, r1
 8009ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed0:	4615      	mov	r5, r2
 8009ed2:	2900      	cmp	r1, #0
 8009ed4:	461e      	mov	r6, r3
 8009ed6:	b096      	sub	sp, #88	@ 0x58
 8009ed8:	da0c      	bge.n	8009ef4 <__swhatbuf_r+0x2c>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	2100      	movs	r1, #0
 8009ede:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ee2:	bf14      	ite	ne
 8009ee4:	2340      	movne	r3, #64	@ 0x40
 8009ee6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009eea:	2000      	movs	r0, #0
 8009eec:	6031      	str	r1, [r6, #0]
 8009eee:	602b      	str	r3, [r5, #0]
 8009ef0:	b016      	add	sp, #88	@ 0x58
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	466a      	mov	r2, sp
 8009ef6:	f000 f849 	bl	8009f8c <_fstat_r>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	dbed      	blt.n	8009eda <__swhatbuf_r+0x12>
 8009efe:	9901      	ldr	r1, [sp, #4]
 8009f00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f08:	4259      	negs	r1, r3
 8009f0a:	4159      	adcs	r1, r3
 8009f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f10:	e7eb      	b.n	8009eea <__swhatbuf_r+0x22>

08009f12 <__smakebuf_r>:
 8009f12:	898b      	ldrh	r3, [r1, #12]
 8009f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f16:	079d      	lsls	r5, r3, #30
 8009f18:	4606      	mov	r6, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	d507      	bpl.n	8009f2e <__smakebuf_r+0x1c>
 8009f1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	6123      	str	r3, [r4, #16]
 8009f26:	2301      	movs	r3, #1
 8009f28:	6163      	str	r3, [r4, #20]
 8009f2a:	b003      	add	sp, #12
 8009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2e:	466a      	mov	r2, sp
 8009f30:	ab01      	add	r3, sp, #4
 8009f32:	f7ff ffc9 	bl	8009ec8 <__swhatbuf_r>
 8009f36:	9f00      	ldr	r7, [sp, #0]
 8009f38:	4605      	mov	r5, r0
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7ff f875 	bl	800902c <_malloc_r>
 8009f42:	b948      	cbnz	r0, 8009f58 <__smakebuf_r+0x46>
 8009f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d4ee      	bmi.n	8009f2a <__smakebuf_r+0x18>
 8009f4c:	f023 0303 	bic.w	r3, r3, #3
 8009f50:	f043 0302 	orr.w	r3, r3, #2
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	e7e2      	b.n	8009f1e <__smakebuf_r+0xc>
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f62:	81a3      	strh	r3, [r4, #12]
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	6020      	str	r0, [r4, #0]
 8009f68:	b15b      	cbz	r3, 8009f82 <__smakebuf_r+0x70>
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f70:	f000 f81e 	bl	8009fb0 <_isatty_r>
 8009f74:	b128      	cbz	r0, 8009f82 <__smakebuf_r+0x70>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f023 0303 	bic.w	r3, r3, #3
 8009f7c:	f043 0301 	orr.w	r3, r3, #1
 8009f80:	81a3      	strh	r3, [r4, #12]
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	431d      	orrs	r5, r3
 8009f86:	81a5      	strh	r5, [r4, #12]
 8009f88:	e7cf      	b.n	8009f2a <__smakebuf_r+0x18>
	...

08009f8c <_fstat_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	2300      	movs	r3, #0
 8009f90:	4d06      	ldr	r5, [pc, #24]	@ (8009fac <_fstat_r+0x20>)
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	f7fa f84d 	bl	8004038 <_fstat>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d102      	bne.n	8009fa8 <_fstat_r+0x1c>
 8009fa2:	682b      	ldr	r3, [r5, #0]
 8009fa4:	b103      	cbz	r3, 8009fa8 <_fstat_r+0x1c>
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	20000f60 	.word	0x20000f60

08009fb0 <_isatty_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4d05      	ldr	r5, [pc, #20]	@ (8009fcc <_isatty_r+0x1c>)
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f7fa f84b 	bl	8004056 <_isatty>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_isatty_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_isatty_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20000f60 	.word	0x20000f60

08009fd0 <_init>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr

08009fdc <_fini>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr
