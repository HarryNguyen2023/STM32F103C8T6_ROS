
STM32F103C8T6_ROS_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ecc  08003ecc  00005074  2**0
                  CONTENTS
  4 .ARM          00000008  08003ecc  08003ecc  00004ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed4  08003ed4  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003ee0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  20000074  08003f54  00005074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  08003f54  00005b84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d513  00000000  00000000  0000509d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  000125b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00014638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c3  00000000  00000000  00014f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017780  00000000  00000000  000155cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9d5  00000000  00000000  0002cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008774f  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bee6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b0  00000000  00000000  000beeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c1564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c68 	.word	0x08003c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003c68 	.word	0x08003c68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f82a 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f809 	bl	800017a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f884 	bl	8000274 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800016c:	f000 f854 	bl	8000218 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000170:	f001 f9c6 	bl	8001500 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000174:	f001 f9d4 	bl	8001520 <loop>
 8000178:	e7fc      	b.n	8000174 <main+0x18>

0800017a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b090      	sub	sp, #64	@ 0x40
 800017e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	f107 0318 	add.w	r3, r7, #24
 8000184:	2228      	movs	r2, #40	@ 0x28
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f003 fc1d 	bl	80039c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019c:	2301      	movs	r3, #1
 800019e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a6:	2300      	movs	r3, #0
 80001a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ae:	2302      	movs	r3, #2
 80001b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fba4 	bl	8002910 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	bf14      	ite	ne
 80001ce:	2301      	movne	r3, #1
 80001d0:	2300      	moveq	r3, #0
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80001d8:	f000 f896 	bl	8000308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2102      	movs	r1, #2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 fe0c 	bl	8002e14 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	bf14      	ite	ne
 8000202:	2301      	movne	r3, #1
 8000204:	2300      	moveq	r3, #0
 8000206:	b2db      	uxtb	r3, r3
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800020c:	f000 f87c 	bl	8000308 <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3740      	adds	r7, #64	@ 0x40
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800021c:	4b13      	ldr	r3, [pc, #76]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 800021e:	4a14      	ldr	r2, [pc, #80]	@ (8000270 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000238:	2200      	movs	r2, #0
 800023a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800023c:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 800023e:	220c      	movs	r2, #12
 8000240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000242:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000248:	4b08      	ldr	r3, [pc, #32]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800024e:	4807      	ldr	r0, [pc, #28]	@ (800026c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000250:	f002 ff6e 	bl	8003130 <HAL_UART_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	bf14      	ite	ne
 800025a:	2301      	movne	r3, #1
 800025c:	2300      	moveq	r3, #0
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000264:	f000 f850 	bl	8000308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000090 	.word	0x20000090
 8000270:	40013800 	.word	0x40013800

08000274 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b1d      	ldr	r3, [pc, #116]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1c      	ldr	r2, [pc, #112]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b1a      	ldr	r3, [pc, #104]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a0:	4b17      	ldr	r3, [pc, #92]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a16      	ldr	r2, [pc, #88]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0308 	and.w	r3, r3, #8
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a10      	ldr	r2, [pc, #64]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <_ZL12MX_GPIO_Initv+0x8c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2102      	movs	r1, #2
 80002d4:	480b      	ldr	r0, [pc, #44]	@ (8000304 <_ZL12MX_GPIO_Initv+0x90>)
 80002d6:	f002 fae9 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002da:	2302      	movs	r3, #2
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	4804      	ldr	r0, [pc, #16]	@ (8000304 <_ZL12MX_GPIO_Initv+0x90>)
 80002f2:	f002 f957 	bl	80025a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002f6:	bf00      	nop
 80002f8:	3720      	adds	r7, #32
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40010c00 	.word	0x40010c00

08000308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
}
 800030e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <Error_Handler+0x8>

08000314 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4618      	mov	r0, r3
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr

08000334 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <_ZN3ros3MsgC1Ev+0x1c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	08003e90 	.word	0x08003e90

08000354 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
      data()
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ffe8 	bl	8000334 <_ZN3ros3MsgC1Ev>
 8000364:	4a06      	ldr	r2, [pc, #24]	@ (8000380 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3304      	adds	r3, #4
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ffd0 	bl	8000314 <_ZN3ros4TimeC1Ev>
    {
    }
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4618      	mov	r0, r3
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	08003e78 	.word	0x08003e78

08000384 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6859      	ldr	r1, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	4413      	add	r3, r2
 800039c:	b2ca      	uxtb	r2, r1
 800039e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	0a19      	lsrs	r1, r3, #8
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3301      	adds	r3, #1
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	4413      	add	r3, r2
 80003ae:	b2ca      	uxtb	r2, r1
 80003b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	0c19      	lsrs	r1, r3, #16
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3302      	adds	r3, #2
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	4413      	add	r3, r2
 80003c0:	b2ca      	uxtb	r2, r1
 80003c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	0e19      	lsrs	r1, r3, #24
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3303      	adds	r3, #3
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	4413      	add	r3, r2
 80003d2:	b2ca      	uxtb	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3304      	adds	r3, #4
 80003da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6899      	ldr	r1, [r3, #8]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	4413      	add	r3, r2
 80003e6:	b2ca      	uxtb	r2, r1
 80003e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	0a19      	lsrs	r1, r3, #8
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	4413      	add	r3, r2
 80003f8:	b2ca      	uxtb	r2, r1
 80003fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	0c19      	lsrs	r1, r3, #16
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3302      	adds	r3, #2
 8000406:	683a      	ldr	r2, [r7, #0]
 8000408:	4413      	add	r3, r2
 800040a:	b2ca      	uxtb	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	0e19      	lsrs	r1, r3, #24
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	3303      	adds	r3, #3
 8000418:	683a      	ldr	r2, [r7, #0]
 800041a:	4413      	add	r3, r2
 800041c:	b2ca      	uxtb	r2, r1
 800041e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3304      	adds	r3, #4
 8000424:	60fb      	str	r3, [r7, #12]
      return offset;
 8000426:	68fb      	ldr	r3, [r7, #12]
    }
 8000428:	4618      	mov	r0, r3
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000432:	b480      	push	{r7}
 8000434:	b085      	sub	sp, #20
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	4413      	add	r3, r2
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3301      	adds	r3, #1
 8000456:	6839      	ldr	r1, [r7, #0]
 8000458:	440b      	add	r3, r1
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	021b      	lsls	r3, r3, #8
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3302      	adds	r3, #2
 800046c:	6839      	ldr	r1, [r7, #0]
 800046e:	440b      	add	r3, r1
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	041b      	lsls	r3, r3, #16
 8000474:	431a      	orrs	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3303      	adds	r3, #3
 8000482:	6839      	ldr	r1, [r7, #0]
 8000484:	440b      	add	r3, r1
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	061b      	lsls	r3, r3, #24
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3304      	adds	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	4413      	add	r3, r2
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3301      	adds	r3, #1
 80004ac:	6839      	ldr	r1, [r7, #0]
 80004ae:	440b      	add	r3, r1
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	021b      	lsls	r3, r3, #8
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	689a      	ldr	r2, [r3, #8]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3302      	adds	r3, #2
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	440b      	add	r3, r1
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	041b      	lsls	r3, r3, #16
 80004ca:	431a      	orrs	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	689a      	ldr	r2, [r3, #8]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3303      	adds	r3, #3
 80004d8:	6839      	ldr	r1, [r7, #0]
 80004da:	440b      	add	r3, r1
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	061b      	lsls	r3, r3, #24
 80004e0:	431a      	orrs	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3304      	adds	r3, #4
 80004ea:	60fb      	str	r3, [r7, #12]
     return offset;
 80004ec:	68fb      	ldr	r3, [r7, #12]
    }
 80004ee:	4618      	mov	r0, r3
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	08003c80 	.word	0x08003c80

08000510 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	4b02      	ldr	r3, [pc, #8]	@ (8000524 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	08003c90 	.word	0x08003c90

08000528 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fefe 	bl	8000334 <_ZN3ros3MsgC1Ev>
 8000538:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a09      	ldr	r2, [pc, #36]	@ (800056c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000548:	609a      	str	r2, [r3, #8]
      message_type(""),
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a07      	ldr	r2, [pc, #28]	@ (800056c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800054e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a06      	ldr	r2, [pc, #24]	@ (800056c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000554:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
    {
    }
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	08003e60 	.word	0x08003e60
 800056c:	08003cb4 	.word	0x08003cb4

08000570 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	8899      	ldrh	r1, [r3, #4]
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	889b      	ldrh	r3, [r3, #4]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	b299      	uxth	r1, r3
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	3301      	adds	r3, #1
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	4413      	add	r3, r2
 800059c:	b2ca      	uxtb	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	3302      	adds	r3, #2
 80005a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fdce 	bl	800014c <strlen>
 80005b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	69b9      	ldr	r1, [r7, #24]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 ffd0 	bl	8001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	3304      	adds	r3, #4
 80005c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	18d0      	adds	r0, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	69ba      	ldr	r2, [r7, #24]
 80005d2:	4619      	mov	r1, r3
 80005d4:	f003 fa2c 	bl	8003a30 <memcpy>
      offset += length_topic_name;
 80005d8:	69fa      	ldr	r2, [r7, #28]
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	4413      	add	r3, r2
 80005de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdb1 	bl	800014c <strlen>
 80005ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	4413      	add	r3, r2
 80005f2:	6979      	ldr	r1, [r7, #20]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 ffb3 	bl	8001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3304      	adds	r3, #4
 80005fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	18d0      	adds	r0, r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	4619      	mov	r1, r3
 800060e:	f003 fa0f 	bl	8003a30 <memcpy>
      offset += length_message_type;
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fd94 	bl	800014c <strlen>
 8000624:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	6939      	ldr	r1, [r7, #16]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 ff96 	bl	8001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3304      	adds	r3, #4
 8000638:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	18d0      	adds	r0, r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	4619      	mov	r1, r3
 8000648:	f003 f9f2 	bl	8003a30 <memcpy>
      offset += length_md5sum;
 800064c:	69fa      	ldr	r2, [r7, #28]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4413      	add	r3, r2
 8000652:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800065a:	68f9      	ldr	r1, [r7, #12]
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4413      	add	r3, r2
 8000662:	b2ca      	uxtb	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	0a19      	lsrs	r1, r3, #8
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3301      	adds	r3, #1
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	4413      	add	r3, r2
 8000672:	b2ca      	uxtb	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	0c19      	lsrs	r1, r3, #16
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3302      	adds	r3, #2
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	b2ca      	uxtb	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	0e19      	lsrs	r1, r3, #24
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3303      	adds	r3, #3
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	b2ca      	uxtb	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	61fb      	str	r3, [r7, #28]
      return offset;
 800069c:	69fb      	ldr	r3, [r7, #28]
    }
 800069e:	4618      	mov	r0, r3
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b08a      	sub	sp, #40	@ 0x28
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	889b      	ldrh	r3, [r3, #4]
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	3301      	adds	r3, #1
 80006cc:	6839      	ldr	r1, [r7, #0]
 80006ce:	440b      	add	r3, r1
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b21b      	sxth	r3, r3
 80006da:	b29a      	uxth	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	3302      	adds	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	441a      	add	r2, r3
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff52 	bl	800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	3304      	adds	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
 8000702:	e00b      	b.n	800071c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	441a      	add	r2, r3
 800070a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070c:	3b01      	subs	r3, #1
 800070e:	6839      	ldr	r1, [r7, #0]
 8000710:	440b      	add	r3, r1
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000718:	3301      	adds	r3, #1
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000724:	429a      	cmp	r2, r3
 8000726:	d3ed      	bcc.n	8000704 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	4413      	add	r3, r2
 800072e:	3b01      	subs	r3, #1
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	4413      	add	r3, r2
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	3b01      	subs	r3, #1
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	441a      	add	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	4413      	add	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	441a      	add	r2, r3
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f000 ff1f 	bl	800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3304      	adds	r3, #4
 8000762:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	e00b      	b.n	8000782 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	441a      	add	r2, r3
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	3b01      	subs	r3, #1
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	440b      	add	r3, r1
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4413      	add	r3, r2
 8000788:	6a3a      	ldr	r2, [r7, #32]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3ed      	bcc.n	800076a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4413      	add	r3, r2
 8000794:	3b01      	subs	r3, #1
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	441a      	add	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4413      	add	r3, r2
 80007b0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	441a      	add	r2, r3
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 feec 	bl	800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	3304      	adds	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	e00b      	b.n	80007e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	441a      	add	r2, r3
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b01      	subs	r3, #1
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	440b      	add	r3, r1
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3ed      	bcc.n	80007d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	3b01      	subs	r3, #1
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	3b01      	subs	r3, #1
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	441a      	add	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	440a      	add	r2, r1
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	4313      	orrs	r3, r2
 8000828:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	3301      	adds	r3, #1
 8000830:	6839      	ldr	r1, [r7, #0]
 8000832:	440b      	add	r3, r1
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	4313      	orrs	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	3302      	adds	r3, #2
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	440b      	add	r3, r1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	4313      	orrs	r3, r2
 800084c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3303      	adds	r3, #3
 8000854:	6839      	ldr	r1, [r7, #0]
 8000856:	440b      	add	r3, r1
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	061b      	lsls	r3, r3, #24
 800085c:	4313      	orrs	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	3304      	adds	r3, #4
 800086a:	61bb      	str	r3, [r7, #24]
     return offset;
 800086c:	69bb      	ldr	r3, [r7, #24]
    }
 800086e:	4618      	mov	r0, r3
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	4b02      	ldr	r3, [pc, #8]	@ (800088c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	08003cb8 	.word	0x08003cb8

08000890 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	08003cd4 	.word	0x08003cd4

080008a8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fd3e 	bl	8000334 <_ZN3ros3MsgC1Ev>
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
      level(0),
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	711a      	strb	r2, [r3, #4]
      msg("")
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80008c8:	609a      	str	r2, [r3, #8]
    {
    }
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08003e48 	.word	0x08003e48
 80008d8:	08003cb4 	.word	0x08003cb4

080008dc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	7912      	ldrb	r2, [r2, #4]
 80008f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc23 	bl	800014c <strlen>
 8000906:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	4413      	add	r3, r2
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fe25 	bl	8001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3304      	adds	r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	18d0      	adds	r0, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4619      	mov	r1, r3
 800092a:	f003 f881 	bl	8003a30 <memcpy>
      offset += length_msg;
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
      return offset;
 8000936:	68fb      	ldr	r3, [r7, #12]
    }
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	4413      	add	r3, r2
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	3301      	adds	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	441a      	add	r2, r3
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fe15 	bl	800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3304      	adds	r3, #4
 8000976:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00b      	b.n	8000996 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	441a      	add	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3b01      	subs	r3, #1
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	440b      	add	r3, r1
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	3301      	adds	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d3ed      	bcc.n	800097e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	3b01      	subs	r3, #1
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
     return offset;
 80009c6:	693b      	ldr	r3, [r7, #16]
    }
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	08003cf8 	.word	0x08003cf8

080009e8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4b02      	ldr	r3, [pc, #8]	@ (80009fc <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	08003d0c 	.word	0x08003d0c

08000a00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fc92 	bl	8000334 <_ZN3ros3MsgC1Ev>
 8000a10:	4a11      	ldr	r2, [pc, #68]	@ (8000a58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	08003e30 	.word	0x08003e30

08000a5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6859      	ldr	r1, [r3, #4]
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	b2ca      	uxtb	r2, r1
 8000a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	0a19      	lsrs	r1, r3, #8
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	3301      	adds	r3, #1
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	0c19      	lsrs	r1, r3, #16
 8000a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a92:	3302      	adds	r3, #2
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	b2ca      	uxtb	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	0e19      	lsrs	r1, r3, #24
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	3303      	adds	r3, #3
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	e02a      	b.n	8000b10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b2ca      	uxtb	r2, r1
 8000ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	0a19      	lsrs	r1, r3, #8
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2ca      	uxtb	r2, r1
 8000ae2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	0c19      	lsrs	r1, r3, #16
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	3302      	adds	r3, #2
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	b2ca      	uxtb	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	0e19      	lsrs	r1, r3, #24
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afa:	3303      	adds	r3, #3
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	b2ca      	uxtb	r2, r1
 8000b02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	3304      	adds	r3, #4
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	6a3a      	ldr	r2, [r7, #32]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d3cf      	bcc.n	8000aba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6919      	ldr	r1, [r3, #16]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	b2ca      	uxtb	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	0a19      	lsrs	r1, r3, #8
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	3301      	adds	r3, #1
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	0c19      	lsrs	r1, r3, #16
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	3302      	adds	r3, #2
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2ca      	uxtb	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	0e19      	lsrs	r1, r3, #24
 8000b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b54:	3303      	adds	r3, #3
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	3304      	adds	r3, #4
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	e02a      	b.n	8000bc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	699a      	ldr	r2, [r3, #24]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000b78:	68f9      	ldr	r1, [r7, #12]
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2ca      	uxtb	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	0a19      	lsrs	r1, r3, #8
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2ca      	uxtb	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	0c19      	lsrs	r1, r3, #16
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	0e19      	lsrs	r1, r3, #24
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	3303      	adds	r3, #3
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2ca      	uxtb	r2, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3cf      	bcc.n	8000b6a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	69d9      	ldr	r1, [r3, #28]
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b2ca      	uxtb	r2, r1
 8000bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	0a19      	lsrs	r1, r3, #8
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	3301      	adds	r3, #1
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	0c19      	lsrs	r1, r3, #16
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	0e19      	lsrs	r1, r3, #24
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	3303      	adds	r3, #3
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c10:	3304      	adds	r3, #4
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	e027      	b.n	8000c6a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fa90 	bl	800014c <strlen>
 8000c2c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	6979      	ldr	r1, [r7, #20]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fc92 	bl	8001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3e:	3304      	adds	r3, #4
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	18d0      	adds	r0, r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	4619      	mov	r1, r3
 8000c58:	f002 feea 	bl	8003a30 <memcpy>
      offset += length_stringsi;
 8000c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4413      	add	r3, r2
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	3301      	adds	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3d2      	bcc.n	8000c1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000c76:	4618      	mov	r0, r3
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b08e      	sub	sp, #56	@ 0x38
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c98:	3301      	adds	r3, #1
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	6a3a      	ldr	r2, [r7, #32]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000caa:	3302      	adds	r3, #2
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	041b      	lsls	r3, r3, #16
 8000cb4:	6a3a      	ldr	r2, [r7, #32]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbc:	3303      	adds	r3, #3
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	061b      	lsls	r3, r3, #24
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cce:	3304      	adds	r3, #4
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	6a3a      	ldr	r2, [r7, #32]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d90a      	bls.n	8000cf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	f002 fe38 	bl	800395c <realloc>
 8000cec:	4602      	mov	r2, r0
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a3a      	ldr	r2, [r7, #32]
 8000cf6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8000cfc:	e035      	b.n	8000d6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d06:	6839      	ldr	r1, [r7, #0]
 8000d08:	440a      	add	r2, r1
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d14:	3301      	adds	r3, #1
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d26:	3302      	adds	r3, #2
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	4313      	orrs	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d38:	3303      	adds	r3, #3
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	440b      	add	r3, r1
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	061b      	lsls	r3, r3, #24
 8000d42:	4313      	orrs	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d4e:	3304      	adds	r3, #4
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	6812      	ldr	r2, [r2, #0]
 8000d62:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d66:	3301      	adds	r3, #1
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3c4      	bcc.n	8000cfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d80:	3301      	adds	r3, #1
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d92:	3302      	adds	r3, #2
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	69fa      	ldr	r2, [r7, #28]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da4:	3303      	adds	r3, #3
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	061b      	lsls	r3, r3, #24
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db6:	3304      	adds	r3, #4
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d90a      	bls.n	8000dda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699a      	ldr	r2, [r3, #24]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4610      	mov	r0, r2
 8000dd0:	f002 fdc4 	bl	800395c <realloc>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000de4:	e035      	b.n	8000e52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dee:	6839      	ldr	r1, [r7, #0]
 8000df0:	440a      	add	r2, r1
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	440b      	add	r3, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e0e:	3302      	adds	r3, #2
 8000e10:	6839      	ldr	r1, [r7, #0]
 8000e12:	440b      	add	r3, r1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e20:	3303      	adds	r3, #3
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061b      	lsls	r3, r3, #24
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e36:	3304      	adds	r3, #4
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	3214      	adds	r2, #20
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4e:	3301      	adds	r3, #1
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3c4      	bcc.n	8000de6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d90a      	bls.n	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f002 fd50 	bl	800395c <realloc>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ecc:	e03e      	b.n	8000f4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	441a      	add	r2, r3
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fb5e 	bl	800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	e00b      	b.n	8000f04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	441a      	add	r2, r3
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	440b      	add	r3, r1
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	3301      	adds	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d3ed      	bcc.n	8000eec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4413      	add	r3, r2
 8000f16:	3b01      	subs	r3, #1
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f22:	3b01      	subs	r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	441a      	add	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	3220      	adds	r2, #32
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f48:	3301      	adds	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3bb      	bcc.n	8000ece <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3738      	adds	r7, #56	@ 0x38
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	4b02      	ldr	r3, [pc, #8]	@ (8000f74 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	08003dcc 	.word	0x08003dcc

08000f78 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	4b02      	ldr	r3, [pc, #8]	@ (8000f8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	08003d30 	.word	0x08003d30

08000f90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68d8      	ldr	r0, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6891      	ldr	r1, [r2, #8]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	4798      	blx	r3
 8000fda:	4603      	mov	r3, r0
  };
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
  }
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
	...

08001020 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <_ZN13STM32HardwareC1Ev+0x34>)
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000090 	.word	0x20000090

08001058 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f804 	bl	800106e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001082:	4619      	mov	r1, r3
 8001084:	f002 f914 	bl	80032b0 <HAL_UART_Receive_DMA>
    }
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800109c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffa8 	bl	8000ffa <_ZN13STM32Hardware10getRdmaIndEv>
 80010aa:	4603      	mov	r3, r0
 80010ac:	429c      	cmp	r4, r3
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d012      	beq.n	80010e0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010c0:	1c59      	adds	r1, r3, #1
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	791b      	ldrb	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 80010e0:	68fb      	ldr	r3, [r7, #12]
    }
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}
	...

080010ec <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b20      	cmp	r3, #32
 8001100:	d108      	bne.n	8001114 <_ZN13STM32Hardware5flushEv+0x28>
 8001102:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <_ZN13STM32Hardware5flushEv+0x28>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <_ZN13STM32Hardware5flushEv+0x2a>
 8001114:	2300      	movs	r3, #0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d056      	beq.n	80011c8 <_ZN13STM32Hardware5flushEv+0xdc>
        mutex = true;
 800111a:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <_ZN13STM32Hardware5flushEv+0xe4>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800112c:	429a      	cmp	r2, r3
 800112e:	d048      	beq.n	80011c2 <_ZN13STM32Hardware5flushEv+0xd6>
          uint16_t len = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001140:	429a      	cmp	r2, r3
 8001142:	d217      	bcs.n	8001174 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001152:	b29b      	uxth	r3, r3
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001162:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	89fa      	ldrh	r2, [r7, #14]
 800116c:	4619      	mov	r1, r3
 800116e:	f002 f82f 	bl	80031d0 <HAL_UART_Transmit_DMA>
 8001172:	e020      	b.n	80011b6 <_ZN13STM32Hardware5flushEv+0xca>
		  }else{
			len = tbuflen - tfind;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800117a:	b29b      	uxth	r3, r3
 800117c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001180:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800118c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	89fa      	ldrh	r2, [r7, #14]
 8001196:	4619      	mov	r1, r3
 8001198:	f002 f81a 	bl	80031d0 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, &(tbuf[twind]), len);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80011a6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	89fa      	ldrh	r2, [r7, #14]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f002 f80d 	bl	80031d0 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 80011c2:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <_ZN13STM32Hardware5flushEv+0xe4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
      }
    }
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000d8 	.word	0x200000d8

080011d4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
      int n = length;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ea:	bfa8      	it	ge
 80011ec:	f44f 7300 	movge.w	r3, #512	@ 0x200
 80011f0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80011f8:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4293      	cmp	r3, r2
 8001200:	bf28      	it	cs
 8001202:	4613      	movcs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800120c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fc09 	bl	8003a30 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	429a      	cmp	r2, r3
 8001238:	d00b      	beq.n	8001252 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	18d1      	adds	r1, r2, r3
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	f002 fbef 	bl	8003a30 <memcpy>
      }

      flush();
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff ff4a 	bl	80010ec <_ZN13STM32Hardware5flushEv>
    }
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	f000 fffe 	bl	8002268 <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
      data("")
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f856 	bl	8000334 <_ZN3ros3MsgC1Ev>
 8001288:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_ZN8std_msgs6StringC1Ev+0x28>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001292:	605a      	str	r2, [r3, #4]
    {
    }
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08003e04 	.word	0x08003e04
 80012a4:	08003cb4 	.word	0x08003cb4

080012a8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff46 	bl	800014c <strlen>
 80012c0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f948 	bl	8001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3304      	adds	r3, #4
 80012d4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	18d0      	adds	r0, r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	4619      	mov	r1, r3
 80012e4:	f002 fba4 	bl	8003a30 <memcpy>
      offset += length_data;
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80012f0:	68fb      	ldr	r3, [r7, #12]
    }
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	441a      	add	r2, r3
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f941 	bl	800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	3304      	adds	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00b      	b.n	800133e <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3b01      	subs	r3, #1
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	440b      	add	r3, r1
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3ed      	bcc.n	8001326 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	3b01      	subs	r3, #1
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3b01      	subs	r3, #1
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	441a      	add	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
     return offset;
 800136e:	693b      	ldr	r3, [r7, #16]
    }
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	4b02      	ldr	r3, [pc, #8]	@ (800138c <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	08003d54 	.word	0x08003d54

08001390 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	4b02      	ldr	r3, [pc, #8]	@ (80013a4 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	08003d64 	.word	0x08003d64

080013a8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	08003e1c 	.word	0x08003e1c

080013c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffe8 	bl	80013a8 <_ZN3ros15NodeHandleBase_C1Ev>
 80013d8:	4a36      	ldr	r2, [pc, #216]	@ (80014b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3304      	adds	r3, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe1c 	bl	8001020 <_ZN13STM32HardwareC1Ev>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800140e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fad7 	bl	80039c8 <memset>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f002 face 	bl	80039c8 <memset>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8001432:	2264      	movs	r2, #100	@ 0x64
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fac6 	bl	80039c8 <memset>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8001442:	2264      	movs	r2, #100	@ 0x64
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fabe 	bl	80039c8 <memset>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff faac 	bl	8000a00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08003df0 	.word	0x08003df0

080014b8 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello from Gia STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_UART_TxCpltCallback+0x20>)
 80014c2:	f000 f890 	bl	80015e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe0f 	bl	80010ec <_ZN13STM32Hardware5flushEv>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000dc 	.word	0x200000dc

080014dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <HAL_UART_RxCpltCallback+0x20>)
 80014e6:	f000 f87e 	bl	80015e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fdbe 	bl	800106e <_ZN13STM32Hardware10reset_rbufEv>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000dc 	.word	0x200000dc

08001500 <setup>:

void setup(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  nh.initNode();
 8001504:	4804      	ldr	r0, [pc, #16]	@ (8001518 <setup+0x18>)
 8001506:	f000 f879 	bl	80015fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800150a:	4904      	ldr	r1, [pc, #16]	@ (800151c <setup+0x1c>)
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <setup+0x18>)
 800150e:	f000 f892 	bl	8001636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000dc 	.word	0x200000dc
 800151c:	20000a20 	.word	0x20000a20

08001520 <loop>:

void loop(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
#ifdef STM32F1xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001524:	2102      	movs	r1, #2
 8001526:	4809      	ldr	r0, [pc, #36]	@ (800154c <loop+0x2c>)
 8001528:	f001 f9d8 	bl	80028dc <HAL_GPIO_TogglePin>
#endif
#ifdef STM32F3xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#endif

  str_msg.data = hello;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <loop+0x30>)
 800152e:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <loop+0x34>)
 8001530:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001532:	4907      	ldr	r1, [pc, #28]	@ (8001550 <loop+0x30>)
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <loop+0x38>)
 8001536:	f7ff fd41 	bl	8000fbc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 800153a:	4808      	ldr	r0, [pc, #32]	@ (800155c <loop+0x3c>)
 800153c:	f000 f8aa 	bl	8001694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001544:	f000 fe9a 	bl	800227c <HAL_Delay>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010c00 	.word	0x40010c00
 8001550:	20000a18 	.word	0x20000a18
 8001554:	20000000 	.word	0x20000000
 8001558:	20000a20 	.word	0x20000a20
 800155c:	200000dc 	.word	0x200000dc

08001560 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e00c      	b.n	800158a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	fa22 f103 	lsr.w	r1, r2, r3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d9ef      	bls.n	8001570 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e010      	b.n	80015d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	440a      	add	r2, r1
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4611      	mov	r1, r2
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	00d2      	lsls	r2, r2, #3
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d9eb      	bls.n	80015b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3304      	adds	r3, #4
  }
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd25 	bl	8001058 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e01d      	b.n	8001682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	60da      	str	r2, [r3, #12]
        return true;
 8001678:	2301      	movs	r3, #1
 800167a:	e006      	b.n	800168a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b18      	cmp	r3, #24
 8001686:	ddde      	ble.n	8001646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001688:	2300      	movs	r3, #0
  }
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3304      	adds	r3, #4
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fddd 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 80016a6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d903      	bls.n	80016c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d903      	bls.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d014      	beq.n	8001714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fdb6 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad2      	subs	r2, r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8001700:	429a      	cmp	r2, r3
 8001702:	bf8c      	ite	hi
 8001704:	2301      	movhi	r3, #1
 8001706:	2300      	movls	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800170e:	f06f 0301 	mvn.w	r3, #1
 8001712:	e194      	b.n	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fcb9 	bl	8001090 <_ZN13STM32Hardware4readEv>
 800171e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f2c0 8174 	blt.w	8001a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	441a      	add	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800173e:	2b07      	cmp	r3, #7
 8001740:	d11e      	bne.n	8001780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	b2d1      	uxtb	r1, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1b4      	bne.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2208      	movs	r2, #8
 800177a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800177e:	e7af      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001786:	2b00      	cmp	r3, #0
 8001788:	d128      	bne.n	80017dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2bff      	cmp	r3, #255	@ 0xff
 800178e:	d10d      	bne.n	80017ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f103 0214 	add.w	r2, r3, #20
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80017aa:	e799      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3304      	adds	r3, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd55 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	bf8c      	ite	hi
 80017c4:	2301      	movhi	r3, #1
 80017c6:	2300      	movls	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d088      	beq.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 80017d6:	f06f 0301 	mvn.w	r3, #1
 80017da:	e130      	b.n	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d118      	bne.n	8001818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80017ea:	d107      	bne.n	80017fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80017fa:	e771      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 800180a:	2b00      	cmp	r3, #0
 800180c:	f47f af68 	bne.w	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f918 	bl	8001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001816:	e763      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800181e:	2b02      	cmp	r3, #2
 8001820:	d113      	bne.n	800184a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001848:	e74a      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001850:	2b03      	cmp	r3, #3
 8001852:	d110      	bne.n	8001876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	441a      	add	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001874:	e734      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800187c:	2b04      	cmp	r3, #4
 800187e:	d116      	bne.n	80018ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001886:	425a      	negs	r2, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	bf58      	it	pl
 800188e:	4253      	negpl	r3, r2
 8001890:	2bff      	cmp	r3, #255	@ 0xff
 8001892:	d107      	bne.n	80018a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80018a2:	e71d      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80018ac:	e718      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d10f      	bne.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80018d6:	e703      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d117      	bne.n	8001912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	441a      	add	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2207      	movs	r2, #7
 80018f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001902:	2b00      	cmp	r3, #0
 8001904:	f47f aeec 	bne.w	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2208      	movs	r2, #8
 800190c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001910:	e6e6      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001918:	2b08      	cmp	r3, #8
 800191a:	f47f aee1 	bne.w	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800192c:	425a      	negs	r2, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	bf58      	it	pl
 8001934:	4253      	negpl	r3, r2
 8001936:	2bff      	cmp	r3, #255	@ 0xff
 8001938:	f47f aed2 	bne.w	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001942:	2b00      	cmp	r3, #0
 8001944:	d110      	bne.n	8001968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f87d 	bl	8001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f898 	bl	8001a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001966:	e06a      	b.n	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d107      	bne.n	8001982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f960 	bl	8001c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001980:	e6ae      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001988:	2b06      	cmp	r3, #6
 800198a:	d10e      	bne.n	80019aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f7ff f96f 	bl	8000c7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80019a8:	e69a      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019b0:	2b0b      	cmp	r3, #11
 80019b2:	d104      	bne.n	80019be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 80019bc:	e690      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019c4:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80019ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f43f ae84 	beq.w	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019de:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80019e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019f2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4798      	blx	r3
    while (true)
 8001a0e:	e667      	b.n	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001a10:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00f      	beq.n	8001a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d906      	bls.n	8001a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f809 	bl	8001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8001a3c:	2300      	movs	r3, #0
  }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fc7e 	bl	8000354 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	210a      	movs	r1, #10
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
    rt_time = hardware_.time();
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fbf7 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001a82:	b590      	push	{r4, r7, lr}
 8001a84:	b08b      	sub	sp, #44	@ 0x2c
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd4a 	bl	8000528 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	e062      	b.n	8001b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d056      	beq.n	8001b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3308      	adds	r3, #8
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4608      	mov	r0, r1
 8001afa:	4798      	blx	r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	330c      	adds	r3, #12
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4608      	mov	r0, r1
 8001b28:	4798      	blx	r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001b2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b32:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681c      	ldr	r4, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa4b 	bl	8000fe4 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001b4e:	4601      	mov	r1, r0
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	461a      	mov	r2, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	2b18      	cmp	r3, #24
 8001b64:	dd99      	ble.n	8001a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6a:	e05e      	b.n	8001c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b70:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d053      	beq.n	8001c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b92:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001ba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bae:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3308      	adds	r3, #8
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4798      	blx	r3
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	330c      	adds	r3, #12
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4608      	mov	r0, r1
 8001be4:	4798      	blx	r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bee:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681c      	ldr	r4, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfa:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c06:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3304      	adds	r3, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4608      	mov	r0, r1
 8001c16:	4798      	blx	r3
 8001c18:	4601      	mov	r1, r0
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	3301      	adds	r3, #1
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	2b18      	cmp	r3, #24
 8001c2e:	dd9d      	ble.n	8001b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8001c38:	bf00      	nop
 8001c3a:	372c      	adds	r7, #44	@ 0x2c
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fb80 	bl	8000354 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fb01 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fbde 	bl	8000432 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4915      	ldr	r1, [pc, #84]	@ (8001cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c7c:	fba1 1303 	umull	r1, r3, r1, r3
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001c86:	6939      	ldr	r1, [r7, #16]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c8c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c96:	fb00 f303 	mul.w	r3, r0, r3
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	3304      	adds	r3, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8a6 	bl	8001e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fad1 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	10624dd3 	.word	0x10624dd3
 8001cd4:	000f4240 	.word	0x000f4240

08001cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b63      	cmp	r3, #99	@ 0x63
 8001ce8:	dd09      	ble.n	8001cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e079      	b.n	8001df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8001d0a:	3207      	adds	r2, #7
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
 8001d12:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	22ff      	movs	r2, #255	@ 0xff
 8001d18:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	22fe      	movs	r2, #254	@ 0xfe
 8001d20:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	121b      	asrs	r3, r3, #8
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d76:	2305      	movs	r3, #5
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e00c      	b.n	8001d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4413      	add	r3, r2
 8001d82:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3306      	adds	r3, #6
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dded      	ble.n	8001d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3307      	adds	r3, #7
 8001da4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	425a      	negs	r2, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	bf58      	it	pl
 8001db0:	4253      	negpl	r3, r2
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	1c59      	adds	r1, r3, #1
 8001db8:	6179      	str	r1, [r7, #20]
 8001dba:	43d2      	mvns	r2, r2
 8001dbc:	b2d1      	uxtb	r1, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dce:	dc0a      	bgt.n	8001de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1d18      	adds	r0, r3, #4
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7ff f9f9 	bl	80011d4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	e005      	b.n	8001df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001de6:	4905      	ldr	r1, [pc, #20]	@ (8001dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f849 	bl	8001e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08003d88 	.word	0x08003d88

08001e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fa26 	bl	8001260 <_ZN13STM32Hardware4timeEv>
 8001e14:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4915      	ldr	r1, [pc, #84]	@ (8001e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e1e:	fba1 1303 	umull	r1, r3, r1, r3
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e36:	fba3 0302 	umull	r0, r3, r3, r2
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e40:	fb00 f303 	mul.w	r3, r0, r3
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a0c      	ldr	r2, [pc, #48]	@ (8001e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	1aca      	subs	r2, r1, r3
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001e50:	4413      	add	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 f954 	bl	8002114 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	10624dd3 	.word	0x10624dd3
 8001e78:	000f4240 	.word	0x000f4240
 8001e7c:	3b9aca00 	.word	0x3b9aca00

08001e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f804 	bl	8001e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fcfa 	bl	80008a8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f107 0214 	add.w	r2, r7, #20
 8001ec6:	2107      	movs	r1, #7
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	4798      	blx	r3
  }
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_Z41__static_initialization_and_destruction_0ii>:
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d110      	bne.n	8001f06 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10b      	bne.n	8001f06 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001eee:	4808      	ldr	r0, [pc, #32]	@ (8001f10 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001ef0:	f7ff fa6a 	bl	80013c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ef6:	f7ff f9bf 	bl	8001278 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8001efa:	2300      	movs	r3, #0
 8001efc:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001efe:	4906      	ldr	r1, [pc, #24]	@ (8001f18 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001f00:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001f02:	f7ff f845 	bl	8000f90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200000dc 	.word	0x200000dc
 8001f14:	20000a18 	.word	0x20000a18
 8001f18:	08003dc4 	.word	0x08003dc4
 8001f1c:	20000a20 	.word	0x20000a20

08001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    return configured_;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <_GLOBAL__sub_I_nh>:
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f40:	2001      	movs	r0, #1
 8001f42:	f7ff ffc7 	bl	8001ed4 <_Z41__static_initialization_and_destruction_0ii>
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_MspInit+0x5c>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4a14      	ldr	r2, [pc, #80]	@ (8001fa4 <HAL_MspInit+0x5c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6193      	str	r3, [r2, #24]
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_MspInit+0x5c>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <HAL_MspInit+0x5c>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa4 <HAL_MspInit+0x5c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_MspInit+0x5c>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_MspInit+0x60>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_MspInit+0x60>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000

08001fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <HAL_UART_MspInit+0x8c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d131      	bne.n	8002030 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <HAL_UART_MspInit+0x90>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800203c <HAL_UART_MspInit+0x90>)
 8001fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b18      	ldr	r3, [pc, #96]	@ (800203c <HAL_UART_MspInit+0x90>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_UART_MspInit+0x90>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <HAL_UART_MspInit+0x90>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_UART_MspInit+0x90>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	480b      	ldr	r0, [pc, #44]	@ (8002040 <HAL_UART_MspInit+0x94>)
 8002012:	f000 fac7 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <HAL_UART_MspInit+0x94>)
 800202c:	f000 faba 	bl	80025a4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013800 	.word	0x40013800
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <NMI_Handler+0x4>

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <MemManage_Handler+0x4>

0800205c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <UsageFault_Handler+0x4>

0800206c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 f8d6 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f001 fc84 	bl	80039d8 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20005000 	.word	0x20005000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000a34 	.word	0x20000a34
 8002104:	20000b88 	.word	0x20000b88

08002108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0a5a      	lsrs	r2, r3, #9
 8002124:	490f      	ldr	r1, [pc, #60]	@ (8002164 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002126:	fba1 1202 	umull	r1, r2, r1, r2
 800212a:	09d2      	lsrs	r2, r2, #7
 800212c:	490e      	ldr	r1, [pc, #56]	@ (8002168 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800212e:	fb01 f202 	mul.w	r2, r1, r2
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0a5b      	lsrs	r3, r3, #9
 800213c:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	09db      	lsrs	r3, r3, #7
 8002144:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	441a      	add	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	00044b83 	.word	0x00044b83
 8002168:	3b9aca00 	.word	0x3b9aca00

0800216c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800216c:	f7ff ffcc 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002170:	480b      	ldr	r0, [pc, #44]	@ (80021a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002172:	490c      	ldr	r1, [pc, #48]	@ (80021a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002174:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002188:	4c09      	ldr	r4, [pc, #36]	@ (80021b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002196:	f001 fc25 	bl	80039e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219a:	f7fd ffdf 	bl	800015c <main>
  bx lr
 800219e:	4770      	bx	lr
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021a8:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 80021ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021b0:	20000b84 	.word	0x20000b84

080021b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_2_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_Init+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <HAL_Init+0x28>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 f92b 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff feb8 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f935 	bl	8002472 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002220:	f000 f90b 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000018 	.word	0x20000018
 800223c:	20000020 	.word	0x20000020
 8002240:	2000001c 	.word	0x2000001c

08002244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_IncTick+0x1c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_IncTick+0x20>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a03      	ldr	r2, [pc, #12]	@ (8002264 <HAL_IncTick+0x20>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000020 	.word	0x20000020
 8002264:	20000a38 	.word	0x20000a38

08002268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <HAL_GetTick+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000a38 	.word	0x20000a38

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff fff0 	bl	8002268 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffe0 	bl	8002268 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000020 	.word	0x20000020

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	@ (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002404:	f7ff ff90 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff49 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff5e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff90 	bl	800237c <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5f 	bl	8002328 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffb0 	bl	80023e0 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Start_IT+0x20>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e04b      	b.n	8002542 <HAL_DMA_Start_IT+0xb8>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d13a      	bne.n	8002534 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f831 	bl	800254a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 020e 	orr.w	r2, r2, #14
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e00f      	b.n	8002522 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0204 	bic.w	r2, r2, #4
 8002510:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 020a 	orr.w	r2, r2, #10
 8002520:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e005      	b.n	8002540 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800253c:	2302      	movs	r3, #2
 800253e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b10      	cmp	r3, #16
 8002576:	d108      	bne.n	800258a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002588:	e007      	b.n	800259a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	60da      	str	r2, [r3, #12]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b08b      	sub	sp, #44	@ 0x2c
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b6:	e169      	b.n	800288c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b8:	2201      	movs	r2, #1
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f040 8158 	bne.w	8002886 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a9a      	ldr	r2, [pc, #616]	@ (8002844 <HAL_GPIO_Init+0x2a0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d05e      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 80025e0:	4a98      	ldr	r2, [pc, #608]	@ (8002844 <HAL_GPIO_Init+0x2a0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d875      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 80025e6:	4a98      	ldr	r2, [pc, #608]	@ (8002848 <HAL_GPIO_Init+0x2a4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d058      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 80025ec:	4a96      	ldr	r2, [pc, #600]	@ (8002848 <HAL_GPIO_Init+0x2a4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d86f      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 80025f2:	4a96      	ldr	r2, [pc, #600]	@ (800284c <HAL_GPIO_Init+0x2a8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d052      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 80025f8:	4a94      	ldr	r2, [pc, #592]	@ (800284c <HAL_GPIO_Init+0x2a8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d869      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 80025fe:	4a94      	ldr	r2, [pc, #592]	@ (8002850 <HAL_GPIO_Init+0x2ac>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d04c      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 8002604:	4a92      	ldr	r2, [pc, #584]	@ (8002850 <HAL_GPIO_Init+0x2ac>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d863      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 800260a:	4a92      	ldr	r2, [pc, #584]	@ (8002854 <HAL_GPIO_Init+0x2b0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d046      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 8002610:	4a90      	ldr	r2, [pc, #576]	@ (8002854 <HAL_GPIO_Init+0x2b0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d85d      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 8002616:	2b12      	cmp	r3, #18
 8002618:	d82a      	bhi.n	8002670 <HAL_GPIO_Init+0xcc>
 800261a:	2b12      	cmp	r3, #18
 800261c:	d859      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 800261e:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <HAL_GPIO_Init+0x80>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	0800269f 	.word	0x0800269f
 8002628:	08002679 	.word	0x08002679
 800262c:	0800268b 	.word	0x0800268b
 8002630:	080026cd 	.word	0x080026cd
 8002634:	080026d3 	.word	0x080026d3
 8002638:	080026d3 	.word	0x080026d3
 800263c:	080026d3 	.word	0x080026d3
 8002640:	080026d3 	.word	0x080026d3
 8002644:	080026d3 	.word	0x080026d3
 8002648:	080026d3 	.word	0x080026d3
 800264c:	080026d3 	.word	0x080026d3
 8002650:	080026d3 	.word	0x080026d3
 8002654:	080026d3 	.word	0x080026d3
 8002658:	080026d3 	.word	0x080026d3
 800265c:	080026d3 	.word	0x080026d3
 8002660:	080026d3 	.word	0x080026d3
 8002664:	080026d3 	.word	0x080026d3
 8002668:	08002681 	.word	0x08002681
 800266c:	08002695 	.word	0x08002695
 8002670:	4a79      	ldr	r2, [pc, #484]	@ (8002858 <HAL_GPIO_Init+0x2b4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002676:	e02c      	b.n	80026d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	623b      	str	r3, [r7, #32]
          break;
 800267e:	e029      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	3304      	adds	r3, #4
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e024      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	3308      	adds	r3, #8
 8002690:	623b      	str	r3, [r7, #32]
          break;
 8002692:	e01f      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	330c      	adds	r3, #12
 800269a:	623b      	str	r3, [r7, #32]
          break;
 800269c:	e01a      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a6:	2304      	movs	r3, #4
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e013      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	611a      	str	r2, [r3, #16]
          break;
 80026be:	e009      	b.n	80026d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c0:	2308      	movs	r3, #8
 80026c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	615a      	str	r2, [r3, #20]
          break;
 80026ca:	e003      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
          break;
 80026d0:	e000      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          break;
 80026d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2bff      	cmp	r3, #255	@ 0xff
 80026d8:	d801      	bhi.n	80026de <HAL_GPIO_Init+0x13a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_Init+0x13e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2bff      	cmp	r3, #255	@ 0xff
 80026e8:	d802      	bhi.n	80026f0 <HAL_GPIO_Init+0x14c>
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	e002      	b.n	80026f6 <HAL_GPIO_Init+0x152>
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	3b08      	subs	r3, #8
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	210f      	movs	r1, #15
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80b1 	beq.w	8002886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002724:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <HAL_GPIO_Init+0x2b8>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a4c      	ldr	r2, [pc, #304]	@ (800285c <HAL_GPIO_Init+0x2b8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <HAL_GPIO_Init+0x2b8>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800273c:	4a48      	ldr	r2, [pc, #288]	@ (8002860 <HAL_GPIO_Init+0x2bc>)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a40      	ldr	r2, [pc, #256]	@ (8002864 <HAL_GPIO_Init+0x2c0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_GPIO_Init+0x1ec>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3f      	ldr	r2, [pc, #252]	@ (8002868 <HAL_GPIO_Init+0x2c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00d      	beq.n	800278c <HAL_GPIO_Init+0x1e8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3e      	ldr	r2, [pc, #248]	@ (800286c <HAL_GPIO_Init+0x2c8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d007      	beq.n	8002788 <HAL_GPIO_Init+0x1e4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3d      	ldr	r2, [pc, #244]	@ (8002870 <HAL_GPIO_Init+0x2cc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_GPIO_Init+0x1e0>
 8002780:	2303      	movs	r3, #3
 8002782:	e006      	b.n	8002792 <HAL_GPIO_Init+0x1ee>
 8002784:	2304      	movs	r3, #4
 8002786:	e004      	b.n	8002792 <HAL_GPIO_Init+0x1ee>
 8002788:	2302      	movs	r3, #2
 800278a:	e002      	b.n	8002792 <HAL_GPIO_Init+0x1ee>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_GPIO_Init+0x1ee>
 8002790:	2300      	movs	r3, #0
 8002792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002794:	f002 0203 	and.w	r2, r2, #3
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	4093      	lsls	r3, r2
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027a2:	492f      	ldr	r1, [pc, #188]	@ (8002860 <HAL_GPIO_Init+0x2bc>)
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	492c      	ldr	r1, [pc, #176]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4928      	ldr	r1, [pc, #160]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4922      	ldr	r1, [pc, #136]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	491e      	ldr	r1, [pc, #120]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d006      	beq.n	800281a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4918      	ldr	r1, [pc, #96]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	43db      	mvns	r3, r3
 8002822:	4914      	ldr	r1, [pc, #80]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 8002824:	4013      	ands	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d021      	beq.n	8002878 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	490e      	ldr	r1, [pc, #56]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
 8002840:	e021      	b.n	8002886 <HAL_GPIO_Init+0x2e2>
 8002842:	bf00      	nop
 8002844:	10320000 	.word	0x10320000
 8002848:	10310000 	.word	0x10310000
 800284c:	10220000 	.word	0x10220000
 8002850:	10210000 	.word	0x10210000
 8002854:	10120000 	.word	0x10120000
 8002858:	10110000 	.word	0x10110000
 800285c:	40021000 	.word	0x40021000
 8002860:	40010000 	.word	0x40010000
 8002864:	40010800 	.word	0x40010800
 8002868:	40010c00 	.word	0x40010c00
 800286c:	40011000 	.word	0x40011000
 8002870:	40011400 	.word	0x40011400
 8002874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_GPIO_Init+0x304>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	43db      	mvns	r3, r3
 8002880:	4909      	ldr	r1, [pc, #36]	@ (80028a8 <HAL_GPIO_Init+0x304>)
 8002882:	4013      	ands	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	3301      	adds	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	f47f ae8e 	bne.w	80025b8 <HAL_GPIO_Init+0x14>
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	372c      	adds	r7, #44	@ 0x2c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40010400 	.word	0x40010400

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43d9      	mvns	r1, r3
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	400b      	ands	r3, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	611a      	str	r2, [r3, #16]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
	...

08002910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e272      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	4b92      	ldr	r3, [pc, #584]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00c      	beq.n	8002956 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800293c:	4b8f      	ldr	r3, [pc, #572]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x5e>
 8002948:	4b8c      	ldr	r3, [pc, #560]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4b89      	ldr	r3, [pc, #548]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d06c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x12c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d168      	bne.n	8002a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e24c      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x76>
 8002978:	4b80      	ldr	r3, [pc, #512]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e02e      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x98>
 800298e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7a      	ldr	r2, [pc, #488]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b78      	ldr	r3, [pc, #480]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a77      	ldr	r2, [pc, #476]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0xbc>
 80029b2:	4b72      	ldr	r3, [pc, #456]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a71      	ldr	r2, [pc, #452]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6f      	ldr	r3, [pc, #444]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 80029cc:	4b6b      	ldr	r3, [pc, #428]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b68      	ldr	r3, [pc, #416]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a67      	ldr	r2, [pc, #412]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff fc3c 	bl	8002268 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff fc38 	bl	8002268 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e200      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5d      	ldr	r3, [pc, #372]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe4>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7ff fc28 	bl	8002268 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7ff fc24 	bl	8002268 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1ec      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x10c>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a56:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x18c>
 8002a62:	4b46      	ldr	r3, [pc, #280]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b43      	ldr	r3, [pc, #268]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x176>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c0      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3d      	ldr	r3, [pc, #244]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4939      	ldr	r1, [pc, #228]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff fbdd 	bl	8002268 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7ff fbd9 	bl	8002268 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a1      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4927      	ldr	r1, [pc, #156]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fbbc 	bl	8002268 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7ff fbb8 	bl	8002268 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e180      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d03a      	beq.n	8002b94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <HAL_RCC_OscConfig+0x274>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7ff fb9c 	bl	8002268 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff fb98 	bl	8002268 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e160      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 face 	bl	80030f4 <RCC_Delay>
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7ff fb82 	bl	8002268 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b68:	f7ff fb7e 	bl	8002268 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e146      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	42420000 	.word	0x42420000
 8002b84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b92      	ldr	r3, [pc, #584]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e9      	bne.n	8002b68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a6 	beq.w	8002cee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	4b88      	ldr	r3, [pc, #544]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a87      	ldr	r2, [pc, #540]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	4b85      	ldr	r3, [pc, #532]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b82      	ldr	r3, [pc, #520]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7ff fb3f 	bl	8002268 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7ff fb3b 	bl	8002268 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	@ 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e103      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b75      	ldr	r3, [pc, #468]	@ (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x312>
 8002c14:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e02d      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x334>
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a69      	ldr	r2, [pc, #420]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a66      	ldr	r2, [pc, #408]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	e01c      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x356>
 8002c4c:	4b61      	ldr	r3, [pc, #388]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a60      	ldr	r2, [pc, #384]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	e00b      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c66:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6213      	str	r3, [r2, #32]
 8002c72:	4b58      	ldr	r3, [pc, #352]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a57      	ldr	r2, [pc, #348]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7ff faef 	bl	8002268 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7ff faeb 	bl	8002268 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0b1      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ee      	beq.n	8002c8e <HAL_RCC_OscConfig+0x37e>
 8002cb0:	e014      	b.n	8002cdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7ff fad9 	bl	8002268 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7ff fad5 	bl	8002268 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e09b      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	4b40      	ldr	r3, [pc, #256]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ee      	bne.n	8002cba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8087 	beq.w	8002e06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf8:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d061      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d146      	bne.n	8002d9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b33      	ldr	r3, [pc, #204]	@ (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7ff faa9 	bl	8002268 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7ff faa5 	bl	8002268 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e06d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	4b29      	ldr	r3, [pc, #164]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d40:	d108      	bne.n	8002d54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4921      	ldr	r1, [pc, #132]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d54:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a19      	ldr	r1, [r3, #32]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	430b      	orrs	r3, r1
 8002d66:	491b      	ldr	r1, [pc, #108]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7ff fa79 	bl	8002268 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7ff fa75 	bl	8002268 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e03d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x46a>
 8002d98:	e035      	b.n	8002e06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff fa62 	bl	8002268 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7ff fa5e 	bl	8002268 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e026      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x498>
 8002dc6:	e01e      	b.n	8002e06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e019      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x500>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0d0      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d910      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b67      	ldr	r3, [pc, #412]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	4965      	ldr	r1, [pc, #404]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b63      	ldr	r3, [pc, #396]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b8      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e70:	4b59      	ldr	r3, [pc, #356]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a58      	ldr	r2, [pc, #352]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e88:	4b53      	ldr	r3, [pc, #332]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a52      	ldr	r2, [pc, #328]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b50      	ldr	r3, [pc, #320]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	494d      	ldr	r1, [pc, #308]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d040      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b47      	ldr	r3, [pc, #284]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d115      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e07f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	4b41      	ldr	r3, [pc, #260]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e073      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06b      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b39      	ldr	r3, [pc, #228]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4936      	ldr	r1, [pc, #216]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7ff f9b0 	bl	8002268 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7ff f9ac 	bl	8002268 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e053      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d210      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 0207 	bic.w	r2, r3, #7
 8002f4a:	4922      	ldr	r1, [pc, #136]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e032      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4916      	ldr	r1, [pc, #88]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f8e:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	490e      	ldr	r1, [pc, #56]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fa2:	f000 f821 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	490a      	ldr	r1, [pc, #40]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	5ccb      	ldrb	r3, [r1, r3]
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	4a09      	ldr	r2, [pc, #36]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f90e 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08003ea0 	.word	0x08003ea0
 8002fe0:	20000018 	.word	0x20000018
 8002fe4:	2000001c 	.word	0x2000001c

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003002:	4b1e      	ldr	r3, [pc, #120]	@ (800307c <HAL_RCC_GetSysClockFreq+0x94>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b04      	cmp	r3, #4
 8003010:	d002      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x30>
 8003012:	2b08      	cmp	r3, #8
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x36>
 8003016:	e027      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003018:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x98>)
 800301a:	613b      	str	r3, [r7, #16]
      break;
 800301c:	e027      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0c9b      	lsrs	r3, r3, #18
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	4a17      	ldr	r2, [pc, #92]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_RCC_GetSysClockFreq+0x94>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0c5b      	lsrs	r3, r3, #17
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	4a11      	ldr	r2, [pc, #68]	@ (8003088 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x98>)
 800304a:	fb03 f202 	mul.w	r2, r3, r2
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e004      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0c      	ldr	r2, [pc, #48]	@ (800308c <HAL_RCC_GetSysClockFreq+0xa4>)
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	613b      	str	r3, [r7, #16]
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x98>)
 800306a:	613b      	str	r3, [r7, #16]
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	693b      	ldr	r3, [r7, #16]
}
 8003070:	4618      	mov	r0, r3
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	007a1200 	.word	0x007a1200
 8003084:	08003eb8 	.word	0x08003eb8
 8003088:	08003ec8 	.word	0x08003ec8
 800308c:	003d0900 	.word	0x003d0900

08003090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b02      	ldr	r3, [pc, #8]	@ (80030a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	20000018 	.word	0x20000018

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff2 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	@ (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	08003eb0 	.word	0x08003eb0

080030cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030d0:	f7ff ffde 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0adb      	lsrs	r3, r3, #11
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	@ (80030f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08003eb0 	.word	0x08003eb0

080030f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <RCC_Delay+0x34>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <RCC_Delay+0x38>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0a5b      	lsrs	r3, r3, #9
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003110:	bf00      	nop
  }
  while (Delay --);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e5a      	subs	r2, r3, #1
 8003116:	60fa      	str	r2, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f9      	bne.n	8003110 <RCC_Delay+0x1c>
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000018 	.word	0x20000018
 800312c:	10624dd3 	.word	0x10624dd3

08003130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e042      	b.n	80031c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe ff28 	bl	8001fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	@ 0x24
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fb63 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	@ 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d156      	bne.n	8003298 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_UART_Transmit_DMA+0x26>
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e04f      	b.n	800329a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	@ 0x21
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	4a21      	ldr	r2, [pc, #132]	@ (80032a4 <HAL_UART_Transmit_DMA+0xd4>)
 8003220:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	4a20      	ldr	r2, [pc, #128]	@ (80032a8 <HAL_UART_Transmit_DMA+0xd8>)
 8003228:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_UART_Transmit_DMA+0xdc>)
 8003230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800323a:	f107 0308 	add.w	r3, r7, #8
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3304      	adds	r3, #4
 800324e:	461a      	mov	r2, r3
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	f7ff f91a 	bl	800248a <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800325e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	617b      	str	r3, [r7, #20]
   return(result);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003280:	627a      	str	r2, [r7, #36]	@ 0x24
 8003282:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	61fb      	str	r3, [r7, #28]
   return(result);
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e5      	bne.n	8003260 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3730      	adds	r7, #48	@ 0x30
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	08003347 	.word	0x08003347
 80032a8:	080033e1 	.word	0x080033e1
 80032ac:	08003565 	.word	0x08003565

080032b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	4613      	mov	r3, r2
 80032bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d112      	bne.n	80032f0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_Receive_DMA+0x26>
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00b      	b.n	80032f2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f986 	bl	80035f8 <UART_Start_Receive_DMA>
 80032ec:	4603      	mov	r3, r0
 80032ee:	e000      	b.n	80032f2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b090      	sub	sp, #64	@ 0x40
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d137      	bne.n	80033d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003364:	2200      	movs	r2, #0
 8003366:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	623b      	str	r3, [r7, #32]
   return(result);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800337e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003388:	633a      	str	r2, [r7, #48]	@ 0x30
 800338a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800338e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800339c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e5      	bne.n	800339c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033d0:	e002      	b.n	80033d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80033d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033d4:	f7fe f870 	bl	80014b8 <HAL_UART_TxCpltCallback>
}
 80033d8:	bf00      	nop
 80033da:	3740      	adds	r7, #64	@ 0x40
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff ff83 	bl	80032fa <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b09c      	sub	sp, #112	@ 0x70
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d172      	bne.n	80034fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800341a:	2200      	movs	r2, #0
 800341c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800341e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800342e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800343e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003440:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800344c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	667b      	str	r3, [r7, #100]	@ 0x64
 800346a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3314      	adds	r3, #20
 8003470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003472:	647a      	str	r2, [r7, #68]	@ 0x44
 8003474:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	623b      	str	r3, [r7, #32]
   return(result);
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800349c:	663b      	str	r3, [r7, #96]	@ 0x60
 800349e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80034a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80034a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d119      	bne.n	80034fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 0310 	bic.w	r3, r3, #16
 80034e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034ea:	61fa      	str	r2, [r7, #28]
 80034ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	617b      	str	r3, [r7, #20]
   return(result);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e5      	bne.n	80034ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003500:	2200      	movs	r2, #0
 8003502:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800350c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800350e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003510:	4619      	mov	r1, r3
 8003512:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003514:	f7ff ff0c 	bl	8003330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003518:	e002      	b.n	8003520 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800351a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800351c:	f7fd ffde 	bl	80014dc <HAL_UART_RxCpltCallback>
}
 8003520:	bf00      	nop
 8003522:	3770      	adds	r7, #112	@ 0x70
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff feee 	bl	8003330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003554:	e002      	b.n	800355c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fed8 	bl	800330c <HAL_UART_RxHalfCpltCallback>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b21      	cmp	r3, #33	@ 0x21
 8003596:	d108      	bne.n	80035aa <UART_DMAError+0x46>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80035a4:	68b8      	ldr	r0, [r7, #8]
 80035a6:	f000 f8c1 	bl	800372c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b22      	cmp	r3, #34	@ 0x22
 80035ca:	d108      	bne.n	80035de <UART_DMAError+0x7a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f000 f8ce 	bl	800377a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ea:	68b8      	ldr	r0, [r7, #8]
 80035ec:	f7ff fe97 	bl	800331e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b098      	sub	sp, #96	@ 0x60
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2222      	movs	r2, #34	@ 0x22
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	4a3e      	ldr	r2, [pc, #248]	@ (8003720 <UART_Start_Receive_DMA+0x128>)
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	4a3d      	ldr	r2, [pc, #244]	@ (8003724 <UART_Start_Receive_DMA+0x12c>)
 800362e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	4a3c      	ldr	r2, [pc, #240]	@ (8003728 <UART_Start_Receive_DMA+0x130>)
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363c:	2200      	movs	r2, #0
 800363e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003640:	f107 0308 	add.w	r3, r7, #8
 8003644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	f7fe ff17 	bl	800248a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003690:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800369a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800369c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80036a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e5      	bne.n	800367a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3314      	adds	r3, #20
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	617b      	str	r3, [r7, #20]
   return(result);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3314      	adds	r3, #20
 8003700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003702:	627a      	str	r2, [r7, #36]	@ 0x24
 8003704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6a39      	ldr	r1, [r7, #32]
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3760      	adds	r7, #96	@ 0x60
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	080033fd 	.word	0x080033fd
 8003724:	08003529 	.word	0x08003529
 8003728:	08003565 	.word	0x08003565

0800372c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	@ 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	60bb      	str	r3, [r7, #8]
   return(result);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	61ba      	str	r2, [r7, #24]
 8003756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6979      	ldr	r1, [r7, #20]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	613b      	str	r3, [r7, #16]
   return(result);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e5      	bne.n	8003734 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003770:	bf00      	nop
 8003772:	3724      	adds	r7, #36	@ 0x24
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800377a:	b480      	push	{r7}
 800377c:	b095      	sub	sp, #84	@ 0x54
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80037a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e5      	bne.n	8003782 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3314      	adds	r3, #20
 80037bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d119      	bne.n	8003826 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	60bb      	str	r3, [r7, #8]
   return(result);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f023 0310 	bic.w	r3, r3, #16
 8003808:	647b      	str	r3, [r7, #68]	@ 0x44
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003812:	61ba      	str	r2, [r7, #24]
 8003814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	613b      	str	r3, [r7, #16]
   return(result);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003834:	bf00      	nop
 8003836:	3754      	adds	r7, #84	@ 0x54
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
	...

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800387a:	f023 030c 	bic.w	r3, r3, #12
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	430b      	orrs	r3, r1
 8003886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003954 <UART_SetConfig+0x114>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d103      	bne.n	80038b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7ff fc10 	bl	80030cc <HAL_RCC_GetPCLK2Freq>
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	e002      	b.n	80038b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7ff fbf8 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 80038b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009a      	lsls	r2, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <UART_SetConfig+0x118>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	0119      	lsls	r1, r3, #4
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003958 <UART_SetConfig+0x118>)
 80038ee:	fba3 0302 	umull	r0, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2064      	movs	r0, #100	@ 0x64
 80038f6:	fb00 f303 	mul.w	r3, r0, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	@ 0x32
 8003900:	4a15      	ldr	r2, [pc, #84]	@ (8003958 <UART_SetConfig+0x118>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390c:	4419      	add	r1, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <UART_SetConfig+0x118>)
 8003926:	fba3 0302 	umull	r0, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2064      	movs	r0, #100	@ 0x64
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	3332      	adds	r3, #50	@ 0x32
 8003938:	4a07      	ldr	r2, [pc, #28]	@ (8003958 <UART_SetConfig+0x118>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	440a      	add	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40013800 	.word	0x40013800
 8003958:	51eb851f 	.word	0x51eb851f

0800395c <realloc>:
 800395c:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <realloc+0xc>)
 800395e:	460a      	mov	r2, r1
 8003960:	4601      	mov	r1, r0
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	f000 b802 	b.w	800396c <_realloc_r>
 8003968:	20000024 	.word	0x20000024

0800396c <_realloc_r>:
 800396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003970:	4680      	mov	r8, r0
 8003972:	4615      	mov	r5, r2
 8003974:	460c      	mov	r4, r1
 8003976:	b921      	cbnz	r1, 8003982 <_realloc_r+0x16>
 8003978:	4611      	mov	r1, r2
 800397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	f000 b8cf 	b.w	8003b20 <_malloc_r>
 8003982:	b92a      	cbnz	r2, 8003990 <_realloc_r+0x24>
 8003984:	f000 f862 	bl	8003a4c <_free_r>
 8003988:	2400      	movs	r4, #0
 800398a:	4620      	mov	r0, r4
 800398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003990:	f000 f952 	bl	8003c38 <_malloc_usable_size_r>
 8003994:	4285      	cmp	r5, r0
 8003996:	4606      	mov	r6, r0
 8003998:	d802      	bhi.n	80039a0 <_realloc_r+0x34>
 800399a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800399e:	d8f4      	bhi.n	800398a <_realloc_r+0x1e>
 80039a0:	4629      	mov	r1, r5
 80039a2:	4640      	mov	r0, r8
 80039a4:	f000 f8bc 	bl	8003b20 <_malloc_r>
 80039a8:	4607      	mov	r7, r0
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d0ec      	beq.n	8003988 <_realloc_r+0x1c>
 80039ae:	42b5      	cmp	r5, r6
 80039b0:	462a      	mov	r2, r5
 80039b2:	4621      	mov	r1, r4
 80039b4:	bf28      	it	cs
 80039b6:	4632      	movcs	r2, r6
 80039b8:	f000 f83a 	bl	8003a30 <memcpy>
 80039bc:	4621      	mov	r1, r4
 80039be:	4640      	mov	r0, r8
 80039c0:	f000 f844 	bl	8003a4c <_free_r>
 80039c4:	463c      	mov	r4, r7
 80039c6:	e7e0      	b.n	800398a <_realloc_r+0x1e>

080039c8 <memset>:
 80039c8:	4603      	mov	r3, r0
 80039ca:	4402      	add	r2, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d100      	bne.n	80039d2 <memset+0xa>
 80039d0:	4770      	bx	lr
 80039d2:	f803 1b01 	strb.w	r1, [r3], #1
 80039d6:	e7f9      	b.n	80039cc <memset+0x4>

080039d8 <__errno>:
 80039d8:	4b01      	ldr	r3, [pc, #4]	@ (80039e0 <__errno+0x8>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000024 	.word	0x20000024

080039e4 <__libc_init_array>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	2600      	movs	r6, #0
 80039e8:	4d0c      	ldr	r5, [pc, #48]	@ (8003a1c <__libc_init_array+0x38>)
 80039ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003a20 <__libc_init_array+0x3c>)
 80039ec:	1b64      	subs	r4, r4, r5
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	42a6      	cmp	r6, r4
 80039f2:	d109      	bne.n	8003a08 <__libc_init_array+0x24>
 80039f4:	f000 f938 	bl	8003c68 <_init>
 80039f8:	2600      	movs	r6, #0
 80039fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003a24 <__libc_init_array+0x40>)
 80039fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003a28 <__libc_init_array+0x44>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	42a6      	cmp	r6, r4
 8003a04:	d105      	bne.n	8003a12 <__libc_init_array+0x2e>
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0c:	4798      	blx	r3
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7ee      	b.n	80039f0 <__libc_init_array+0xc>
 8003a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a16:	4798      	blx	r3
 8003a18:	3601      	adds	r6, #1
 8003a1a:	e7f2      	b.n	8003a02 <__libc_init_array+0x1e>
 8003a1c:	08003ed4 	.word	0x08003ed4
 8003a20:	08003ed4 	.word	0x08003ed4
 8003a24:	08003ed4 	.word	0x08003ed4
 8003a28:	08003edc 	.word	0x08003edc

08003a2c <__retarget_lock_acquire_recursive>:
 8003a2c:	4770      	bx	lr

08003a2e <__retarget_lock_release_recursive>:
 8003a2e:	4770      	bx	lr

08003a30 <memcpy>:
 8003a30:	440a      	add	r2, r1
 8003a32:	4291      	cmp	r1, r2
 8003a34:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a38:	d100      	bne.n	8003a3c <memcpy+0xc>
 8003a3a:	4770      	bx	lr
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a42:	4291      	cmp	r1, r2
 8003a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a48:	d1f9      	bne.n	8003a3e <memcpy+0xe>
 8003a4a:	bd10      	pop	{r4, pc}

08003a4c <_free_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4605      	mov	r5, r0
 8003a50:	2900      	cmp	r1, #0
 8003a52:	d040      	beq.n	8003ad6 <_free_r+0x8a>
 8003a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a58:	1f0c      	subs	r4, r1, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bfb8      	it	lt
 8003a5e:	18e4      	addlt	r4, r4, r3
 8003a60:	f000 f8de 	bl	8003c20 <__malloc_lock>
 8003a64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad8 <_free_r+0x8c>)
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	b933      	cbnz	r3, 8003a78 <_free_r+0x2c>
 8003a6a:	6063      	str	r3, [r4, #4]
 8003a6c:	6014      	str	r4, [r2, #0]
 8003a6e:	4628      	mov	r0, r5
 8003a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a74:	f000 b8da 	b.w	8003c2c <__malloc_unlock>
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d908      	bls.n	8003a8e <_free_r+0x42>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	1821      	adds	r1, r4, r0
 8003a80:	428b      	cmp	r3, r1
 8003a82:	bf01      	itttt	eq
 8003a84:	6819      	ldreq	r1, [r3, #0]
 8003a86:	685b      	ldreq	r3, [r3, #4]
 8003a88:	1809      	addeq	r1, r1, r0
 8003a8a:	6021      	streq	r1, [r4, #0]
 8003a8c:	e7ed      	b.n	8003a6a <_free_r+0x1e>
 8003a8e:	461a      	mov	r2, r3
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	b10b      	cbz	r3, 8003a98 <_free_r+0x4c>
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d9fa      	bls.n	8003a8e <_free_r+0x42>
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	1850      	adds	r0, r2, r1
 8003a9c:	42a0      	cmp	r0, r4
 8003a9e:	d10b      	bne.n	8003ab8 <_free_r+0x6c>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	1850      	adds	r0, r2, r1
 8003aa6:	4283      	cmp	r3, r0
 8003aa8:	6011      	str	r1, [r2, #0]
 8003aaa:	d1e0      	bne.n	8003a6e <_free_r+0x22>
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4408      	add	r0, r1
 8003ab2:	6010      	str	r0, [r2, #0]
 8003ab4:	6053      	str	r3, [r2, #4]
 8003ab6:	e7da      	b.n	8003a6e <_free_r+0x22>
 8003ab8:	d902      	bls.n	8003ac0 <_free_r+0x74>
 8003aba:	230c      	movs	r3, #12
 8003abc:	602b      	str	r3, [r5, #0]
 8003abe:	e7d6      	b.n	8003a6e <_free_r+0x22>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	1821      	adds	r1, r4, r0
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	bf01      	itttt	eq
 8003ac8:	6819      	ldreq	r1, [r3, #0]
 8003aca:	685b      	ldreq	r3, [r3, #4]
 8003acc:	1809      	addeq	r1, r1, r0
 8003ace:	6021      	streq	r1, [r4, #0]
 8003ad0:	6063      	str	r3, [r4, #4]
 8003ad2:	6054      	str	r4, [r2, #4]
 8003ad4:	e7cb      	b.n	8003a6e <_free_r+0x22>
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000b80 	.word	0x20000b80

08003adc <sbrk_aligned>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4e0f      	ldr	r6, [pc, #60]	@ (8003b1c <sbrk_aligned+0x40>)
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	6831      	ldr	r1, [r6, #0]
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	b911      	cbnz	r1, 8003aee <sbrk_aligned+0x12>
 8003ae8:	f000 f8ae 	bl	8003c48 <_sbrk_r>
 8003aec:	6030      	str	r0, [r6, #0]
 8003aee:	4621      	mov	r1, r4
 8003af0:	4628      	mov	r0, r5
 8003af2:	f000 f8a9 	bl	8003c48 <_sbrk_r>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d103      	bne.n	8003b02 <sbrk_aligned+0x26>
 8003afa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003afe:	4620      	mov	r0, r4
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
 8003b02:	1cc4      	adds	r4, r0, #3
 8003b04:	f024 0403 	bic.w	r4, r4, #3
 8003b08:	42a0      	cmp	r0, r4
 8003b0a:	d0f8      	beq.n	8003afe <sbrk_aligned+0x22>
 8003b0c:	1a21      	subs	r1, r4, r0
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f000 f89a 	bl	8003c48 <_sbrk_r>
 8003b14:	3001      	adds	r0, #1
 8003b16:	d1f2      	bne.n	8003afe <sbrk_aligned+0x22>
 8003b18:	e7ef      	b.n	8003afa <sbrk_aligned+0x1e>
 8003b1a:	bf00      	nop
 8003b1c:	20000b7c 	.word	0x20000b7c

08003b20 <_malloc_r>:
 8003b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b24:	1ccd      	adds	r5, r1, #3
 8003b26:	f025 0503 	bic.w	r5, r5, #3
 8003b2a:	3508      	adds	r5, #8
 8003b2c:	2d0c      	cmp	r5, #12
 8003b2e:	bf38      	it	cc
 8003b30:	250c      	movcc	r5, #12
 8003b32:	2d00      	cmp	r5, #0
 8003b34:	4606      	mov	r6, r0
 8003b36:	db01      	blt.n	8003b3c <_malloc_r+0x1c>
 8003b38:	42a9      	cmp	r1, r5
 8003b3a:	d904      	bls.n	8003b46 <_malloc_r+0x26>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	2000      	movs	r0, #0
 8003b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c1c <_malloc_r+0xfc>
 8003b4a:	f000 f869 	bl	8003c20 <__malloc_lock>
 8003b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b52:	461c      	mov	r4, r3
 8003b54:	bb44      	cbnz	r4, 8003ba8 <_malloc_r+0x88>
 8003b56:	4629      	mov	r1, r5
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f7ff ffbf 	bl	8003adc <sbrk_aligned>
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	4604      	mov	r4, r0
 8003b62:	d158      	bne.n	8003c16 <_malloc_r+0xf6>
 8003b64:	f8d8 4000 	ldr.w	r4, [r8]
 8003b68:	4627      	mov	r7, r4
 8003b6a:	2f00      	cmp	r7, #0
 8003b6c:	d143      	bne.n	8003bf6 <_malloc_r+0xd6>
 8003b6e:	2c00      	cmp	r4, #0
 8003b70:	d04b      	beq.n	8003c0a <_malloc_r+0xea>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	4639      	mov	r1, r7
 8003b76:	4630      	mov	r0, r6
 8003b78:	eb04 0903 	add.w	r9, r4, r3
 8003b7c:	f000 f864 	bl	8003c48 <_sbrk_r>
 8003b80:	4581      	cmp	r9, r0
 8003b82:	d142      	bne.n	8003c0a <_malloc_r+0xea>
 8003b84:	6821      	ldr	r1, [r4, #0]
 8003b86:	4630      	mov	r0, r6
 8003b88:	1a6d      	subs	r5, r5, r1
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7ff ffa6 	bl	8003adc <sbrk_aligned>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d03a      	beq.n	8003c0a <_malloc_r+0xea>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	442b      	add	r3, r5
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	bb62      	cbnz	r2, 8003bfc <_malloc_r+0xdc>
 8003ba2:	f8c8 7000 	str.w	r7, [r8]
 8003ba6:	e00f      	b.n	8003bc8 <_malloc_r+0xa8>
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	1b52      	subs	r2, r2, r5
 8003bac:	d420      	bmi.n	8003bf0 <_malloc_r+0xd0>
 8003bae:	2a0b      	cmp	r2, #11
 8003bb0:	d917      	bls.n	8003be2 <_malloc_r+0xc2>
 8003bb2:	1961      	adds	r1, r4, r5
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	6025      	str	r5, [r4, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	6059      	strne	r1, [r3, #4]
 8003bbc:	6863      	ldr	r3, [r4, #4]
 8003bbe:	bf08      	it	eq
 8003bc0:	f8c8 1000 	streq.w	r1, [r8]
 8003bc4:	5162      	str	r2, [r4, r5]
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f000 f82f 	bl	8003c2c <__malloc_unlock>
 8003bce:	f104 000b 	add.w	r0, r4, #11
 8003bd2:	1d23      	adds	r3, r4, #4
 8003bd4:	f020 0007 	bic.w	r0, r0, #7
 8003bd8:	1ac2      	subs	r2, r0, r3
 8003bda:	bf1c      	itt	ne
 8003bdc:	1a1b      	subne	r3, r3, r0
 8003bde:	50a3      	strne	r3, [r4, r2]
 8003be0:	e7af      	b.n	8003b42 <_malloc_r+0x22>
 8003be2:	6862      	ldr	r2, [r4, #4]
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	bf0c      	ite	eq
 8003be8:	f8c8 2000 	streq.w	r2, [r8]
 8003bec:	605a      	strne	r2, [r3, #4]
 8003bee:	e7eb      	b.n	8003bc8 <_malloc_r+0xa8>
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	6864      	ldr	r4, [r4, #4]
 8003bf4:	e7ae      	b.n	8003b54 <_malloc_r+0x34>
 8003bf6:	463c      	mov	r4, r7
 8003bf8:	687f      	ldr	r7, [r7, #4]
 8003bfa:	e7b6      	b.n	8003b6a <_malloc_r+0x4a>
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d1fb      	bne.n	8003bfc <_malloc_r+0xdc>
 8003c04:	2300      	movs	r3, #0
 8003c06:	6053      	str	r3, [r2, #4]
 8003c08:	e7de      	b.n	8003bc8 <_malloc_r+0xa8>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	6033      	str	r3, [r6, #0]
 8003c10:	f000 f80c 	bl	8003c2c <__malloc_unlock>
 8003c14:	e794      	b.n	8003b40 <_malloc_r+0x20>
 8003c16:	6005      	str	r5, [r0, #0]
 8003c18:	e7d6      	b.n	8003bc8 <_malloc_r+0xa8>
 8003c1a:	bf00      	nop
 8003c1c:	20000b80 	.word	0x20000b80

08003c20 <__malloc_lock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	@ (8003c28 <__malloc_lock+0x8>)
 8003c22:	f7ff bf03 	b.w	8003a2c <__retarget_lock_acquire_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000b78 	.word	0x20000b78

08003c2c <__malloc_unlock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	@ (8003c34 <__malloc_unlock+0x8>)
 8003c2e:	f7ff befe 	b.w	8003a2e <__retarget_lock_release_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000b78 	.word	0x20000b78

08003c38 <_malloc_usable_size_r>:
 8003c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c3c:	1f18      	subs	r0, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bfbc      	itt	lt
 8003c42:	580b      	ldrlt	r3, [r1, r0]
 8003c44:	18c0      	addlt	r0, r0, r3
 8003c46:	4770      	bx	lr

08003c48 <_sbrk_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4d05      	ldr	r5, [pc, #20]	@ (8003c64 <_sbrk_r+0x1c>)
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	f7fe fa22 	bl	800209c <_sbrk>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_sbrk_r+0x1a>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_sbrk_r+0x1a>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000b74 	.word	0x20000b74

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
