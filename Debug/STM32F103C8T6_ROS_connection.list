
STM32F103C8T6_ROS_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a084  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800a198  0800a198  0001a198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a804  0800a804  00020294  2**0
                  CONTENTS
  4 .ARM          00000000  0800a804  0800a804  00020294  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a804  0800a804  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800a810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  20000294  0800aaa4  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  0800aaa4  00020e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001635f  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d21  00000000  00000000  0003661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00039340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  0003a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5c3  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c7d  00000000  00000000  000567eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cd4  00000000  00000000  00068468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa13c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000fa18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000294 	.word	0x20000294
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a17c 	.word	0x0800a17c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000298 	.word	0x20000298
 800014c:	0800a17c 	.word	0x0800a17c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfb8      	it	lt
 800108a:	425b      	neglt	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <_ZL14outputSpeedPIDP9PID_motor>:
static void resetEncoder(PID_motor* motor);
static uint32_t readEncoder(PID_motor* motor);

// Function to get the output value of the PID speed controller
static void outputSpeedPID(PID_motor* motor)
{
 8001096:	b590      	push	{r4, r7, lr}
 8001098:	b087      	sub	sp, #28
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
    float error, output, prop;
    // Get number of the encoder pulse in the last time frame
    if(motor->direction == 0 && (motor->current_encoder < motor->prev_encoder) && (motor->prev_encoder - motor->current_encoder > 16000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11f      	bne.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d219      	bcs.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80010c2:	d911      	bls.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
    {
        motor->real_speed = (65535 / 4) - motor->prev_encoder;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c8:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 80010cc:	333f      	adds	r3, #63	; 0x3f
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
        motor->real_speed += motor->current_encoder;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
 80010e6:	e02c      	b.n	8001142 <_ZL14outputSpeedPIDP9PID_motor+0xac>
    }
    else if(motor->direction == 1 && (motor->current_encoder > motor->prev_encoder) && (motor->current_encoder - motor->prev_encoder > 16000) )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d11f      	bne.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d919      	bls.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800110c:	d911      	bls.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
    {
        motor->real_speed = motor->current_encoder - (65535 / 4);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8001116:	3b3f      	subs	r3, #63	; 0x3f
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
        motor->real_speed -= motor->prev_encoder;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
 8001130:	e007      	b.n	8001142 <_ZL14outputSpeedPIDP9PID_motor+0xac>
    }
    else
        motor->real_speed = motor->current_encoder - motor->prev_encoder;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
    // Get the error of the number of encoder per time frame
    error = motor->targetPulsePerFrame - motor->real_speed;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd56 	bl	8000bfc <__aeabi_i2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fc9b 	bl	8000a90 <__aeabi_fsub>
 800115a:	4603      	mov	r3, r0
 800115c:	613b      	str	r3, [r7, #16]
    // Get the output of the PID controller with the new formula to avoid derivative kick as well as accumulation error when updating PID parameters
    prop = motor->speed_controller.Kp * error;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4619      	mov	r1, r3
 8001164:	6938      	ldr	r0, [r7, #16]
 8001166:	f7ff fd9d 	bl	8000ca4 <__aeabi_fmul>
 800116a:	4603      	mov	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
    motor->integral_error += motor->speed_controller.Ki * error;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fd93 	bl	8000ca4 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	4619      	mov	r1, r3
 8001182:	4620      	mov	r0, r4
 8001184:	f7ff fc86 	bl	8000a94 <__addsf3>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	645a      	str	r2, [r3, #68]	; 0x44
    // Anti integral wind-up 
    if(motor->MAX_PWM > prop)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	8b1b      	ldrh	r3, [r3, #24]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd31 	bl	8000bfc <__aeabi_i2f>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff1e 	bl	8000fe0 <__aeabi_fcmplt>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00e      	beq.n	80011c8 <_ZL14outputSpeedPIDP9PID_motor+0x132>
        motor->lim_max_integ = motor->MAX_PWM - prop;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8b1b      	ldrh	r3, [r3, #24]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd24 	bl	8000bfc <__aeabi_i2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fc69 	bl	8000a90 <__aeabi_fsub>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	649a      	str	r2, [r3, #72]	; 0x48
 80011c6:	e003      	b.n	80011d0 <_ZL14outputSpeedPIDP9PID_motor+0x13a>
    else 
        motor->lim_max_integ = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	649a      	str	r2, [r3, #72]	; 0x48
    
    if(0 < prop)
 80011d0:	f04f 0100 	mov.w	r1, #0
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff21 	bl	800101c <__aeabi_fcmpgt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d009      	beq.n	80011f4 <_ZL14outputSpeedPIDP9PID_motor+0x15e>
        motor->lim_min_integ = 0 - prop;
 80011e0:	68f9      	ldr	r1, [r7, #12]
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	f7ff fc53 	bl	8000a90 <__aeabi_fsub>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80011f2:	e003      	b.n	80011fc <_ZL14outputSpeedPIDP9PID_motor+0x166>
    else
        motor->lim_min_integ = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	64da      	str	r2, [r3, #76]	; 0x4c
    // Constraint the integral
    if(motor->integral_error > motor->lim_max_integ)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f7ff ff08 	bl	800101c <__aeabi_fcmpgt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <_ZL14outputSpeedPIDP9PID_motor+0x186>
        motor->integral_error = motor->lim_max_integ;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
 800121a:	e00e      	b.n	800123a <_ZL14outputSpeedPIDP9PID_motor+0x1a4>
    else if(motor->integral_error < motor->lim_min_integ)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f7ff feda 	bl	8000fe0 <__aeabi_fcmplt>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <_ZL14outputSpeedPIDP9PID_motor+0x1a4>
        motor->integral_error = motor->lim_min_integ;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44

    output = prop + motor->speed_controller.Kd * (motor->real_speed - motor->prev_encoder_feedback) + motor->integral_error;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fcd6 	bl	8000bfc <__aeabi_i2f>
 8001250:	4603      	mov	r3, r0
 8001252:	4619      	mov	r1, r3
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fd25 	bl	8000ca4 <__aeabi_fmul>
 800125a:	4603      	mov	r3, r0
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc18 	bl	8000a94 <__addsf3>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	4619      	mov	r1, r3
 800126e:	4610      	mov	r0, r2
 8001270:	f7ff fc10 	bl	8000a94 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	617b      	str	r3, [r7, #20]
    // Update the parameters
    motor->prev_encoder = motor->current_encoder;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
    motor->prev_encoder_feedback = motor->real_speed;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    // Limit the output velocity of the motor
    if(output > motor->MAX_PWM)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8b1b      	ldrh	r3, [r3, #24]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fcb3 	bl	8000bfc <__aeabi_i2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4619      	mov	r1, r3
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff febe 	bl	800101c <__aeabi_fcmpgt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <_ZL14outputSpeedPIDP9PID_motor+0x220>
        output = motor->MAX_PWM;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8b1b      	ldrh	r3, [r3, #24]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fca2 	bl	8000bf4 <__aeabi_ui2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_ZL14outputSpeedPIDP9PID_motor+0x236>
    else if(output < 0)
 80012b6:	f04f 0100 	mov.w	r1, #0
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff fe90 	bl	8000fe0 <__aeabi_fcmplt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <_ZL14outputSpeedPIDP9PID_motor+0x236>
        output = 0;
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    motor->output = output;
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f7ff feaf 	bl	8001030 <__aeabi_f2iz>
 80012d2:	4602      	mov	r2, r0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}

080012e0 <_ZL11readEncoderP9PID_motor>:

// Function to get the encoder value of the motor
static uint32_t readEncoder(PID_motor* motor)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    return motor->encoder_tim->CNT / 4;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	089b      	lsrs	r3, r3, #2
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
	...

080012fc <_Z9motorInit9PID_motor>:

// -------------------------------------------------------- General function used by users -----------------------------------------------

// Function to initiate the motor GPIO pins
void motorInit(PID_motor motor)
{
 80012fc:	b084      	sub	sp, #16
 80012fe:	b580      	push	{r7, lr}
 8001300:	b08a      	sub	sp, #40	; 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001308:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
    // Initiate the GPIO pins of the motor
    for(int i = 0; i < 2; ++i)
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	2b01      	cmp	r3, #1
 8001322:	f300 8091 	bgt.w	8001448 <_Z9motorInit9PID_motor+0x14c>
    {
        HAL_GPIO_WritePin(motor.motor_ports[i], motor.motor_pins[i], GPIO_PIN_RESET);
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800132c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3304      	adds	r3, #4
 8001334:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	f003 fcd0 	bl	8004ce4 <HAL_GPIO_WritePin>
        if(motor.motor_ports[i] == GPIOA)
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	4a42      	ldr	r2, [pc, #264]	; (8001458 <_Z9motorInit9PID_motor+0x15c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d10c      	bne.n	800136e <_Z9motorInit9PID_motor+0x72>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	e052      	b.n	8001414 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOB)
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	4a39      	ldr	r2, [pc, #228]	; (8001460 <_Z9motorInit9PID_motor+0x164>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10c      	bne.n	8001398 <_Z9motorInit9PID_motor+0x9c>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b37      	ldr	r3, [pc, #220]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a36      	ldr	r2, [pc, #216]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	e03d      	b.n	8001414 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOC)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	4a30      	ldr	r2, [pc, #192]	; (8001464 <_Z9motorInit9PID_motor+0x168>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d10c      	bne.n	80013c2 <_Z9motorInit9PID_motor+0xc6>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a2b      	ldr	r2, [pc, #172]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	e028      	b.n	8001414 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOD)
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <_Z9motorInit9PID_motor+0x16c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10c      	bne.n	80013ec <_Z9motorInit9PID_motor+0xf0>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	e013      	b.n	8001414 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOE)
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <_Z9motorInit9PID_motor+0x170>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d10b      	bne.n	8001414 <_Z9motorInit9PID_motor+0x118>
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a16      	ldr	r2, [pc, #88]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 8001402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <_Z9motorInit9PID_motor+0x160>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
        GPIO_InitStruct.Pin = motor.motor_pins[i];
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3304      	adds	r3, #4
 8001418:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800141c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001420:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001426:	2301      	movs	r3, #1
 8001428:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(motor.motor_ports[i], &GPIO_InitStruct);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	f107 0214 	add.w	r2, r7, #20
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f003 face 	bl	80049dc <HAL_GPIO_Init>
    for(int i = 0; i < 2; ++i)
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3301      	adds	r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e76a      	b.n	800131e <_Z9motorInit9PID_motor+0x22>
    }
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001452:	b004      	add	sp, #16
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010800 	.word	0x40010800
 800145c:	40021000 	.word	0x40021000
 8001460:	40010c00 	.word	0x40010c00
 8001464:	40011000 	.word	0x40011000
 8001468:	40011400 	.word	0x40011400
 800146c:	40011800 	.word	0x40011800

08001470 <_Z15dutyCycleUpdatetP9PID_motor>:

// Function to update the PWM duty cycle of the motor
void dutyCycleUpdate(uint16_t duty_cycle, PID_motor* motor)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	80fb      	strh	r3, [r7, #6]
    switch (motor->pwm_channel)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	7d1b      	ldrb	r3, [r3, #20]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d81f      	bhi.n	80014c4 <_Z15dutyCycleUpdatetP9PID_motor+0x54>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <_Z15dutyCycleUpdatetP9PID_motor+0x1c>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014a7 	.word	0x080014a7
 8001494:	080014b1 	.word	0x080014b1
 8001498:	080014bb 	.word	0x080014bb
    {
        case PWM_CHANNEL_1:
            motor->pwm_tim->CCR1 = duty_cycle;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80014a4:	e00f      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_2:
            motor->pwm_tim->CCR2 = duty_cycle;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 80014ae:	e00a      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_3:
            motor->pwm_tim->CCR3 = duty_cycle;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
            break;
 80014b8:	e005      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_4:
            motor->pwm_tim->CCR4 = duty_cycle;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 80014c2:	e000      	b.n	80014c6 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
    default:
        break;
 80014c4:	bf00      	nop
    }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <_Z10motorBrakeP9PID_motor>:

// Function to brake the motor immediately
void motorBrake(PID_motor* motor)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_RESET);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	891b      	ldrh	r3, [r3, #8]
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	f003 fbfe 	bl	8004ce4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_RESET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6858      	ldr	r0, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	895b      	ldrh	r3, [r3, #10]
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	f003 fbf6 	bl	8004ce4 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_Z18inputSpeedHandlingP9PID_motorf>:
    motor->real_speed = 0;
}

// Function to handle the speed input of the PID controller
void inputSpeedHandling(PID_motor* motor, float speed)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    // Rescale the input rpm speed
    if(speed > motor->MAX_INPUT_SPEED)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	8b5b      	ldrh	r3, [r3, #26]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fb74 	bl	8000bfc <__aeabi_i2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4619      	mov	r1, r3
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7ff fd7f 	bl	800101c <__aeabi_fcmpgt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <_Z18inputSpeedHandlingP9PID_motorf+0x34>
        speed = motor->MAX_INPUT_SPEED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	8b5b      	ldrh	r3, [r3, #26]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb63 	bl	8000bf4 <__aeabi_ui2f>
 800152e:	4603      	mov	r3, r0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	e00a      	b.n	800154a <_Z18inputSpeedHandlingP9PID_motorf+0x4a>
    else if(speed < 0)
 8001534:	f04f 0100 	mov.w	r1, #0
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7ff fd51 	bl	8000fe0 <__aeabi_fcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <_Z18inputSpeedHandlingP9PID_motorf+0x4a>
        speed = 0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	603b      	str	r3, [r7, #0]

    if(speed >= 0)
 800154a:	f04f 0100 	mov.w	r1, #0
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f7ff fd5a 	bl	8001008 <__aeabi_fcmpge>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <_Z18inputSpeedHandlingP9PID_motorf+0x64>
        motor->direction = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001562:	e003      	b.n	800156c <_Z18inputSpeedHandlingP9PID_motorf+0x6c>
    else
        motor->direction = 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    // Check whether the motor is already moving
    if(! motor->moving)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <_Z18inputSpeedHandlingP9PID_motorf+0x7e>
    {
        motor->moving = 1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }
    // Convert the desired speed to pulse per frame and input to the motor
    motor->targetPulsePerFrame = (speed * motor->encoder_rev) * time_frame / 60000.0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	8adb      	ldrh	r3, [r3, #22]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb3a 	bl	8000bfc <__aeabi_i2f>
 8001588:	4603      	mov	r3, r0
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fb89 	bl	8000ca4 <__aeabi_fmul>
 8001592:	4603      	mov	r3, r0
 8001594:	461c      	mov	r4, r3
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <_Z18inputSpeedHandlingP9PID_motorf+0xc4>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb2e 	bl	8000bfc <__aeabi_i2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fb7d 	bl	8000ca4 <__aeabi_fmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <_Z18inputSpeedHandlingP9PID_motorf+0xc8>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc2c 	bl	8000e0c <__aeabi_fdiv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
    return;
 80015bc:	bf00      	nop
}
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	476a6000 	.word	0x476a6000

080015cc <_Z15speedControlPIDP9PID_motor>:

// Function to control the speed of the motor by PID algorithm
void speedControlPID(PID_motor* motor)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    // Update the motor encoder value
    motor->current_encoder = readEncoder(motor);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe83 	bl	80012e0 <_ZL11readEncoderP9PID_motor>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
    // Update the PID output of the controller
    outputSpeedPID(motor);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fd58 	bl	8001096 <_ZL14outputSpeedPIDP9PID_motor>

    // Get the absolute value of the motor
    uint16_t pwm_dutycycle = abs(motor->output);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd46 	bl	800107c <_ZSt3absl>
 80015f0:	4603      	mov	r3, r0
 80015f2:	81fb      	strh	r3, [r7, #14]
    if(pwm_dutycycle < motor->DEAD_BAND)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7f1b      	ldrb	r3, [r3, #28]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	89fa      	ldrh	r2, [r7, #14]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d201      	bcs.n	8001604 <_Z15speedControlPIDP9PID_motor+0x38>
        pwm_dutycycle = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	81fb      	strh	r3, [r7, #14]

    // Control the direction of the motor
    if(motor->direction == 0)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d110      	bne.n	8001630 <_Z15speedControlPIDP9PID_motor+0x64>
    {
        HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	891b      	ldrh	r3, [r3, #8]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	f003 fb63 	bl	8004ce4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_RESET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6858      	ldr	r0, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	895b      	ldrh	r3, [r3, #10]
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	f003 fb5b 	bl	8004ce4 <HAL_GPIO_WritePin>
 800162e:	e014      	b.n	800165a <_Z15speedControlPIDP9PID_motor+0x8e>
    }
    else if(motor->direction == 1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10f      	bne.n	800165a <_Z15speedControlPIDP9PID_motor+0x8e>
    {
        HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_RESET);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	891b      	ldrh	r3, [r3, #8]
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	f003 fb4d 	bl	8004ce4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_SET);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	895b      	ldrh	r3, [r3, #10]
 8001652:	2201      	movs	r2, #1
 8001654:	4619      	mov	r1, r3
 8001656:	f003 fb45 	bl	8004ce4 <HAL_GPIO_WritePin>
    }

    // Feed the value of the PWM duty cycle
    dutyCycleUpdate(pwm_dutycycle, motor);
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff06 	bl	8001470 <_Z15dutyCycleUpdatetP9PID_motor>

    if(pwm_dutycycle == 0)
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <_Z15speedControlPIDP9PID_motor+0xa4>
        motorBrake(motor);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff30 	bl	80014d0 <_Z10motorBrakeP9PID_motor>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f002 fd9c 	bl	80041b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f82e 	bl	80016e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f000 fa8c 	bl	8001ba0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001688:	f000 fa64 	bl	8001b54 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 800168c:	f000 fa34 	bl	8001af8 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8001690:	f000 f876 	bl	8001780 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001694:	f000 f8d4 	bl	8001840 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001698:	f000 f930 	bl	80018fc <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800169c:	f000 f98c 	bl	80019b8 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 80016a0:	f001 fc8e 	bl	8002fc0 <setup>

  // Initiate the PWM of the 2 motors
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	480a      	ldr	r0, [pc, #40]	; (80016d0 <main+0x58>)
 80016a8:	f004 f858 	bl	800575c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80016ac:	2104      	movs	r1, #4
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <main+0x58>)
 80016b0:	f004 f854 	bl	800575c <HAL_TIM_PWM_Start>

    // Initiate the Encoder read of 2 motors
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016b4:	213c      	movs	r1, #60	; 0x3c
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <main+0x5c>)
 80016b8:	f004 f994 	bl	80059e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016bc:	213c      	movs	r1, #60	; 0x3c
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <main+0x60>)
 80016c0:	f004 f990 	bl	80059e4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <main+0x64>)
 80016c6:	f003 ff9f 	bl	8005608 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80016ca:	f001 fcb7 	bl	800303c <loop>
 80016ce:	e7fc      	b.n	80016ca <main+0x52>
 80016d0:	20000388 	.word	0x20000388
 80016d4:	200002f8 	.word	0x200002f8
 80016d8:	20000340 	.word	0x20000340
 80016dc:	200002b0 	.word	0x200002b0

080016e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 f806 	bl	8007700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800171e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fb0d 	bl	8004d48 <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800173e:	f000 fab3 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2102      	movs	r1, #2
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fd75 	bl	800524c <HAL_RCC_ClockConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001772:	f000 fa99 	bl	8001ca8 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3740      	adds	r7, #64	; 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 800179e:	4a27      	ldr	r2, [pc, #156]	; (800183c <_ZL12MX_TIM1_Initv+0xbc>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017b2:	f240 529f 	movw	r2, #1439	; 0x59f
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017cc:	f003 fecc 	bl	8005568 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80017e0:	f000 fa62 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 80017f2:	f004 fb4f 	bl	8005e94 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8001806:	f000 fa4f 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <_ZL12MX_TIM1_Initv+0xb8>)
 8001818:	f004 fecc 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 800182c:	f000 fa3c 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002b0 	.word	0x200002b0
 800183c:	40012c00 	.word	0x40012c00

08001840 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2224      	movs	r2, #36	; 0x24
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f005 ff56 	bl	8007700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001884:	2303      	movs	r3, #3
 8001886:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001894:	230f      	movs	r3, #15
 8001896:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80018a4:	230f      	movs	r3, #15
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 80018b0:	f003 fff6 	bl	80058a0 <HAL_TIM_Encoder_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80018c4:	f000 f9f0 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <_ZL12MX_TIM2_Initv+0xb8>)
 80018d6:	f004 fe6d 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80018ea:	f000 f9dd 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002f8 	.word	0x200002f8

080018fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f005 fef8 	bl	8007700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb8>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800192c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800193e:	2303      	movs	r3, #3
 8001940:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800194e:	230f      	movs	r3, #15
 8001950:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001956:	2301      	movs	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800195e:	230f      	movs	r3, #15
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 800196a:	f003 ff99 	bl	80058a0 <HAL_TIM_Encoder_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800197e:	f000 f993 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4808      	ldr	r0, [pc, #32]	; (80019b0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001990:	f004 fe10 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80019a4:	f000 f980 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000340 	.word	0x20000340
 80019b4:	40000400 	.word	0x40000400

080019b8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019ea:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <_ZL12MX_TIM4_Initv+0x13c>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80019ee:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019f0:	2247      	movs	r2, #71	; 0x47
 80019f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 80019fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001a00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a0e:	4838      	ldr	r0, [pc, #224]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a10:	f003 fdaa 	bl	8005568 <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8001a24:	f000 f940 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a32:	4619      	mov	r1, r3
 8001a34:	482e      	ldr	r0, [pc, #184]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a36:	f004 fa2d 	bl	8005e94 <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8001a4a:	f000 f92d 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a4e:	4828      	ldr	r0, [pc, #160]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a50:	f003 fe2c 	bl	80056ac <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8001a64:	f000 f920 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4619      	mov	r1, r3
 8001a76:	481e      	ldr	r0, [pc, #120]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001a78:	f004 fd9c 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8001a8c:	f000 f90c 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a90:	2360      	movs	r3, #96	; 0x60
 8001a92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4812      	ldr	r0, [pc, #72]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001aa8:	f004 f932 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8001abc:	f000 f8f4 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480a      	ldr	r0, [pc, #40]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001ac8:	f004 f922 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <_ZL12MX_TIM4_Initv+0x128>
  {
    Error_Handler();
 8001adc:	f000 f8e4 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <_ZL12MX_TIM4_Initv+0x138>)
 8001ae2:	f002 f923 	bl	8003d2c <HAL_TIM_MspPostInit>

}
 8001ae6:	bf00      	nop
 8001ae8:	3738      	adds	r7, #56	; 0x38
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000388 	.word	0x20000388
 8001af4:	40000800 	.word	0x40000800

08001af8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b30:	f004 fdb0 	bl	8006694 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001b44:	f000 f8b0 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200003d0 	.word	0x200003d0
 8001b50:	40013800 	.word	0x40013800

08001b54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_ZL11MX_DMA_Initv+0x48>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <_ZL11MX_DMA_Initv+0x48>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <_ZL11MX_DMA_Initv+0x48>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	200e      	movs	r0, #14
 8001b78:	f002 fc57 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b7c:	200e      	movs	r0, #14
 8001b7e:	f002 fc70 	bl	8004462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	200f      	movs	r0, #15
 8001b88:	f002 fc4f 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b8c:	200f      	movs	r0, #15
 8001b8e:	f002 fc68 	bl	8004462 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a37      	ldr	r2, [pc, #220]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bd2:	f043 0320 	orr.w	r3, r3, #32
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <_ZL12MX_GPIO_Initv+0xf8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1a:	4820      	ldr	r0, [pc, #128]	; (8001c9c <_ZL12MX_GPIO_Initv+0xfc>)
 8001c1c:	f003 f862 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c26:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <_ZL12MX_GPIO_Initv+0x100>)
 8001c28:	f003 f85c 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2138      	movs	r1, #56	; 0x38
 8001c30:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x104>)
 8001c32:	f003 f857 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <_ZL12MX_GPIO_Initv+0xfc>)
 8001c50:	f002 fec4 	bl	80049dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <_ZL12MX_GPIO_Initv+0x100>)
 8001c6e:	f002 feb5 	bl	80049dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c72:	2338      	movs	r3, #56	; 0x38
 8001c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x104>)
 8001c8a:	f002 fea7 	bl	80049dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>

08001cb2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	0800a3f0 	.word	0x0800a3f0

08001cf4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
      data()
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffe8 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ffcf 	bl	8001cb2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	0800a3d8 	.word	0x0800a3d8

08001d24 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0a19      	lsrs	r1, r3, #8
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0c19      	lsrs	r1, r3, #16
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2ca      	uxtb	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	0e19      	lsrs	r1, r3, #24
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3303      	adds	r3, #3
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a19      	lsrs	r1, r3, #8
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	0c19      	lsrs	r1, r3, #16
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3302      	adds	r3, #2
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0e19      	lsrs	r1, r3, #24
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3303      	adds	r3, #3
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2ca      	uxtb	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    }
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	440b      	add	r3, r1
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	440b      	add	r3, r1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3303      	adds	r3, #3
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	6839      	ldr	r1, [r7, #0]
 8001e4e:	440b      	add	r3, r1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3302      	adds	r3, #2
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	440b      	add	r3, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3303      	adds	r3, #3
 8001e78:	6839      	ldr	r1, [r7, #0]
 8001e7a:	440b      	add	r3, r1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	4b02      	ldr	r3, [pc, #8]	; (8001eac <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	0800a198 	.word	0x0800a198

08001eb0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	0800a1a8 	.word	0x0800a1a8

08001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fefe 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	809a      	strh	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
    {
    }
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0800a3c0 	.word	0x0800a3c0
 8001f0c:	0800a1cc 	.word	0x0800a1cc

08001f10 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8899      	ldrh	r1, [r3, #4]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	889b      	ldrh	r3, [r3, #4]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	b299      	uxth	r1, r3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3302      	adds	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe f900 	bl	8000150 <strlen>
 8001f50:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	69b9      	ldr	r1, [r7, #24]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 f878 	bl	8003050 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3304      	adds	r3, #4
 8001f64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	18d0      	adds	r0, r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4619      	mov	r1, r3
 8001f74:	f005 fbb6 	bl	80076e4 <memcpy>
      offset += length_topic_name;
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f8e3 	bl	8000150 <strlen>
 8001f8a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f85b 	bl	8003050 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f005 fb99 	bl	80076e4 <memcpy>
      offset += length_message_type;
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f8c6 	bl	8000150 <strlen>
 8001fc4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 f83e 	bl	8003050 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	18d0      	adds	r0, r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f005 fb7c 	bl	80076e4 <memcpy>
      offset += length_md5sum;
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	b2ca      	uxtb	r2, r1
 8002004:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0a19      	lsrs	r1, r3, #8
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0c19      	lsrs	r1, r3, #16
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3302      	adds	r3, #2
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0e19      	lsrs	r1, r3, #24
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3303      	adds	r3, #3
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	61fb      	str	r3, [r7, #28]
      return offset;
 800203c:	69fb      	ldr	r3, [r7, #28]
    }
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002046:	b580      	push	{r7, lr}
 8002048:	b08a      	sub	sp, #40	; 0x28
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	889b      	ldrh	r3, [r3, #4]
 8002066:	b21a      	sxth	r2, r3
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	3301      	adds	r3, #1
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	440b      	add	r3, r1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21b      	sxth	r3, r3
 8002076:	4313      	orrs	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	3302      	adds	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	441a      	add	r2, r3
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fff9 	bl	800308a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	3304      	adds	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	441a      	add	r2, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	440b      	add	r3, r1
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3301      	adds	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	e7ec      	b.n	80020a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4413      	add	r3, r2
 80020ce:	3b01      	subs	r3, #1
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	3b01      	subs	r3, #1
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	441a      	add	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4413      	add	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	441a      	add	r2, r3
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 ffc6 	bl	800308a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3304      	adds	r3, #4
 8002102:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	6a3a      	ldr	r2, [r7, #32]
 8002110:	429a      	cmp	r2, r3
 8002112:	d20c      	bcs.n	800212e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	441a      	add	r2, r3
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	3b01      	subs	r3, #1
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	440b      	add	r3, r1
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	3301      	adds	r3, #1
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	e7ec      	b.n	8002108 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	3b01      	subs	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	3b01      	subs	r3, #1
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	441a      	add	r2, r3
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f000 ff93 	bl	800308a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	3304      	adds	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	429a      	cmp	r2, r3
 8002178:	d20c      	bcs.n	8002194 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	441a      	add	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3b01      	subs	r3, #1
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	440b      	add	r3, r1
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	3301      	adds	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e7ec      	b.n	800216e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	3b01      	subs	r3, #1
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	441a      	add	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	440a      	add	r2, r1
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	3301      	adds	r3, #1
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	440b      	add	r3, r1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	4313      	orrs	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3302      	adds	r3, #2
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	440b      	add	r3, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	3303      	adds	r3, #3
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	440b      	add	r3, r1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	061b      	lsls	r3, r3, #24
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3304      	adds	r3, #4
 800220a:	61bb      	str	r3, [r7, #24]
     return offset;
 800220c:	69bb      	ldr	r3, [r7, #24]
    }
 800220e:	4618      	mov	r0, r3
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	0800a1d0 	.word	0x0800a1d0

08002230 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	0800a1ec 	.word	0x0800a1ec

08002248 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fd3e 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	711a      	strb	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002268:	609a      	str	r2, [r3, #8]
    {
    }
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	0800a3a8 	.word	0x0800a3a8
 8002278:	0800a1cc 	.word	0x0800a1cc

0800227c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4413      	add	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	7912      	ldrb	r2, [r2, #4]
 8002294:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fd ff55 	bl	8000150 <strlen>
 80022a6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fecd 	bl	8003050 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	18d0      	adds	r0, r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f005 fa0b 	bl	80076e4 <memcpy>
      offset += length_msg;
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80022d6:	68fb      	ldr	r3, [r7, #12]
    }
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	441a      	add	r2, r3
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 febc 	bl	800308a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	3304      	adds	r3, #4
 8002316:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4413      	add	r3, r2
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	d20c      	bcs.n	8002342 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	441a      	add	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3b01      	subs	r3, #1
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	440b      	add	r3, r1
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e7ec      	b.n	800231c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	3b01      	subs	r3, #1
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	3b01      	subs	r3, #1
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
     return offset;
 8002366:	693b      	ldr	r3, [r7, #16]
    }
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	0800a210 	.word	0x0800a210

08002388 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	0800a224 	.word	0x0800a224

080023a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fc92 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	0800a390 	.word	0x0800a390

080023fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0a19      	lsrs	r1, r3, #8
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	0c19      	lsrs	r1, r3, #16
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3302      	adds	r3, #2
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	4413      	add	r3, r2
 8002438:	b2ca      	uxtb	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0e19      	lsrs	r1, r3, #24
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	3303      	adds	r3, #3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3304      	adds	r3, #4
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	429a      	cmp	r2, r3
 8002460:	d22b      	bcs.n	80024ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002470:	6939      	ldr	r1, [r7, #16]
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	b2ca      	uxtb	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	0a19      	lsrs	r1, r3, #8
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	3301      	adds	r3, #1
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	b2ca      	uxtb	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	0c19      	lsrs	r1, r3, #16
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3302      	adds	r3, #2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	0e19      	lsrs	r1, r3, #24
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	3303      	adds	r3, #3
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	b2ca      	uxtb	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3304      	adds	r3, #4
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	3301      	adds	r3, #1
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	e7ce      	b.n	8002458 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2ca      	uxtb	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	0a19      	lsrs	r1, r3, #8
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	3301      	adds	r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	0c19      	lsrs	r1, r3, #16
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	3302      	adds	r3, #2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	0e19      	lsrs	r1, r3, #24
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	3303      	adds	r3, #3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	3304      	adds	r3, #4
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	429a      	cmp	r2, r3
 8002510:	d22b      	bcs.n	800256a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	4413      	add	r3, r2
 8002528:	b2ca      	uxtb	r2, r1
 800252a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	0a19      	lsrs	r1, r3, #8
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4413      	add	r3, r2
 8002538:	b2ca      	uxtb	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	0c19      	lsrs	r1, r3, #16
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	3302      	adds	r3, #2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4413      	add	r3, r2
 8002548:	b2ca      	uxtb	r2, r1
 800254a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0e19      	lsrs	r1, r3, #24
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3303      	adds	r3, #3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	3304      	adds	r3, #4
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	e7ce      	b.n	8002508 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69d9      	ldr	r1, [r3, #28]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	0a19      	lsrs	r1, r3, #8
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4413      	add	r3, r2
 8002586:	b2ca      	uxtb	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	0c19      	lsrs	r1, r3, #16
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3302      	adds	r3, #2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	0e19      	lsrs	r1, r3, #24
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3303      	adds	r3, #3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	3304      	adds	r3, #4
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d228      	bcs.n	8002614 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd fdbe 	bl	8000150 <strlen>
 80025d4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd36 	bl	8003050 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3304      	adds	r3, #4
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	18d0      	adds	r0, r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4619      	mov	r1, r3
 8002600:	f005 f870 	bl	80076e4 <memcpy>
      offset += length_stringsi;
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	3301      	adds	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	e7d1      	b.n	80025b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002616:	4618      	mov	r0, r3
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800261e:	b580      	push	{r7, lr}
 8002620:	b08e      	sub	sp, #56	; 0x38
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	3301      	adds	r3, #1
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	6a3a      	ldr	r2, [r7, #32]
 8002644:	4313      	orrs	r3, r2
 8002646:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	3302      	adds	r3, #2
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	4313      	orrs	r3, r2
 8002658:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	3303      	adds	r3, #3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	6a3a      	ldr	r2, [r7, #32]
 8002668:	4313      	orrs	r3, r2
 800266a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	3304      	adds	r3, #4
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	d90a      	bls.n	8002692 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f005 fca2 	bl	8007fd0 <realloc>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d236      	bcs.n	8002714 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	440a      	add	r2, r1
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026bc:	3301      	adds	r3, #1
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	440b      	add	r3, r1
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	3302      	adds	r3, #2
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	3303      	adds	r3, #3
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	440b      	add	r3, r1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	3304      	adds	r3, #4
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	3301      	adds	r3, #1
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 8002712:	e7c3      	b.n	800269c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	3301      	adds	r3, #1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	4313      	orrs	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	3302      	adds	r3, #2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	4313      	orrs	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	3303      	adds	r3, #3
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	4313      	orrs	r3, r2
 8002752:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	3304      	adds	r3, #4
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	429a      	cmp	r2, r3
 8002762:	d90a      	bls.n	800277a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f005 fc2e 	bl	8007fd0 <realloc>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278a:	429a      	cmp	r2, r3
 800278c:	d236      	bcs.n	80027fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	440a      	add	r2, r1
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	3301      	adds	r3, #1
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	440b      	add	r3, r1
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	3302      	adds	r3, #2
 80027b8:	6839      	ldr	r1, [r7, #0]
 80027ba:	440b      	add	r3, r1
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	3303      	adds	r3, #3
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	440b      	add	r3, r1
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	3304      	adds	r3, #4
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	3214      	adds	r2, #20
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	3301      	adds	r3, #1
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fa:	e7c3      	b.n	8002784 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	3301      	adds	r3, #1
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	3302      	adds	r3, #2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282c:	3303      	adds	r3, #3
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283e:	3304      	adds	r3, #4
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	429a      	cmp	r2, r3
 800284a:	d90a      	bls.n	8002862 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f005 fbba 	bl	8007fd0 <realloc>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002872:	429a      	cmp	r2, r3
 8002874:	d23f      	bcs.n	80028f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	441a      	add	r2, r3
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fc01 	bl	800308a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288a:	3304      	adds	r3, #4
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800288e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	429a      	cmp	r2, r3
 800289c:	d20c      	bcs.n	80028b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	441a      	add	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	3b01      	subs	r3, #1
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	440b      	add	r3, r1
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e7ec      	b.n	8002892 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	3b01      	subs	r3, #1
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	3b01      	subs	r3, #1
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	441a      	add	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80028d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4413      	add	r3, r2
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	3220      	adds	r2, #32
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	3301      	adds	r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f4:	e7ba      	b.n	800286c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3738      	adds	r7, #56	; 0x38
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	0800a2fc 	.word	0x0800a2fc

08002918 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	0800a248 	.word	0x0800a248

08002930 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68d8      	ldr	r0, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6891      	ldr	r1, [r2, #8]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4798      	blx	r3
 800297a:	4603      	mov	r3, r0
  };
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
  }
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80029b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <_ZN13STM32HardwareC1Ev+0x34>)
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200003d0 	.word	0x200003d0

080029f8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f804 	bl	8002a0e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a22:	4619      	mov	r1, r3
 8002a24:	f003 fef6 	bl	8006814 <HAL_UART_Receive_DMA>
    }
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffa8 	bl	800299a <_ZN13STM32Hardware10getRdmaIndEv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	429c      	cmp	r4, r3
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a60:	1c59      	adds	r1, r3, #1
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002a80:	68fb      	ldr	r3, [r7, #12]
    }
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
	...

08002a8c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d108      	bne.n	8002ab4 <_ZN13STM32Hardware5flushEv+0x28>
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <_ZN13STM32Hardware5flushEv+0x28>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <_ZN13STM32Hardware5flushEv+0x2a>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d055      	beq.n	8002b66 <_ZN13STM32Hardware5flushEv+0xda>
      {
        mutex = true;
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d047      	beq.n	8002b60 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	81fb      	strh	r3, [r7, #14]
          if(tfind < twind){
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d217      	bcs.n	8002b14 <_ZN13STM32Hardware5flushEv+0x88>
            len = twind - tfind;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	89fa      	ldrh	r2, [r7, #14]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f003 fe11 	bl	8006734 <HAL_UART_Transmit_DMA>
 8002b12:	e01f      	b.n	8002b54 <_ZN13STM32Hardware5flushEv+0xc8>
          }
          else{
            len = tbuflen - tfind;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b20:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	89fa      	ldrh	r2, [r7, #14]
 8002b36:	4619      	mov	r1, r3
 8002b38:	f003 fdfc 	bl	8006734 <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_DMA(huart, &tbuf[0], twind);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f003 fdf0 	bl	8006734 <HAL_UART_Transmit_DMA>
          }
          tfind = twind;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200004a0 	.word	0x200004a0

08002b74 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	617b      	str	r3, [r7, #20]
      n = (n <= tbuflen) ? n : tbuflen;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8a:	bfa8      	it	ge
 8002b8c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b90:	617b      	str	r3, [r7, #20]

      int n_tail = (n <= tbuflen - twind) ? n : tbuflen - twind;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b98:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	bf28      	it	cs
 8002ba2:	4613      	movcs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fd93 	bl	80076e4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d00b      	beq.n	8002bf2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	18d1      	adds	r1, r2, r3
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	f004 fd79 	bl	80076e4 <memcpy>
      }
      flush();
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ff4a 	bl	8002a8c <_ZN13STM32Hardware5flushEv>
    }
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	f001 fb2e 	bl	8004268 <HAL_GetTick>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
      data(0)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f856 	bl	8001cd4 <_ZN3ros3MsgC1Ev>
 8002c28:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <_ZN8std_msgs6UInt32C1Ev+0x28>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
    {
    }
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800a34c 	.word	0x0800a34c

08002c44 <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0a19      	lsrs	r1, r3, #8
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2ca      	uxtb	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c19      	lsrs	r1, r3, #16
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0e19      	lsrs	r1, r3, #24
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3303      	adds	r3, #3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2ca      	uxtb	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	440b      	add	r3, r1
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
     return offset;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    }
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	0800a26c 	.word	0x0800a26c

08002d30 <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	4b02      	ldr	r3, [pc, #8]	; (8002d44 <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	0800a27c 	.word	0x0800a27c

08002d48 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	0800a37c 	.word	0x0800a37c

08002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ffe8 	bl	8002d48 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d78:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe1c 	bl	80029c0 <_ZN13STM32HardwareC1Ev>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fca3 	bl	8007700 <memset>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fc9a 	bl	8007700 <memset>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002dd2:	2264      	movs	r2, #100	; 0x64
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 fc92 	bl	8007700 <memset>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002de2:	2264      	movs	r2, #100	; 0x64
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 fc8a 	bl	8007700 <memset>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff faac 	bl	80023a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0800a338 	.word	0x0800a338

08002e58 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E>:
static int16_t left_enc_ticks = 0;
static int16_t right_enc_ticks = 0;

// ******************* Motor Velocity Callback ************************* 
void robotCmdVelCallBack(const std_msgs::UInt32& robot_vel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x50>)
 8002e66:	f001 ff55 	bl	8004d14 <HAL_GPIO_TogglePin>
	rcv_buffer.robot_vel_msg = robot_vel.data;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002e70:	6013      	str	r3, [r2, #0]
	inputSpeedHandling(&motor_left, (float)rcv_buffer.robot_wheels_vel[0]);
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd febf 	bl	8000bfc <__aeabi_i2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4619      	mov	r1, r3
 8002e82:	480b      	ldr	r0, [pc, #44]	; (8002eb0 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x58>)
 8002e84:	f7fe fb3c 	bl	8001500 <_Z18inputSpeedHandlingP9PID_motorf>
	inputSpeedHandling(&motor_right, (float)rcv_buffer.robot_wheels_vel[1]);
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002e8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd feb4 	bl	8000bfc <__aeabi_i2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x5c>)
 8002e9a:	f7fe fb31 	bl	8001500 <_Z18inputSpeedHandlingP9PID_motorf>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	20000dec 	.word	0x20000dec
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	2000005c 	.word	0x2000005c

08002eb8 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt32> robot_vel_sub("robot_wheel_vel", &robotCmdVelCallBack);

// ************************** Declare publishers **********************************
ros::Publisher robot_pos_pub("robot_wheel_pos", &robot_wheels_pos);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002ec0:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <HAL_UART_TxCpltCallback+0x20>)
 8002ec2:	f000 f93b 	bl	800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fddf 	bl	8002a8c <_ZN13STM32Hardware5flushEv>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200004a4 	.word	0x200004a4

08002edc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002ee4:	4805      	ldr	r0, [pc, #20]	; (8002efc <HAL_UART_RxCpltCallback+0x20>)
 8002ee6:	f000 f929 	bl	800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd8e 	bl	8002a0e <_ZN13STM32Hardware10reset_rbufEv>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200004a4 	.word	0x200004a4

08002f00 <HAL_TIM_PeriodElapsedCallback>:

// Function for timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	speedControlPID(&motor_left);
 8002f08:	4825      	ldr	r0, [pc, #148]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002f0a:	f7fe fb5f 	bl	80015cc <_Z15speedControlPIDP9PID_motor>
	speedControlPID(&motor_right);
 8002f0e:	4825      	ldr	r0, [pc, #148]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002f10:	f7fe fb5c 	bl	80015cc <_Z15speedControlPIDP9PID_motor>

	left_enc_ticks += motor_left.real_speed;
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f2a:	801a      	strh	r2, [r3, #0]
	right_enc_ticks += motor_right.real_speed;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f42:	801a      	strh	r2, [r3, #0]

	// Publish new data every 100 ms
	if(++tick == 5)
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f50:	4619      	mov	r1, r3
 8002f52:	7011      	strb	r1, [r2, #0]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01a      	beq.n	8002f98 <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		tick = 0;
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
		send_buffer.robot_wheels_pos[0] = left_enc_ticks;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f70:	801a      	strh	r2, [r3, #0]
		send_buffer.robot_wheels_pos[1] = right_enc_ticks;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f7a:	805a      	strh	r2, [r3, #2]
		robot_wheels_pos.data = send_buffer.robot_pos_msg;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f82:	6053      	str	r3, [r2, #4]
		robot_pos_pub.publish(&robot_wheels_pos);
 8002f84:	490c      	ldr	r1, [pc, #48]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f86:	480d      	ldr	r0, [pc, #52]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f88:	f7ff fce8 	bl	800295c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		// Reset the encoders tick
		left_enc_ticks = 0;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	801a      	strh	r2, [r3, #0]
		right_enc_ticks = 0;
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	801a      	strh	r2, [r3, #0]
	}
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	2000005c 	.word	0x2000005c
 8002fa8:	20000df2 	.word	0x20000df2
 8002fac:	20000df4 	.word	0x20000df4
 8002fb0:	20000df0 	.word	0x20000df0
 8002fb4:	20000de8 	.word	0x20000de8
 8002fb8:	20000de0 	.word	0x20000de0
 8002fbc:	20000e14 	.word	0x20000e14

08002fc0 <setup>:

void setup(void)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b093      	sub	sp, #76	; 0x4c
 8002fc4:	af12      	add	r7, sp, #72	; 0x48
  nh.initNode();
 8002fc6:	4817      	ldr	r0, [pc, #92]	; (8003024 <setup+0x64>)
 8002fc8:	f000 f8c3 	bl	8003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  // Initiate publishers and subscribers
  nh.advertise(robot_pos_pub);
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <setup+0x68>)
 8002fce:	4815      	ldr	r0, [pc, #84]	; (8003024 <setup+0x64>)
 8002fd0:	f000 f8dc 	bl	800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(robot_vel_sub);
 8002fd4:	4915      	ldr	r1, [pc, #84]	; (800302c <setup+0x6c>)
 8002fd6:	4813      	ldr	r0, [pc, #76]	; (8003024 <setup+0x64>)
 8002fd8:	f000 f907 	bl	80031ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

  motorInit(motor_left);
 8002fdc:	4c14      	ldr	r4, [pc, #80]	; (8003030 <setup+0x70>)
 8002fde:	4668      	mov	r0, sp
 8002fe0:	f104 0310 	add.w	r3, r4, #16
 8002fe4:	2248      	movs	r2, #72	; 0x48
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f004 fb7c 	bl	80076e4 <memcpy>
 8002fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ff0:	f7fe f984 	bl	80012fc <_Z9motorInit9PID_motor>
  motorInit(motor_right);
 8002ff4:	4c0f      	ldr	r4, [pc, #60]	; (8003034 <setup+0x74>)
 8002ff6:	4668      	mov	r0, sp
 8002ff8:	f104 0310 	add.w	r3, r4, #16
 8002ffc:	2248      	movs	r2, #72	; 0x48
 8002ffe:	4619      	mov	r1, r3
 8003000:	f004 fb70 	bl	80076e4 <memcpy>
 8003004:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003008:	f7fe f978 	bl	80012fc <_Z9motorInit9PID_motor>

  inputSpeedHandling(&motor_left, 50.0);
 800300c:	490a      	ldr	r1, [pc, #40]	; (8003038 <setup+0x78>)
 800300e:	4808      	ldr	r0, [pc, #32]	; (8003030 <setup+0x70>)
 8003010:	f7fe fa76 	bl	8001500 <_Z18inputSpeedHandlingP9PID_motorf>
  inputSpeedHandling(&motor_right, 50.0);
 8003014:	4908      	ldr	r1, [pc, #32]	; (8003038 <setup+0x78>)
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <setup+0x74>)
 8003018:	f7fe fa72 	bl	8001500 <_Z18inputSpeedHandlingP9PID_motorf>
}
 800301c:	bf00      	nop
 800301e:	3704      	adds	r7, #4
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	200004a4 	.word	0x200004a4
 8003028:	20000e14 	.word	0x20000e14
 800302c:	20000df8 	.word	0x20000df8
 8003030:	20000004 	.word	0x20000004
 8003034:	2000005c 	.word	0x2000005c
 8003038:	42480000 	.word	0x42480000

0800303c <loop>:

void loop(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
#endif
#ifdef STM32F3xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#endif

  nh.spinOnce();
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <loop+0x10>)
 8003042:	f000 f8fc 	bl	800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200004a4 	.word	0x200004a4

08003050 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d80d      	bhi.n	8003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	fa22 f103 	lsr.w	r1, r2, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	b2ca      	uxtb	r2, r1
 8003076:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e7ee      	b.n	800305e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d811      	bhi.n	80030c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	440a      	add	r2, r1
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	4611      	mov	r1, r2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	00d2      	lsls	r2, r2, #3
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e7ea      	b.n	800309e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
	...

080030d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	0800a364 	.word	0x0800a364

080030f4 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ffe5 	bl	80030d4 <_ZN3ros11Subscriber_C1Ev>
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei+0x44>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	330c      	adds	r3, #12
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fd7f 	bl	8002c18 <_ZN8std_msgs6UInt32C1Ev>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	615a      	str	r2, [r3, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]
  };
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	0800a320 	.word	0x0800a320

0800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
  }
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fc4a 	bl	80029f8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b18      	cmp	r3, #24
 800319e:	dc1e      	bgt.n	80031de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d111      	bne.n	80031d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	60da      	str	r2, [r3, #12]
        return true;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e004      	b.n	80031e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e7dd      	b.n	800319a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80031de:	2300      	movs	r3, #0
  }
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b18      	cmp	r3, #24
 80031fc:	dc19      	bgt.n	8003232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	605a      	str	r2, [r3, #4]
        return true;
 8003226:	2301      	movs	r3, #1
 8003228:	e004      	b.n	8003234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e7e2      	b.n	80031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8003232:	2300      	movs	r3, #0
  }
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fcd8 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 8003250:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003260:	4293      	cmp	r3, r2
 8003262:	d903      	bls.n	800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	429a      	cmp	r2, r3
 8003280:	d903      	bls.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003290:	2b00      	cmp	r3, #0
 8003292:	d014      	beq.n	80032be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fcb1 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80032aa:	429a      	cmp	r2, r3
 80032ac:	bf8c      	ite	hi
 80032ae:	2301      	movhi	r3, #1
 80032b0:	2300      	movls	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80032b8:	f06f 0301 	mvn.w	r3, #1
 80032bc:	e194      	b.n	80035e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fbb4 	bl	8002a30 <_ZN13STM32Hardware4readEv>
 80032c8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f2c0 8174 	blt.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	441a      	add	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032e8:	2b07      	cmp	r3, #7
 80032ea:	d11e      	bne.n	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80032f2:	1c59      	adds	r1, r3, #1
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	b2d1      	uxtb	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	460a      	mov	r2, r1
 8003304:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1b4      	bne.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2208      	movs	r2, #8
 8003324:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003328:	e7af      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003330:	2b00      	cmp	r3, #0
 8003332:	d128      	bne.n	8003386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2bff      	cmp	r3, #255	; 0xff
 8003338:	d10d      	bne.n	8003356 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f103 0214 	add.w	r2, r3, #20
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003354:	e799      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fc50 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	bf8c      	ite	hi
 800336e:	2301      	movhi	r3, #1
 8003370:	2300      	movls	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d088      	beq.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003380:	f06f 0301 	mvn.w	r3, #1
 8003384:	e130      	b.n	80035e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800338c:	2b01      	cmp	r3, #1
 800338e:	d118      	bne.n	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2bfe      	cmp	r3, #254	; 0xfe
 8003394:	d107      	bne.n	80033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033a4:	e771      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f47f af68 	bne.w	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f918 	bl	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80033c0:	e763      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d113      	bne.n	80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80033f2:	e74a      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d110      	bne.n	8003420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	441a      	add	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800341e:	e734      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003426:	2b04      	cmp	r3, #4
 8003428:	d116      	bne.n	8003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003430:	425a      	negs	r2, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	bf58      	it	pl
 8003438:	4253      	negpl	r3, r2
 800343a:	2bff      	cmp	r3, #255	; 0xff
 800343c:	d107      	bne.n	800344e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800344c:	e71d      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003456:	e718      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800345e:	2b05      	cmp	r3, #5
 8003460:	d10f      	bne.n	8003482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003480:	e703      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003488:	2b06      	cmp	r3, #6
 800348a:	d117      	bne.n	80034bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	441a      	add	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2207      	movs	r2, #7
 80034a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f aeec 	bne.w	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2208      	movs	r2, #8
 80034b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034ba:	e6e6      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	f47f aee1 	bne.w	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80034d6:	425a      	negs	r2, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	bf58      	it	pl
 80034de:	4253      	negpl	r3, r2
 80034e0:	2bff      	cmp	r3, #255	; 0xff
 80034e2:	f47f aed2 	bne.w	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d110      	bne.n	8003512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f87d 	bl	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f898 	bl	800362c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	e06a      	b.n	80035e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003518:	2b0a      	cmp	r3, #10
 800351a:	d107      	bne.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f961 	bl	80037ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800352a:	e6ae      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d10e      	bne.n	8003554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f7ff f86a 	bl	800261e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003552:	e69a      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800355a:	2b0b      	cmp	r3, #11
 800355c:	d104      	bne.n	8003568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003566:	e690      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800356e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f43f ae84 	beq.w	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003588:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003592:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800359c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80035b4:	4611      	mov	r1, r2
 80035b6:	4798      	blx	r3
    while (true)
 80035b8:	e667      	b.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80035ba:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00f      	beq.n	80035e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d906      	bls.n	80035e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f809 	bl	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80035e6:	2300      	movs	r3, #0
  }
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fb79 	bl	8001cf4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f107 020c 	add.w	r2, r7, #12
 800360c:	210a      	movs	r1, #10
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
    rt_time = hardware_.time();
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff faf2 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fc45 	bl	8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2b18      	cmp	r3, #24
 8003646:	dc63      	bgt.n	8003710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d056      	beq.n	8003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	b29b      	uxth	r3, r3
 800366c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3308      	adds	r3, #8
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4608      	mov	r0, r1
 80036a8:	4798      	blx	r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4798      	blx	r3
 80036d8:	4603      	mov	r3, r0
 80036da:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80036dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681c      	ldr	r4, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f944 	bl	8002984 <_ZN3ros9Publisher15getEndpointTypeEv>
 80036fc:	4601      	mov	r1, r0
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	461a      	mov	r2, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	3301      	adds	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	e798      	b.n	8003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b18      	cmp	r3, #24
 8003718:	dc5f      	bgt.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d053      	beq.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	b29b      	uxth	r3, r3
 800373a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4608      	mov	r0, r1
 800376c:	4798      	blx	r3
 800376e:	4603      	mov	r3, r0
 8003770:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	f202 2222 	addw	r2, r2, #546	; 0x222
 800377a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4608      	mov	r0, r1
 8003792:	4798      	blx	r3
 8003794:	4603      	mov	r3, r0
 8003796:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681c      	ldr	r4, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3304      	adds	r3, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4608      	mov	r0, r1
 80037c4:	4798      	blx	r3
 80037c6:	4601      	mov	r1, r0
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	461a      	mov	r2, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	3301      	adds	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e79c      	b.n	8003714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80037e2:	bf00      	nop
 80037e4:	372c      	adds	r7, #44	; 0x2c
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}
	...

080037ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fa7a 	bl	8001cf4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f9fb 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800380a:	4602      	mov	r2, r0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fad8 	bl	8001dd2 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4915      	ldr	r1, [pc, #84]	; (800387c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003828:	fba1 1303 	umull	r1, r3, r1, r3
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003832:	6939      	ldr	r1, [r7, #16]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003838:	fba3 0302 	umull	r0, r3, r3, r2
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	440b      	add	r3, r1
 8003850:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8a6 	bl	80039ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f9cb 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	10624dd3 	.word	0x10624dd3
 8003880:	000f4240 	.word	0x000f4240

08003884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b63      	cmp	r3, #99	; 0x63
 8003894:	dd09      	ble.n	80038aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e079      	b.n	800399e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80038b6:	3207      	adds	r2, #7
 80038b8:	4611      	mov	r1, r2
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22fe      	movs	r2, #254	; 0xfe
 80038cc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80038f6:	4413      	add	r3, r2
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	b21b      	sxth	r3, r3
 8003912:	121b      	asrs	r3, r3, #8
 8003914:	b21b      	sxth	r3, r3
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003922:	2305      	movs	r3, #5
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3306      	adds	r3, #6
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	429a      	cmp	r2, r3
 800392e:	dc0d      	bgt.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	3301      	adds	r3, #1
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e7ec      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3307      	adds	r3, #7
 8003950:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	425a      	negs	r2, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	bf58      	it	pl
 800395c:	4253      	negpl	r3, r2
 800395e:	b2da      	uxtb	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	6179      	str	r1, [r7, #20]
 8003966:	43d2      	mvns	r2, r2
 8003968:	b2d1      	uxtb	r1, r2
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	460a      	mov	r2, r1
 8003970:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397a:	dc0a      	bgt.n	8003992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1d18      	adds	r0, r3, #4
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4619      	mov	r1, r3
 800398a:	f7ff f8f3 	bl	8002b74 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	e005      	b.n	800399e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003992:	4905      	ldr	r1, [pc, #20]	; (80039a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f849 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	0800a2a0 	.word	0x0800a2a0

080039ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f920 	bl	8002c00 <_ZN13STM32Hardware4timeEv>
 80039c0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4915      	ldr	r1, [pc, #84]	; (8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039ca:	fba1 1303 	umull	r1, r3, r1, r3
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039e2:	fba3 0302 	umull	r0, r3, r3, r2
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ec:	fb00 f303 	mul.w	r3, r0, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	1aca      	subs	r2, r1, r3
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80039fc:	4413      	add	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f000 fb7e 	bl	8004114 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	10624dd3 	.word	0x10624dd3
 8003a24:	000f4240 	.word	0x000f4240
 8003a28:	3b9aca00 	.word	0x3b9aca00

08003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	2103      	movs	r1, #3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f804 	bl	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	460b      	mov	r3, r1
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fbf4 	bl	8002248 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f107 0214 	add.w	r2, r7, #20
 8003a72:	2107      	movs	r1, #7
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	4798      	blx	r3
  }
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_Z41__static_initialization_and_destruction_0ii>:
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d116      	bne.n	8003abe <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d111      	bne.n	8003abe <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003a9a:	480b      	ldr	r0, [pc, #44]	; (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003a9c:	f7ff f964 	bl	8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt32 robot_wheels_pos;
 8003aa0:	480a      	ldr	r0, [pc, #40]	; (8003acc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003aa2:	f7ff f8b9 	bl	8002c18 <_ZN8std_msgs6UInt32C1Ev>
ros::Subscriber<std_msgs::UInt32> robot_vel_sub("robot_wheel_vel", &robotCmdVelCallBack);
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003aac:	480a      	ldr	r0, [pc, #40]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003aae:	f7ff fb21 	bl	80030f4 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher robot_pos_pub("robot_wheel_pos", &robot_wheels_pos);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4a05      	ldr	r2, [pc, #20]	; (8003acc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003ab6:	4909      	ldr	r1, [pc, #36]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ab8:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003aba:	f7fe ff39 	bl	8002930 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200004a4 	.word	0x200004a4
 8003acc:	20000de0 	.word	0x20000de0
 8003ad0:	08002e59 	.word	0x08002e59
 8003ad4:	0800a2dc 	.word	0x0800a2dc
 8003ad8:	20000df8 	.word	0x20000df8
 8003adc:	0800a2ec 	.word	0x0800a2ec
 8003ae0:	20000e14 	.word	0x20000e14

08003ae4 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	330c      	adds	r3, #12
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f8d7 	bl	8002ca8 <_ZN8std_msgs6UInt3211deserializeEPh>
    this->cb_(msg);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	320c      	adds	r2, #12
 8003b02:	4610      	mov	r0, r2
 8003b04:	4798      	blx	r3
  }
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
  }
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff f8f1 	bl	8002d18 <_ZN8std_msgs6UInt327getTypeEv>
 8003b36:	4603      	mov	r3, r0
  }
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f8ef 	bl	8002d30 <_ZN8std_msgs6UInt326getMD5Ev>
 8003b52:	4603      	mov	r3, r0
  }
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    return configured_;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <_GLOBAL__sub_I_nh>:
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7ff ff7f 	bl	8003a80 <_Z41__static_initialization_and_destruction_0ii>
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_MspInit+0x5c>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_MspInit+0x5c>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6193      	str	r3, [r2, #24]
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_MspInit+0x5c>)
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <HAL_MspInit+0x5c>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <HAL_MspInit+0x5c>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	61d3      	str	r3, [r2, #28]
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <HAL_MspInit+0x5c>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_MspInit+0x60>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_MspInit+0x60>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40010000 	.word	0x40010000

08003be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <HAL_TIM_Base_MspInit+0x68>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d114      	bne.n	8003c24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_TIM_Base_MspInit+0x6c>)
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <HAL_TIM_Base_MspInit+0x6c>)
 8003c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c04:	6193      	str	r3, [r2, #24]
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_TIM_Base_MspInit+0x6c>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	2019      	movs	r0, #25
 8003c18:	f000 fc07 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003c1c:	2019      	movs	r0, #25
 8003c1e:	f000 fc20 	bl	8004462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c22:	e010      	b.n	8003c46 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <HAL_TIM_Base_MspInit+0x70>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10b      	bne.n	8003c46 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_TIM_Base_MspInit+0x6c>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_TIM_Base_MspInit+0x6c>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	61d3      	str	r3, [r2, #28]
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_TIM_Base_MspInit+0x6c>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40000800 	.word	0x40000800

08003c5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 0318 	add.w	r3, r7, #24
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d124      	bne.n	8003cc6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c7c:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	61d3      	str	r3, [r2, #28]
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c94:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6193      	str	r3, [r2, #24]
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cac:	2303      	movs	r3, #3
 8003cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb8:	f107 0318 	add.w	r3, r7, #24
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4819      	ldr	r0, [pc, #100]	; (8003d24 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003cc0:	f000 fe8c 	bl	80049dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003cc4:	e028      	b.n	8003d18 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d123      	bne.n	8003d18 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	61d3      	str	r3, [r2, #28]
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6193      	str	r3, [r2, #24]
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d00:	23c0      	movs	r3, #192	; 0xc0
 8003d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0c:	f107 0318 	add.w	r3, r7, #24
 8003d10:	4619      	mov	r1, r3
 8003d12:	4804      	ldr	r0, [pc, #16]	; (8003d24 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d14:	f000 fe62 	bl	80049dc <HAL_GPIO_Init>
}
 8003d18:	bf00      	nop
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40010800 	.word	0x40010800
 8003d28:	40000400 	.word	0x40000400

08003d2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0f      	ldr	r2, [pc, #60]	; (8003d84 <HAL_TIM_MspPostInit+0x58>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d117      	bne.n	8003d7c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_TIM_MspPostInit+0x5c>)
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <HAL_TIM_MspPostInit+0x5c>)
 8003d52:	f043 0308 	orr.w	r3, r3, #8
 8003d56:	6193      	str	r3, [r2, #24]
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_TIM_MspPostInit+0x5c>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d64:	23c0      	movs	r3, #192	; 0xc0
 8003d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	4619      	mov	r1, r3
 8003d76:	4805      	ldr	r0, [pc, #20]	; (8003d8c <HAL_TIM_MspPostInit+0x60>)
 8003d78:	f000 fe30 	bl	80049dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d7c:	bf00      	nop
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40010c00 	.word	0x40010c00

08003d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d98:	f107 0310 	add.w	r3, r7, #16
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a48      	ldr	r2, [pc, #288]	; (8003ecc <HAL_UART_MspInit+0x13c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	f040 8088 	bne.w	8003ec2 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_UART_MspInit+0x140>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	4a46      	ldr	r2, [pc, #280]	; (8003ed0 <HAL_UART_MspInit+0x140>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dbc:	6193      	str	r3, [r2, #24]
 8003dbe:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <HAL_UART_MspInit+0x140>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_UART_MspInit+0x140>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <HAL_UART_MspInit+0x140>)
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6193      	str	r3, [r2, #24]
 8003dd6:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_UART_MspInit+0x140>)
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dec:	2303      	movs	r3, #3
 8003dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	4619      	mov	r1, r3
 8003df6:	4837      	ldr	r0, [pc, #220]	; (8003ed4 <HAL_UART_MspInit+0x144>)
 8003df8:	f000 fdf0 	bl	80049dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4830      	ldr	r0, [pc, #192]	; (8003ed4 <HAL_UART_MspInit+0x144>)
 8003e12:	f000 fde3 	bl	80049dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003e16:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <HAL_UART_MspInit+0x14c>)
 8003e1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e28:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e34:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e48:	4823      	ldr	r0, [pc, #140]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e4a:	f000 fb25 	bl	8004498 <HAL_DMA_Init>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003e54:	f7fd ff28 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_UART_MspInit+0x148>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003e64:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e66:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_UART_MspInit+0x154>)
 8003e68:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e96:	4812      	ldr	r0, [pc, #72]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003e98:	f000 fafe 	bl	8004498 <HAL_DMA_Init>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003ea2:	f7fd ff01 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_UART_MspInit+0x150>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2025      	movs	r0, #37	; 0x25
 8003eb8:	f000 fab7 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ebc:	2025      	movs	r0, #37	; 0x25
 8003ebe:	f000 fad0 	bl	8004462 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003ec2:	bf00      	nop
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	20000418 	.word	0x20000418
 8003edc:	40020058 	.word	0x40020058
 8003ee0:	2000045c 	.word	0x2000045c
 8003ee4:	40020044 	.word	0x40020044

08003ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003eec:	e7fe      	b.n	8003eec <NMI_Handler+0x4>

08003eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef2:	e7fe      	b.n	8003ef2 <HardFault_Handler+0x4>

08003ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <MemManage_Handler+0x4>

08003efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003efe:	e7fe      	b.n	8003efe <BusFault_Handler+0x4>

08003f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f04:	e7fe      	b.n	8003f04 <UsageFault_Handler+0x4>

08003f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2e:	f000 f989 	bl	8004244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <DMA1_Channel4_IRQHandler+0x10>)
 8003f3e:	f000 fc19 	bl	8004774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000045c 	.word	0x2000045c

08003f4c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <DMA1_Channel5_IRQHandler+0x10>)
 8003f52:	f000 fc0f 	bl	8004774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000418 	.word	0x20000418

08003f60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <TIM1_UP_IRQHandler+0x10>)
 8003f66:	f001 fdcb 	bl	8005b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200002b0 	.word	0x200002b0

08003f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <USART1_IRQHandler+0x10>)
 8003f7a:	f002 fc71 	bl	8006860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200003d0 	.word	0x200003d0

08003f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return 1;
 8003f8c:	2301      	movs	r3, #1
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <_kill>:

int _kill(int pid, int sig)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fa0:	f003 fb76 	bl	8007690 <__errno>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2216      	movs	r2, #22
 8003fa8:	601a      	str	r2, [r3, #0]
  return -1;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <_exit>:

void _exit (int status)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ffe7 	bl	8003f96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fc8:	e7fe      	b.n	8003fc8 <_exit+0x12>

08003fca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b086      	sub	sp, #24
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e00a      	b.n	8003ff2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fdc:	f3af 8000 	nop.w
 8003fe0:	4601      	mov	r1, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	60ba      	str	r2, [r7, #8]
 8003fe8:	b2ca      	uxtb	r2, r1
 8003fea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	dbf0      	blt.n	8003fdc <_read+0x12>
  }

  return len;
 8003ffa:	687b      	ldr	r3, [r7, #4]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e009      	b.n	800402a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	60ba      	str	r2, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3301      	adds	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	dbf1      	blt.n	8004016 <_write+0x12>
  }
  return len;
 8004032:	687b      	ldr	r3, [r7, #4]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <_close>:

int _close(int file)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004062:	605a      	str	r2, [r3, #4]
  return 0;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <_isatty>:

int _isatty(int file)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <_sbrk+0x5c>)
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <_sbrk+0x60>)
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <_sbrk+0x64>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <_sbrk+0x64>)
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <_sbrk+0x68>)
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_sbrk+0x64>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d207      	bcs.n	80040dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040cc:	f003 fae0 	bl	8007690 <__errno>
 80040d0:	4603      	mov	r3, r0
 80040d2:	220c      	movs	r2, #12
 80040d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	e009      	b.n	80040f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <_sbrk+0x64>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <_sbrk+0x64>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <_sbrk+0x64>)
 80040ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20005000 	.word	0x20005000
 80040fc:	00000400 	.word	0x00000400
 8004100:	20000e28 	.word	0x20000e28
 8004104:	20000e40 	.word	0x20000e40

08004108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0a5a      	lsrs	r2, r3, #9
 8004124:	490f      	ldr	r1, [pc, #60]	; (8004164 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004126:	fba1 1202 	umull	r1, r2, r1, r2
 800412a:	09d2      	lsrs	r2, r2, #7
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800412e:	fb01 f202 	mul.w	r2, r1, r2
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	09db      	lsrs	r3, r3, #7
 8004144:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	00044b83 	.word	0x00044b83
 8004168:	3b9aca00 	.word	0x3b9aca00

0800416c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800416c:	f7ff ffcc 	bl	8004108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004170:	480b      	ldr	r0, [pc, #44]	; (80041a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004172:	490c      	ldr	r1, [pc, #48]	; (80041a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004174:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004178:	e002      	b.n	8004180 <LoopCopyDataInit>

0800417a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800417c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417e:	3304      	adds	r3, #4

08004180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004184:	d3f9      	bcc.n	800417a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004188:	4c09      	ldr	r4, [pc, #36]	; (80041b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800418a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800418c:	e001      	b.n	8004192 <LoopFillZerobss>

0800418e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004190:	3204      	adds	r2, #4

08004192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004194:	d3fb      	bcc.n	800418e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004196:	f003 fa81 	bl	800769c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800419a:	f7fd fa6d 	bl	8001678 <main>
  bx lr
 800419e:	4770      	bx	lr
  ldr r0, =_sdata
 80041a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a4:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80041a8:	0800a810 	.word	0x0800a810
  ldr r2, =_sbss
 80041ac:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 80041b0:	20000e40 	.word	0x20000e40

080041b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041b4:	e7fe      	b.n	80041b4 <ADC1_2_IRQHandler>
	...

080041b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <HAL_Init+0x28>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a07      	ldr	r2, [pc, #28]	; (80041e0 <HAL_Init+0x28>)
 80041c2:	f043 0310 	orr.w	r3, r3, #16
 80041c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c8:	2003      	movs	r0, #3
 80041ca:	f000 f923 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ce:	200f      	movs	r0, #15
 80041d0:	f000 f808 	bl	80041e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041d4:	f7ff fcd6 	bl	8003b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40022000 	.word	0x40022000

080041e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_InitTick+0x54>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_InitTick+0x58>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f93b 	bl	800447e <HAL_SYSTICK_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e00e      	b.n	8004230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d80a      	bhi.n	800422e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004218:	2200      	movs	r2, #0
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	f000 f903 	bl	800442a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004224:	4a06      	ldr	r2, [pc, #24]	; (8004240 <HAL_InitTick+0x5c>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	200000b4 	.word	0x200000b4
 800423c:	200000bc 	.word	0x200000bc
 8004240:	200000b8 	.word	0x200000b8

08004244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_IncTick+0x1c>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_IncTick+0x20>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4413      	add	r3, r2
 8004254:	4a03      	ldr	r2, [pc, #12]	; (8004264 <HAL_IncTick+0x20>)
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	200000bc 	.word	0x200000bc
 8004264:	20000e2c 	.word	0x20000e2c

08004268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return uwTick;
 800426c:	4b02      	ldr	r3, [pc, #8]	; (8004278 <HAL_GetTick+0x10>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	20000e2c 	.word	0x20000e2c

0800427c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <__NVIC_SetPriorityGrouping+0x44>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004298:	4013      	ands	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ae:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <__NVIC_SetPriorityGrouping+0x44>)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	60d3      	str	r3, [r2, #12]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <__NVIC_GetPriorityGrouping+0x18>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f003 0307 	and.w	r3, r3, #7
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db0b      	blt.n	800430a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	4906      	ldr	r1, [pc, #24]	; (8004314 <__NVIC_EnableIRQ+0x34>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2001      	movs	r0, #1
 8004302:	fa00 f202 	lsl.w	r2, r0, r2
 8004306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100

08004318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	; (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf28      	it	cs
 800438a:	2304      	movcs	r3, #4
 800438c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3304      	adds	r3, #4
 8004392:	2b06      	cmp	r3, #6
 8004394:	d902      	bls.n	800439c <NVIC_EncodePriority+0x30>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3b03      	subs	r3, #3
 800439a:	e000      	b.n	800439e <NVIC_EncodePriority+0x32>
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	401a      	ands	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	43d9      	mvns	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	4313      	orrs	r3, r2
         );
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e0:	d301      	bcc.n	80043e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e2:	2301      	movs	r3, #1
 80043e4:	e00f      	b.n	8004406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <SysTick_Config+0x40>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ee:	210f      	movs	r1, #15
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	f7ff ff90 	bl	8004318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SysTick_Config+0x40>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <SysTick_Config+0x40>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010

08004414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff2d 	bl	800427c <__NVIC_SetPriorityGrouping>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800443c:	f7ff ff42 	bl	80042c4 <__NVIC_GetPriorityGrouping>
 8004440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7ff ff90 	bl	800436c <NVIC_EncodePriority>
 800444c:	4602      	mov	r2, r0
 800444e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff5f 	bl	8004318 <__NVIC_SetPriority>
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff35 	bl	80042e0 <__NVIC_EnableIRQ>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ffa2 	bl	80043d0 <SysTick_Config>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e043      	b.n	8004536 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	4b22      	ldr	r3, [pc, #136]	; (8004540 <HAL_DMA_Init+0xa8>)
 80044b6:	4413      	add	r3, r2
 80044b8:	4a22      	ldr	r2, [pc, #136]	; (8004544 <HAL_DMA_Init+0xac>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	009a      	lsls	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <HAL_DMA_Init+0xb0>)
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80044e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80044e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	bffdfff8 	.word	0xbffdfff8
 8004544:	cccccccd 	.word	0xcccccccd
 8004548:	40020000 	.word	0x40020000

0800454c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_DMA_Start_IT+0x20>
 8004568:	2302      	movs	r3, #2
 800456a:	e04b      	b.n	8004604 <HAL_DMA_Start_IT+0xb8>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d13a      	bne.n	80045f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f9eb 	bl	8004980 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 020e 	orr.w	r2, r2, #14
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e00f      	b.n	80045e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 020a 	orr.w	r2, r2, #10
 80045e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e005      	b.n	8004602 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
 8004600:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d008      	beq.n	8004636 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2204      	movs	r2, #4
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e020      	b.n	8004678 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 020e 	bic.w	r2, r2, #14
 8004644:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
	...

08004684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d005      	beq.n	80046a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2204      	movs	r2, #4
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e051      	b.n	800474c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 020e 	bic.w	r2, r2, #14
 80046b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_DMA_Abort_IT+0xd4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d029      	beq.n	8004726 <HAL_DMA_Abort_IT+0xa2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <HAL_DMA_Abort_IT+0xd8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d022      	beq.n	8004722 <HAL_DMA_Abort_IT+0x9e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_DMA_Abort_IT+0xdc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01a      	beq.n	800471c <HAL_DMA_Abort_IT+0x98>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_DMA_Abort_IT+0xe0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d012      	beq.n	8004716 <HAL_DMA_Abort_IT+0x92>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_DMA_Abort_IT+0xe4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00a      	beq.n	8004710 <HAL_DMA_Abort_IT+0x8c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_DMA_Abort_IT+0xe8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d102      	bne.n	800470a <HAL_DMA_Abort_IT+0x86>
 8004704:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004708:	e00e      	b.n	8004728 <HAL_DMA_Abort_IT+0xa4>
 800470a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800470e:	e00b      	b.n	8004728 <HAL_DMA_Abort_IT+0xa4>
 8004710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004714:	e008      	b.n	8004728 <HAL_DMA_Abort_IT+0xa4>
 8004716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800471a:	e005      	b.n	8004728 <HAL_DMA_Abort_IT+0xa4>
 800471c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004720:	e002      	b.n	8004728 <HAL_DMA_Abort_IT+0xa4>
 8004722:	2310      	movs	r3, #16
 8004724:	e000      	b.n	8004728 <HAL_DMA_Abort_IT+0xa4>
 8004726:	2301      	movs	r3, #1
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_DMA_Abort_IT+0xec>)
 800472a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
    } 
  }
  return status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40020008 	.word	0x40020008
 800475c:	4002001c 	.word	0x4002001c
 8004760:	40020030 	.word	0x40020030
 8004764:	40020044 	.word	0x40020044
 8004768:	40020058 	.word	0x40020058
 800476c:	4002006c 	.word	0x4002006c
 8004770:	40020000 	.word	0x40020000

08004774 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d04f      	beq.n	800483c <HAL_DMA_IRQHandler+0xc8>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a66      	ldr	r2, [pc, #408]	; (8004964 <HAL_DMA_IRQHandler+0x1f0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d029      	beq.n	8004822 <HAL_DMA_IRQHandler+0xae>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a65      	ldr	r2, [pc, #404]	; (8004968 <HAL_DMA_IRQHandler+0x1f4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d022      	beq.n	800481e <HAL_DMA_IRQHandler+0xaa>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a63      	ldr	r2, [pc, #396]	; (800496c <HAL_DMA_IRQHandler+0x1f8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01a      	beq.n	8004818 <HAL_DMA_IRQHandler+0xa4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a62      	ldr	r2, [pc, #392]	; (8004970 <HAL_DMA_IRQHandler+0x1fc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d012      	beq.n	8004812 <HAL_DMA_IRQHandler+0x9e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a60      	ldr	r2, [pc, #384]	; (8004974 <HAL_DMA_IRQHandler+0x200>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00a      	beq.n	800480c <HAL_DMA_IRQHandler+0x98>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a5f      	ldr	r2, [pc, #380]	; (8004978 <HAL_DMA_IRQHandler+0x204>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d102      	bne.n	8004806 <HAL_DMA_IRQHandler+0x92>
 8004800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004804:	e00e      	b.n	8004824 <HAL_DMA_IRQHandler+0xb0>
 8004806:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800480a:	e00b      	b.n	8004824 <HAL_DMA_IRQHandler+0xb0>
 800480c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004810:	e008      	b.n	8004824 <HAL_DMA_IRQHandler+0xb0>
 8004812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004816:	e005      	b.n	8004824 <HAL_DMA_IRQHandler+0xb0>
 8004818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481c:	e002      	b.n	8004824 <HAL_DMA_IRQHandler+0xb0>
 800481e:	2340      	movs	r3, #64	; 0x40
 8004820:	e000      	b.n	8004824 <HAL_DMA_IRQHandler+0xb0>
 8004822:	2304      	movs	r3, #4
 8004824:	4a55      	ldr	r2, [pc, #340]	; (800497c <HAL_DMA_IRQHandler+0x208>)
 8004826:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8094 	beq.w	800495a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800483a:	e08e      	b.n	800495a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2202      	movs	r2, #2
 8004842:	409a      	lsls	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d056      	beq.n	80048fa <HAL_DMA_IRQHandler+0x186>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d051      	beq.n	80048fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 020a 	bic.w	r2, r2, #10
 8004872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a38      	ldr	r2, [pc, #224]	; (8004964 <HAL_DMA_IRQHandler+0x1f0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d029      	beq.n	80048da <HAL_DMA_IRQHandler+0x166>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a37      	ldr	r2, [pc, #220]	; (8004968 <HAL_DMA_IRQHandler+0x1f4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x162>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a35      	ldr	r2, [pc, #212]	; (800496c <HAL_DMA_IRQHandler+0x1f8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01a      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x15c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a34      	ldr	r2, [pc, #208]	; (8004970 <HAL_DMA_IRQHandler+0x1fc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d012      	beq.n	80048ca <HAL_DMA_IRQHandler+0x156>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a32      	ldr	r2, [pc, #200]	; (8004974 <HAL_DMA_IRQHandler+0x200>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00a      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x150>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a31      	ldr	r2, [pc, #196]	; (8004978 <HAL_DMA_IRQHandler+0x204>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d102      	bne.n	80048be <HAL_DMA_IRQHandler+0x14a>
 80048b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048bc:	e00e      	b.n	80048dc <HAL_DMA_IRQHandler+0x168>
 80048be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c2:	e00b      	b.n	80048dc <HAL_DMA_IRQHandler+0x168>
 80048c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c8:	e008      	b.n	80048dc <HAL_DMA_IRQHandler+0x168>
 80048ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ce:	e005      	b.n	80048dc <HAL_DMA_IRQHandler+0x168>
 80048d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d4:	e002      	b.n	80048dc <HAL_DMA_IRQHandler+0x168>
 80048d6:	2320      	movs	r3, #32
 80048d8:	e000      	b.n	80048dc <HAL_DMA_IRQHandler+0x168>
 80048da:	2302      	movs	r3, #2
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <HAL_DMA_IRQHandler+0x208>)
 80048de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d034      	beq.n	800495a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048f8:	e02f      	b.n	800495a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2208      	movs	r2, #8
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_DMA_IRQHandler+0x1e8>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d023      	beq.n	800495c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 020e 	bic.w	r2, r2, #14
 8004922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f202 	lsl.w	r2, r1, r2
 8004932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
    }
  }
  return;
 800495a:	bf00      	nop
 800495c:	bf00      	nop
}
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40020008 	.word	0x40020008
 8004968:	4002001c 	.word	0x4002001c
 800496c:	40020030 	.word	0x40020030
 8004970:	40020044 	.word	0x40020044
 8004974:	40020058 	.word	0x40020058
 8004978:	4002006c 	.word	0x4002006c
 800497c:	40020000 	.word	0x40020000

08004980 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f202 	lsl.w	r2, r1, r2
 800499c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d108      	bne.n	80049c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049be:	e007      	b.n	80049d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049dc:	b480      	push	{r7}
 80049de:	b08b      	sub	sp, #44	; 0x2c
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049e6:	2300      	movs	r3, #0
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049ea:	2300      	movs	r3, #0
 80049ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ee:	e169      	b.n	8004cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049f0:	2201      	movs	r2, #1
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	f040 8158 	bne.w	8004cbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4a9a      	ldr	r2, [pc, #616]	; (8004c7c <HAL_GPIO_Init+0x2a0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d05e      	beq.n	8004ad6 <HAL_GPIO_Init+0xfa>
 8004a18:	4a98      	ldr	r2, [pc, #608]	; (8004c7c <HAL_GPIO_Init+0x2a0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d875      	bhi.n	8004b0a <HAL_GPIO_Init+0x12e>
 8004a1e:	4a98      	ldr	r2, [pc, #608]	; (8004c80 <HAL_GPIO_Init+0x2a4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d058      	beq.n	8004ad6 <HAL_GPIO_Init+0xfa>
 8004a24:	4a96      	ldr	r2, [pc, #600]	; (8004c80 <HAL_GPIO_Init+0x2a4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d86f      	bhi.n	8004b0a <HAL_GPIO_Init+0x12e>
 8004a2a:	4a96      	ldr	r2, [pc, #600]	; (8004c84 <HAL_GPIO_Init+0x2a8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d052      	beq.n	8004ad6 <HAL_GPIO_Init+0xfa>
 8004a30:	4a94      	ldr	r2, [pc, #592]	; (8004c84 <HAL_GPIO_Init+0x2a8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d869      	bhi.n	8004b0a <HAL_GPIO_Init+0x12e>
 8004a36:	4a94      	ldr	r2, [pc, #592]	; (8004c88 <HAL_GPIO_Init+0x2ac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d04c      	beq.n	8004ad6 <HAL_GPIO_Init+0xfa>
 8004a3c:	4a92      	ldr	r2, [pc, #584]	; (8004c88 <HAL_GPIO_Init+0x2ac>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d863      	bhi.n	8004b0a <HAL_GPIO_Init+0x12e>
 8004a42:	4a92      	ldr	r2, [pc, #584]	; (8004c8c <HAL_GPIO_Init+0x2b0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d046      	beq.n	8004ad6 <HAL_GPIO_Init+0xfa>
 8004a48:	4a90      	ldr	r2, [pc, #576]	; (8004c8c <HAL_GPIO_Init+0x2b0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d85d      	bhi.n	8004b0a <HAL_GPIO_Init+0x12e>
 8004a4e:	2b12      	cmp	r3, #18
 8004a50:	d82a      	bhi.n	8004aa8 <HAL_GPIO_Init+0xcc>
 8004a52:	2b12      	cmp	r3, #18
 8004a54:	d859      	bhi.n	8004b0a <HAL_GPIO_Init+0x12e>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_GPIO_Init+0x80>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004ad7 	.word	0x08004ad7
 8004a60:	08004ab1 	.word	0x08004ab1
 8004a64:	08004ac3 	.word	0x08004ac3
 8004a68:	08004b05 	.word	0x08004b05
 8004a6c:	08004b0b 	.word	0x08004b0b
 8004a70:	08004b0b 	.word	0x08004b0b
 8004a74:	08004b0b 	.word	0x08004b0b
 8004a78:	08004b0b 	.word	0x08004b0b
 8004a7c:	08004b0b 	.word	0x08004b0b
 8004a80:	08004b0b 	.word	0x08004b0b
 8004a84:	08004b0b 	.word	0x08004b0b
 8004a88:	08004b0b 	.word	0x08004b0b
 8004a8c:	08004b0b 	.word	0x08004b0b
 8004a90:	08004b0b 	.word	0x08004b0b
 8004a94:	08004b0b 	.word	0x08004b0b
 8004a98:	08004b0b 	.word	0x08004b0b
 8004a9c:	08004b0b 	.word	0x08004b0b
 8004aa0:	08004ab9 	.word	0x08004ab9
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	4a79      	ldr	r2, [pc, #484]	; (8004c90 <HAL_GPIO_Init+0x2b4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004aae:	e02c      	b.n	8004b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	623b      	str	r3, [r7, #32]
          break;
 8004ab6:	e029      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	623b      	str	r3, [r7, #32]
          break;
 8004ac0:	e024      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	623b      	str	r3, [r7, #32]
          break;
 8004aca:	e01f      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	623b      	str	r3, [r7, #32]
          break;
 8004ad4:	e01a      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ade:	2304      	movs	r3, #4
 8004ae0:	623b      	str	r3, [r7, #32]
          break;
 8004ae2:	e013      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d105      	bne.n	8004af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004aec:	2308      	movs	r3, #8
 8004aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	611a      	str	r2, [r3, #16]
          break;
 8004af6:	e009      	b.n	8004b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004af8:	2308      	movs	r3, #8
 8004afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	615a      	str	r2, [r3, #20]
          break;
 8004b02:	e003      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b04:	2300      	movs	r3, #0
 8004b06:	623b      	str	r3, [r7, #32]
          break;
 8004b08:	e000      	b.n	8004b0c <HAL_GPIO_Init+0x130>
          break;
 8004b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2bff      	cmp	r3, #255	; 0xff
 8004b10:	d801      	bhi.n	8004b16 <HAL_GPIO_Init+0x13a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	e001      	b.n	8004b1a <HAL_GPIO_Init+0x13e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2bff      	cmp	r3, #255	; 0xff
 8004b20:	d802      	bhi.n	8004b28 <HAL_GPIO_Init+0x14c>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	e002      	b.n	8004b2e <HAL_GPIO_Init+0x152>
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	3b08      	subs	r3, #8
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	210f      	movs	r1, #15
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	6a39      	ldr	r1, [r7, #32]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	fa01 f303 	lsl.w	r3, r1, r3
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80b1 	beq.w	8004cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b5c:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_GPIO_Init+0x2b8>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	4a4c      	ldr	r2, [pc, #304]	; (8004c94 <HAL_GPIO_Init+0x2b8>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6193      	str	r3, [r2, #24]
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_GPIO_Init+0x2b8>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b74:	4a48      	ldr	r2, [pc, #288]	; (8004c98 <HAL_GPIO_Init+0x2bc>)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a40      	ldr	r2, [pc, #256]	; (8004c9c <HAL_GPIO_Init+0x2c0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d013      	beq.n	8004bc8 <HAL_GPIO_Init+0x1ec>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3f      	ldr	r2, [pc, #252]	; (8004ca0 <HAL_GPIO_Init+0x2c4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_GPIO_Init+0x1e8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3e      	ldr	r2, [pc, #248]	; (8004ca4 <HAL_GPIO_Init+0x2c8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <HAL_GPIO_Init+0x1e4>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a3d      	ldr	r2, [pc, #244]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <HAL_GPIO_Init+0x1e0>
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e006      	b.n	8004bca <HAL_GPIO_Init+0x1ee>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	e004      	b.n	8004bca <HAL_GPIO_Init+0x1ee>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e002      	b.n	8004bca <HAL_GPIO_Init+0x1ee>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_GPIO_Init+0x1ee>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	f002 0203 	and.w	r2, r2, #3
 8004bd0:	0092      	lsls	r2, r2, #2
 8004bd2:	4093      	lsls	r3, r2
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bda:	492f      	ldr	r1, [pc, #188]	; (8004c98 <HAL_GPIO_Init+0x2bc>)
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	3302      	adds	r3, #2
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	492c      	ldr	r1, [pc, #176]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]
 8004c00:	e006      	b.n	8004c10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	4928      	ldr	r1, [pc, #160]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c1c:	4b23      	ldr	r3, [pc, #140]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	4922      	ldr	r1, [pc, #136]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60cb      	str	r3, [r1, #12]
 8004c28:	e006      	b.n	8004c38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	491e      	ldr	r1, [pc, #120]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c44:	4b19      	ldr	r3, [pc, #100]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4918      	ldr	r1, [pc, #96]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]
 8004c50:	e006      	b.n	8004c60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	4914      	ldr	r1, [pc, #80]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d021      	beq.n	8004cb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	490e      	ldr	r1, [pc, #56]	; (8004cac <HAL_GPIO_Init+0x2d0>)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e021      	b.n	8004cbe <HAL_GPIO_Init+0x2e2>
 8004c7a:	bf00      	nop
 8004c7c:	10320000 	.word	0x10320000
 8004c80:	10310000 	.word	0x10310000
 8004c84:	10220000 	.word	0x10220000
 8004c88:	10210000 	.word	0x10210000
 8004c8c:	10120000 	.word	0x10120000
 8004c90:	10110000 	.word	0x10110000
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40010800 	.word	0x40010800
 8004ca0:	40010c00 	.word	0x40010c00
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40011400 	.word	0x40011400
 8004cac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_GPIO_Init+0x304>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	4909      	ldr	r1, [pc, #36]	; (8004ce0 <HAL_GPIO_Init+0x304>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f47f ae8e 	bne.w	80049f0 <HAL_GPIO_Init+0x14>
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	372c      	adds	r7, #44	; 0x2c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	807b      	strh	r3, [r7, #2]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cf4:	787b      	ldrb	r3, [r7, #1]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d00:	e003      	b.n	8004d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	041a      	lsls	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	611a      	str	r2, [r3, #16]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d26:	887a      	ldrh	r2, [r7, #2]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	041a      	lsls	r2, r3, #16
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	43d9      	mvns	r1, r3
 8004d32:	887b      	ldrh	r3, [r7, #2]
 8004d34:	400b      	ands	r3, r1
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	611a      	str	r2, [r3, #16]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e272      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8087 	beq.w	8004e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d68:	4b92      	ldr	r3, [pc, #584]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d00c      	beq.n	8004d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d74:	4b8f      	ldr	r3, [pc, #572]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d112      	bne.n	8004da6 <HAL_RCC_OscConfig+0x5e>
 8004d80:	4b8c      	ldr	r3, [pc, #560]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d10b      	bne.n	8004da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8e:	4b89      	ldr	r3, [pc, #548]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d06c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x12c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d168      	bne.n	8004e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e24c      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dae:	d106      	bne.n	8004dbe <HAL_RCC_OscConfig+0x76>
 8004db0:	4b80      	ldr	r3, [pc, #512]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7f      	ldr	r2, [pc, #508]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	e02e      	b.n	8004e1c <HAL_RCC_OscConfig+0xd4>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x98>
 8004dc6:	4b7b      	ldr	r3, [pc, #492]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a7a      	ldr	r2, [pc, #488]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	4b78      	ldr	r3, [pc, #480]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a77      	ldr	r2, [pc, #476]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e01d      	b.n	8004e1c <HAL_RCC_OscConfig+0xd4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0xbc>
 8004dea:	4b72      	ldr	r3, [pc, #456]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a71      	ldr	r2, [pc, #452]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b6f      	ldr	r3, [pc, #444]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6e      	ldr	r2, [pc, #440]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_OscConfig+0xd4>
 8004e04:	4b6b      	ldr	r3, [pc, #428]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6a      	ldr	r2, [pc, #424]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4b68      	ldr	r3, [pc, #416]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a67      	ldr	r2, [pc, #412]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d013      	beq.n	8004e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7ff fa20 	bl	8004268 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e2c:	f7ff fa1c 	bl	8004268 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	; 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e200      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b5d      	ldr	r3, [pc, #372]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0xe4>
 8004e4a:	e014      	b.n	8004e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7ff fa0c 	bl	8004268 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7ff fa08 	bl	8004268 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	; 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e1ec      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e66:	4b53      	ldr	r3, [pc, #332]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x10c>
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d063      	beq.n	8004f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e82:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e8e:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d11c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x18c>
 8004e9a:	4b46      	ldr	r3, [pc, #280]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d116      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_RCC_OscConfig+0x176>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e1c0      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4939      	ldr	r1, [pc, #228]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	e03a      	b.n	8004f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d020      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004edc:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <HAL_RCC_OscConfig+0x270>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7ff f9c1 	bl	8004268 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eea:	f7ff f9bd 	bl	8004268 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e1a1      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efc:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4927      	ldr	r1, [pc, #156]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]
 8004f1c:	e015      	b.n	8004f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1e:	4b26      	ldr	r3, [pc, #152]	; (8004fb8 <HAL_RCC_OscConfig+0x270>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7ff f9a0 	bl	8004268 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2c:	f7ff f99c 	bl	8004268 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e180      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d03a      	beq.n	8004fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f64:	f7ff f980 	bl	8004268 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7ff f97c 	bl	8004268 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e160      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_RCC_OscConfig+0x26c>)
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f000 face 	bl	800552c <RCC_Delay>
 8004f90:	e01c      	b.n	8004fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <HAL_RCC_OscConfig+0x274>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f98:	f7ff f966 	bl	8004268 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9e:	e00f      	b.n	8004fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7ff f962 	bl	8004268 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d908      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e146      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	42420000 	.word	0x42420000
 8004fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc0:	4b92      	ldr	r3, [pc, #584]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e9      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a6 	beq.w	8005126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fde:	4b8b      	ldr	r3, [pc, #556]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4a87      	ldr	r2, [pc, #540]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	61d3      	str	r3, [r2, #28]
 8004ff6:	4b85      	ldr	r3, [pc, #532]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005006:	4b82      	ldr	r3, [pc, #520]	; (8005210 <HAL_RCC_OscConfig+0x4c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d118      	bne.n	8005044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005012:	4b7f      	ldr	r3, [pc, #508]	; (8005210 <HAL_RCC_OscConfig+0x4c8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7e      	ldr	r2, [pc, #504]	; (8005210 <HAL_RCC_OscConfig+0x4c8>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501e:	f7ff f923 	bl	8004268 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005026:	f7ff f91f 	bl	8004268 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b64      	cmp	r3, #100	; 0x64
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e103      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005038:	4b75      	ldr	r3, [pc, #468]	; (8005210 <HAL_RCC_OscConfig+0x4c8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d106      	bne.n	800505a <HAL_RCC_OscConfig+0x312>
 800504c:	4b6f      	ldr	r3, [pc, #444]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	4a6e      	ldr	r2, [pc, #440]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	6213      	str	r3, [r2, #32]
 8005058:	e02d      	b.n	80050b6 <HAL_RCC_OscConfig+0x36e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <HAL_RCC_OscConfig+0x334>
 8005062:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4a69      	ldr	r2, [pc, #420]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	6213      	str	r3, [r2, #32]
 800506e:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	4a66      	ldr	r2, [pc, #408]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005074:	f023 0304 	bic.w	r3, r3, #4
 8005078:	6213      	str	r3, [r2, #32]
 800507a:	e01c      	b.n	80050b6 <HAL_RCC_OscConfig+0x36e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b05      	cmp	r3, #5
 8005082:	d10c      	bne.n	800509e <HAL_RCC_OscConfig+0x356>
 8005084:	4b61      	ldr	r3, [pc, #388]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4a60      	ldr	r2, [pc, #384]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	6213      	str	r3, [r2, #32]
 8005090:	4b5e      	ldr	r3, [pc, #376]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	4a5d      	ldr	r2, [pc, #372]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	6213      	str	r3, [r2, #32]
 800509c:	e00b      	b.n	80050b6 <HAL_RCC_OscConfig+0x36e>
 800509e:	4b5b      	ldr	r3, [pc, #364]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4a5a      	ldr	r2, [pc, #360]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	6213      	str	r3, [r2, #32]
 80050aa:	4b58      	ldr	r3, [pc, #352]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4a57      	ldr	r2, [pc, #348]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d015      	beq.n	80050ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050be:	f7ff f8d3 	bl	8004268 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7ff f8cf 	bl	8004268 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e0b1      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ee      	beq.n	80050c6 <HAL_RCC_OscConfig+0x37e>
 80050e8:	e014      	b.n	8005114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ea:	f7ff f8bd 	bl	8004268 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f0:	e00a      	b.n	8005108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7ff f8b9 	bl	8004268 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e09b      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005108:	4b40      	ldr	r3, [pc, #256]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ee      	bne.n	80050f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511a:	4b3c      	ldr	r3, [pc, #240]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4a3b      	ldr	r2, [pc, #236]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8087 	beq.w	800523e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005130:	4b36      	ldr	r3, [pc, #216]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b08      	cmp	r3, #8
 800513a:	d061      	beq.n	8005200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d146      	bne.n	80051d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005144:	4b33      	ldr	r3, [pc, #204]	; (8005214 <HAL_RCC_OscConfig+0x4cc>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7ff f88d 	bl	8004268 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7ff f889 	bl	8004268 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e06d      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d108      	bne.n	800518c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4921      	ldr	r1, [pc, #132]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800518c:	4b1f      	ldr	r3, [pc, #124]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a19      	ldr	r1, [r3, #32]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	430b      	orrs	r3, r1
 800519e:	491b      	ldr	r1, [pc, #108]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_RCC_OscConfig+0x4cc>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051aa:	f7ff f85d 	bl	8004268 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b2:	f7ff f859 	bl	8004268 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e03d      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x46a>
 80051d0:	e035      	b.n	800523e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_OscConfig+0x4cc>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7ff f846 	bl	8004268 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7ff f842 	bl	8004268 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e026      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x498>
 80051fe:	e01e      	b.n	800523e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e019      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
 800520c:	40021000 	.word	0x40021000
 8005210:	40007000 	.word	0x40007000
 8005214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_OscConfig+0x500>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	429a      	cmp	r2, r3
 800522a:	d106      	bne.n	800523a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d001      	beq.n	800523e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40021000 	.word	0x40021000

0800524c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0d0      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d910      	bls.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b67      	ldr	r3, [pc, #412]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 0207 	bic.w	r2, r3, #7
 8005276:	4965      	ldr	r1, [pc, #404]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b63      	ldr	r3, [pc, #396]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0b8      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a8:	4b59      	ldr	r3, [pc, #356]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a58      	ldr	r2, [pc, #352]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c0:	4b53      	ldr	r3, [pc, #332]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a52      	ldr	r2, [pc, #328]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052cc:	4b50      	ldr	r3, [pc, #320]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	494d      	ldr	r1, [pc, #308]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d040      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f2:	4b47      	ldr	r3, [pc, #284]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d115      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e07f      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b41      	ldr	r3, [pc, #260]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e073      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e06b      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4936      	ldr	r1, [pc, #216]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fe ff94 	bl	8004268 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fe ff90 	bl	8004268 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e053      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b27      	ldr	r3, [pc, #156]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d210      	bcs.n	800539c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b24      	ldr	r3, [pc, #144]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0207 	bic.w	r2, r3, #7
 8005382:	4922      	ldr	r1, [pc, #136]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b20      	ldr	r3, [pc, #128]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e032      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4916      	ldr	r1, [pc, #88]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	490e      	ldr	r1, [pc, #56]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053da:	f000 f821 	bl	8005420 <HAL_RCC_GetSysClockFreq>
 80053de:	4602      	mov	r2, r0
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	490a      	ldr	r1, [pc, #40]	; (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053ec:	5ccb      	ldrb	r3, [r1, r3]
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <HAL_RCC_ClockConfig+0x1cc>)
 80053f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_RCC_ClockConfig+0x1d0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fef2 	bl	80041e4 <HAL_InitTick>

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40022000 	.word	0x40022000
 8005410:	40021000 	.word	0x40021000
 8005414:	0800a400 	.word	0x0800a400
 8005418:	200000b4 	.word	0x200000b4
 800541c:	200000b8 	.word	0x200000b8

08005420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800543a:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b04      	cmp	r3, #4
 8005448:	d002      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x30>
 800544a:	2b08      	cmp	r3, #8
 800544c:	d003      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x36>
 800544e:	e027      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005450:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005452:	613b      	str	r3, [r7, #16]
      break;
 8005454:	e027      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	0c9b      	lsrs	r3, r3, #18
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	4a17      	ldr	r2, [pc, #92]	; (80054bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005460:	5cd3      	ldrb	r3, [r2, r3]
 8005462:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d010      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	0c5b      	lsrs	r3, r3, #17
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800547a:	5cd3      	ldrb	r3, [r2, r3]
 800547c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005482:	fb03 f202 	mul.w	r2, r3, r2
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e004      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005494:	fb02 f303 	mul.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	613b      	str	r3, [r7, #16]
      break;
 800549e:	e002      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80054a2:	613b      	str	r3, [r7, #16]
      break;
 80054a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054a6:	693b      	ldr	r3, [r7, #16]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	007a1200 	.word	0x007a1200
 80054bc:	0800a418 	.word	0x0800a418
 80054c0:	0800a428 	.word	0x0800a428
 80054c4:	003d0900 	.word	0x003d0900

080054c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	200000b4 	.word	0x200000b4

080054dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054e0:	f7ff fff2 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	4903      	ldr	r1, [pc, #12]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f2:	5ccb      	ldrb	r3, [r1, r3]
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000
 8005500:	0800a410 	.word	0x0800a410

08005504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005508:	f7ff ffde 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	0adb      	lsrs	r3, r3, #11
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000
 8005528:	0800a410 	.word	0x0800a410

0800552c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <RCC_Delay+0x34>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <RCC_Delay+0x38>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	0a5b      	lsrs	r3, r3, #9
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005548:	bf00      	nop
  }
  while (Delay --);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	60fa      	str	r2, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f9      	bne.n	8005548 <RCC_Delay+0x1c>
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	200000b4 	.word	0x200000b4
 8005564:	10624dd3 	.word	0x10624dd3

08005568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e041      	b.n	80055fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fe fb2a 	bl	8003be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fd60 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d001      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e03a      	b.n	8005696 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_TIM_Base_Start_IT+0x98>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x58>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d009      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x58>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x58>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a13      	ldr	r2, [pc, #76]	; (80056a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d111      	bne.n	8005684 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d010      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	e007      	b.n	8005694 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800

080056ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e041      	b.n	8005742 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f839 	bl	800574a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fcbe 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <HAL_TIM_PWM_Start+0x24>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e022      	b.n	80057c6 <HAL_TIM_PWM_Start+0x6a>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d109      	bne.n	800579a <HAL_TIM_PWM_Start+0x3e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b01      	cmp	r3, #1
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	e015      	b.n	80057c6 <HAL_TIM_PWM_Start+0x6a>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d109      	bne.n	80057b4 <HAL_TIM_PWM_Start+0x58>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e008      	b.n	80057c6 <HAL_TIM_PWM_Start+0x6a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e05e      	b.n	800588c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0x82>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	e013      	b.n	8005806 <HAL_TIM_PWM_Start+0xaa>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_PWM_Start+0x92>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ec:	e00b      	b.n	8005806 <HAL_TIM_PWM_Start+0xaa>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_PWM_Start+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fc:	e003      	b.n	8005806 <HAL_TIM_PWM_Start+0xaa>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 feac 	bl	800656c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_TIM_PWM_Start+0x138>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d107      	bne.n	800582e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800582c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_TIM_PWM_Start+0x138>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIM_PWM_Start+0xfa>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d009      	beq.n	8005856 <HAL_TIM_PWM_Start+0xfa>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a14      	ldr	r2, [pc, #80]	; (8005898 <HAL_TIM_PWM_Start+0x13c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_PWM_Start+0xfa>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a12      	ldr	r2, [pc, #72]	; (800589c <HAL_TIM_PWM_Start+0x140>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d111      	bne.n	800587a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d010      	beq.n	800588a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e007      	b.n	800588a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800

080058a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e093      	b.n	80059dc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fe f9c7 	bl	8003c5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e4:	f023 0307 	bic.w	r3, r3, #7
 80058e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f000 fbb9 	bl	800606c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	4313      	orrs	r3, r2
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005940:	f023 030c 	bic.w	r3, r3, #12
 8005944:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800594c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	4313      	orrs	r3, r2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	011a      	lsls	r2, r3, #4
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	031b      	lsls	r3, r3, #12
 8005970:	4313      	orrs	r3, r2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	4313      	orrs	r3, r2
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d110      	bne.n	8005a36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d102      	bne.n	8005a20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a1a:	7b7b      	ldrb	r3, [r7, #13]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d001      	beq.n	8005a24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e069      	b.n	8005af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a34:	e031      	b.n	8005a9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d110      	bne.n	8005a5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d102      	bne.n	8005a48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a42:	7b3b      	ldrb	r3, [r7, #12]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e055      	b.n	8005af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a5c:	e01d      	b.n	8005a9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d108      	bne.n	8005a76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a6a:	7b7b      	ldrb	r3, [r7, #13]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d102      	bne.n	8005a76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a70:	7b3b      	ldrb	r3, [r7, #12]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d001      	beq.n	8005a7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e03e      	b.n	8005af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_TIM_Encoder_Start+0xc4>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d008      	beq.n	8005ab8 <HAL_TIM_Encoder_Start+0xd4>
 8005aa6:	e00f      	b.n	8005ac8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2201      	movs	r2, #1
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fd5b 	bl	800656c <TIM_CCxChannelCmd>
      break;
 8005ab6:	e016      	b.n	8005ae6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2201      	movs	r2, #1
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fd53 	bl	800656c <TIM_CCxChannelCmd>
      break;
 8005ac6:	e00e      	b.n	8005ae6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fd4b 	bl	800656c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	2104      	movs	r1, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd44 	bl	800656c <TIM_CCxChannelCmd>
      break;
 8005ae4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d122      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d11b      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0202 	mvn.w	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa76 	bl	8006034 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa69 	bl	8006022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa78 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d122      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d11b      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0204 	mvn.w	r2, #4
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa4c 	bl	8006034 <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e005      	b.n	8005baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fa3f 	bl	8006022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fa4e 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d122      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d11b      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0208 	mvn.w	r2, #8
 8005bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa22 	bl	8006034 <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa15 	bl	8006022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa24 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d122      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d11b      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0210 	mvn.w	r2, #16
 8005c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f9f8 	bl	8006034 <HAL_TIM_IC_CaptureCallback>
 8005c44:	e005      	b.n	8005c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f9eb 	bl	8006022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f9fa 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10e      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0201 	mvn.w	r2, #1
 8005c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fd f93e 	bl	8002f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d10e      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fce9 	bl	8006682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d10e      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d107      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9be 	bl	8006058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d10e      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d107      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0220 	mvn.w	r2, #32
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fcb4 	bl	8006670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e0ae      	b.n	8005e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b0c      	cmp	r3, #12
 8005d3a:	f200 809f 	bhi.w	8005e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005e7d 	.word	0x08005e7d
 8005d4c:	08005e7d 	.word	0x08005e7d
 8005d50:	08005e7d 	.word	0x08005e7d
 8005d54:	08005db9 	.word	0x08005db9
 8005d58:	08005e7d 	.word	0x08005e7d
 8005d5c:	08005e7d 	.word	0x08005e7d
 8005d60:	08005e7d 	.word	0x08005e7d
 8005d64:	08005dfb 	.word	0x08005dfb
 8005d68:	08005e7d 	.word	0x08005e7d
 8005d6c:	08005e7d 	.word	0x08005e7d
 8005d70:	08005e7d 	.word	0x08005e7d
 8005d74:	08005e3b 	.word	0x08005e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f9d6 	bl	8006130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0208 	orr.w	r2, r2, #8
 8005d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0204 	bic.w	r2, r2, #4
 8005da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6999      	ldr	r1, [r3, #24]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	619a      	str	r2, [r3, #24]
      break;
 8005db6:	e064      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fa1c 	bl	80061fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6999      	ldr	r1, [r3, #24]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	619a      	str	r2, [r3, #24]
      break;
 8005df8:	e043      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fa65 	bl	80062d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0208 	orr.w	r2, r2, #8
 8005e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0204 	bic.w	r2, r2, #4
 8005e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	61da      	str	r2, [r3, #28]
      break;
 8005e38:	e023      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 faaf 	bl	80063a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69d9      	ldr	r1, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	61da      	str	r2, [r3, #28]
      break;
 8005e7a:	e002      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e0b4      	b.n	800601a <HAL_TIM_ConfigClockSource+0x186>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee8:	d03e      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0xd4>
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	f200 8087 	bhi.w	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef6:	f000 8086 	beq.w	8006006 <HAL_TIM_ConfigClockSource+0x172>
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	d87f      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d01a      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0xa6>
 8005f04:	2b70      	cmp	r3, #112	; 0x70
 8005f06:	d87b      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d050      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x11a>
 8005f0c:	2b60      	cmp	r3, #96	; 0x60
 8005f0e:	d877      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	2b50      	cmp	r3, #80	; 0x50
 8005f12:	d03c      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0xfa>
 8005f14:	2b50      	cmp	r3, #80	; 0x50
 8005f16:	d873      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d058      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x13a>
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d86f      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b30      	cmp	r3, #48	; 0x30
 8005f22:	d064      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f24:	2b30      	cmp	r3, #48	; 0x30
 8005f26:	d86b      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d060      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d867      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d05c      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d05a      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f38:	e062      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6899      	ldr	r1, [r3, #8]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f000 faf0 	bl	800652e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	609a      	str	r2, [r3, #8]
      break;
 8005f66:	e04f      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6899      	ldr	r1, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f000 fad9 	bl	800652e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f8a:	609a      	str	r2, [r3, #8]
      break;
 8005f8c:	e03c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6859      	ldr	r1, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f000 fa50 	bl	8006440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2150      	movs	r1, #80	; 0x50
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 faa7 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005fac:	e02c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f000 fa6e 	bl	800649c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2160      	movs	r1, #96	; 0x60
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fa97 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e01c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 fa30 	bl	8006440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2140      	movs	r1, #64	; 0x40
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fa87 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005fec:	e00c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f000 fa7e 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005ffe:	e003      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e000      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr
	...

0800606c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a29      	ldr	r2, [pc, #164]	; (8006124 <TIM_Base_SetConfig+0xb8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00b      	beq.n	800609c <TIM_Base_SetConfig+0x30>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d007      	beq.n	800609c <TIM_Base_SetConfig+0x30>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a26      	ldr	r2, [pc, #152]	; (8006128 <TIM_Base_SetConfig+0xbc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0x30>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a25      	ldr	r2, [pc, #148]	; (800612c <TIM_Base_SetConfig+0xc0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <TIM_Base_SetConfig+0xb8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00b      	beq.n	80060ce <TIM_Base_SetConfig+0x62>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d007      	beq.n	80060ce <TIM_Base_SetConfig+0x62>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <TIM_Base_SetConfig+0xbc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_Base_SetConfig+0x62>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <TIM_Base_SetConfig+0xc0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d108      	bne.n	80060e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a07      	ldr	r2, [pc, #28]	; (8006124 <TIM_Base_SetConfig+0xb8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d103      	bne.n	8006114 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	615a      	str	r2, [r3, #20]
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800

08006130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f023 0201 	bic.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0302 	bic.w	r3, r3, #2
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <TIM_OC1_SetConfig+0xc8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10c      	bne.n	80061a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0308 	bic.w	r3, r3, #8
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0304 	bic.w	r3, r3, #4
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <TIM_OC1_SetConfig+0xc8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d111      	bne.n	80061d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00

080061fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f023 0210 	bic.w	r2, r3, #16
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0320 	bic.w	r3, r3, #32
 8006246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <TIM_OC2_SetConfig+0xd0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10d      	bne.n	8006278 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a14      	ldr	r2, [pc, #80]	; (80062cc <TIM_OC2_SetConfig+0xd0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d113      	bne.n	80062a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00

080062d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <TIM_OC3_SetConfig+0xd0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d10d      	bne.n	800634a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a14      	ldr	r2, [pc, #80]	; (80063a0 <TIM_OC3_SetConfig+0xd0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d113      	bne.n	800637a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	621a      	str	r2, [r3, #32]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40012c00 	.word	0x40012c00

080063a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	031b      	lsls	r3, r3, #12
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a0f      	ldr	r2, [pc, #60]	; (800643c <TIM_OC4_SetConfig+0x98>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d109      	bne.n	8006418 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	019b      	lsls	r3, r3, #6
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	40012c00 	.word	0x40012c00

08006440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 030a 	bic.w	r3, r3, #10
 800647c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f023 0210 	bic.w	r2, r3, #16
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	031b      	lsls	r3, r3, #12
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	f043 0307 	orr.w	r3, r3, #7
 800651c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800652e:	b480      	push	{r7}
 8006530:	b087      	sub	sp, #28
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006548:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	021a      	lsls	r2, r3, #8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	431a      	orrs	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4313      	orrs	r3, r2
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	609a      	str	r2, [r3, #8]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr

0800656c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2201      	movs	r2, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	43db      	mvns	r3, r3
 800658e:	401a      	ands	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e046      	b.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a16      	ldr	r2, [pc, #88]	; (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d009      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a12      	ldr	r2, [pc, #72]	; (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a10      	ldr	r2, [pc, #64]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10c      	bne.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4313      	orrs	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800

08006670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr

08006694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e042      	b.n	800672c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fd fb68 	bl	8003d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	; 0x24
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 ff2f 	bl	800753c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800670c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08c      	sub	sp, #48	; 0x30
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b20      	cmp	r3, #32
 800674c:	d156      	bne.n	80067fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_UART_Transmit_DMA+0x26>
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e04f      	b.n	80067fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2221      	movs	r2, #33	; 0x21
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	4a21      	ldr	r2, [pc, #132]	; (8006808 <HAL_UART_Transmit_DMA+0xd4>)
 8006784:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	4a20      	ldr	r2, [pc, #128]	; (800680c <HAL_UART_Transmit_DMA+0xd8>)
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_UART_Transmit_DMA+0xdc>)
 8006794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	2200      	movs	r2, #0
 800679c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	461a      	mov	r2, r3
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	f7fd fec9 	bl	800454c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e4:	627a      	str	r2, [r7, #36]	; 0x24
 80067e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6a39      	ldr	r1, [r7, #32]
 80067ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3730      	adds	r7, #48	; 0x30
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	08006dd1 	.word	0x08006dd1
 800680c:	08006e6b 	.word	0x08006e6b
 8006810:	08006fef 	.word	0x08006fef

08006814 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b20      	cmp	r3, #32
 800682c:	d112      	bne.n	8006854 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_UART_Receive_DMA+0x26>
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e00b      	b.n	8006856 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	461a      	mov	r2, r3
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 fc1a 	bl	8007084 <UART_Start_Receive_DMA>
 8006850:	4603      	mov	r3, r0
 8006852:	e000      	b.n	8006856 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b0ba      	sub	sp, #232	; 0xe8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006886:	2300      	movs	r3, #0
 8006888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800688c:	2300      	movs	r3, #0
 800688e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800689e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10f      	bne.n	80068c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <HAL_UART_IRQHandler+0x66>
 80068b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fd7e 	bl	80073c0 <UART_Receive_IT>
      return;
 80068c4:	e25b      	b.n	8006d7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80de 	beq.w	8006a8c <HAL_UART_IRQHandler+0x22c>
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80d1 	beq.w	8006a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xae>
 80068f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006906:	f043 0201 	orr.w	r2, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xd2>
 800691a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	f043 0202 	orr.w	r2, r3, #2
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_UART_IRQHandler+0xf6>
 800693e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f043 0204 	orr.w	r2, r3, #4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d011      	beq.n	8006986 <HAL_UART_IRQHandler+0x126>
 8006962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d105      	bne.n	800697a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800696e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	f043 0208 	orr.w	r2, r3, #8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 81f2 	beq.w	8006d74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_UART_IRQHandler+0x14e>
 800699c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fd09 	bl	80073c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <HAL_UART_IRQHandler+0x17a>
 80069d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d04f      	beq.n	8006a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fc13 	bl	8007206 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d041      	beq.n	8006a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3314      	adds	r3, #20
 80069f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3314      	adds	r3, #20
 8006a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1d9      	bne.n	80069ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d013      	beq.n	8006a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	4a7e      	ldr	r2, [pc, #504]	; (8006c40 <HAL_UART_IRQHandler+0x3e0>)
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fd fe18 	bl	8004684 <HAL_DMA_Abort_IT>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	e00e      	b.n	8006a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f99c 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	e00a      	b.n	8006a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f998 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	e006      	b.n	8006a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f994 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a86:	e175      	b.n	8006d74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	bf00      	nop
    return;
 8006a8a:	e173      	b.n	8006d74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	f040 814f 	bne.w	8006d34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8148 	beq.w	8006d34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8141 	beq.w	8006d34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60bb      	str	r3, [r7, #8]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	60bb      	str	r3, [r7, #8]
 8006ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80b6 	beq.w	8006c44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8145 	beq.w	8006d78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006af6:	429a      	cmp	r2, r3
 8006af8:	f080 813e 	bcs.w	8006d78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	f000 8088 	beq.w	8006c20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b3c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1d9      	bne.n	8006b10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e1      	bne.n	8006b5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3314      	adds	r3, #20
 8006b9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e3      	bne.n	8006b98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf0:	f023 0310 	bic.w	r3, r3, #16
 8006bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c02:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e3      	bne.n	8006bde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fd fcf6 	bl	800460c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f8bf 	bl	8006dba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c3c:	e09c      	b.n	8006d78 <HAL_UART_IRQHandler+0x518>
 8006c3e:	bf00      	nop
 8006c40:	080072cb 	.word	0x080072cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 808e 	beq.w	8006d7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8089 	beq.w	8006d7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c8e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e3      	bne.n	8006c6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cc6:	633a      	str	r2, [r7, #48]	; 0x30
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e3      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d0c:	61fa      	str	r2, [r7, #28]
 8006d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e3      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f844 	bl	8006dba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d32:	e023      	b.n	8006d7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <HAL_UART_IRQHandler+0x4f4>
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fad0 	bl	80072f2 <UART_Transmit_IT>
    return;
 8006d52:	e014      	b.n	8006d7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <HAL_UART_IRQHandler+0x51e>
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb0f 	bl	8007390 <UART_EndTransmit_IT>
    return;
 8006d72:	e004      	b.n	8006d7e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d74:	bf00      	nop
 8006d76:	e002      	b.n	8006d7e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d78:	bf00      	nop
 8006d7a:	e000      	b.n	8006d7e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d7c:	bf00      	nop
  }
}
 8006d7e:	37e8      	adds	r7, #232	; 0xe8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr

08006d96 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b090      	sub	sp, #64	; 0x40
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d137      	bne.n	8006e5c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	2200      	movs	r2, #0
 8006df0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3314      	adds	r3, #20
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	623b      	str	r3, [r7, #32]
   return(result);
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3314      	adds	r3, #20
 8006e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e12:	633a      	str	r2, [r7, #48]	; 0x30
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e46:	61fa      	str	r2, [r7, #28]
 8006e48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	69b9      	ldr	r1, [r7, #24]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	617b      	str	r3, [r7, #20]
   return(result);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e5a:	e002      	b.n	8006e62 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e5e:	f7fc f82b 	bl	8002eb8 <HAL_UART_TxCpltCallback>
}
 8006e62:	bf00      	nop
 8006e64:	3740      	adds	r7, #64	; 0x40
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ff83 	bl	8006d84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b09c      	sub	sp, #112	; 0x70
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d172      	bne.n	8006f88 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ec8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006eca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	f023 0301 	bic.w	r3, r3, #1
 8006ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3314      	adds	r3, #20
 8006efa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006efc:	647a      	str	r2, [r7, #68]	; 0x44
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f26:	663b      	str	r3, [r7, #96]	; 0x60
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f30:	633a      	str	r2, [r7, #48]	; 0x30
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d119      	bne.n	8006f88 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0310 	bic.w	r3, r3, #16
 8006f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f74:	61fa      	str	r2, [r7, #28]
 8006f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	617b      	str	r3, [r7, #20]
   return(result);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d106      	bne.n	8006fa4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f9e:	f7ff ff0c 	bl	8006dba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fa2:	e002      	b.n	8006faa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006fa4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006fa6:	f7fb ff99 	bl	8002edc <HAL_UART_RxCpltCallback>
}
 8006faa:	bf00      	nop
 8006fac:	3770      	adds	r7, #112	; 0x70
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d108      	bne.n	8006fe0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff feee 	bl	8006dba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fde:	e002      	b.n	8006fe6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff fed8 	bl	8006d96 <HAL_UART_RxHalfCpltCallback>
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700a:	2b00      	cmp	r3, #0
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b21      	cmp	r3, #33	; 0x21
 8007020:	d108      	bne.n	8007034 <UART_DMAError+0x46>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2200      	movs	r2, #0
 800702c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800702e:	68b8      	ldr	r0, [r7, #8]
 8007030:	f000 f8c2 	bl	80071b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	bf14      	ite	ne
 8007042:	2301      	movne	r3, #1
 8007044:	2300      	moveq	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b22      	cmp	r3, #34	; 0x22
 8007054:	d108      	bne.n	8007068 <UART_DMAError+0x7a>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007062:	68b8      	ldr	r0, [r7, #8]
 8007064:	f000 f8cf 	bl	8007206 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706c:	f043 0210 	orr.w	r2, r3, #16
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007074:	68b8      	ldr	r0, [r7, #8]
 8007076:	f7ff fe97 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b098      	sub	sp, #96	; 0x60
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2222      	movs	r2, #34	; 0x22
 80070a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	4a3e      	ldr	r2, [pc, #248]	; (80071ac <UART_Start_Receive_DMA+0x128>)
 80070b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	4a3d      	ldr	r2, [pc, #244]	; (80071b0 <UART_Start_Receive_DMA+0x12c>)
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	4a3c      	ldr	r2, [pc, #240]	; (80071b4 <UART_Start_Receive_DMA+0x130>)
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	2200      	movs	r2, #0
 80070ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80070cc:	f107 0308 	add.w	r3, r7, #8
 80070d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3304      	adds	r3, #4
 80070dc:	4619      	mov	r1, r3
 80070de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	f7fd fa32 	bl	800454c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80070e8:	2300      	movs	r3, #0
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d019      	beq.n	800713a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800711c:	65bb      	str	r3, [r7, #88]	; 0x58
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	330c      	adds	r3, #12
 8007124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007126:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800712c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e5      	bne.n	8007106 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3314      	adds	r3, #20
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	657b      	str	r3, [r7, #84]	; 0x54
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3314      	adds	r3, #20
 8007158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800715a:	63ba      	str	r2, [r7, #56]	; 0x38
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e5      	bne.n	800713a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3314      	adds	r3, #20
 8007174:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	617b      	str	r3, [r7, #20]
   return(result);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007184:	653b      	str	r3, [r7, #80]	; 0x50
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800718e:	627a      	str	r2, [r7, #36]	; 0x24
 8007190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6a39      	ldr	r1, [r7, #32]
 8007194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	61fb      	str	r3, [r7, #28]
   return(result);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3760      	adds	r7, #96	; 0x60
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	08006e87 	.word	0x08006e87
 80071b0:	08006fb3 	.word	0x08006fb3
 80071b4:	08006fef 	.word	0x08006fef

080071b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	61ba      	str	r2, [r7, #24]
 80071e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6979      	ldr	r1, [r7, #20]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	613b      	str	r3, [r7, #16]
   return(result);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e5      	bne.n	80071c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80071fc:	bf00      	nop
 80071fe:	3724      	adds	r7, #36	; 0x24
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr

08007206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007206:	b480      	push	{r7}
 8007208:	b095      	sub	sp, #84	; 0x54
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800722e:	643a      	str	r2, [r7, #64]	; 0x40
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3314      	adds	r3, #20
 8007248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	61fb      	str	r3, [r7, #28]
   return(result);
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	64bb      	str	r3, [r7, #72]	; 0x48
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	2b01      	cmp	r3, #1
 800727c:	d119      	bne.n	80072b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	60bb      	str	r3, [r7, #8]
   return(result);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 0310 	bic.w	r3, r3, #16
 8007294:	647b      	str	r3, [r7, #68]	; 0x44
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	330c      	adds	r3, #12
 800729c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800729e:	61ba      	str	r2, [r7, #24]
 80072a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6979      	ldr	r1, [r7, #20]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	613b      	str	r3, [r7, #16]
   return(result);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072c0:	bf00      	nop
 80072c2:	3754      	adds	r7, #84	; 0x54
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7ff fd5f 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b21      	cmp	r3, #33	; 0x21
 8007304:	d13e      	bne.n	8007384 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730e:	d114      	bne.n	800733a <UART_Transmit_IT+0x48>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d110      	bne.n	800733a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800732c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	1c9a      	adds	r2, r3, #2
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]
 8007338:	e008      	b.n	800734c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	1c59      	adds	r1, r3, #1
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6211      	str	r1, [r2, #32]
 8007344:	781a      	ldrb	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29b      	uxth	r3, r3
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	4619      	mov	r1, r3
 800735a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10f      	bne.n	8007380 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800736e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800737e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	e000      	b.n	8007386 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007384:	2302      	movs	r3, #2
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fb fd81 	bl	8002eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b22      	cmp	r3, #34	; 0x22
 80073d2:	f040 80ae 	bne.w	8007532 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073de:	d117      	bne.n	8007410 <UART_Receive_IT+0x50>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d113      	bne.n	8007410 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fe:	b29a      	uxth	r2, r3
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	1c9a      	adds	r2, r3, #2
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	629a      	str	r2, [r3, #40]	; 0x28
 800740e:	e026      	b.n	800745e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d007      	beq.n	8007434 <UART_Receive_IT+0x74>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <UART_Receive_IT+0x82>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e008      	b.n	8007454 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744e:	b2da      	uxtb	r2, r3
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29b      	uxth	r3, r3
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	4619      	mov	r1, r3
 800746c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800746e:	2b00      	cmp	r3, #0
 8007470:	d15d      	bne.n	800752e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0220 	bic.w	r2, r2, #32
 8007480:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d135      	bne.n	8007524 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	613b      	str	r3, [r7, #16]
   return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f023 0310 	bic.w	r3, r3, #16
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	623a      	str	r2, [r7, #32]
 80074e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	69f9      	ldr	r1, [r7, #28]
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e5      	bne.n	80074be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d10a      	bne.n	8007516 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff fc4c 	bl	8006dba <HAL_UARTEx_RxEventCallback>
 8007522:	e002      	b.n	800752a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7fb fcd9 	bl	8002edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e002      	b.n	8007534 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e000      	b.n	8007534 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007532:	2302      	movs	r3, #2
  }
}
 8007534:	4618      	mov	r0, r3
 8007536:	3730      	adds	r7, #48	; 0x30
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007576:	f023 030c 	bic.w	r3, r3, #12
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	430b      	orrs	r3, r1
 8007582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2c      	ldr	r2, [pc, #176]	; (8007650 <UART_SetConfig+0x114>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d103      	bne.n	80075ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075a4:	f7fd ffae 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	e002      	b.n	80075b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075ac:	f7fd ff96 	bl	80054dc <HAL_RCC_GetPCLK1Freq>
 80075b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009a      	lsls	r2, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <UART_SetConfig+0x118>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	0119      	lsls	r1, r3, #4
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009a      	lsls	r2, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075e8:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <UART_SetConfig+0x118>)
 80075ea:	fba3 0302 	umull	r0, r3, r3, r2
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	2064      	movs	r0, #100	; 0x64
 80075f2:	fb00 f303 	mul.w	r3, r0, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	3332      	adds	r3, #50	; 0x32
 80075fc:	4a15      	ldr	r2, [pc, #84]	; (8007654 <UART_SetConfig+0x118>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007608:	4419      	add	r1, r3
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009a      	lsls	r2, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <UART_SetConfig+0x118>)
 8007622:	fba3 0302 	umull	r0, r3, r3, r2
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	2064      	movs	r0, #100	; 0x64
 800762a:	fb00 f303 	mul.w	r3, r0, r3
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	3332      	adds	r3, #50	; 0x32
 8007634:	4a07      	ldr	r2, [pc, #28]	; (8007654 <UART_SetConfig+0x118>)
 8007636:	fba2 2303 	umull	r2, r3, r2, r3
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	f003 020f 	and.w	r2, r3, #15
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	440a      	add	r2, r1
 8007646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40013800 	.word	0x40013800
 8007654:	51eb851f 	.word	0x51eb851f

08007658 <__cxa_pure_virtual>:
 8007658:	b508      	push	{r3, lr}
 800765a:	f000 f80d 	bl	8007678 <_ZSt9terminatev>

0800765e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800765e:	b508      	push	{r3, lr}
 8007660:	4780      	blx	r0
 8007662:	f000 f80e 	bl	8007682 <abort>
	...

08007668 <_ZSt13get_terminatev>:
 8007668:	4b02      	ldr	r3, [pc, #8]	; (8007674 <_ZSt13get_terminatev+0xc>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	f3bf 8f5b 	dmb	ish
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	200000c0 	.word	0x200000c0

08007678 <_ZSt9terminatev>:
 8007678:	b508      	push	{r3, lr}
 800767a:	f7ff fff5 	bl	8007668 <_ZSt13get_terminatev>
 800767e:	f7ff ffee 	bl	800765e <_ZN10__cxxabiv111__terminateEPFvvE>

08007682 <abort>:
 8007682:	2006      	movs	r0, #6
 8007684:	b508      	push	{r3, lr}
 8007686:	f000 fcd3 	bl	8008030 <raise>
 800768a:	2001      	movs	r0, #1
 800768c:	f7fc fc93 	bl	8003fb6 <_exit>

08007690 <__errno>:
 8007690:	4b01      	ldr	r3, [pc, #4]	; (8007698 <__errno+0x8>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	200000c4 	.word	0x200000c4

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	2600      	movs	r6, #0
 80076a0:	4d0c      	ldr	r5, [pc, #48]	; (80076d4 <__libc_init_array+0x38>)
 80076a2:	4c0d      	ldr	r4, [pc, #52]	; (80076d8 <__libc_init_array+0x3c>)
 80076a4:	1b64      	subs	r4, r4, r5
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	42a6      	cmp	r6, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	f002 fd66 	bl	800a17c <_init>
 80076b0:	2600      	movs	r6, #0
 80076b2:	4d0a      	ldr	r5, [pc, #40]	; (80076dc <__libc_init_array+0x40>)
 80076b4:	4c0a      	ldr	r4, [pc, #40]	; (80076e0 <__libc_init_array+0x44>)
 80076b6:	1b64      	subs	r4, r4, r5
 80076b8:	10a4      	asrs	r4, r4, #2
 80076ba:	42a6      	cmp	r6, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c4:	4798      	blx	r3
 80076c6:	3601      	adds	r6, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ce:	4798      	blx	r3
 80076d0:	3601      	adds	r6, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	0800a804 	.word	0x0800a804
 80076d8:	0800a804 	.word	0x0800a804
 80076dc:	0800a804 	.word	0x0800a804
 80076e0:	0800a80c 	.word	0x0800a80c

080076e4 <memcpy>:
 80076e4:	440a      	add	r2, r1
 80076e6:	4291      	cmp	r1, r2
 80076e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076ec:	d100      	bne.n	80076f0 <memcpy+0xc>
 80076ee:	4770      	bx	lr
 80076f0:	b510      	push	{r4, lr}
 80076f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f6:	4291      	cmp	r1, r2
 80076f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076fc:	d1f9      	bne.n	80076f2 <memcpy+0xe>
 80076fe:	bd10      	pop	{r4, pc}

08007700 <memset>:
 8007700:	4603      	mov	r3, r0
 8007702:	4402      	add	r2, r0
 8007704:	4293      	cmp	r3, r2
 8007706:	d100      	bne.n	800770a <memset+0xa>
 8007708:	4770      	bx	lr
 800770a:	f803 1b01 	strb.w	r1, [r3], #1
 800770e:	e7f9      	b.n	8007704 <memset+0x4>

08007710 <__cvt>:
 8007710:	2b00      	cmp	r3, #0
 8007712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007716:	461f      	mov	r7, r3
 8007718:	bfbb      	ittet	lt
 800771a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800771e:	461f      	movlt	r7, r3
 8007720:	2300      	movge	r3, #0
 8007722:	232d      	movlt	r3, #45	; 0x2d
 8007724:	b088      	sub	sp, #32
 8007726:	4614      	mov	r4, r2
 8007728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800772a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800772c:	7013      	strb	r3, [r2, #0]
 800772e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007730:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007734:	f023 0820 	bic.w	r8, r3, #32
 8007738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800773c:	d005      	beq.n	800774a <__cvt+0x3a>
 800773e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007742:	d100      	bne.n	8007746 <__cvt+0x36>
 8007744:	3501      	adds	r5, #1
 8007746:	2302      	movs	r3, #2
 8007748:	e000      	b.n	800774c <__cvt+0x3c>
 800774a:	2303      	movs	r3, #3
 800774c:	aa07      	add	r2, sp, #28
 800774e:	9204      	str	r2, [sp, #16]
 8007750:	aa06      	add	r2, sp, #24
 8007752:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007756:	e9cd 3500 	strd	r3, r5, [sp]
 800775a:	4622      	mov	r2, r4
 800775c:	463b      	mov	r3, r7
 800775e:	f000 fd0f 	bl	8008180 <_dtoa_r>
 8007762:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007766:	4606      	mov	r6, r0
 8007768:	d102      	bne.n	8007770 <__cvt+0x60>
 800776a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800776c:	07db      	lsls	r3, r3, #31
 800776e:	d522      	bpl.n	80077b6 <__cvt+0xa6>
 8007770:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007774:	eb06 0905 	add.w	r9, r6, r5
 8007778:	d110      	bne.n	800779c <__cvt+0x8c>
 800777a:	7833      	ldrb	r3, [r6, #0]
 800777c:	2b30      	cmp	r3, #48	; 0x30
 800777e:	d10a      	bne.n	8007796 <__cvt+0x86>
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	4620      	mov	r0, r4
 8007786:	4639      	mov	r1, r7
 8007788:	f7f9 f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800778c:	b918      	cbnz	r0, 8007796 <__cvt+0x86>
 800778e:	f1c5 0501 	rsb	r5, r5, #1
 8007792:	f8ca 5000 	str.w	r5, [sl]
 8007796:	f8da 3000 	ldr.w	r3, [sl]
 800779a:	4499      	add	r9, r3
 800779c:	2200      	movs	r2, #0
 800779e:	2300      	movs	r3, #0
 80077a0:	4620      	mov	r0, r4
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f9 f900 	bl	80009a8 <__aeabi_dcmpeq>
 80077a8:	b108      	cbz	r0, 80077ae <__cvt+0x9e>
 80077aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80077ae:	2230      	movs	r2, #48	; 0x30
 80077b0:	9b07      	ldr	r3, [sp, #28]
 80077b2:	454b      	cmp	r3, r9
 80077b4:	d307      	bcc.n	80077c6 <__cvt+0xb6>
 80077b6:	4630      	mov	r0, r6
 80077b8:	9b07      	ldr	r3, [sp, #28]
 80077ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077bc:	1b9b      	subs	r3, r3, r6
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	b008      	add	sp, #32
 80077c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c6:	1c59      	adds	r1, r3, #1
 80077c8:	9107      	str	r1, [sp, #28]
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e7f0      	b.n	80077b0 <__cvt+0xa0>

080077ce <__exponent>:
 80077ce:	4603      	mov	r3, r0
 80077d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077d2:	2900      	cmp	r1, #0
 80077d4:	f803 2b02 	strb.w	r2, [r3], #2
 80077d8:	bfb6      	itet	lt
 80077da:	222d      	movlt	r2, #45	; 0x2d
 80077dc:	222b      	movge	r2, #43	; 0x2b
 80077de:	4249      	neglt	r1, r1
 80077e0:	2909      	cmp	r1, #9
 80077e2:	7042      	strb	r2, [r0, #1]
 80077e4:	dd2b      	ble.n	800783e <__exponent+0x70>
 80077e6:	f10d 0407 	add.w	r4, sp, #7
 80077ea:	46a4      	mov	ip, r4
 80077ec:	270a      	movs	r7, #10
 80077ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80077f2:	460a      	mov	r2, r1
 80077f4:	46a6      	mov	lr, r4
 80077f6:	fb07 1516 	mls	r5, r7, r6, r1
 80077fa:	2a63      	cmp	r2, #99	; 0x63
 80077fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007800:	4631      	mov	r1, r6
 8007802:	f104 34ff 	add.w	r4, r4, #4294967295
 8007806:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800780a:	dcf0      	bgt.n	80077ee <__exponent+0x20>
 800780c:	3130      	adds	r1, #48	; 0x30
 800780e:	f1ae 0502 	sub.w	r5, lr, #2
 8007812:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007816:	4629      	mov	r1, r5
 8007818:	1c44      	adds	r4, r0, #1
 800781a:	4561      	cmp	r1, ip
 800781c:	d30a      	bcc.n	8007834 <__exponent+0x66>
 800781e:	f10d 0209 	add.w	r2, sp, #9
 8007822:	eba2 020e 	sub.w	r2, r2, lr
 8007826:	4565      	cmp	r5, ip
 8007828:	bf88      	it	hi
 800782a:	2200      	movhi	r2, #0
 800782c:	4413      	add	r3, r2
 800782e:	1a18      	subs	r0, r3, r0
 8007830:	b003      	add	sp, #12
 8007832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007838:	f804 2f01 	strb.w	r2, [r4, #1]!
 800783c:	e7ed      	b.n	800781a <__exponent+0x4c>
 800783e:	2330      	movs	r3, #48	; 0x30
 8007840:	3130      	adds	r1, #48	; 0x30
 8007842:	7083      	strb	r3, [r0, #2]
 8007844:	70c1      	strb	r1, [r0, #3]
 8007846:	1d03      	adds	r3, r0, #4
 8007848:	e7f1      	b.n	800782e <__exponent+0x60>
	...

0800784c <_printf_float>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	b091      	sub	sp, #68	; 0x44
 8007852:	460c      	mov	r4, r1
 8007854:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007858:	4616      	mov	r6, r2
 800785a:	461f      	mov	r7, r3
 800785c:	4605      	mov	r5, r0
 800785e:	f001 fa7d 	bl	8008d5c <_localeconv_r>
 8007862:	6803      	ldr	r3, [r0, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	f7f8 fc72 	bl	8000150 <strlen>
 800786c:	2300      	movs	r3, #0
 800786e:	930e      	str	r3, [sp, #56]	; 0x38
 8007870:	f8d8 3000 	ldr.w	r3, [r8]
 8007874:	900a      	str	r0, [sp, #40]	; 0x28
 8007876:	3307      	adds	r3, #7
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	f103 0208 	add.w	r2, r3, #8
 8007880:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007884:	f8d4 b000 	ldr.w	fp, [r4]
 8007888:	f8c8 2000 	str.w	r2, [r8]
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007894:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007898:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800789c:	930b      	str	r3, [sp, #44]	; 0x2c
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	4640      	mov	r0, r8
 80078a4:	4b9c      	ldr	r3, [pc, #624]	; (8007b18 <_printf_float+0x2cc>)
 80078a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078a8:	f7f9 f8b0 	bl	8000a0c <__aeabi_dcmpun>
 80078ac:	bb70      	cbnz	r0, 800790c <_printf_float+0xc0>
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	4640      	mov	r0, r8
 80078b4:	4b98      	ldr	r3, [pc, #608]	; (8007b18 <_printf_float+0x2cc>)
 80078b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078b8:	f7f9 f88a 	bl	80009d0 <__aeabi_dcmple>
 80078bc:	bb30      	cbnz	r0, 800790c <_printf_float+0xc0>
 80078be:	2200      	movs	r2, #0
 80078c0:	2300      	movs	r3, #0
 80078c2:	4640      	mov	r0, r8
 80078c4:	4651      	mov	r1, sl
 80078c6:	f7f9 f879 	bl	80009bc <__aeabi_dcmplt>
 80078ca:	b110      	cbz	r0, 80078d2 <_printf_float+0x86>
 80078cc:	232d      	movs	r3, #45	; 0x2d
 80078ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d2:	4b92      	ldr	r3, [pc, #584]	; (8007b1c <_printf_float+0x2d0>)
 80078d4:	4892      	ldr	r0, [pc, #584]	; (8007b20 <_printf_float+0x2d4>)
 80078d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80078da:	bf94      	ite	ls
 80078dc:	4698      	movls	r8, r3
 80078de:	4680      	movhi	r8, r0
 80078e0:	2303      	movs	r3, #3
 80078e2:	f04f 0a00 	mov.w	sl, #0
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	f02b 0304 	bic.w	r3, fp, #4
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	4633      	mov	r3, r6
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	9700      	str	r7, [sp, #0]
 80078f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80078f8:	f000 f9d4 	bl	8007ca4 <_printf_common>
 80078fc:	3001      	adds	r0, #1
 80078fe:	f040 8090 	bne.w	8007a22 <_printf_float+0x1d6>
 8007902:	f04f 30ff 	mov.w	r0, #4294967295
 8007906:	b011      	add	sp, #68	; 0x44
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	4642      	mov	r2, r8
 800790e:	4653      	mov	r3, sl
 8007910:	4640      	mov	r0, r8
 8007912:	4651      	mov	r1, sl
 8007914:	f7f9 f87a 	bl	8000a0c <__aeabi_dcmpun>
 8007918:	b148      	cbz	r0, 800792e <_printf_float+0xe2>
 800791a:	f1ba 0f00 	cmp.w	sl, #0
 800791e:	bfb8      	it	lt
 8007920:	232d      	movlt	r3, #45	; 0x2d
 8007922:	4880      	ldr	r0, [pc, #512]	; (8007b24 <_printf_float+0x2d8>)
 8007924:	bfb8      	it	lt
 8007926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800792a:	4b7f      	ldr	r3, [pc, #508]	; (8007b28 <_printf_float+0x2dc>)
 800792c:	e7d3      	b.n	80078d6 <_printf_float+0x8a>
 800792e:	6863      	ldr	r3, [r4, #4]
 8007930:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	d142      	bne.n	80079be <_printf_float+0x172>
 8007938:	2306      	movs	r3, #6
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	9206      	str	r2, [sp, #24]
 8007940:	aa0e      	add	r2, sp, #56	; 0x38
 8007942:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007946:	aa0d      	add	r2, sp, #52	; 0x34
 8007948:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800794c:	9203      	str	r2, [sp, #12]
 800794e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007952:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	4642      	mov	r2, r8
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	4628      	mov	r0, r5
 8007960:	4653      	mov	r3, sl
 8007962:	910b      	str	r1, [sp, #44]	; 0x2c
 8007964:	f7ff fed4 	bl	8007710 <__cvt>
 8007968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800796a:	4680      	mov	r8, r0
 800796c:	2947      	cmp	r1, #71	; 0x47
 800796e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007970:	d108      	bne.n	8007984 <_printf_float+0x138>
 8007972:	1cc8      	adds	r0, r1, #3
 8007974:	db02      	blt.n	800797c <_printf_float+0x130>
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	4299      	cmp	r1, r3
 800797a:	dd40      	ble.n	80079fe <_printf_float+0x1b2>
 800797c:	f1a9 0902 	sub.w	r9, r9, #2
 8007980:	fa5f f989 	uxtb.w	r9, r9
 8007984:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007988:	d81f      	bhi.n	80079ca <_printf_float+0x17e>
 800798a:	464a      	mov	r2, r9
 800798c:	3901      	subs	r1, #1
 800798e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007992:	910d      	str	r1, [sp, #52]	; 0x34
 8007994:	f7ff ff1b 	bl	80077ce <__exponent>
 8007998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800799a:	4682      	mov	sl, r0
 800799c:	1813      	adds	r3, r2, r0
 800799e:	2a01      	cmp	r2, #1
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	dc02      	bgt.n	80079aa <_printf_float+0x15e>
 80079a4:	6822      	ldr	r2, [r4, #0]
 80079a6:	07d2      	lsls	r2, r2, #31
 80079a8:	d501      	bpl.n	80079ae <_printf_float+0x162>
 80079aa:	3301      	adds	r3, #1
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d09b      	beq.n	80078ee <_printf_float+0xa2>
 80079b6:	232d      	movs	r3, #45	; 0x2d
 80079b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079bc:	e797      	b.n	80078ee <_printf_float+0xa2>
 80079be:	2947      	cmp	r1, #71	; 0x47
 80079c0:	d1bc      	bne.n	800793c <_printf_float+0xf0>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1ba      	bne.n	800793c <_printf_float+0xf0>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e7b7      	b.n	800793a <_printf_float+0xee>
 80079ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80079ce:	d118      	bne.n	8007a02 <_printf_float+0x1b6>
 80079d0:	2900      	cmp	r1, #0
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	dd0b      	ble.n	80079ee <_printf_float+0x1a2>
 80079d6:	6121      	str	r1, [r4, #16]
 80079d8:	b913      	cbnz	r3, 80079e0 <_printf_float+0x194>
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	07d0      	lsls	r0, r2, #31
 80079de:	d502      	bpl.n	80079e6 <_printf_float+0x19a>
 80079e0:	3301      	adds	r3, #1
 80079e2:	440b      	add	r3, r1
 80079e4:	6123      	str	r3, [r4, #16]
 80079e6:	f04f 0a00 	mov.w	sl, #0
 80079ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80079ec:	e7df      	b.n	80079ae <_printf_float+0x162>
 80079ee:	b913      	cbnz	r3, 80079f6 <_printf_float+0x1aa>
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	07d2      	lsls	r2, r2, #31
 80079f4:	d501      	bpl.n	80079fa <_printf_float+0x1ae>
 80079f6:	3302      	adds	r3, #2
 80079f8:	e7f4      	b.n	80079e4 <_printf_float+0x198>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7f2      	b.n	80079e4 <_printf_float+0x198>
 80079fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a04:	4299      	cmp	r1, r3
 8007a06:	db05      	blt.n	8007a14 <_printf_float+0x1c8>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	6121      	str	r1, [r4, #16]
 8007a0c:	07d8      	lsls	r0, r3, #31
 8007a0e:	d5ea      	bpl.n	80079e6 <_printf_float+0x19a>
 8007a10:	1c4b      	adds	r3, r1, #1
 8007a12:	e7e7      	b.n	80079e4 <_printf_float+0x198>
 8007a14:	2900      	cmp	r1, #0
 8007a16:	bfcc      	ite	gt
 8007a18:	2201      	movgt	r2, #1
 8007a1a:	f1c1 0202 	rsble	r2, r1, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	e7e0      	b.n	80079e4 <_printf_float+0x198>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	055a      	lsls	r2, r3, #21
 8007a26:	d407      	bmi.n	8007a38 <_printf_float+0x1ec>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	d12b      	bne.n	8007a8e <_printf_float+0x242>
 8007a36:	e764      	b.n	8007902 <_printf_float+0xb6>
 8007a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a3c:	f240 80dd 	bls.w	8007bfa <_printf_float+0x3ae>
 8007a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a44:	2200      	movs	r2, #0
 8007a46:	2300      	movs	r3, #0
 8007a48:	f7f8 ffae 	bl	80009a8 <__aeabi_dcmpeq>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d033      	beq.n	8007ab8 <_printf_float+0x26c>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	4a35      	ldr	r2, [pc, #212]	; (8007b2c <_printf_float+0x2e0>)
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f af51 	beq.w	8007902 <_printf_float+0xb6>
 8007a60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a64:	429a      	cmp	r2, r3
 8007a66:	db02      	blt.n	8007a6e <_printf_float+0x222>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	07d8      	lsls	r0, r3, #31
 8007a6c:	d50f      	bpl.n	8007a8e <_printf_float+0x242>
 8007a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f af42 	beq.w	8007902 <_printf_float+0xb6>
 8007a7e:	f04f 0800 	mov.w	r8, #0
 8007a82:	f104 091a 	add.w	r9, r4, #26
 8007a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	4543      	cmp	r3, r8
 8007a8c:	dc09      	bgt.n	8007aa2 <_printf_float+0x256>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	079b      	lsls	r3, r3, #30
 8007a92:	f100 8102 	bmi.w	8007c9a <_printf_float+0x44e>
 8007a96:	68e0      	ldr	r0, [r4, #12]
 8007a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a9a:	4298      	cmp	r0, r3
 8007a9c:	bfb8      	it	lt
 8007a9e:	4618      	movlt	r0, r3
 8007aa0:	e731      	b.n	8007906 <_printf_float+0xba>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	464a      	mov	r2, r9
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f af28 	beq.w	8007902 <_printf_float+0xb6>
 8007ab2:	f108 0801 	add.w	r8, r8, #1
 8007ab6:	e7e6      	b.n	8007a86 <_printf_float+0x23a>
 8007ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dc38      	bgt.n	8007b30 <_printf_float+0x2e4>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <_printf_float+0x2e0>)
 8007ac6:	47b8      	blx	r7
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f43f af1a 	beq.w	8007902 <_printf_float+0xb6>
 8007ace:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	d102      	bne.n	8007adc <_printf_float+0x290>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	07d9      	lsls	r1, r3, #31
 8007ada:	d5d8      	bpl.n	8007a8e <_printf_float+0x242>
 8007adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f af0b 	beq.w	8007902 <_printf_float+0xb6>
 8007aec:	f04f 0900 	mov.w	r9, #0
 8007af0:	f104 0a1a 	add.w	sl, r4, #26
 8007af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af6:	425b      	negs	r3, r3
 8007af8:	454b      	cmp	r3, r9
 8007afa:	dc01      	bgt.n	8007b00 <_printf_float+0x2b4>
 8007afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007afe:	e794      	b.n	8007a2a <_printf_float+0x1de>
 8007b00:	2301      	movs	r3, #1
 8007b02:	4652      	mov	r2, sl
 8007b04:	4631      	mov	r1, r6
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b8      	blx	r7
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f43f aef9 	beq.w	8007902 <_printf_float+0xb6>
 8007b10:	f109 0901 	add.w	r9, r9, #1
 8007b14:	e7ee      	b.n	8007af4 <_printf_float+0x2a8>
 8007b16:	bf00      	nop
 8007b18:	7fefffff 	.word	0x7fefffff
 8007b1c:	0800a430 	.word	0x0800a430
 8007b20:	0800a434 	.word	0x0800a434
 8007b24:	0800a43c 	.word	0x0800a43c
 8007b28:	0800a438 	.word	0x0800a438
 8007b2c:	0800a440 	.word	0x0800a440
 8007b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bfa8      	it	ge
 8007b38:	461a      	movge	r2, r3
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	4691      	mov	r9, r2
 8007b3e:	dc37      	bgt.n	8007bb0 <_printf_float+0x364>
 8007b40:	f04f 0b00 	mov.w	fp, #0
 8007b44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b48:	f104 021a 	add.w	r2, r4, #26
 8007b4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007b50:	ebaa 0309 	sub.w	r3, sl, r9
 8007b54:	455b      	cmp	r3, fp
 8007b56:	dc33      	bgt.n	8007bc0 <_printf_float+0x374>
 8007b58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	db3b      	blt.n	8007bd8 <_printf_float+0x38c>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	07da      	lsls	r2, r3, #31
 8007b64:	d438      	bmi.n	8007bd8 <_printf_float+0x38c>
 8007b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b6a:	eba3 020a 	sub.w	r2, r3, sl
 8007b6e:	eba3 0901 	sub.w	r9, r3, r1
 8007b72:	4591      	cmp	r9, r2
 8007b74:	bfa8      	it	ge
 8007b76:	4691      	movge	r9, r2
 8007b78:	f1b9 0f00 	cmp.w	r9, #0
 8007b7c:	dc34      	bgt.n	8007be8 <_printf_float+0x39c>
 8007b7e:	f04f 0800 	mov.w	r8, #0
 8007b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b86:	f104 0a1a 	add.w	sl, r4, #26
 8007b8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	eba3 0309 	sub.w	r3, r3, r9
 8007b94:	4543      	cmp	r3, r8
 8007b96:	f77f af7a 	ble.w	8007a8e <_printf_float+0x242>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4652      	mov	r2, sl
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f aeac 	beq.w	8007902 <_printf_float+0xb6>
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	e7ec      	b.n	8007b8a <_printf_float+0x33e>
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d1c0      	bne.n	8007b40 <_printf_float+0x2f4>
 8007bbe:	e6a0      	b.n	8007902 <_printf_float+0xb6>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f ae99 	beq.w	8007902 <_printf_float+0xb6>
 8007bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bd2:	f10b 0b01 	add.w	fp, fp, #1
 8007bd6:	e7b9      	b.n	8007b4c <_printf_float+0x300>
 8007bd8:	4631      	mov	r1, r6
 8007bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	d1bf      	bne.n	8007b66 <_printf_float+0x31a>
 8007be6:	e68c      	b.n	8007902 <_printf_float+0xb6>
 8007be8:	464b      	mov	r3, r9
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	eb08 020a 	add.w	r2, r8, sl
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d1c2      	bne.n	8007b7e <_printf_float+0x332>
 8007bf8:	e683      	b.n	8007902 <_printf_float+0xb6>
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bfc:	2a01      	cmp	r2, #1
 8007bfe:	dc01      	bgt.n	8007c04 <_printf_float+0x3b8>
 8007c00:	07db      	lsls	r3, r3, #31
 8007c02:	d537      	bpl.n	8007c74 <_printf_float+0x428>
 8007c04:	2301      	movs	r3, #1
 8007c06:	4642      	mov	r2, r8
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f43f ae77 	beq.w	8007902 <_printf_float+0xb6>
 8007c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f ae6f 	beq.w	8007902 <_printf_float+0xb6>
 8007c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f7f8 febc 	bl	80009a8 <__aeabi_dcmpeq>
 8007c30:	b9d8      	cbnz	r0, 8007c6a <_printf_float+0x41e>
 8007c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c34:	f108 0201 	add.w	r2, r8, #1
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	d10e      	bne.n	8007c62 <_printf_float+0x416>
 8007c44:	e65d      	b.n	8007902 <_printf_float+0xb6>
 8007c46:	2301      	movs	r3, #1
 8007c48:	464a      	mov	r2, r9
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae56 	beq.w	8007902 <_printf_float+0xb6>
 8007c56:	f108 0801 	add.w	r8, r8, #1
 8007c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4543      	cmp	r3, r8
 8007c60:	dcf1      	bgt.n	8007c46 <_printf_float+0x3fa>
 8007c62:	4653      	mov	r3, sl
 8007c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c68:	e6e0      	b.n	8007a2c <_printf_float+0x1e0>
 8007c6a:	f04f 0800 	mov.w	r8, #0
 8007c6e:	f104 091a 	add.w	r9, r4, #26
 8007c72:	e7f2      	b.n	8007c5a <_printf_float+0x40e>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4642      	mov	r2, r8
 8007c78:	e7df      	b.n	8007c3a <_printf_float+0x3ee>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	464a      	mov	r2, r9
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f ae3c 	beq.w	8007902 <_printf_float+0xb6>
 8007c8a:	f108 0801 	add.w	r8, r8, #1
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c92:	1a5b      	subs	r3, r3, r1
 8007c94:	4543      	cmp	r3, r8
 8007c96:	dcf0      	bgt.n	8007c7a <_printf_float+0x42e>
 8007c98:	e6fd      	b.n	8007a96 <_printf_float+0x24a>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	f104 0919 	add.w	r9, r4, #25
 8007ca2:	e7f4      	b.n	8007c8e <_printf_float+0x442>

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4616      	mov	r6, r2
 8007caa:	4699      	mov	r9, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	bfb8      	it	lt
 8007cb6:	4613      	movlt	r3, r2
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cc4:	b10a      	cbz	r2, 8007cca <_printf_common+0x26>
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0699      	lsls	r1, r3, #26
 8007cce:	bf42      	ittt	mi
 8007cd0:	6833      	ldrmi	r3, [r6, #0]
 8007cd2:	3302      	addmi	r3, #2
 8007cd4:	6033      	strmi	r3, [r6, #0]
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f015 0506 	ands.w	r5, r5, #6
 8007cdc:	d106      	bne.n	8007cec <_printf_common+0x48>
 8007cde:	f104 0a19 	add.w	sl, r4, #25
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc28      	bgt.n	8007d3e <_printf_common+0x9a>
 8007cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cf0:	1e13      	subs	r3, r2, #0
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	bf18      	it	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	0692      	lsls	r2, r2, #26
 8007cfa:	d42d      	bmi.n	8007d58 <_printf_common+0xb4>
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d04:	47c0      	blx	r8
 8007d06:	3001      	adds	r0, #1
 8007d08:	d020      	beq.n	8007d4c <_printf_common+0xa8>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	68e5      	ldr	r5, [r4, #12]
 8007d0e:	f003 0306 	and.w	r3, r3, #6
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	bf18      	it	ne
 8007d16:	2500      	movne	r5, #0
 8007d18:	6832      	ldr	r2, [r6, #0]
 8007d1a:	f04f 0600 	mov.w	r6, #0
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	bf08      	it	eq
 8007d22:	1aad      	subeq	r5, r5, r2
 8007d24:	6922      	ldr	r2, [r4, #16]
 8007d26:	bf08      	it	eq
 8007d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	bfc4      	itt	gt
 8007d30:	1a9b      	subgt	r3, r3, r2
 8007d32:	18ed      	addgt	r5, r5, r3
 8007d34:	341a      	adds	r4, #26
 8007d36:	42b5      	cmp	r5, r6
 8007d38:	d11a      	bne.n	8007d70 <_printf_common+0xcc>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e008      	b.n	8007d50 <_printf_common+0xac>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4652      	mov	r2, sl
 8007d42:	4649      	mov	r1, r9
 8007d44:	4638      	mov	r0, r7
 8007d46:	47c0      	blx	r8
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d103      	bne.n	8007d54 <_printf_common+0xb0>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d54:	3501      	adds	r5, #1
 8007d56:	e7c4      	b.n	8007ce2 <_printf_common+0x3e>
 8007d58:	2030      	movs	r0, #48	; 0x30
 8007d5a:	18e1      	adds	r1, r4, r3
 8007d5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d66:	4422      	add	r2, r4
 8007d68:	3302      	adds	r3, #2
 8007d6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d6e:	e7c5      	b.n	8007cfc <_printf_common+0x58>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4622      	mov	r2, r4
 8007d74:	4649      	mov	r1, r9
 8007d76:	4638      	mov	r0, r7
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d0e6      	beq.n	8007d4c <_printf_common+0xa8>
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7d9      	b.n	8007d36 <_printf_common+0x92>
	...

08007d84 <_printf_i>:
 8007d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	7e0f      	ldrb	r7, [r1, #24]
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	2f78      	cmp	r7, #120	; 0x78
 8007d8e:	4680      	mov	r8, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	469a      	mov	sl, r3
 8007d94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d9a:	d807      	bhi.n	8007dac <_printf_i+0x28>
 8007d9c:	2f62      	cmp	r7, #98	; 0x62
 8007d9e:	d80a      	bhi.n	8007db6 <_printf_i+0x32>
 8007da0:	2f00      	cmp	r7, #0
 8007da2:	f000 80d9 	beq.w	8007f58 <_printf_i+0x1d4>
 8007da6:	2f58      	cmp	r7, #88	; 0x58
 8007da8:	f000 80a4 	beq.w	8007ef4 <_printf_i+0x170>
 8007dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007db4:	e03a      	b.n	8007e2c <_printf_i+0xa8>
 8007db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dba:	2b15      	cmp	r3, #21
 8007dbc:	d8f6      	bhi.n	8007dac <_printf_i+0x28>
 8007dbe:	a101      	add	r1, pc, #4	; (adr r1, 8007dc4 <_printf_i+0x40>)
 8007dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc4:	08007e1d 	.word	0x08007e1d
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007dad 	.word	0x08007dad
 8007dd0:	08007dad 	.word	0x08007dad
 8007dd4:	08007dad 	.word	0x08007dad
 8007dd8:	08007dad 	.word	0x08007dad
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007dad 	.word	0x08007dad
 8007de4:	08007dad 	.word	0x08007dad
 8007de8:	08007dad 	.word	0x08007dad
 8007dec:	08007dad 	.word	0x08007dad
 8007df0:	08007f3f 	.word	0x08007f3f
 8007df4:	08007e61 	.word	0x08007e61
 8007df8:	08007f21 	.word	0x08007f21
 8007dfc:	08007dad 	.word	0x08007dad
 8007e00:	08007dad 	.word	0x08007dad
 8007e04:	08007f61 	.word	0x08007f61
 8007e08:	08007dad 	.word	0x08007dad
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007dad 	.word	0x08007dad
 8007e14:	08007dad 	.word	0x08007dad
 8007e18:	08007f29 	.word	0x08007f29
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	1d1a      	adds	r2, r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	602a      	str	r2, [r5, #0]
 8007e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0a4      	b.n	8007f7a <_printf_i+0x1f6>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	6829      	ldr	r1, [r5, #0]
 8007e34:	0606      	lsls	r6, r0, #24
 8007e36:	f101 0304 	add.w	r3, r1, #4
 8007e3a:	d50a      	bpl.n	8007e52 <_printf_i+0xce>
 8007e3c:	680e      	ldr	r6, [r1, #0]
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	2e00      	cmp	r6, #0
 8007e42:	da03      	bge.n	8007e4c <_printf_i+0xc8>
 8007e44:	232d      	movs	r3, #45	; 0x2d
 8007e46:	4276      	negs	r6, r6
 8007e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4c:	230a      	movs	r3, #10
 8007e4e:	485e      	ldr	r0, [pc, #376]	; (8007fc8 <_printf_i+0x244>)
 8007e50:	e019      	b.n	8007e86 <_printf_i+0x102>
 8007e52:	680e      	ldr	r6, [r1, #0]
 8007e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	bf18      	it	ne
 8007e5c:	b236      	sxthne	r6, r6
 8007e5e:	e7ef      	b.n	8007e40 <_printf_i+0xbc>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	6820      	ldr	r0, [r4, #0]
 8007e64:	1d19      	adds	r1, r3, #4
 8007e66:	6029      	str	r1, [r5, #0]
 8007e68:	0601      	lsls	r1, r0, #24
 8007e6a:	d501      	bpl.n	8007e70 <_printf_i+0xec>
 8007e6c:	681e      	ldr	r6, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <_printf_i+0xf2>
 8007e70:	0646      	lsls	r6, r0, #25
 8007e72:	d5fb      	bpl.n	8007e6c <_printf_i+0xe8>
 8007e74:	881e      	ldrh	r6, [r3, #0]
 8007e76:	2f6f      	cmp	r7, #111	; 0x6f
 8007e78:	bf0c      	ite	eq
 8007e7a:	2308      	moveq	r3, #8
 8007e7c:	230a      	movne	r3, #10
 8007e7e:	4852      	ldr	r0, [pc, #328]	; (8007fc8 <_printf_i+0x244>)
 8007e80:	2100      	movs	r1, #0
 8007e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e86:	6865      	ldr	r5, [r4, #4]
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	bfa8      	it	ge
 8007e8c:	6821      	ldrge	r1, [r4, #0]
 8007e8e:	60a5      	str	r5, [r4, #8]
 8007e90:	bfa4      	itt	ge
 8007e92:	f021 0104 	bicge.w	r1, r1, #4
 8007e96:	6021      	strge	r1, [r4, #0]
 8007e98:	b90e      	cbnz	r6, 8007e9e <_printf_i+0x11a>
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	d04d      	beq.n	8007f3a <_printf_i+0x1b6>
 8007e9e:	4615      	mov	r5, r2
 8007ea0:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ea4:	fb03 6711 	mls	r7, r3, r1, r6
 8007ea8:	5dc7      	ldrb	r7, [r0, r7]
 8007eaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007eae:	4637      	mov	r7, r6
 8007eb0:	42bb      	cmp	r3, r7
 8007eb2:	460e      	mov	r6, r1
 8007eb4:	d9f4      	bls.n	8007ea0 <_printf_i+0x11c>
 8007eb6:	2b08      	cmp	r3, #8
 8007eb8:	d10b      	bne.n	8007ed2 <_printf_i+0x14e>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	07de      	lsls	r6, r3, #31
 8007ebe:	d508      	bpl.n	8007ed2 <_printf_i+0x14e>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	6861      	ldr	r1, [r4, #4]
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	bfde      	ittt	le
 8007ec8:	2330      	movle	r3, #48	; 0x30
 8007eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ece:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ed2:	1b52      	subs	r2, r2, r5
 8007ed4:	6122      	str	r2, [r4, #16]
 8007ed6:	464b      	mov	r3, r9
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4640      	mov	r0, r8
 8007edc:	f8cd a000 	str.w	sl, [sp]
 8007ee0:	aa03      	add	r2, sp, #12
 8007ee2:	f7ff fedf 	bl	8007ca4 <_printf_common>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d14c      	bne.n	8007f84 <_printf_i+0x200>
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b004      	add	sp, #16
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	4834      	ldr	r0, [pc, #208]	; (8007fc8 <_printf_i+0x244>)
 8007ef6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007efa:	6829      	ldr	r1, [r5, #0]
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f02:	6029      	str	r1, [r5, #0]
 8007f04:	061d      	lsls	r5, r3, #24
 8007f06:	d514      	bpl.n	8007f32 <_printf_i+0x1ae>
 8007f08:	07df      	lsls	r7, r3, #31
 8007f0a:	bf44      	itt	mi
 8007f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f10:	6023      	strmi	r3, [r4, #0]
 8007f12:	b91e      	cbnz	r6, 8007f1c <_printf_i+0x198>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	f023 0320 	bic.w	r3, r3, #32
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	e7af      	b.n	8007e80 <_printf_i+0xfc>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	f043 0320 	orr.w	r3, r3, #32
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	2378      	movs	r3, #120	; 0x78
 8007f2a:	4828      	ldr	r0, [pc, #160]	; (8007fcc <_printf_i+0x248>)
 8007f2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f30:	e7e3      	b.n	8007efa <_printf_i+0x176>
 8007f32:	0659      	lsls	r1, r3, #25
 8007f34:	bf48      	it	mi
 8007f36:	b2b6      	uxthmi	r6, r6
 8007f38:	e7e6      	b.n	8007f08 <_printf_i+0x184>
 8007f3a:	4615      	mov	r5, r2
 8007f3c:	e7bb      	b.n	8007eb6 <_printf_i+0x132>
 8007f3e:	682b      	ldr	r3, [r5, #0]
 8007f40:	6826      	ldr	r6, [r4, #0]
 8007f42:	1d18      	adds	r0, r3, #4
 8007f44:	6961      	ldr	r1, [r4, #20]
 8007f46:	6028      	str	r0, [r5, #0]
 8007f48:	0635      	lsls	r5, r6, #24
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	d501      	bpl.n	8007f52 <_printf_i+0x1ce>
 8007f4e:	6019      	str	r1, [r3, #0]
 8007f50:	e002      	b.n	8007f58 <_printf_i+0x1d4>
 8007f52:	0670      	lsls	r0, r6, #25
 8007f54:	d5fb      	bpl.n	8007f4e <_printf_i+0x1ca>
 8007f56:	8019      	strh	r1, [r3, #0]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4615      	mov	r5, r2
 8007f5c:	6123      	str	r3, [r4, #16]
 8007f5e:	e7ba      	b.n	8007ed6 <_printf_i+0x152>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	2100      	movs	r1, #0
 8007f64:	1d1a      	adds	r2, r3, #4
 8007f66:	602a      	str	r2, [r5, #0]
 8007f68:	681d      	ldr	r5, [r3, #0]
 8007f6a:	6862      	ldr	r2, [r4, #4]
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 ff01 	bl	8008d74 <memchr>
 8007f72:	b108      	cbz	r0, 8007f78 <_printf_i+0x1f4>
 8007f74:	1b40      	subs	r0, r0, r5
 8007f76:	6060      	str	r0, [r4, #4]
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f82:	e7a8      	b.n	8007ed6 <_printf_i+0x152>
 8007f84:	462a      	mov	r2, r5
 8007f86:	4649      	mov	r1, r9
 8007f88:	4640      	mov	r0, r8
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	47d0      	blx	sl
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d0ab      	beq.n	8007eea <_printf_i+0x166>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	079b      	lsls	r3, r3, #30
 8007f96:	d413      	bmi.n	8007fc0 <_printf_i+0x23c>
 8007f98:	68e0      	ldr	r0, [r4, #12]
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	4298      	cmp	r0, r3
 8007f9e:	bfb8      	it	lt
 8007fa0:	4618      	movlt	r0, r3
 8007fa2:	e7a4      	b.n	8007eee <_printf_i+0x16a>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4640      	mov	r0, r8
 8007fac:	47d0      	blx	sl
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d09b      	beq.n	8007eea <_printf_i+0x166>
 8007fb2:	3501      	adds	r5, #1
 8007fb4:	68e3      	ldr	r3, [r4, #12]
 8007fb6:	9903      	ldr	r1, [sp, #12]
 8007fb8:	1a5b      	subs	r3, r3, r1
 8007fba:	42ab      	cmp	r3, r5
 8007fbc:	dcf2      	bgt.n	8007fa4 <_printf_i+0x220>
 8007fbe:	e7eb      	b.n	8007f98 <_printf_i+0x214>
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	f104 0619 	add.w	r6, r4, #25
 8007fc6:	e7f5      	b.n	8007fb4 <_printf_i+0x230>
 8007fc8:	0800a442 	.word	0x0800a442
 8007fcc:	0800a453 	.word	0x0800a453

08007fd0 <realloc>:
 8007fd0:	4b02      	ldr	r3, [pc, #8]	; (8007fdc <realloc+0xc>)
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	f001 bb4c 	b.w	8009674 <_realloc_r>
 8007fdc:	200000c4 	.word	0x200000c4

08007fe0 <_raise_r>:
 8007fe0:	291f      	cmp	r1, #31
 8007fe2:	b538      	push	{r3, r4, r5, lr}
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	d904      	bls.n	8007ff4 <_raise_r+0x14>
 8007fea:	2316      	movs	r3, #22
 8007fec:	6003      	str	r3, [r0, #0]
 8007fee:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ff6:	b112      	cbz	r2, 8007ffe <_raise_r+0x1e>
 8007ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ffc:	b94b      	cbnz	r3, 8008012 <_raise_r+0x32>
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f830 	bl	8008064 <_getpid_r>
 8008004:	462a      	mov	r2, r5
 8008006:	4601      	mov	r1, r0
 8008008:	4620      	mov	r0, r4
 800800a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800e:	f000 b817 	b.w	8008040 <_kill_r>
 8008012:	2b01      	cmp	r3, #1
 8008014:	d00a      	beq.n	800802c <_raise_r+0x4c>
 8008016:	1c59      	adds	r1, r3, #1
 8008018:	d103      	bne.n	8008022 <_raise_r+0x42>
 800801a:	2316      	movs	r3, #22
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	2001      	movs	r0, #1
 8008020:	e7e7      	b.n	8007ff2 <_raise_r+0x12>
 8008022:	2400      	movs	r4, #0
 8008024:	4628      	mov	r0, r5
 8008026:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800802a:	4798      	blx	r3
 800802c:	2000      	movs	r0, #0
 800802e:	e7e0      	b.n	8007ff2 <_raise_r+0x12>

08008030 <raise>:
 8008030:	4b02      	ldr	r3, [pc, #8]	; (800803c <raise+0xc>)
 8008032:	4601      	mov	r1, r0
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	f7ff bfd3 	b.w	8007fe0 <_raise_r>
 800803a:	bf00      	nop
 800803c:	200000c4 	.word	0x200000c4

08008040 <_kill_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	2300      	movs	r3, #0
 8008044:	4d06      	ldr	r5, [pc, #24]	; (8008060 <_kill_r+0x20>)
 8008046:	4604      	mov	r4, r0
 8008048:	4608      	mov	r0, r1
 800804a:	4611      	mov	r1, r2
 800804c:	602b      	str	r3, [r5, #0]
 800804e:	f7fb ffa2 	bl	8003f96 <_kill>
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	d102      	bne.n	800805c <_kill_r+0x1c>
 8008056:	682b      	ldr	r3, [r5, #0]
 8008058:	b103      	cbz	r3, 800805c <_kill_r+0x1c>
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	bd38      	pop	{r3, r4, r5, pc}
 800805e:	bf00      	nop
 8008060:	20000e38 	.word	0x20000e38

08008064 <_getpid_r>:
 8008064:	f7fb bf90 	b.w	8003f88 <_getpid>

08008068 <quorem>:
 8008068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	6903      	ldr	r3, [r0, #16]
 800806e:	690c      	ldr	r4, [r1, #16]
 8008070:	4607      	mov	r7, r0
 8008072:	42a3      	cmp	r3, r4
 8008074:	f2c0 8082 	blt.w	800817c <quorem+0x114>
 8008078:	3c01      	subs	r4, #1
 800807a:	f100 0514 	add.w	r5, r0, #20
 800807e:	f101 0814 	add.w	r8, r1, #20
 8008082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800808c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008090:	3301      	adds	r3, #1
 8008092:	429a      	cmp	r2, r3
 8008094:	fbb2 f6f3 	udiv	r6, r2, r3
 8008098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800809c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080a0:	d331      	bcc.n	8008106 <quorem+0x9e>
 80080a2:	f04f 0e00 	mov.w	lr, #0
 80080a6:	4640      	mov	r0, r8
 80080a8:	46ac      	mov	ip, r5
 80080aa:	46f2      	mov	sl, lr
 80080ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80080b0:	b293      	uxth	r3, r2
 80080b2:	fb06 e303 	mla	r3, r6, r3, lr
 80080b6:	0c12      	lsrs	r2, r2, #16
 80080b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080bc:	b29b      	uxth	r3, r3
 80080be:	fb06 e202 	mla	r2, r6, r2, lr
 80080c2:	ebaa 0303 	sub.w	r3, sl, r3
 80080c6:	f8dc a000 	ldr.w	sl, [ip]
 80080ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080ce:	fa1f fa8a 	uxth.w	sl, sl
 80080d2:	4453      	add	r3, sl
 80080d4:	f8dc a000 	ldr.w	sl, [ip]
 80080d8:	b292      	uxth	r2, r2
 80080da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080e8:	4581      	cmp	r9, r0
 80080ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080ee:	f84c 3b04 	str.w	r3, [ip], #4
 80080f2:	d2db      	bcs.n	80080ac <quorem+0x44>
 80080f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80080f8:	b92b      	cbnz	r3, 8008106 <quorem+0x9e>
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	3b04      	subs	r3, #4
 80080fe:	429d      	cmp	r5, r3
 8008100:	461a      	mov	r2, r3
 8008102:	d32f      	bcc.n	8008164 <quorem+0xfc>
 8008104:	613c      	str	r4, [r7, #16]
 8008106:	4638      	mov	r0, r7
 8008108:	f001 f8c0 	bl	800928c <__mcmp>
 800810c:	2800      	cmp	r0, #0
 800810e:	db25      	blt.n	800815c <quorem+0xf4>
 8008110:	4628      	mov	r0, r5
 8008112:	f04f 0c00 	mov.w	ip, #0
 8008116:	3601      	adds	r6, #1
 8008118:	f858 1b04 	ldr.w	r1, [r8], #4
 800811c:	f8d0 e000 	ldr.w	lr, [r0]
 8008120:	b28b      	uxth	r3, r1
 8008122:	ebac 0303 	sub.w	r3, ip, r3
 8008126:	fa1f f28e 	uxth.w	r2, lr
 800812a:	4413      	add	r3, r2
 800812c:	0c0a      	lsrs	r2, r1, #16
 800812e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008132:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800813c:	45c1      	cmp	r9, r8
 800813e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008142:	f840 3b04 	str.w	r3, [r0], #4
 8008146:	d2e7      	bcs.n	8008118 <quorem+0xb0>
 8008148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800814c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008150:	b922      	cbnz	r2, 800815c <quorem+0xf4>
 8008152:	3b04      	subs	r3, #4
 8008154:	429d      	cmp	r5, r3
 8008156:	461a      	mov	r2, r3
 8008158:	d30a      	bcc.n	8008170 <quorem+0x108>
 800815a:	613c      	str	r4, [r7, #16]
 800815c:	4630      	mov	r0, r6
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	3b04      	subs	r3, #4
 8008168:	2a00      	cmp	r2, #0
 800816a:	d1cb      	bne.n	8008104 <quorem+0x9c>
 800816c:	3c01      	subs	r4, #1
 800816e:	e7c6      	b.n	80080fe <quorem+0x96>
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	3b04      	subs	r3, #4
 8008174:	2a00      	cmp	r2, #0
 8008176:	d1f0      	bne.n	800815a <quorem+0xf2>
 8008178:	3c01      	subs	r4, #1
 800817a:	e7eb      	b.n	8008154 <quorem+0xec>
 800817c:	2000      	movs	r0, #0
 800817e:	e7ee      	b.n	800815e <quorem+0xf6>

08008180 <_dtoa_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4616      	mov	r6, r2
 8008186:	461f      	mov	r7, r3
 8008188:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800818a:	b099      	sub	sp, #100	; 0x64
 800818c:	4605      	mov	r5, r0
 800818e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008192:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008196:	b974      	cbnz	r4, 80081b6 <_dtoa_r+0x36>
 8008198:	2010      	movs	r0, #16
 800819a:	f000 fde3 	bl	8008d64 <malloc>
 800819e:	4602      	mov	r2, r0
 80081a0:	6268      	str	r0, [r5, #36]	; 0x24
 80081a2:	b920      	cbnz	r0, 80081ae <_dtoa_r+0x2e>
 80081a4:	21ea      	movs	r1, #234	; 0xea
 80081a6:	4ba8      	ldr	r3, [pc, #672]	; (8008448 <_dtoa_r+0x2c8>)
 80081a8:	48a8      	ldr	r0, [pc, #672]	; (800844c <_dtoa_r+0x2cc>)
 80081aa:	f001 faa3 	bl	80096f4 <__assert_func>
 80081ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b2:	6004      	str	r4, [r0, #0]
 80081b4:	60c4      	str	r4, [r0, #12]
 80081b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b8:	6819      	ldr	r1, [r3, #0]
 80081ba:	b151      	cbz	r1, 80081d2 <_dtoa_r+0x52>
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	2301      	movs	r3, #1
 80081c0:	4093      	lsls	r3, r2
 80081c2:	604a      	str	r2, [r1, #4]
 80081c4:	608b      	str	r3, [r1, #8]
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 fe22 	bl	8008e10 <_Bfree>
 80081cc:	2200      	movs	r2, #0
 80081ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	1e3b      	subs	r3, r7, #0
 80081d4:	bfaf      	iteee	ge
 80081d6:	2300      	movge	r3, #0
 80081d8:	2201      	movlt	r2, #1
 80081da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081de:	9305      	strlt	r3, [sp, #20]
 80081e0:	bfa8      	it	ge
 80081e2:	f8c8 3000 	strge.w	r3, [r8]
 80081e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80081ea:	4b99      	ldr	r3, [pc, #612]	; (8008450 <_dtoa_r+0x2d0>)
 80081ec:	bfb8      	it	lt
 80081ee:	f8c8 2000 	strlt.w	r2, [r8]
 80081f2:	ea33 0309 	bics.w	r3, r3, r9
 80081f6:	d119      	bne.n	800822c <_dtoa_r+0xac>
 80081f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80081fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008204:	4333      	orrs	r3, r6
 8008206:	f000 857f 	beq.w	8008d08 <_dtoa_r+0xb88>
 800820a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800820c:	b953      	cbnz	r3, 8008224 <_dtoa_r+0xa4>
 800820e:	4b91      	ldr	r3, [pc, #580]	; (8008454 <_dtoa_r+0x2d4>)
 8008210:	e022      	b.n	8008258 <_dtoa_r+0xd8>
 8008212:	4b91      	ldr	r3, [pc, #580]	; (8008458 <_dtoa_r+0x2d8>)
 8008214:	9303      	str	r3, [sp, #12]
 8008216:	3308      	adds	r3, #8
 8008218:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	9803      	ldr	r0, [sp, #12]
 800821e:	b019      	add	sp, #100	; 0x64
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	4b8b      	ldr	r3, [pc, #556]	; (8008454 <_dtoa_r+0x2d4>)
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	3303      	adds	r3, #3
 800822a:	e7f5      	b.n	8008218 <_dtoa_r+0x98>
 800822c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008230:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	f7f8 fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008240:	4680      	mov	r8, r0
 8008242:	b158      	cbz	r0, 800825c <_dtoa_r+0xdc>
 8008244:	2301      	movs	r3, #1
 8008246:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8558 	beq.w	8008d02 <_dtoa_r+0xb82>
 8008252:	4882      	ldr	r0, [pc, #520]	; (800845c <_dtoa_r+0x2dc>)
 8008254:	6018      	str	r0, [r3, #0]
 8008256:	1e43      	subs	r3, r0, #1
 8008258:	9303      	str	r3, [sp, #12]
 800825a:	e7df      	b.n	800821c <_dtoa_r+0x9c>
 800825c:	ab16      	add	r3, sp, #88	; 0x58
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	ab17      	add	r3, sp, #92	; 0x5c
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4628      	mov	r0, r5
 8008266:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800826a:	f001 f8b7 	bl	80093dc <__d2b>
 800826e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008272:	4683      	mov	fp, r0
 8008274:	2c00      	cmp	r4, #0
 8008276:	d07f      	beq.n	8008378 <_dtoa_r+0x1f8>
 8008278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800827c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800827e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008286:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800828a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800828e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008292:	2200      	movs	r2, #0
 8008294:	4b72      	ldr	r3, [pc, #456]	; (8008460 <_dtoa_r+0x2e0>)
 8008296:	f7f7 ff67 	bl	8000168 <__aeabi_dsub>
 800829a:	a365      	add	r3, pc, #404	; (adr r3, 8008430 <_dtoa_r+0x2b0>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f8 f91a 	bl	80004d8 <__aeabi_dmul>
 80082a4:	a364      	add	r3, pc, #400	; (adr r3, 8008438 <_dtoa_r+0x2b8>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f7 ff5f 	bl	800016c <__adddf3>
 80082ae:	4606      	mov	r6, r0
 80082b0:	4620      	mov	r0, r4
 80082b2:	460f      	mov	r7, r1
 80082b4:	f7f8 f8a6 	bl	8000404 <__aeabi_i2d>
 80082b8:	a361      	add	r3, pc, #388	; (adr r3, 8008440 <_dtoa_r+0x2c0>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f8 f90b 	bl	80004d8 <__aeabi_dmul>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4630      	mov	r0, r6
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f7 ff4f 	bl	800016c <__adddf3>
 80082ce:	4606      	mov	r6, r0
 80082d0:	460f      	mov	r7, r1
 80082d2:	f7f8 fbb1 	bl	8000a38 <__aeabi_d2iz>
 80082d6:	2200      	movs	r2, #0
 80082d8:	4682      	mov	sl, r0
 80082da:	2300      	movs	r3, #0
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f8 fb6c 	bl	80009bc <__aeabi_dcmplt>
 80082e4:	b148      	cbz	r0, 80082fa <_dtoa_r+0x17a>
 80082e6:	4650      	mov	r0, sl
 80082e8:	f7f8 f88c 	bl	8000404 <__aeabi_i2d>
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	f7f8 fb5a 	bl	80009a8 <__aeabi_dcmpeq>
 80082f4:	b908      	cbnz	r0, 80082fa <_dtoa_r+0x17a>
 80082f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082fa:	f1ba 0f16 	cmp.w	sl, #22
 80082fe:	d858      	bhi.n	80083b2 <_dtoa_r+0x232>
 8008300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008304:	4b57      	ldr	r3, [pc, #348]	; (8008464 <_dtoa_r+0x2e4>)
 8008306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f8 fb55 	bl	80009bc <__aeabi_dcmplt>
 8008312:	2800      	cmp	r0, #0
 8008314:	d04f      	beq.n	80083b6 <_dtoa_r+0x236>
 8008316:	2300      	movs	r3, #0
 8008318:	f10a 3aff 	add.w	sl, sl, #4294967295
 800831c:	930f      	str	r3, [sp, #60]	; 0x3c
 800831e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008320:	1b1c      	subs	r4, r3, r4
 8008322:	1e63      	subs	r3, r4, #1
 8008324:	9309      	str	r3, [sp, #36]	; 0x24
 8008326:	bf49      	itett	mi
 8008328:	f1c4 0301 	rsbmi	r3, r4, #1
 800832c:	2300      	movpl	r3, #0
 800832e:	9306      	strmi	r3, [sp, #24]
 8008330:	2300      	movmi	r3, #0
 8008332:	bf54      	ite	pl
 8008334:	9306      	strpl	r3, [sp, #24]
 8008336:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008338:	f1ba 0f00 	cmp.w	sl, #0
 800833c:	db3d      	blt.n	80083ba <_dtoa_r+0x23a>
 800833e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008340:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008344:	4453      	add	r3, sl
 8008346:	9309      	str	r3, [sp, #36]	; 0x24
 8008348:	2300      	movs	r3, #0
 800834a:	930a      	str	r3, [sp, #40]	; 0x28
 800834c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800834e:	2b09      	cmp	r3, #9
 8008350:	f200 808c 	bhi.w	800846c <_dtoa_r+0x2ec>
 8008354:	2b05      	cmp	r3, #5
 8008356:	bfc4      	itt	gt
 8008358:	3b04      	subgt	r3, #4
 800835a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800835c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800835e:	bfc8      	it	gt
 8008360:	2400      	movgt	r4, #0
 8008362:	f1a3 0302 	sub.w	r3, r3, #2
 8008366:	bfd8      	it	le
 8008368:	2401      	movle	r4, #1
 800836a:	2b03      	cmp	r3, #3
 800836c:	f200 808a 	bhi.w	8008484 <_dtoa_r+0x304>
 8008370:	e8df f003 	tbb	[pc, r3]
 8008374:	5b4d4f2d 	.word	0x5b4d4f2d
 8008378:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800837c:	441c      	add	r4, r3
 800837e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008382:	2b20      	cmp	r3, #32
 8008384:	bfc3      	ittte	gt
 8008386:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800838a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800838e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008392:	f1c3 0320 	rsble	r3, r3, #32
 8008396:	bfc6      	itte	gt
 8008398:	fa26 f000 	lsrgt.w	r0, r6, r0
 800839c:	4318      	orrgt	r0, r3
 800839e:	fa06 f003 	lslle.w	r0, r6, r3
 80083a2:	f7f8 f81f 	bl	80003e4 <__aeabi_ui2d>
 80083a6:	2301      	movs	r3, #1
 80083a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80083ac:	3c01      	subs	r4, #1
 80083ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80083b0:	e76f      	b.n	8008292 <_dtoa_r+0x112>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7b2      	b.n	800831c <_dtoa_r+0x19c>
 80083b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80083b8:	e7b1      	b.n	800831e <_dtoa_r+0x19e>
 80083ba:	9b06      	ldr	r3, [sp, #24]
 80083bc:	eba3 030a 	sub.w	r3, r3, sl
 80083c0:	9306      	str	r3, [sp, #24]
 80083c2:	f1ca 0300 	rsb	r3, sl, #0
 80083c6:	930a      	str	r3, [sp, #40]	; 0x28
 80083c8:	2300      	movs	r3, #0
 80083ca:	930e      	str	r3, [sp, #56]	; 0x38
 80083cc:	e7be      	b.n	800834c <_dtoa_r+0x1cc>
 80083ce:	2300      	movs	r3, #0
 80083d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80083d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc58      	bgt.n	800848a <_dtoa_r+0x30a>
 80083d8:	f04f 0901 	mov.w	r9, #1
 80083dc:	464b      	mov	r3, r9
 80083de:	f8cd 9020 	str.w	r9, [sp, #32]
 80083e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80083e6:	2200      	movs	r2, #0
 80083e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80083ea:	6042      	str	r2, [r0, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	f102 0614 	add.w	r6, r2, #20
 80083f2:	429e      	cmp	r6, r3
 80083f4:	6841      	ldr	r1, [r0, #4]
 80083f6:	d94e      	bls.n	8008496 <_dtoa_r+0x316>
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 fcc9 	bl	8008d90 <_Balloc>
 80083fe:	9003      	str	r0, [sp, #12]
 8008400:	2800      	cmp	r0, #0
 8008402:	d14c      	bne.n	800849e <_dtoa_r+0x31e>
 8008404:	4602      	mov	r2, r0
 8008406:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800840a:	4b17      	ldr	r3, [pc, #92]	; (8008468 <_dtoa_r+0x2e8>)
 800840c:	e6cc      	b.n	80081a8 <_dtoa_r+0x28>
 800840e:	2301      	movs	r3, #1
 8008410:	e7de      	b.n	80083d0 <_dtoa_r+0x250>
 8008412:	2300      	movs	r3, #0
 8008414:	930b      	str	r3, [sp, #44]	; 0x2c
 8008416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008418:	eb0a 0903 	add.w	r9, sl, r3
 800841c:	f109 0301 	add.w	r3, r9, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	9308      	str	r3, [sp, #32]
 8008424:	bfb8      	it	lt
 8008426:	2301      	movlt	r3, #1
 8008428:	e7dd      	b.n	80083e6 <_dtoa_r+0x266>
 800842a:	2301      	movs	r3, #1
 800842c:	e7f2      	b.n	8008414 <_dtoa_r+0x294>
 800842e:	bf00      	nop
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	0800a471 	.word	0x0800a471
 800844c:	0800a488 	.word	0x0800a488
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	0800a46d 	.word	0x0800a46d
 8008458:	0800a464 	.word	0x0800a464
 800845c:	0800a441 	.word	0x0800a441
 8008460:	3ff80000 	.word	0x3ff80000
 8008464:	0800a578 	.word	0x0800a578
 8008468:	0800a4e3 	.word	0x0800a4e3
 800846c:	2401      	movs	r4, #1
 800846e:	2300      	movs	r3, #0
 8008470:	940b      	str	r4, [sp, #44]	; 0x2c
 8008472:	9322      	str	r3, [sp, #136]	; 0x88
 8008474:	f04f 39ff 	mov.w	r9, #4294967295
 8008478:	2200      	movs	r2, #0
 800847a:	2312      	movs	r3, #18
 800847c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008480:	9223      	str	r2, [sp, #140]	; 0x8c
 8008482:	e7b0      	b.n	80083e6 <_dtoa_r+0x266>
 8008484:	2301      	movs	r3, #1
 8008486:	930b      	str	r3, [sp, #44]	; 0x2c
 8008488:	e7f4      	b.n	8008474 <_dtoa_r+0x2f4>
 800848a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800848e:	464b      	mov	r3, r9
 8008490:	f8cd 9020 	str.w	r9, [sp, #32]
 8008494:	e7a7      	b.n	80083e6 <_dtoa_r+0x266>
 8008496:	3101      	adds	r1, #1
 8008498:	6041      	str	r1, [r0, #4]
 800849a:	0052      	lsls	r2, r2, #1
 800849c:	e7a7      	b.n	80083ee <_dtoa_r+0x26e>
 800849e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084a0:	9a03      	ldr	r2, [sp, #12]
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	9b08      	ldr	r3, [sp, #32]
 80084a6:	2b0e      	cmp	r3, #14
 80084a8:	f200 80a8 	bhi.w	80085fc <_dtoa_r+0x47c>
 80084ac:	2c00      	cmp	r4, #0
 80084ae:	f000 80a5 	beq.w	80085fc <_dtoa_r+0x47c>
 80084b2:	f1ba 0f00 	cmp.w	sl, #0
 80084b6:	dd34      	ble.n	8008522 <_dtoa_r+0x3a2>
 80084b8:	4a9a      	ldr	r2, [pc, #616]	; (8008724 <_dtoa_r+0x5a4>)
 80084ba:	f00a 030f 	and.w	r3, sl, #15
 80084be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80084c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80084ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80084d2:	d016      	beq.n	8008502 <_dtoa_r+0x382>
 80084d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084d8:	4b93      	ldr	r3, [pc, #588]	; (8008728 <_dtoa_r+0x5a8>)
 80084da:	2703      	movs	r7, #3
 80084dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084e0:	f7f8 f924 	bl	800072c <__aeabi_ddiv>
 80084e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084e8:	f004 040f 	and.w	r4, r4, #15
 80084ec:	4e8e      	ldr	r6, [pc, #568]	; (8008728 <_dtoa_r+0x5a8>)
 80084ee:	b954      	cbnz	r4, 8008506 <_dtoa_r+0x386>
 80084f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084f8:	f7f8 f918 	bl	800072c <__aeabi_ddiv>
 80084fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008500:	e029      	b.n	8008556 <_dtoa_r+0x3d6>
 8008502:	2702      	movs	r7, #2
 8008504:	e7f2      	b.n	80084ec <_dtoa_r+0x36c>
 8008506:	07e1      	lsls	r1, r4, #31
 8008508:	d508      	bpl.n	800851c <_dtoa_r+0x39c>
 800850a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800850e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008512:	f7f7 ffe1 	bl	80004d8 <__aeabi_dmul>
 8008516:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800851a:	3701      	adds	r7, #1
 800851c:	1064      	asrs	r4, r4, #1
 800851e:	3608      	adds	r6, #8
 8008520:	e7e5      	b.n	80084ee <_dtoa_r+0x36e>
 8008522:	f000 80a5 	beq.w	8008670 <_dtoa_r+0x4f0>
 8008526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800852a:	f1ca 0400 	rsb	r4, sl, #0
 800852e:	4b7d      	ldr	r3, [pc, #500]	; (8008724 <_dtoa_r+0x5a4>)
 8008530:	f004 020f 	and.w	r2, r4, #15
 8008534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f7f7 ffcc 	bl	80004d8 <__aeabi_dmul>
 8008540:	2702      	movs	r7, #2
 8008542:	2300      	movs	r3, #0
 8008544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008548:	4e77      	ldr	r6, [pc, #476]	; (8008728 <_dtoa_r+0x5a8>)
 800854a:	1124      	asrs	r4, r4, #4
 800854c:	2c00      	cmp	r4, #0
 800854e:	f040 8084 	bne.w	800865a <_dtoa_r+0x4da>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1d2      	bne.n	80084fc <_dtoa_r+0x37c>
 8008556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 808b 	beq.w	8008674 <_dtoa_r+0x4f4>
 800855e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008562:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800856a:	2200      	movs	r2, #0
 800856c:	4b6f      	ldr	r3, [pc, #444]	; (800872c <_dtoa_r+0x5ac>)
 800856e:	f7f8 fa25 	bl	80009bc <__aeabi_dcmplt>
 8008572:	2800      	cmp	r0, #0
 8008574:	d07e      	beq.n	8008674 <_dtoa_r+0x4f4>
 8008576:	9b08      	ldr	r3, [sp, #32]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d07b      	beq.n	8008674 <_dtoa_r+0x4f4>
 800857c:	f1b9 0f00 	cmp.w	r9, #0
 8008580:	dd38      	ble.n	80085f4 <_dtoa_r+0x474>
 8008582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008586:	2200      	movs	r2, #0
 8008588:	4b69      	ldr	r3, [pc, #420]	; (8008730 <_dtoa_r+0x5b0>)
 800858a:	f7f7 ffa5 	bl	80004d8 <__aeabi_dmul>
 800858e:	464c      	mov	r4, r9
 8008590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008594:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008598:	3701      	adds	r7, #1
 800859a:	4638      	mov	r0, r7
 800859c:	f7f7 ff32 	bl	8000404 <__aeabi_i2d>
 80085a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a4:	f7f7 ff98 	bl	80004d8 <__aeabi_dmul>
 80085a8:	2200      	movs	r2, #0
 80085aa:	4b62      	ldr	r3, [pc, #392]	; (8008734 <_dtoa_r+0x5b4>)
 80085ac:	f7f7 fdde 	bl	800016c <__adddf3>
 80085b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80085b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085b8:	9611      	str	r6, [sp, #68]	; 0x44
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	d15d      	bne.n	800867a <_dtoa_r+0x4fa>
 80085be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c2:	2200      	movs	r2, #0
 80085c4:	4b5c      	ldr	r3, [pc, #368]	; (8008738 <_dtoa_r+0x5b8>)
 80085c6:	f7f7 fdcf 	bl	8000168 <__aeabi_dsub>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085d2:	4633      	mov	r3, r6
 80085d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085d6:	f7f8 fa0f 	bl	80009f8 <__aeabi_dcmpgt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f040 829c 	bne.w	8008b18 <_dtoa_r+0x998>
 80085e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80085ea:	f7f8 f9e7 	bl	80009bc <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f040 8290 	bne.w	8008b14 <_dtoa_r+0x994>
 80085f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80085f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f2c0 8152 	blt.w	80088a8 <_dtoa_r+0x728>
 8008604:	f1ba 0f0e 	cmp.w	sl, #14
 8008608:	f300 814e 	bgt.w	80088a8 <_dtoa_r+0x728>
 800860c:	4b45      	ldr	r3, [pc, #276]	; (8008724 <_dtoa_r+0x5a4>)
 800860e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008612:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008616:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800861a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800861c:	2b00      	cmp	r3, #0
 800861e:	f280 80db 	bge.w	80087d8 <_dtoa_r+0x658>
 8008622:	9b08      	ldr	r3, [sp, #32]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f300 80d7 	bgt.w	80087d8 <_dtoa_r+0x658>
 800862a:	f040 8272 	bne.w	8008b12 <_dtoa_r+0x992>
 800862e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008632:	2200      	movs	r2, #0
 8008634:	4b40      	ldr	r3, [pc, #256]	; (8008738 <_dtoa_r+0x5b8>)
 8008636:	f7f7 ff4f 	bl	80004d8 <__aeabi_dmul>
 800863a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863e:	f7f8 f9d1 	bl	80009e4 <__aeabi_dcmpge>
 8008642:	9c08      	ldr	r4, [sp, #32]
 8008644:	4626      	mov	r6, r4
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 8248 	bne.w	8008adc <_dtoa_r+0x95c>
 800864c:	2331      	movs	r3, #49	; 0x31
 800864e:	9f03      	ldr	r7, [sp, #12]
 8008650:	f10a 0a01 	add.w	sl, sl, #1
 8008654:	f807 3b01 	strb.w	r3, [r7], #1
 8008658:	e244      	b.n	8008ae4 <_dtoa_r+0x964>
 800865a:	07e2      	lsls	r2, r4, #31
 800865c:	d505      	bpl.n	800866a <_dtoa_r+0x4ea>
 800865e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008662:	f7f7 ff39 	bl	80004d8 <__aeabi_dmul>
 8008666:	2301      	movs	r3, #1
 8008668:	3701      	adds	r7, #1
 800866a:	1064      	asrs	r4, r4, #1
 800866c:	3608      	adds	r6, #8
 800866e:	e76d      	b.n	800854c <_dtoa_r+0x3cc>
 8008670:	2702      	movs	r7, #2
 8008672:	e770      	b.n	8008556 <_dtoa_r+0x3d6>
 8008674:	46d0      	mov	r8, sl
 8008676:	9c08      	ldr	r4, [sp, #32]
 8008678:	e78f      	b.n	800859a <_dtoa_r+0x41a>
 800867a:	9903      	ldr	r1, [sp, #12]
 800867c:	4b29      	ldr	r3, [pc, #164]	; (8008724 <_dtoa_r+0x5a4>)
 800867e:	4421      	add	r1, r4
 8008680:	9112      	str	r1, [sp, #72]	; 0x48
 8008682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008684:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008688:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800868c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008690:	2900      	cmp	r1, #0
 8008692:	d055      	beq.n	8008740 <_dtoa_r+0x5c0>
 8008694:	2000      	movs	r0, #0
 8008696:	4929      	ldr	r1, [pc, #164]	; (800873c <_dtoa_r+0x5bc>)
 8008698:	f7f8 f848 	bl	800072c <__aeabi_ddiv>
 800869c:	463b      	mov	r3, r7
 800869e:	4632      	mov	r2, r6
 80086a0:	f7f7 fd62 	bl	8000168 <__aeabi_dsub>
 80086a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086a8:	9f03      	ldr	r7, [sp, #12]
 80086aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ae:	f7f8 f9c3 	bl	8000a38 <__aeabi_d2iz>
 80086b2:	4604      	mov	r4, r0
 80086b4:	f7f7 fea6 	bl	8000404 <__aeabi_i2d>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c0:	f7f7 fd52 	bl	8000168 <__aeabi_dsub>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	3430      	adds	r4, #48	; 0x30
 80086ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086d2:	f807 4b01 	strb.w	r4, [r7], #1
 80086d6:	f7f8 f971 	bl	80009bc <__aeabi_dcmplt>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d174      	bne.n	80087c8 <_dtoa_r+0x648>
 80086de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e2:	2000      	movs	r0, #0
 80086e4:	4911      	ldr	r1, [pc, #68]	; (800872c <_dtoa_r+0x5ac>)
 80086e6:	f7f7 fd3f 	bl	8000168 <__aeabi_dsub>
 80086ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086ee:	f7f8 f965 	bl	80009bc <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f040 80b7 	bne.w	8008866 <_dtoa_r+0x6e6>
 80086f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086fa:	429f      	cmp	r7, r3
 80086fc:	f43f af7a 	beq.w	80085f4 <_dtoa_r+0x474>
 8008700:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008704:	2200      	movs	r2, #0
 8008706:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <_dtoa_r+0x5b0>)
 8008708:	f7f7 fee6 	bl	80004d8 <__aeabi_dmul>
 800870c:	2200      	movs	r2, #0
 800870e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008716:	4b06      	ldr	r3, [pc, #24]	; (8008730 <_dtoa_r+0x5b0>)
 8008718:	f7f7 fede 	bl	80004d8 <__aeabi_dmul>
 800871c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008720:	e7c3      	b.n	80086aa <_dtoa_r+0x52a>
 8008722:	bf00      	nop
 8008724:	0800a578 	.word	0x0800a578
 8008728:	0800a550 	.word	0x0800a550
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	40240000 	.word	0x40240000
 8008734:	401c0000 	.word	0x401c0000
 8008738:	40140000 	.word	0x40140000
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 fec8 	bl	80004d8 <__aeabi_dmul>
 8008748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800874a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800874e:	9c03      	ldr	r4, [sp, #12]
 8008750:	9314      	str	r3, [sp, #80]	; 0x50
 8008752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008756:	f7f8 f96f 	bl	8000a38 <__aeabi_d2iz>
 800875a:	9015      	str	r0, [sp, #84]	; 0x54
 800875c:	f7f7 fe52 	bl	8000404 <__aeabi_i2d>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008768:	f7f7 fcfe 	bl	8000168 <__aeabi_dsub>
 800876c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800876e:	4606      	mov	r6, r0
 8008770:	3330      	adds	r3, #48	; 0x30
 8008772:	f804 3b01 	strb.w	r3, [r4], #1
 8008776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008778:	460f      	mov	r7, r1
 800877a:	429c      	cmp	r4, r3
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	d124      	bne.n	80087cc <_dtoa_r+0x64c>
 8008782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008786:	4bb0      	ldr	r3, [pc, #704]	; (8008a48 <_dtoa_r+0x8c8>)
 8008788:	f7f7 fcf0 	bl	800016c <__adddf3>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4630      	mov	r0, r6
 8008792:	4639      	mov	r1, r7
 8008794:	f7f8 f930 	bl	80009f8 <__aeabi_dcmpgt>
 8008798:	2800      	cmp	r0, #0
 800879a:	d163      	bne.n	8008864 <_dtoa_r+0x6e4>
 800879c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087a0:	2000      	movs	r0, #0
 80087a2:	49a9      	ldr	r1, [pc, #676]	; (8008a48 <_dtoa_r+0x8c8>)
 80087a4:	f7f7 fce0 	bl	8000168 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4630      	mov	r0, r6
 80087ae:	4639      	mov	r1, r7
 80087b0:	f7f8 f904 	bl	80009bc <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f43f af1d 	beq.w	80085f4 <_dtoa_r+0x474>
 80087ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80087bc:	1e7b      	subs	r3, r7, #1
 80087be:	9314      	str	r3, [sp, #80]	; 0x50
 80087c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	d0f8      	beq.n	80087ba <_dtoa_r+0x63a>
 80087c8:	46c2      	mov	sl, r8
 80087ca:	e03b      	b.n	8008844 <_dtoa_r+0x6c4>
 80087cc:	4b9f      	ldr	r3, [pc, #636]	; (8008a4c <_dtoa_r+0x8cc>)
 80087ce:	f7f7 fe83 	bl	80004d8 <__aeabi_dmul>
 80087d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087d6:	e7bc      	b.n	8008752 <_dtoa_r+0x5d2>
 80087d8:	9f03      	ldr	r7, [sp, #12]
 80087da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80087de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f7 ffa1 	bl	800072c <__aeabi_ddiv>
 80087ea:	f7f8 f925 	bl	8000a38 <__aeabi_d2iz>
 80087ee:	4604      	mov	r4, r0
 80087f0:	f7f7 fe08 	bl	8000404 <__aeabi_i2d>
 80087f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087f8:	f7f7 fe6e 	bl	80004d8 <__aeabi_dmul>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4640      	mov	r0, r8
 8008802:	4649      	mov	r1, r9
 8008804:	f7f7 fcb0 	bl	8000168 <__aeabi_dsub>
 8008808:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800880c:	f807 6b01 	strb.w	r6, [r7], #1
 8008810:	9e03      	ldr	r6, [sp, #12]
 8008812:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008816:	1bbe      	subs	r6, r7, r6
 8008818:	45b4      	cmp	ip, r6
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	d136      	bne.n	800888e <_dtoa_r+0x70e>
 8008820:	f7f7 fca4 	bl	800016c <__adddf3>
 8008824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008828:	4680      	mov	r8, r0
 800882a:	4689      	mov	r9, r1
 800882c:	f7f8 f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 8008830:	bb58      	cbnz	r0, 800888a <_dtoa_r+0x70a>
 8008832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008836:	4640      	mov	r0, r8
 8008838:	4649      	mov	r1, r9
 800883a:	f7f8 f8b5 	bl	80009a8 <__aeabi_dcmpeq>
 800883e:	b108      	cbz	r0, 8008844 <_dtoa_r+0x6c4>
 8008840:	07e1      	lsls	r1, r4, #31
 8008842:	d422      	bmi.n	800888a <_dtoa_r+0x70a>
 8008844:	4628      	mov	r0, r5
 8008846:	4659      	mov	r1, fp
 8008848:	f000 fae2 	bl	8008e10 <_Bfree>
 800884c:	2300      	movs	r3, #0
 800884e:	703b      	strb	r3, [r7, #0]
 8008850:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008852:	f10a 0001 	add.w	r0, sl, #1
 8008856:	6018      	str	r0, [r3, #0]
 8008858:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800885a:	2b00      	cmp	r3, #0
 800885c:	f43f acde 	beq.w	800821c <_dtoa_r+0x9c>
 8008860:	601f      	str	r7, [r3, #0]
 8008862:	e4db      	b.n	800821c <_dtoa_r+0x9c>
 8008864:	4627      	mov	r7, r4
 8008866:	463b      	mov	r3, r7
 8008868:	461f      	mov	r7, r3
 800886a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800886e:	2a39      	cmp	r2, #57	; 0x39
 8008870:	d107      	bne.n	8008882 <_dtoa_r+0x702>
 8008872:	9a03      	ldr	r2, [sp, #12]
 8008874:	429a      	cmp	r2, r3
 8008876:	d1f7      	bne.n	8008868 <_dtoa_r+0x6e8>
 8008878:	2230      	movs	r2, #48	; 0x30
 800887a:	9903      	ldr	r1, [sp, #12]
 800887c:	f108 0801 	add.w	r8, r8, #1
 8008880:	700a      	strb	r2, [r1, #0]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	3201      	adds	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e79e      	b.n	80087c8 <_dtoa_r+0x648>
 800888a:	46d0      	mov	r8, sl
 800888c:	e7eb      	b.n	8008866 <_dtoa_r+0x6e6>
 800888e:	2200      	movs	r2, #0
 8008890:	4b6e      	ldr	r3, [pc, #440]	; (8008a4c <_dtoa_r+0x8cc>)
 8008892:	f7f7 fe21 	bl	80004d8 <__aeabi_dmul>
 8008896:	2200      	movs	r2, #0
 8008898:	2300      	movs	r3, #0
 800889a:	4680      	mov	r8, r0
 800889c:	4689      	mov	r9, r1
 800889e:	f7f8 f883 	bl	80009a8 <__aeabi_dcmpeq>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d09b      	beq.n	80087de <_dtoa_r+0x65e>
 80088a6:	e7cd      	b.n	8008844 <_dtoa_r+0x6c4>
 80088a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	f000 80d0 	beq.w	8008a50 <_dtoa_r+0x8d0>
 80088b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088b2:	2a01      	cmp	r2, #1
 80088b4:	f300 80ae 	bgt.w	8008a14 <_dtoa_r+0x894>
 80088b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	f000 80a6 	beq.w	8008a0c <_dtoa_r+0x88c>
 80088c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088c6:	9f06      	ldr	r7, [sp, #24]
 80088c8:	9a06      	ldr	r2, [sp, #24]
 80088ca:	2101      	movs	r1, #1
 80088cc:	441a      	add	r2, r3
 80088ce:	9206      	str	r2, [sp, #24]
 80088d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d2:	4628      	mov	r0, r5
 80088d4:	441a      	add	r2, r3
 80088d6:	9209      	str	r2, [sp, #36]	; 0x24
 80088d8:	f000 fb50 	bl	8008f7c <__i2b>
 80088dc:	4606      	mov	r6, r0
 80088de:	2f00      	cmp	r7, #0
 80088e0:	dd0c      	ble.n	80088fc <_dtoa_r+0x77c>
 80088e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dd09      	ble.n	80088fc <_dtoa_r+0x77c>
 80088e8:	42bb      	cmp	r3, r7
 80088ea:	bfa8      	it	ge
 80088ec:	463b      	movge	r3, r7
 80088ee:	9a06      	ldr	r2, [sp, #24]
 80088f0:	1aff      	subs	r7, r7, r3
 80088f2:	1ad2      	subs	r2, r2, r3
 80088f4:	9206      	str	r2, [sp, #24]
 80088f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	9309      	str	r3, [sp, #36]	; 0x24
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	b1f3      	cbz	r3, 800893e <_dtoa_r+0x7be>
 8008900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80a8 	beq.w	8008a58 <_dtoa_r+0x8d8>
 8008908:	2c00      	cmp	r4, #0
 800890a:	dd10      	ble.n	800892e <_dtoa_r+0x7ae>
 800890c:	4631      	mov	r1, r6
 800890e:	4622      	mov	r2, r4
 8008910:	4628      	mov	r0, r5
 8008912:	f000 fbf1 	bl	80090f8 <__pow5mult>
 8008916:	465a      	mov	r2, fp
 8008918:	4601      	mov	r1, r0
 800891a:	4606      	mov	r6, r0
 800891c:	4628      	mov	r0, r5
 800891e:	f000 fb43 	bl	8008fa8 <__multiply>
 8008922:	4680      	mov	r8, r0
 8008924:	4659      	mov	r1, fp
 8008926:	4628      	mov	r0, r5
 8008928:	f000 fa72 	bl	8008e10 <_Bfree>
 800892c:	46c3      	mov	fp, r8
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	1b1a      	subs	r2, r3, r4
 8008932:	d004      	beq.n	800893e <_dtoa_r+0x7be>
 8008934:	4659      	mov	r1, fp
 8008936:	4628      	mov	r0, r5
 8008938:	f000 fbde 	bl	80090f8 <__pow5mult>
 800893c:	4683      	mov	fp, r0
 800893e:	2101      	movs	r1, #1
 8008940:	4628      	mov	r0, r5
 8008942:	f000 fb1b 	bl	8008f7c <__i2b>
 8008946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008948:	4604      	mov	r4, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	f340 8086 	ble.w	8008a5c <_dtoa_r+0x8dc>
 8008950:	461a      	mov	r2, r3
 8008952:	4601      	mov	r1, r0
 8008954:	4628      	mov	r0, r5
 8008956:	f000 fbcf 	bl	80090f8 <__pow5mult>
 800895a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800895c:	4604      	mov	r4, r0
 800895e:	2b01      	cmp	r3, #1
 8008960:	dd7f      	ble.n	8008a62 <_dtoa_r+0x8e2>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800896c:	6918      	ldr	r0, [r3, #16]
 800896e:	f000 fab7 	bl	8008ee0 <__hi0bits>
 8008972:	f1c0 0020 	rsb	r0, r0, #32
 8008976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008978:	4418      	add	r0, r3
 800897a:	f010 001f 	ands.w	r0, r0, #31
 800897e:	f000 8092 	beq.w	8008aa6 <_dtoa_r+0x926>
 8008982:	f1c0 0320 	rsb	r3, r0, #32
 8008986:	2b04      	cmp	r3, #4
 8008988:	f340 808a 	ble.w	8008aa0 <_dtoa_r+0x920>
 800898c:	f1c0 001c 	rsb	r0, r0, #28
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	4407      	add	r7, r0
 8008994:	4403      	add	r3, r0
 8008996:	9306      	str	r3, [sp, #24]
 8008998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899a:	4403      	add	r3, r0
 800899c:	9309      	str	r3, [sp, #36]	; 0x24
 800899e:	9b06      	ldr	r3, [sp, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd05      	ble.n	80089b0 <_dtoa_r+0x830>
 80089a4:	4659      	mov	r1, fp
 80089a6:	461a      	mov	r2, r3
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 fbff 	bl	80091ac <__lshift>
 80089ae:	4683      	mov	fp, r0
 80089b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd05      	ble.n	80089c2 <_dtoa_r+0x842>
 80089b6:	4621      	mov	r1, r4
 80089b8:	461a      	mov	r2, r3
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 fbf6 	bl	80091ac <__lshift>
 80089c0:	4604      	mov	r4, r0
 80089c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d070      	beq.n	8008aaa <_dtoa_r+0x92a>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 fc5e 	bl	800928c <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	da6a      	bge.n	8008aaa <_dtoa_r+0x92a>
 80089d4:	2300      	movs	r3, #0
 80089d6:	4659      	mov	r1, fp
 80089d8:	220a      	movs	r2, #10
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 fa3a 	bl	8008e54 <__multadd>
 80089e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e2:	4683      	mov	fp, r0
 80089e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8194 	beq.w	8008d16 <_dtoa_r+0xb96>
 80089ee:	4631      	mov	r1, r6
 80089f0:	2300      	movs	r3, #0
 80089f2:	220a      	movs	r2, #10
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 fa2d 	bl	8008e54 <__multadd>
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	4606      	mov	r6, r0
 8008a00:	f300 8093 	bgt.w	8008b2a <_dtoa_r+0x9aa>
 8008a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dc57      	bgt.n	8008aba <_dtoa_r+0x93a>
 8008a0a:	e08e      	b.n	8008b2a <_dtoa_r+0x9aa>
 8008a0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a12:	e757      	b.n	80088c4 <_dtoa_r+0x744>
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	1e5c      	subs	r4, r3, #1
 8008a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	bfb7      	itett	lt
 8008a1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a20:	1b1c      	subge	r4, r3, r4
 8008a22:	1ae2      	sublt	r2, r4, r3
 8008a24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a26:	bfbe      	ittt	lt
 8008a28:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a2a:	189b      	addlt	r3, r3, r2
 8008a2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a2e:	9b08      	ldr	r3, [sp, #32]
 8008a30:	bfb8      	it	lt
 8008a32:	2400      	movlt	r4, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfbb      	ittet	lt
 8008a38:	9b06      	ldrlt	r3, [sp, #24]
 8008a3a:	9a08      	ldrlt	r2, [sp, #32]
 8008a3c:	9f06      	ldrge	r7, [sp, #24]
 8008a3e:	1a9f      	sublt	r7, r3, r2
 8008a40:	bfac      	ite	ge
 8008a42:	9b08      	ldrge	r3, [sp, #32]
 8008a44:	2300      	movlt	r3, #0
 8008a46:	e73f      	b.n	80088c8 <_dtoa_r+0x748>
 8008a48:	3fe00000 	.word	0x3fe00000
 8008a4c:	40240000 	.word	0x40240000
 8008a50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a52:	9f06      	ldr	r7, [sp, #24]
 8008a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a56:	e742      	b.n	80088de <_dtoa_r+0x75e>
 8008a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a5a:	e76b      	b.n	8008934 <_dtoa_r+0x7b4>
 8008a5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	dc19      	bgt.n	8008a96 <_dtoa_r+0x916>
 8008a62:	9b04      	ldr	r3, [sp, #16]
 8008a64:	b9bb      	cbnz	r3, 8008a96 <_dtoa_r+0x916>
 8008a66:	9b05      	ldr	r3, [sp, #20]
 8008a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a6c:	b99b      	cbnz	r3, 8008a96 <_dtoa_r+0x916>
 8008a6e:	9b05      	ldr	r3, [sp, #20]
 8008a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a74:	0d1b      	lsrs	r3, r3, #20
 8008a76:	051b      	lsls	r3, r3, #20
 8008a78:	b183      	cbz	r3, 8008a9c <_dtoa_r+0x91c>
 8008a7a:	f04f 0801 	mov.w	r8, #1
 8008a7e:	9b06      	ldr	r3, [sp, #24]
 8008a80:	3301      	adds	r3, #1
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a86:	3301      	adds	r3, #1
 8008a88:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f47f af6a 	bne.w	8008966 <_dtoa_r+0x7e6>
 8008a92:	2001      	movs	r0, #1
 8008a94:	e76f      	b.n	8008976 <_dtoa_r+0x7f6>
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	e7f6      	b.n	8008a8a <_dtoa_r+0x90a>
 8008a9c:	4698      	mov	r8, r3
 8008a9e:	e7f4      	b.n	8008a8a <_dtoa_r+0x90a>
 8008aa0:	f43f af7d 	beq.w	800899e <_dtoa_r+0x81e>
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	301c      	adds	r0, #28
 8008aa8:	e772      	b.n	8008990 <_dtoa_r+0x810>
 8008aaa:	9b08      	ldr	r3, [sp, #32]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dc36      	bgt.n	8008b1e <_dtoa_r+0x99e>
 8008ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	dd33      	ble.n	8008b1e <_dtoa_r+0x99e>
 8008ab6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008aba:	f1b9 0f00 	cmp.w	r9, #0
 8008abe:	d10d      	bne.n	8008adc <_dtoa_r+0x95c>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	2205      	movs	r2, #5
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 f9c4 	bl	8008e54 <__multadd>
 8008acc:	4601      	mov	r1, r0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4658      	mov	r0, fp
 8008ad2:	f000 fbdb 	bl	800928c <__mcmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f73f adb8 	bgt.w	800864c <_dtoa_r+0x4cc>
 8008adc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ade:	9f03      	ldr	r7, [sp, #12]
 8008ae0:	ea6f 0a03 	mvn.w	sl, r3
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	4621      	mov	r1, r4
 8008aea:	4628      	mov	r0, r5
 8008aec:	f000 f990 	bl	8008e10 <_Bfree>
 8008af0:	2e00      	cmp	r6, #0
 8008af2:	f43f aea7 	beq.w	8008844 <_dtoa_r+0x6c4>
 8008af6:	f1b8 0f00 	cmp.w	r8, #0
 8008afa:	d005      	beq.n	8008b08 <_dtoa_r+0x988>
 8008afc:	45b0      	cmp	r8, r6
 8008afe:	d003      	beq.n	8008b08 <_dtoa_r+0x988>
 8008b00:	4641      	mov	r1, r8
 8008b02:	4628      	mov	r0, r5
 8008b04:	f000 f984 	bl	8008e10 <_Bfree>
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f980 	bl	8008e10 <_Bfree>
 8008b10:	e698      	b.n	8008844 <_dtoa_r+0x6c4>
 8008b12:	2400      	movs	r4, #0
 8008b14:	4626      	mov	r6, r4
 8008b16:	e7e1      	b.n	8008adc <_dtoa_r+0x95c>
 8008b18:	46c2      	mov	sl, r8
 8008b1a:	4626      	mov	r6, r4
 8008b1c:	e596      	b.n	800864c <_dtoa_r+0x4cc>
 8008b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80fd 	beq.w	8008d24 <_dtoa_r+0xba4>
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	dd05      	ble.n	8008b3a <_dtoa_r+0x9ba>
 8008b2e:	4631      	mov	r1, r6
 8008b30:	463a      	mov	r2, r7
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 fb3a 	bl	80091ac <__lshift>
 8008b38:	4606      	mov	r6, r0
 8008b3a:	f1b8 0f00 	cmp.w	r8, #0
 8008b3e:	d05c      	beq.n	8008bfa <_dtoa_r+0xa7a>
 8008b40:	4628      	mov	r0, r5
 8008b42:	6871      	ldr	r1, [r6, #4]
 8008b44:	f000 f924 	bl	8008d90 <_Balloc>
 8008b48:	4607      	mov	r7, r0
 8008b4a:	b928      	cbnz	r0, 8008b58 <_dtoa_r+0x9d8>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b52:	4b7f      	ldr	r3, [pc, #508]	; (8008d50 <_dtoa_r+0xbd0>)
 8008b54:	f7ff bb28 	b.w	80081a8 <_dtoa_r+0x28>
 8008b58:	6932      	ldr	r2, [r6, #16]
 8008b5a:	f106 010c 	add.w	r1, r6, #12
 8008b5e:	3202      	adds	r2, #2
 8008b60:	0092      	lsls	r2, r2, #2
 8008b62:	300c      	adds	r0, #12
 8008b64:	f7fe fdbe 	bl	80076e4 <memcpy>
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 fb1d 	bl	80091ac <__lshift>
 8008b72:	46b0      	mov	r8, r6
 8008b74:	4606      	mov	r6, r0
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	9308      	str	r3, [sp, #32]
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	444b      	add	r3, r9
 8008b80:	930a      	str	r3, [sp, #40]	; 0x28
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	4658      	mov	r0, fp
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	f7ff fa68 	bl	8008068 <quorem>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4641      	mov	r1, r8
 8008b9c:	3330      	adds	r3, #48	; 0x30
 8008b9e:	9006      	str	r0, [sp, #24]
 8008ba0:	4658      	mov	r0, fp
 8008ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba4:	f000 fb72 	bl	800928c <__mcmp>
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4681      	mov	r9, r0
 8008bac:	4621      	mov	r1, r4
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f000 fb88 	bl	80092c4 <__mdiff>
 8008bb4:	68c2      	ldr	r2, [r0, #12]
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bba:	bb02      	cbnz	r2, 8008bfe <_dtoa_r+0xa7e>
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	f000 fb64 	bl	800928c <__mcmp>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc8:	4639      	mov	r1, r7
 8008bca:	4628      	mov	r0, r5
 8008bcc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008bd0:	f000 f91e 	bl	8008e10 <_Bfree>
 8008bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd8:	9f08      	ldr	r7, [sp, #32]
 8008bda:	ea43 0102 	orr.w	r1, r3, r2
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	430b      	orrs	r3, r1
 8008be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be4:	d10d      	bne.n	8008c02 <_dtoa_r+0xa82>
 8008be6:	2b39      	cmp	r3, #57	; 0x39
 8008be8:	d029      	beq.n	8008c3e <_dtoa_r+0xabe>
 8008bea:	f1b9 0f00 	cmp.w	r9, #0
 8008bee:	dd01      	ble.n	8008bf4 <_dtoa_r+0xa74>
 8008bf0:	9b06      	ldr	r3, [sp, #24]
 8008bf2:	3331      	adds	r3, #49	; 0x31
 8008bf4:	9a04      	ldr	r2, [sp, #16]
 8008bf6:	7013      	strb	r3, [r2, #0]
 8008bf8:	e776      	b.n	8008ae8 <_dtoa_r+0x968>
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	e7b9      	b.n	8008b72 <_dtoa_r+0x9f2>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	e7e2      	b.n	8008bc8 <_dtoa_r+0xa48>
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	db06      	blt.n	8008c16 <_dtoa_r+0xa96>
 8008c08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008c0a:	ea41 0909 	orr.w	r9, r1, r9
 8008c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c10:	ea59 0101 	orrs.w	r1, r9, r1
 8008c14:	d120      	bne.n	8008c58 <_dtoa_r+0xad8>
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	ddec      	ble.n	8008bf4 <_dtoa_r+0xa74>
 8008c1a:	4659      	mov	r1, fp
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	4628      	mov	r0, r5
 8008c20:	9308      	str	r3, [sp, #32]
 8008c22:	f000 fac3 	bl	80091ac <__lshift>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4683      	mov	fp, r0
 8008c2a:	f000 fb2f 	bl	800928c <__mcmp>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	dc02      	bgt.n	8008c3a <_dtoa_r+0xaba>
 8008c34:	d1de      	bne.n	8008bf4 <_dtoa_r+0xa74>
 8008c36:	07da      	lsls	r2, r3, #31
 8008c38:	d5dc      	bpl.n	8008bf4 <_dtoa_r+0xa74>
 8008c3a:	2b39      	cmp	r3, #57	; 0x39
 8008c3c:	d1d8      	bne.n	8008bf0 <_dtoa_r+0xa70>
 8008c3e:	2339      	movs	r3, #57	; 0x39
 8008c40:	9a04      	ldr	r2, [sp, #16]
 8008c42:	7013      	strb	r3, [r2, #0]
 8008c44:	463b      	mov	r3, r7
 8008c46:	461f      	mov	r7, r3
 8008c48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	2a39      	cmp	r2, #57	; 0x39
 8008c50:	d050      	beq.n	8008cf4 <_dtoa_r+0xb74>
 8008c52:	3201      	adds	r2, #1
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	e747      	b.n	8008ae8 <_dtoa_r+0x968>
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	dd03      	ble.n	8008c64 <_dtoa_r+0xae4>
 8008c5c:	2b39      	cmp	r3, #57	; 0x39
 8008c5e:	d0ee      	beq.n	8008c3e <_dtoa_r+0xabe>
 8008c60:	3301      	adds	r3, #1
 8008c62:	e7c7      	b.n	8008bf4 <_dtoa_r+0xa74>
 8008c64:	9a08      	ldr	r2, [sp, #32]
 8008c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c6c:	428a      	cmp	r2, r1
 8008c6e:	d02a      	beq.n	8008cc6 <_dtoa_r+0xb46>
 8008c70:	4659      	mov	r1, fp
 8008c72:	2300      	movs	r3, #0
 8008c74:	220a      	movs	r2, #10
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 f8ec 	bl	8008e54 <__multadd>
 8008c7c:	45b0      	cmp	r8, r6
 8008c7e:	4683      	mov	fp, r0
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	f04f 020a 	mov.w	r2, #10
 8008c88:	4641      	mov	r1, r8
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	d107      	bne.n	8008c9e <_dtoa_r+0xb1e>
 8008c8e:	f000 f8e1 	bl	8008e54 <__multadd>
 8008c92:	4680      	mov	r8, r0
 8008c94:	4606      	mov	r6, r0
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	9308      	str	r3, [sp, #32]
 8008c9c:	e775      	b.n	8008b8a <_dtoa_r+0xa0a>
 8008c9e:	f000 f8d9 	bl	8008e54 <__multadd>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	220a      	movs	r2, #10
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 f8d2 	bl	8008e54 <__multadd>
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	e7f0      	b.n	8008c96 <_dtoa_r+0xb16>
 8008cb4:	f1b9 0f00 	cmp.w	r9, #0
 8008cb8:	bfcc      	ite	gt
 8008cba:	464f      	movgt	r7, r9
 8008cbc:	2701      	movle	r7, #1
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	9a03      	ldr	r2, [sp, #12]
 8008cc4:	4417      	add	r7, r2
 8008cc6:	4659      	mov	r1, fp
 8008cc8:	2201      	movs	r2, #1
 8008cca:	4628      	mov	r0, r5
 8008ccc:	9308      	str	r3, [sp, #32]
 8008cce:	f000 fa6d 	bl	80091ac <__lshift>
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4683      	mov	fp, r0
 8008cd6:	f000 fad9 	bl	800928c <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	dcb2      	bgt.n	8008c44 <_dtoa_r+0xac4>
 8008cde:	d102      	bne.n	8008ce6 <_dtoa_r+0xb66>
 8008ce0:	9b08      	ldr	r3, [sp, #32]
 8008ce2:	07db      	lsls	r3, r3, #31
 8008ce4:	d4ae      	bmi.n	8008c44 <_dtoa_r+0xac4>
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	461f      	mov	r7, r3
 8008cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cee:	2a30      	cmp	r2, #48	; 0x30
 8008cf0:	d0fa      	beq.n	8008ce8 <_dtoa_r+0xb68>
 8008cf2:	e6f9      	b.n	8008ae8 <_dtoa_r+0x968>
 8008cf4:	9a03      	ldr	r2, [sp, #12]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d1a5      	bne.n	8008c46 <_dtoa_r+0xac6>
 8008cfa:	2331      	movs	r3, #49	; 0x31
 8008cfc:	f10a 0a01 	add.w	sl, sl, #1
 8008d00:	e779      	b.n	8008bf6 <_dtoa_r+0xa76>
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <_dtoa_r+0xbd4>)
 8008d04:	f7ff baa8 	b.w	8008258 <_dtoa_r+0xd8>
 8008d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f47f aa81 	bne.w	8008212 <_dtoa_r+0x92>
 8008d10:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <_dtoa_r+0xbd8>)
 8008d12:	f7ff baa1 	b.w	8008258 <_dtoa_r+0xd8>
 8008d16:	f1b9 0f00 	cmp.w	r9, #0
 8008d1a:	dc03      	bgt.n	8008d24 <_dtoa_r+0xba4>
 8008d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	f73f aecb 	bgt.w	8008aba <_dtoa_r+0x93a>
 8008d24:	9f03      	ldr	r7, [sp, #12]
 8008d26:	4621      	mov	r1, r4
 8008d28:	4658      	mov	r0, fp
 8008d2a:	f7ff f99d 	bl	8008068 <quorem>
 8008d2e:	9a03      	ldr	r2, [sp, #12]
 8008d30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d34:	f807 3b01 	strb.w	r3, [r7], #1
 8008d38:	1aba      	subs	r2, r7, r2
 8008d3a:	4591      	cmp	r9, r2
 8008d3c:	ddba      	ble.n	8008cb4 <_dtoa_r+0xb34>
 8008d3e:	4659      	mov	r1, fp
 8008d40:	2300      	movs	r3, #0
 8008d42:	220a      	movs	r2, #10
 8008d44:	4628      	mov	r0, r5
 8008d46:	f000 f885 	bl	8008e54 <__multadd>
 8008d4a:	4683      	mov	fp, r0
 8008d4c:	e7eb      	b.n	8008d26 <_dtoa_r+0xba6>
 8008d4e:	bf00      	nop
 8008d50:	0800a4e3 	.word	0x0800a4e3
 8008d54:	0800a440 	.word	0x0800a440
 8008d58:	0800a464 	.word	0x0800a464

08008d5c <_localeconv_r>:
 8008d5c:	4800      	ldr	r0, [pc, #0]	; (8008d60 <_localeconv_r+0x4>)
 8008d5e:	4770      	bx	lr
 8008d60:	20000218 	.word	0x20000218

08008d64 <malloc>:
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <malloc+0xc>)
 8008d66:	4601      	mov	r1, r0
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	f000 bc0f 	b.w	800958c <_malloc_r>
 8008d6e:	bf00      	nop
 8008d70:	200000c4 	.word	0x200000c4

08008d74 <memchr>:
 8008d74:	4603      	mov	r3, r0
 8008d76:	b510      	push	{r4, lr}
 8008d78:	b2c9      	uxtb	r1, r1
 8008d7a:	4402      	add	r2, r0
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	d101      	bne.n	8008d86 <memchr+0x12>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e003      	b.n	8008d8e <memchr+0x1a>
 8008d86:	7804      	ldrb	r4, [r0, #0]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	428c      	cmp	r4, r1
 8008d8c:	d1f6      	bne.n	8008d7c <memchr+0x8>
 8008d8e:	bd10      	pop	{r4, pc}

08008d90 <_Balloc>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d94:	4604      	mov	r4, r0
 8008d96:	460d      	mov	r5, r1
 8008d98:	b976      	cbnz	r6, 8008db8 <_Balloc+0x28>
 8008d9a:	2010      	movs	r0, #16
 8008d9c:	f7ff ffe2 	bl	8008d64 <malloc>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6260      	str	r0, [r4, #36]	; 0x24
 8008da4:	b920      	cbnz	r0, 8008db0 <_Balloc+0x20>
 8008da6:	2166      	movs	r1, #102	; 0x66
 8008da8:	4b17      	ldr	r3, [pc, #92]	; (8008e08 <_Balloc+0x78>)
 8008daa:	4818      	ldr	r0, [pc, #96]	; (8008e0c <_Balloc+0x7c>)
 8008dac:	f000 fca2 	bl	80096f4 <__assert_func>
 8008db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008db4:	6006      	str	r6, [r0, #0]
 8008db6:	60c6      	str	r6, [r0, #12]
 8008db8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dba:	68f3      	ldr	r3, [r6, #12]
 8008dbc:	b183      	cbz	r3, 8008de0 <_Balloc+0x50>
 8008dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dc6:	b9b8      	cbnz	r0, 8008df8 <_Balloc+0x68>
 8008dc8:	2101      	movs	r1, #1
 8008dca:	fa01 f605 	lsl.w	r6, r1, r5
 8008dce:	1d72      	adds	r2, r6, #5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	f000 fb5e 	bl	8009494 <_calloc_r>
 8008dd8:	b160      	cbz	r0, 8008df4 <_Balloc+0x64>
 8008dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dde:	e00e      	b.n	8008dfe <_Balloc+0x6e>
 8008de0:	2221      	movs	r2, #33	; 0x21
 8008de2:	2104      	movs	r1, #4
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 fb55 	bl	8009494 <_calloc_r>
 8008dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dec:	60f0      	str	r0, [r6, #12]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e4      	bne.n	8008dbe <_Balloc+0x2e>
 8008df4:	2000      	movs	r0, #0
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	6802      	ldr	r2, [r0, #0]
 8008dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e04:	e7f7      	b.n	8008df6 <_Balloc+0x66>
 8008e06:	bf00      	nop
 8008e08:	0800a471 	.word	0x0800a471
 8008e0c:	0800a4f4 	.word	0x0800a4f4

08008e10 <_Bfree>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e14:	4605      	mov	r5, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	b976      	cbnz	r6, 8008e38 <_Bfree+0x28>
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	f7ff ffa2 	bl	8008d64 <malloc>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6268      	str	r0, [r5, #36]	; 0x24
 8008e24:	b920      	cbnz	r0, 8008e30 <_Bfree+0x20>
 8008e26:	218a      	movs	r1, #138	; 0x8a
 8008e28:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <_Bfree+0x3c>)
 8008e2a:	4809      	ldr	r0, [pc, #36]	; (8008e50 <_Bfree+0x40>)
 8008e2c:	f000 fc62 	bl	80096f4 <__assert_func>
 8008e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e34:	6006      	str	r6, [r0, #0]
 8008e36:	60c6      	str	r6, [r0, #12]
 8008e38:	b13c      	cbz	r4, 8008e4a <_Bfree+0x3a>
 8008e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e3c:	6862      	ldr	r2, [r4, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e44:	6021      	str	r1, [r4, #0]
 8008e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	0800a471 	.word	0x0800a471
 8008e50:	0800a4f4 	.word	0x0800a4f4

08008e54 <__multadd>:
 8008e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e58:	4607      	mov	r7, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	461e      	mov	r6, r3
 8008e5e:	2000      	movs	r0, #0
 8008e60:	690d      	ldr	r5, [r1, #16]
 8008e62:	f101 0c14 	add.w	ip, r1, #20
 8008e66:	f8dc 3000 	ldr.w	r3, [ip]
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	b299      	uxth	r1, r3
 8008e6e:	fb02 6101 	mla	r1, r2, r1, r6
 8008e72:	0c1e      	lsrs	r6, r3, #16
 8008e74:	0c0b      	lsrs	r3, r1, #16
 8008e76:	fb02 3306 	mla	r3, r2, r6, r3
 8008e7a:	b289      	uxth	r1, r1
 8008e7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e80:	4285      	cmp	r5, r0
 8008e82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e86:	f84c 1b04 	str.w	r1, [ip], #4
 8008e8a:	dcec      	bgt.n	8008e66 <__multadd+0x12>
 8008e8c:	b30e      	cbz	r6, 8008ed2 <__multadd+0x7e>
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	42ab      	cmp	r3, r5
 8008e92:	dc19      	bgt.n	8008ec8 <__multadd+0x74>
 8008e94:	6861      	ldr	r1, [r4, #4]
 8008e96:	4638      	mov	r0, r7
 8008e98:	3101      	adds	r1, #1
 8008e9a:	f7ff ff79 	bl	8008d90 <_Balloc>
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	b928      	cbnz	r0, 8008eae <__multadd+0x5a>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	21b5      	movs	r1, #181	; 0xb5
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <__multadd+0x84>)
 8008ea8:	480c      	ldr	r0, [pc, #48]	; (8008edc <__multadd+0x88>)
 8008eaa:	f000 fc23 	bl	80096f4 <__assert_func>
 8008eae:	6922      	ldr	r2, [r4, #16]
 8008eb0:	f104 010c 	add.w	r1, r4, #12
 8008eb4:	3202      	adds	r2, #2
 8008eb6:	0092      	lsls	r2, r2, #2
 8008eb8:	300c      	adds	r0, #12
 8008eba:	f7fe fc13 	bl	80076e4 <memcpy>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff ffa5 	bl	8008e10 <_Bfree>
 8008ec6:	4644      	mov	r4, r8
 8008ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ecc:	3501      	adds	r5, #1
 8008ece:	615e      	str	r6, [r3, #20]
 8008ed0:	6125      	str	r5, [r4, #16]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed8:	0800a4e3 	.word	0x0800a4e3
 8008edc:	0800a4f4 	.word	0x0800a4f4

08008ee0 <__hi0bits>:
 8008ee0:	0c02      	lsrs	r2, r0, #16
 8008ee2:	0412      	lsls	r2, r2, #16
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	b9ca      	cbnz	r2, 8008f1c <__hi0bits+0x3c>
 8008ee8:	0403      	lsls	r3, r0, #16
 8008eea:	2010      	movs	r0, #16
 8008eec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ef0:	bf04      	itt	eq
 8008ef2:	021b      	lsleq	r3, r3, #8
 8008ef4:	3008      	addeq	r0, #8
 8008ef6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008efa:	bf04      	itt	eq
 8008efc:	011b      	lsleq	r3, r3, #4
 8008efe:	3004      	addeq	r0, #4
 8008f00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f04:	bf04      	itt	eq
 8008f06:	009b      	lsleq	r3, r3, #2
 8008f08:	3002      	addeq	r0, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db05      	blt.n	8008f1a <__hi0bits+0x3a>
 8008f0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008f12:	f100 0001 	add.w	r0, r0, #1
 8008f16:	bf08      	it	eq
 8008f18:	2020      	moveq	r0, #32
 8008f1a:	4770      	bx	lr
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e7e5      	b.n	8008eec <__hi0bits+0xc>

08008f20 <__lo0bits>:
 8008f20:	6803      	ldr	r3, [r0, #0]
 8008f22:	4602      	mov	r2, r0
 8008f24:	f013 0007 	ands.w	r0, r3, #7
 8008f28:	d00b      	beq.n	8008f42 <__lo0bits+0x22>
 8008f2a:	07d9      	lsls	r1, r3, #31
 8008f2c:	d421      	bmi.n	8008f72 <__lo0bits+0x52>
 8008f2e:	0798      	lsls	r0, r3, #30
 8008f30:	bf49      	itett	mi
 8008f32:	085b      	lsrmi	r3, r3, #1
 8008f34:	089b      	lsrpl	r3, r3, #2
 8008f36:	2001      	movmi	r0, #1
 8008f38:	6013      	strmi	r3, [r2, #0]
 8008f3a:	bf5c      	itt	pl
 8008f3c:	2002      	movpl	r0, #2
 8008f3e:	6013      	strpl	r3, [r2, #0]
 8008f40:	4770      	bx	lr
 8008f42:	b299      	uxth	r1, r3
 8008f44:	b909      	cbnz	r1, 8008f4a <__lo0bits+0x2a>
 8008f46:	2010      	movs	r0, #16
 8008f48:	0c1b      	lsrs	r3, r3, #16
 8008f4a:	b2d9      	uxtb	r1, r3
 8008f4c:	b909      	cbnz	r1, 8008f52 <__lo0bits+0x32>
 8008f4e:	3008      	adds	r0, #8
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	0719      	lsls	r1, r3, #28
 8008f54:	bf04      	itt	eq
 8008f56:	091b      	lsreq	r3, r3, #4
 8008f58:	3004      	addeq	r0, #4
 8008f5a:	0799      	lsls	r1, r3, #30
 8008f5c:	bf04      	itt	eq
 8008f5e:	089b      	lsreq	r3, r3, #2
 8008f60:	3002      	addeq	r0, #2
 8008f62:	07d9      	lsls	r1, r3, #31
 8008f64:	d403      	bmi.n	8008f6e <__lo0bits+0x4e>
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	f100 0001 	add.w	r0, r0, #1
 8008f6c:	d003      	beq.n	8008f76 <__lo0bits+0x56>
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	4770      	bx	lr
 8008f72:	2000      	movs	r0, #0
 8008f74:	4770      	bx	lr
 8008f76:	2020      	movs	r0, #32
 8008f78:	4770      	bx	lr
	...

08008f7c <__i2b>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	460c      	mov	r4, r1
 8008f80:	2101      	movs	r1, #1
 8008f82:	f7ff ff05 	bl	8008d90 <_Balloc>
 8008f86:	4602      	mov	r2, r0
 8008f88:	b928      	cbnz	r0, 8008f96 <__i2b+0x1a>
 8008f8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f8e:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <__i2b+0x24>)
 8008f90:	4804      	ldr	r0, [pc, #16]	; (8008fa4 <__i2b+0x28>)
 8008f92:	f000 fbaf 	bl	80096f4 <__assert_func>
 8008f96:	2301      	movs	r3, #1
 8008f98:	6144      	str	r4, [r0, #20]
 8008f9a:	6103      	str	r3, [r0, #16]
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	bf00      	nop
 8008fa0:	0800a4e3 	.word	0x0800a4e3
 8008fa4:	0800a4f4 	.word	0x0800a4f4

08008fa8 <__multiply>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	4691      	mov	r9, r2
 8008fae:	690a      	ldr	r2, [r1, #16]
 8008fb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	bfbe      	ittt	lt
 8008fba:	460b      	movlt	r3, r1
 8008fbc:	464c      	movlt	r4, r9
 8008fbe:	4699      	movlt	r9, r3
 8008fc0:	6927      	ldr	r7, [r4, #16]
 8008fc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	6861      	ldr	r1, [r4, #4]
 8008fca:	eb07 060a 	add.w	r6, r7, sl
 8008fce:	42b3      	cmp	r3, r6
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	bfb8      	it	lt
 8008fd4:	3101      	addlt	r1, #1
 8008fd6:	f7ff fedb 	bl	8008d90 <_Balloc>
 8008fda:	b930      	cbnz	r0, 8008fea <__multiply+0x42>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f240 115d 	movw	r1, #349	; 0x15d
 8008fe2:	4b43      	ldr	r3, [pc, #268]	; (80090f0 <__multiply+0x148>)
 8008fe4:	4843      	ldr	r0, [pc, #268]	; (80090f4 <__multiply+0x14c>)
 8008fe6:	f000 fb85 	bl	80096f4 <__assert_func>
 8008fea:	f100 0514 	add.w	r5, r0, #20
 8008fee:	462b      	mov	r3, r5
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ff6:	4543      	cmp	r3, r8
 8008ff8:	d321      	bcc.n	800903e <__multiply+0x96>
 8008ffa:	f104 0314 	add.w	r3, r4, #20
 8008ffe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009002:	f109 0314 	add.w	r3, r9, #20
 8009006:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800900a:	9202      	str	r2, [sp, #8]
 800900c:	1b3a      	subs	r2, r7, r4
 800900e:	3a15      	subs	r2, #21
 8009010:	f022 0203 	bic.w	r2, r2, #3
 8009014:	3204      	adds	r2, #4
 8009016:	f104 0115 	add.w	r1, r4, #21
 800901a:	428f      	cmp	r7, r1
 800901c:	bf38      	it	cc
 800901e:	2204      	movcc	r2, #4
 8009020:	9201      	str	r2, [sp, #4]
 8009022:	9a02      	ldr	r2, [sp, #8]
 8009024:	9303      	str	r3, [sp, #12]
 8009026:	429a      	cmp	r2, r3
 8009028:	d80c      	bhi.n	8009044 <__multiply+0x9c>
 800902a:	2e00      	cmp	r6, #0
 800902c:	dd03      	ble.n	8009036 <__multiply+0x8e>
 800902e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009032:	2b00      	cmp	r3, #0
 8009034:	d059      	beq.n	80090ea <__multiply+0x142>
 8009036:	6106      	str	r6, [r0, #16]
 8009038:	b005      	add	sp, #20
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	f843 2b04 	str.w	r2, [r3], #4
 8009042:	e7d8      	b.n	8008ff6 <__multiply+0x4e>
 8009044:	f8b3 a000 	ldrh.w	sl, [r3]
 8009048:	f1ba 0f00 	cmp.w	sl, #0
 800904c:	d023      	beq.n	8009096 <__multiply+0xee>
 800904e:	46a9      	mov	r9, r5
 8009050:	f04f 0c00 	mov.w	ip, #0
 8009054:	f104 0e14 	add.w	lr, r4, #20
 8009058:	f85e 2b04 	ldr.w	r2, [lr], #4
 800905c:	f8d9 1000 	ldr.w	r1, [r9]
 8009060:	fa1f fb82 	uxth.w	fp, r2
 8009064:	b289      	uxth	r1, r1
 8009066:	fb0a 110b 	mla	r1, sl, fp, r1
 800906a:	4461      	add	r1, ip
 800906c:	f8d9 c000 	ldr.w	ip, [r9]
 8009070:	0c12      	lsrs	r2, r2, #16
 8009072:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009076:	fb0a c202 	mla	r2, sl, r2, ip
 800907a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800907e:	b289      	uxth	r1, r1
 8009080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009084:	4577      	cmp	r7, lr
 8009086:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800908a:	f849 1b04 	str.w	r1, [r9], #4
 800908e:	d8e3      	bhi.n	8009058 <__multiply+0xb0>
 8009090:	9a01      	ldr	r2, [sp, #4]
 8009092:	f845 c002 	str.w	ip, [r5, r2]
 8009096:	9a03      	ldr	r2, [sp, #12]
 8009098:	3304      	adds	r3, #4
 800909a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800909e:	f1b9 0f00 	cmp.w	r9, #0
 80090a2:	d020      	beq.n	80090e6 <__multiply+0x13e>
 80090a4:	46ae      	mov	lr, r5
 80090a6:	f04f 0a00 	mov.w	sl, #0
 80090aa:	6829      	ldr	r1, [r5, #0]
 80090ac:	f104 0c14 	add.w	ip, r4, #20
 80090b0:	f8bc b000 	ldrh.w	fp, [ip]
 80090b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090b8:	b289      	uxth	r1, r1
 80090ba:	fb09 220b 	mla	r2, r9, fp, r2
 80090be:	4492      	add	sl, r2
 80090c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090c4:	f84e 1b04 	str.w	r1, [lr], #4
 80090c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090cc:	f8be 1000 	ldrh.w	r1, [lr]
 80090d0:	0c12      	lsrs	r2, r2, #16
 80090d2:	fb09 1102 	mla	r1, r9, r2, r1
 80090d6:	4567      	cmp	r7, ip
 80090d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090e0:	d8e6      	bhi.n	80090b0 <__multiply+0x108>
 80090e2:	9a01      	ldr	r2, [sp, #4]
 80090e4:	50a9      	str	r1, [r5, r2]
 80090e6:	3504      	adds	r5, #4
 80090e8:	e79b      	b.n	8009022 <__multiply+0x7a>
 80090ea:	3e01      	subs	r6, #1
 80090ec:	e79d      	b.n	800902a <__multiply+0x82>
 80090ee:	bf00      	nop
 80090f0:	0800a4e3 	.word	0x0800a4e3
 80090f4:	0800a4f4 	.word	0x0800a4f4

080090f8 <__pow5mult>:
 80090f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	4615      	mov	r5, r2
 80090fe:	f012 0203 	ands.w	r2, r2, #3
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	d007      	beq.n	8009118 <__pow5mult+0x20>
 8009108:	4c25      	ldr	r4, [pc, #148]	; (80091a0 <__pow5mult+0xa8>)
 800910a:	3a01      	subs	r2, #1
 800910c:	2300      	movs	r3, #0
 800910e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009112:	f7ff fe9f 	bl	8008e54 <__multadd>
 8009116:	4607      	mov	r7, r0
 8009118:	10ad      	asrs	r5, r5, #2
 800911a:	d03d      	beq.n	8009198 <__pow5mult+0xa0>
 800911c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800911e:	b97c      	cbnz	r4, 8009140 <__pow5mult+0x48>
 8009120:	2010      	movs	r0, #16
 8009122:	f7ff fe1f 	bl	8008d64 <malloc>
 8009126:	4602      	mov	r2, r0
 8009128:	6270      	str	r0, [r6, #36]	; 0x24
 800912a:	b928      	cbnz	r0, 8009138 <__pow5mult+0x40>
 800912c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009130:	4b1c      	ldr	r3, [pc, #112]	; (80091a4 <__pow5mult+0xac>)
 8009132:	481d      	ldr	r0, [pc, #116]	; (80091a8 <__pow5mult+0xb0>)
 8009134:	f000 fade 	bl	80096f4 <__assert_func>
 8009138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800913c:	6004      	str	r4, [r0, #0]
 800913e:	60c4      	str	r4, [r0, #12]
 8009140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009148:	b94c      	cbnz	r4, 800915e <__pow5mult+0x66>
 800914a:	f240 2171 	movw	r1, #625	; 0x271
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ff14 	bl	8008f7c <__i2b>
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	f8c8 0008 	str.w	r0, [r8, #8]
 800915c:	6003      	str	r3, [r0, #0]
 800915e:	f04f 0900 	mov.w	r9, #0
 8009162:	07eb      	lsls	r3, r5, #31
 8009164:	d50a      	bpl.n	800917c <__pow5mult+0x84>
 8009166:	4639      	mov	r1, r7
 8009168:	4622      	mov	r2, r4
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ff1c 	bl	8008fa8 <__multiply>
 8009170:	4680      	mov	r8, r0
 8009172:	4639      	mov	r1, r7
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff fe4b 	bl	8008e10 <_Bfree>
 800917a:	4647      	mov	r7, r8
 800917c:	106d      	asrs	r5, r5, #1
 800917e:	d00b      	beq.n	8009198 <__pow5mult+0xa0>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	b938      	cbnz	r0, 8009194 <__pow5mult+0x9c>
 8009184:	4622      	mov	r2, r4
 8009186:	4621      	mov	r1, r4
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ff0d 	bl	8008fa8 <__multiply>
 800918e:	6020      	str	r0, [r4, #0]
 8009190:	f8c0 9000 	str.w	r9, [r0]
 8009194:	4604      	mov	r4, r0
 8009196:	e7e4      	b.n	8009162 <__pow5mult+0x6a>
 8009198:	4638      	mov	r0, r7
 800919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919e:	bf00      	nop
 80091a0:	0800a640 	.word	0x0800a640
 80091a4:	0800a471 	.word	0x0800a471
 80091a8:	0800a4f4 	.word	0x0800a4f4

080091ac <__lshift>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	460c      	mov	r4, r1
 80091b2:	4607      	mov	r7, r0
 80091b4:	4691      	mov	r9, r2
 80091b6:	6923      	ldr	r3, [r4, #16]
 80091b8:	6849      	ldr	r1, [r1, #4]
 80091ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091c4:	f108 0601 	add.w	r6, r8, #1
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	db0b      	blt.n	80091e4 <__lshift+0x38>
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff fddf 	bl	8008d90 <_Balloc>
 80091d2:	4605      	mov	r5, r0
 80091d4:	b948      	cbnz	r0, 80091ea <__lshift+0x3e>
 80091d6:	4602      	mov	r2, r0
 80091d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091dc:	4b29      	ldr	r3, [pc, #164]	; (8009284 <__lshift+0xd8>)
 80091de:	482a      	ldr	r0, [pc, #168]	; (8009288 <__lshift+0xdc>)
 80091e0:	f000 fa88 	bl	80096f4 <__assert_func>
 80091e4:	3101      	adds	r1, #1
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	e7ee      	b.n	80091c8 <__lshift+0x1c>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f100 0114 	add.w	r1, r0, #20
 80091f0:	f100 0210 	add.w	r2, r0, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	4553      	cmp	r3, sl
 80091f8:	db37      	blt.n	800926a <__lshift+0xbe>
 80091fa:	6920      	ldr	r0, [r4, #16]
 80091fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009200:	f104 0314 	add.w	r3, r4, #20
 8009204:	f019 091f 	ands.w	r9, r9, #31
 8009208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800920c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009210:	d02f      	beq.n	8009272 <__lshift+0xc6>
 8009212:	468a      	mov	sl, r1
 8009214:	f04f 0c00 	mov.w	ip, #0
 8009218:	f1c9 0e20 	rsb	lr, r9, #32
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	fa02 f209 	lsl.w	r2, r2, r9
 8009222:	ea42 020c 	orr.w	r2, r2, ip
 8009226:	f84a 2b04 	str.w	r2, [sl], #4
 800922a:	f853 2b04 	ldr.w	r2, [r3], #4
 800922e:	4298      	cmp	r0, r3
 8009230:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009234:	d8f2      	bhi.n	800921c <__lshift+0x70>
 8009236:	1b03      	subs	r3, r0, r4
 8009238:	3b15      	subs	r3, #21
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	3304      	adds	r3, #4
 8009240:	f104 0215 	add.w	r2, r4, #21
 8009244:	4290      	cmp	r0, r2
 8009246:	bf38      	it	cc
 8009248:	2304      	movcc	r3, #4
 800924a:	f841 c003 	str.w	ip, [r1, r3]
 800924e:	f1bc 0f00 	cmp.w	ip, #0
 8009252:	d001      	beq.n	8009258 <__lshift+0xac>
 8009254:	f108 0602 	add.w	r6, r8, #2
 8009258:	3e01      	subs	r6, #1
 800925a:	4638      	mov	r0, r7
 800925c:	4621      	mov	r1, r4
 800925e:	612e      	str	r6, [r5, #16]
 8009260:	f7ff fdd6 	bl	8008e10 <_Bfree>
 8009264:	4628      	mov	r0, r5
 8009266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926a:	f842 0f04 	str.w	r0, [r2, #4]!
 800926e:	3301      	adds	r3, #1
 8009270:	e7c1      	b.n	80091f6 <__lshift+0x4a>
 8009272:	3904      	subs	r1, #4
 8009274:	f853 2b04 	ldr.w	r2, [r3], #4
 8009278:	4298      	cmp	r0, r3
 800927a:	f841 2f04 	str.w	r2, [r1, #4]!
 800927e:	d8f9      	bhi.n	8009274 <__lshift+0xc8>
 8009280:	e7ea      	b.n	8009258 <__lshift+0xac>
 8009282:	bf00      	nop
 8009284:	0800a4e3 	.word	0x0800a4e3
 8009288:	0800a4f4 	.word	0x0800a4f4

0800928c <__mcmp>:
 800928c:	4603      	mov	r3, r0
 800928e:	690a      	ldr	r2, [r1, #16]
 8009290:	6900      	ldr	r0, [r0, #16]
 8009292:	b530      	push	{r4, r5, lr}
 8009294:	1a80      	subs	r0, r0, r2
 8009296:	d10d      	bne.n	80092b4 <__mcmp+0x28>
 8009298:	3314      	adds	r3, #20
 800929a:	3114      	adds	r1, #20
 800929c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092ac:	4295      	cmp	r5, r2
 80092ae:	d002      	beq.n	80092b6 <__mcmp+0x2a>
 80092b0:	d304      	bcc.n	80092bc <__mcmp+0x30>
 80092b2:	2001      	movs	r0, #1
 80092b4:	bd30      	pop	{r4, r5, pc}
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	d3f4      	bcc.n	80092a4 <__mcmp+0x18>
 80092ba:	e7fb      	b.n	80092b4 <__mcmp+0x28>
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	e7f8      	b.n	80092b4 <__mcmp+0x28>
	...

080092c4 <__mdiff>:
 80092c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c8:	460d      	mov	r5, r1
 80092ca:	4607      	mov	r7, r0
 80092cc:	4611      	mov	r1, r2
 80092ce:	4628      	mov	r0, r5
 80092d0:	4614      	mov	r4, r2
 80092d2:	f7ff ffdb 	bl	800928c <__mcmp>
 80092d6:	1e06      	subs	r6, r0, #0
 80092d8:	d111      	bne.n	80092fe <__mdiff+0x3a>
 80092da:	4631      	mov	r1, r6
 80092dc:	4638      	mov	r0, r7
 80092de:	f7ff fd57 	bl	8008d90 <_Balloc>
 80092e2:	4602      	mov	r2, r0
 80092e4:	b928      	cbnz	r0, 80092f2 <__mdiff+0x2e>
 80092e6:	f240 2132 	movw	r1, #562	; 0x232
 80092ea:	4b3a      	ldr	r3, [pc, #232]	; (80093d4 <__mdiff+0x110>)
 80092ec:	483a      	ldr	r0, [pc, #232]	; (80093d8 <__mdiff+0x114>)
 80092ee:	f000 fa01 	bl	80096f4 <__assert_func>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80092f8:	4610      	mov	r0, r2
 80092fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	bfa4      	itt	ge
 8009300:	4623      	movge	r3, r4
 8009302:	462c      	movge	r4, r5
 8009304:	4638      	mov	r0, r7
 8009306:	6861      	ldr	r1, [r4, #4]
 8009308:	bfa6      	itte	ge
 800930a:	461d      	movge	r5, r3
 800930c:	2600      	movge	r6, #0
 800930e:	2601      	movlt	r6, #1
 8009310:	f7ff fd3e 	bl	8008d90 <_Balloc>
 8009314:	4602      	mov	r2, r0
 8009316:	b918      	cbnz	r0, 8009320 <__mdiff+0x5c>
 8009318:	f44f 7110 	mov.w	r1, #576	; 0x240
 800931c:	4b2d      	ldr	r3, [pc, #180]	; (80093d4 <__mdiff+0x110>)
 800931e:	e7e5      	b.n	80092ec <__mdiff+0x28>
 8009320:	f102 0814 	add.w	r8, r2, #20
 8009324:	46c2      	mov	sl, r8
 8009326:	f04f 0c00 	mov.w	ip, #0
 800932a:	6927      	ldr	r7, [r4, #16]
 800932c:	60c6      	str	r6, [r0, #12]
 800932e:	692e      	ldr	r6, [r5, #16]
 8009330:	f104 0014 	add.w	r0, r4, #20
 8009334:	f105 0914 	add.w	r9, r5, #20
 8009338:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800933c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009340:	3410      	adds	r4, #16
 8009342:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009346:	f859 3b04 	ldr.w	r3, [r9], #4
 800934a:	fa1f f18b 	uxth.w	r1, fp
 800934e:	448c      	add	ip, r1
 8009350:	b299      	uxth	r1, r3
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	ebac 0101 	sub.w	r1, ip, r1
 8009358:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800935c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009360:	b289      	uxth	r1, r1
 8009362:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009366:	454e      	cmp	r6, r9
 8009368:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800936c:	f84a 3b04 	str.w	r3, [sl], #4
 8009370:	d8e7      	bhi.n	8009342 <__mdiff+0x7e>
 8009372:	1b73      	subs	r3, r6, r5
 8009374:	3b15      	subs	r3, #21
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	3515      	adds	r5, #21
 800937c:	3304      	adds	r3, #4
 800937e:	42ae      	cmp	r6, r5
 8009380:	bf38      	it	cc
 8009382:	2304      	movcc	r3, #4
 8009384:	4418      	add	r0, r3
 8009386:	4443      	add	r3, r8
 8009388:	461e      	mov	r6, r3
 800938a:	4605      	mov	r5, r0
 800938c:	4575      	cmp	r5, lr
 800938e:	d30e      	bcc.n	80093ae <__mdiff+0xea>
 8009390:	f10e 0103 	add.w	r1, lr, #3
 8009394:	1a09      	subs	r1, r1, r0
 8009396:	f021 0103 	bic.w	r1, r1, #3
 800939a:	3803      	subs	r0, #3
 800939c:	4586      	cmp	lr, r0
 800939e:	bf38      	it	cc
 80093a0:	2100      	movcc	r1, #0
 80093a2:	4419      	add	r1, r3
 80093a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80093a8:	b18b      	cbz	r3, 80093ce <__mdiff+0x10a>
 80093aa:	6117      	str	r7, [r2, #16]
 80093ac:	e7a4      	b.n	80092f8 <__mdiff+0x34>
 80093ae:	f855 8b04 	ldr.w	r8, [r5], #4
 80093b2:	fa1f f188 	uxth.w	r1, r8
 80093b6:	4461      	add	r1, ip
 80093b8:	140c      	asrs	r4, r1, #16
 80093ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093be:	b289      	uxth	r1, r1
 80093c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80093c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80093c8:	f846 1b04 	str.w	r1, [r6], #4
 80093cc:	e7de      	b.n	800938c <__mdiff+0xc8>
 80093ce:	3f01      	subs	r7, #1
 80093d0:	e7e8      	b.n	80093a4 <__mdiff+0xe0>
 80093d2:	bf00      	nop
 80093d4:	0800a4e3 	.word	0x0800a4e3
 80093d8:	0800a4f4 	.word	0x0800a4f4

080093dc <__d2b>:
 80093dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80093e0:	2101      	movs	r1, #1
 80093e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80093e6:	4690      	mov	r8, r2
 80093e8:	461d      	mov	r5, r3
 80093ea:	f7ff fcd1 	bl	8008d90 <_Balloc>
 80093ee:	4604      	mov	r4, r0
 80093f0:	b930      	cbnz	r0, 8009400 <__d2b+0x24>
 80093f2:	4602      	mov	r2, r0
 80093f4:	f240 310a 	movw	r1, #778	; 0x30a
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <__d2b+0xb0>)
 80093fa:	4825      	ldr	r0, [pc, #148]	; (8009490 <__d2b+0xb4>)
 80093fc:	f000 f97a 	bl	80096f4 <__assert_func>
 8009400:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009404:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009408:	bb2d      	cbnz	r5, 8009456 <__d2b+0x7a>
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	f1b8 0300 	subs.w	r3, r8, #0
 8009410:	d026      	beq.n	8009460 <__d2b+0x84>
 8009412:	4668      	mov	r0, sp
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	f7ff fd83 	bl	8008f20 <__lo0bits>
 800941a:	9900      	ldr	r1, [sp, #0]
 800941c:	b1f0      	cbz	r0, 800945c <__d2b+0x80>
 800941e:	9a01      	ldr	r2, [sp, #4]
 8009420:	f1c0 0320 	rsb	r3, r0, #32
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	430b      	orrs	r3, r1
 800942a:	40c2      	lsrs	r2, r0
 800942c:	6163      	str	r3, [r4, #20]
 800942e:	9201      	str	r2, [sp, #4]
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	bf14      	ite	ne
 8009436:	2102      	movne	r1, #2
 8009438:	2101      	moveq	r1, #1
 800943a:	61a3      	str	r3, [r4, #24]
 800943c:	6121      	str	r1, [r4, #16]
 800943e:	b1c5      	cbz	r5, 8009472 <__d2b+0x96>
 8009440:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009444:	4405      	add	r5, r0
 8009446:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800944a:	603d      	str	r5, [r7, #0]
 800944c:	6030      	str	r0, [r6, #0]
 800944e:	4620      	mov	r0, r4
 8009450:	b002      	add	sp, #8
 8009452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800945a:	e7d6      	b.n	800940a <__d2b+0x2e>
 800945c:	6161      	str	r1, [r4, #20]
 800945e:	e7e7      	b.n	8009430 <__d2b+0x54>
 8009460:	a801      	add	r0, sp, #4
 8009462:	f7ff fd5d 	bl	8008f20 <__lo0bits>
 8009466:	2101      	movs	r1, #1
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	6121      	str	r1, [r4, #16]
 800946c:	6163      	str	r3, [r4, #20]
 800946e:	3020      	adds	r0, #32
 8009470:	e7e5      	b.n	800943e <__d2b+0x62>
 8009472:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009476:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800947a:	6038      	str	r0, [r7, #0]
 800947c:	6918      	ldr	r0, [r3, #16]
 800947e:	f7ff fd2f 	bl	8008ee0 <__hi0bits>
 8009482:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009486:	6031      	str	r1, [r6, #0]
 8009488:	e7e1      	b.n	800944e <__d2b+0x72>
 800948a:	bf00      	nop
 800948c:	0800a4e3 	.word	0x0800a4e3
 8009490:	0800a4f4 	.word	0x0800a4f4

08009494 <_calloc_r>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	fba1 5402 	umull	r5, r4, r1, r2
 800949a:	b934      	cbnz	r4, 80094aa <_calloc_r+0x16>
 800949c:	4629      	mov	r1, r5
 800949e:	f000 f875 	bl	800958c <_malloc_r>
 80094a2:	4606      	mov	r6, r0
 80094a4:	b928      	cbnz	r0, 80094b2 <_calloc_r+0x1e>
 80094a6:	4630      	mov	r0, r6
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	220c      	movs	r2, #12
 80094ac:	2600      	movs	r6, #0
 80094ae:	6002      	str	r2, [r0, #0]
 80094b0:	e7f9      	b.n	80094a6 <_calloc_r+0x12>
 80094b2:	462a      	mov	r2, r5
 80094b4:	4621      	mov	r1, r4
 80094b6:	f7fe f923 	bl	8007700 <memset>
 80094ba:	e7f4      	b.n	80094a6 <_calloc_r+0x12>

080094bc <_free_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4605      	mov	r5, r0
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d040      	beq.n	8009546 <_free_r+0x8a>
 80094c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c8:	1f0c      	subs	r4, r1, #4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bfb8      	it	lt
 80094ce:	18e4      	addlt	r4, r4, r3
 80094d0:	f000 f952 	bl	8009778 <__malloc_lock>
 80094d4:	4a1c      	ldr	r2, [pc, #112]	; (8009548 <_free_r+0x8c>)
 80094d6:	6813      	ldr	r3, [r2, #0]
 80094d8:	b933      	cbnz	r3, 80094e8 <_free_r+0x2c>
 80094da:	6063      	str	r3, [r4, #4]
 80094dc:	6014      	str	r4, [r2, #0]
 80094de:	4628      	mov	r0, r5
 80094e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094e4:	f000 b94e 	b.w	8009784 <__malloc_unlock>
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	d908      	bls.n	80094fe <_free_r+0x42>
 80094ec:	6820      	ldr	r0, [r4, #0]
 80094ee:	1821      	adds	r1, r4, r0
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf01      	itttt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	1809      	addeq	r1, r1, r0
 80094fa:	6021      	streq	r1, [r4, #0]
 80094fc:	e7ed      	b.n	80094da <_free_r+0x1e>
 80094fe:	461a      	mov	r2, r3
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	b10b      	cbz	r3, 8009508 <_free_r+0x4c>
 8009504:	42a3      	cmp	r3, r4
 8009506:	d9fa      	bls.n	80094fe <_free_r+0x42>
 8009508:	6811      	ldr	r1, [r2, #0]
 800950a:	1850      	adds	r0, r2, r1
 800950c:	42a0      	cmp	r0, r4
 800950e:	d10b      	bne.n	8009528 <_free_r+0x6c>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	4401      	add	r1, r0
 8009514:	1850      	adds	r0, r2, r1
 8009516:	4283      	cmp	r3, r0
 8009518:	6011      	str	r1, [r2, #0]
 800951a:	d1e0      	bne.n	80094de <_free_r+0x22>
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4401      	add	r1, r0
 8009522:	6011      	str	r1, [r2, #0]
 8009524:	6053      	str	r3, [r2, #4]
 8009526:	e7da      	b.n	80094de <_free_r+0x22>
 8009528:	d902      	bls.n	8009530 <_free_r+0x74>
 800952a:	230c      	movs	r3, #12
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	e7d6      	b.n	80094de <_free_r+0x22>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	1821      	adds	r1, r4, r0
 8009534:	428b      	cmp	r3, r1
 8009536:	bf01      	itttt	eq
 8009538:	6819      	ldreq	r1, [r3, #0]
 800953a:	685b      	ldreq	r3, [r3, #4]
 800953c:	1809      	addeq	r1, r1, r0
 800953e:	6021      	streq	r1, [r4, #0]
 8009540:	6063      	str	r3, [r4, #4]
 8009542:	6054      	str	r4, [r2, #4]
 8009544:	e7cb      	b.n	80094de <_free_r+0x22>
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	20000e30 	.word	0x20000e30

0800954c <sbrk_aligned>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	4e0e      	ldr	r6, [pc, #56]	; (8009588 <sbrk_aligned+0x3c>)
 8009550:	460c      	mov	r4, r1
 8009552:	6831      	ldr	r1, [r6, #0]
 8009554:	4605      	mov	r5, r0
 8009556:	b911      	cbnz	r1, 800955e <sbrk_aligned+0x12>
 8009558:	f000 f8bc 	bl	80096d4 <_sbrk_r>
 800955c:	6030      	str	r0, [r6, #0]
 800955e:	4621      	mov	r1, r4
 8009560:	4628      	mov	r0, r5
 8009562:	f000 f8b7 	bl	80096d4 <_sbrk_r>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d00a      	beq.n	8009580 <sbrk_aligned+0x34>
 800956a:	1cc4      	adds	r4, r0, #3
 800956c:	f024 0403 	bic.w	r4, r4, #3
 8009570:	42a0      	cmp	r0, r4
 8009572:	d007      	beq.n	8009584 <sbrk_aligned+0x38>
 8009574:	1a21      	subs	r1, r4, r0
 8009576:	4628      	mov	r0, r5
 8009578:	f000 f8ac 	bl	80096d4 <_sbrk_r>
 800957c:	3001      	adds	r0, #1
 800957e:	d101      	bne.n	8009584 <sbrk_aligned+0x38>
 8009580:	f04f 34ff 	mov.w	r4, #4294967295
 8009584:	4620      	mov	r0, r4
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	20000e34 	.word	0x20000e34

0800958c <_malloc_r>:
 800958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009590:	1ccd      	adds	r5, r1, #3
 8009592:	f025 0503 	bic.w	r5, r5, #3
 8009596:	3508      	adds	r5, #8
 8009598:	2d0c      	cmp	r5, #12
 800959a:	bf38      	it	cc
 800959c:	250c      	movcc	r5, #12
 800959e:	2d00      	cmp	r5, #0
 80095a0:	4607      	mov	r7, r0
 80095a2:	db01      	blt.n	80095a8 <_malloc_r+0x1c>
 80095a4:	42a9      	cmp	r1, r5
 80095a6:	d905      	bls.n	80095b4 <_malloc_r+0x28>
 80095a8:	230c      	movs	r3, #12
 80095aa:	2600      	movs	r6, #0
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	4630      	mov	r0, r6
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b4:	4e2e      	ldr	r6, [pc, #184]	; (8009670 <_malloc_r+0xe4>)
 80095b6:	f000 f8df 	bl	8009778 <__malloc_lock>
 80095ba:	6833      	ldr	r3, [r6, #0]
 80095bc:	461c      	mov	r4, r3
 80095be:	bb34      	cbnz	r4, 800960e <_malloc_r+0x82>
 80095c0:	4629      	mov	r1, r5
 80095c2:	4638      	mov	r0, r7
 80095c4:	f7ff ffc2 	bl	800954c <sbrk_aligned>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	4604      	mov	r4, r0
 80095cc:	d14d      	bne.n	800966a <_malloc_r+0xde>
 80095ce:	6834      	ldr	r4, [r6, #0]
 80095d0:	4626      	mov	r6, r4
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	d140      	bne.n	8009658 <_malloc_r+0xcc>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	4631      	mov	r1, r6
 80095da:	4638      	mov	r0, r7
 80095dc:	eb04 0803 	add.w	r8, r4, r3
 80095e0:	f000 f878 	bl	80096d4 <_sbrk_r>
 80095e4:	4580      	cmp	r8, r0
 80095e6:	d13a      	bne.n	800965e <_malloc_r+0xd2>
 80095e8:	6821      	ldr	r1, [r4, #0]
 80095ea:	3503      	adds	r5, #3
 80095ec:	1a6d      	subs	r5, r5, r1
 80095ee:	f025 0503 	bic.w	r5, r5, #3
 80095f2:	3508      	adds	r5, #8
 80095f4:	2d0c      	cmp	r5, #12
 80095f6:	bf38      	it	cc
 80095f8:	250c      	movcc	r5, #12
 80095fa:	4638      	mov	r0, r7
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7ff ffa5 	bl	800954c <sbrk_aligned>
 8009602:	3001      	adds	r0, #1
 8009604:	d02b      	beq.n	800965e <_malloc_r+0xd2>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	442b      	add	r3, r5
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	e00e      	b.n	800962c <_malloc_r+0xa0>
 800960e:	6822      	ldr	r2, [r4, #0]
 8009610:	1b52      	subs	r2, r2, r5
 8009612:	d41e      	bmi.n	8009652 <_malloc_r+0xc6>
 8009614:	2a0b      	cmp	r2, #11
 8009616:	d916      	bls.n	8009646 <_malloc_r+0xba>
 8009618:	1961      	adds	r1, r4, r5
 800961a:	42a3      	cmp	r3, r4
 800961c:	6025      	str	r5, [r4, #0]
 800961e:	bf18      	it	ne
 8009620:	6059      	strne	r1, [r3, #4]
 8009622:	6863      	ldr	r3, [r4, #4]
 8009624:	bf08      	it	eq
 8009626:	6031      	streq	r1, [r6, #0]
 8009628:	5162      	str	r2, [r4, r5]
 800962a:	604b      	str	r3, [r1, #4]
 800962c:	4638      	mov	r0, r7
 800962e:	f104 060b 	add.w	r6, r4, #11
 8009632:	f000 f8a7 	bl	8009784 <__malloc_unlock>
 8009636:	f026 0607 	bic.w	r6, r6, #7
 800963a:	1d23      	adds	r3, r4, #4
 800963c:	1af2      	subs	r2, r6, r3
 800963e:	d0b6      	beq.n	80095ae <_malloc_r+0x22>
 8009640:	1b9b      	subs	r3, r3, r6
 8009642:	50a3      	str	r3, [r4, r2]
 8009644:	e7b3      	b.n	80095ae <_malloc_r+0x22>
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	42a3      	cmp	r3, r4
 800964a:	bf0c      	ite	eq
 800964c:	6032      	streq	r2, [r6, #0]
 800964e:	605a      	strne	r2, [r3, #4]
 8009650:	e7ec      	b.n	800962c <_malloc_r+0xa0>
 8009652:	4623      	mov	r3, r4
 8009654:	6864      	ldr	r4, [r4, #4]
 8009656:	e7b2      	b.n	80095be <_malloc_r+0x32>
 8009658:	4634      	mov	r4, r6
 800965a:	6876      	ldr	r6, [r6, #4]
 800965c:	e7b9      	b.n	80095d2 <_malloc_r+0x46>
 800965e:	230c      	movs	r3, #12
 8009660:	4638      	mov	r0, r7
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	f000 f88e 	bl	8009784 <__malloc_unlock>
 8009668:	e7a1      	b.n	80095ae <_malloc_r+0x22>
 800966a:	6025      	str	r5, [r4, #0]
 800966c:	e7de      	b.n	800962c <_malloc_r+0xa0>
 800966e:	bf00      	nop
 8009670:	20000e30 	.word	0x20000e30

08009674 <_realloc_r>:
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	4680      	mov	r8, r0
 800967a:	4614      	mov	r4, r2
 800967c:	460e      	mov	r6, r1
 800967e:	b921      	cbnz	r1, 800968a <_realloc_r+0x16>
 8009680:	4611      	mov	r1, r2
 8009682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	f7ff bf81 	b.w	800958c <_malloc_r>
 800968a:	b92a      	cbnz	r2, 8009698 <_realloc_r+0x24>
 800968c:	f7ff ff16 	bl	80094bc <_free_r>
 8009690:	4625      	mov	r5, r4
 8009692:	4628      	mov	r0, r5
 8009694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009698:	f000 f87a 	bl	8009790 <_malloc_usable_size_r>
 800969c:	4284      	cmp	r4, r0
 800969e:	4607      	mov	r7, r0
 80096a0:	d802      	bhi.n	80096a8 <_realloc_r+0x34>
 80096a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096a6:	d812      	bhi.n	80096ce <_realloc_r+0x5a>
 80096a8:	4621      	mov	r1, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff ff6e 	bl	800958c <_malloc_r>
 80096b0:	4605      	mov	r5, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0ed      	beq.n	8009692 <_realloc_r+0x1e>
 80096b6:	42bc      	cmp	r4, r7
 80096b8:	4622      	mov	r2, r4
 80096ba:	4631      	mov	r1, r6
 80096bc:	bf28      	it	cs
 80096be:	463a      	movcs	r2, r7
 80096c0:	f7fe f810 	bl	80076e4 <memcpy>
 80096c4:	4631      	mov	r1, r6
 80096c6:	4640      	mov	r0, r8
 80096c8:	f7ff fef8 	bl	80094bc <_free_r>
 80096cc:	e7e1      	b.n	8009692 <_realloc_r+0x1e>
 80096ce:	4635      	mov	r5, r6
 80096d0:	e7df      	b.n	8009692 <_realloc_r+0x1e>
	...

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	2300      	movs	r3, #0
 80096d8:	4d05      	ldr	r5, [pc, #20]	; (80096f0 <_sbrk_r+0x1c>)
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7fa fcdc 	bl	800409c <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20000e38 	.word	0x20000e38

080096f4 <__assert_func>:
 80096f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096f6:	4614      	mov	r4, r2
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <__assert_func+0x2c>)
 80096fc:	4605      	mov	r5, r0
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68d8      	ldr	r0, [r3, #12]
 8009702:	b14c      	cbz	r4, 8009718 <__assert_func+0x24>
 8009704:	4b07      	ldr	r3, [pc, #28]	; (8009724 <__assert_func+0x30>)
 8009706:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800970a:	9100      	str	r1, [sp, #0]
 800970c:	462b      	mov	r3, r5
 800970e:	4906      	ldr	r1, [pc, #24]	; (8009728 <__assert_func+0x34>)
 8009710:	f000 f80e 	bl	8009730 <fiprintf>
 8009714:	f7fd ffb5 	bl	8007682 <abort>
 8009718:	4b04      	ldr	r3, [pc, #16]	; (800972c <__assert_func+0x38>)
 800971a:	461c      	mov	r4, r3
 800971c:	e7f3      	b.n	8009706 <__assert_func+0x12>
 800971e:	bf00      	nop
 8009720:	200000c4 	.word	0x200000c4
 8009724:	0800a64c 	.word	0x0800a64c
 8009728:	0800a659 	.word	0x0800a659
 800972c:	0800a687 	.word	0x0800a687

08009730 <fiprintf>:
 8009730:	b40e      	push	{r1, r2, r3}
 8009732:	b503      	push	{r0, r1, lr}
 8009734:	4601      	mov	r1, r0
 8009736:	ab03      	add	r3, sp, #12
 8009738:	4805      	ldr	r0, [pc, #20]	; (8009750 <fiprintf+0x20>)
 800973a:	f853 2b04 	ldr.w	r2, [r3], #4
 800973e:	6800      	ldr	r0, [r0, #0]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	f000 f855 	bl	80097f0 <_vfiprintf_r>
 8009746:	b002      	add	sp, #8
 8009748:	f85d eb04 	ldr.w	lr, [sp], #4
 800974c:	b003      	add	sp, #12
 800974e:	4770      	bx	lr
 8009750:	200000c4 	.word	0x200000c4

08009754 <__ascii_mbtowc>:
 8009754:	b082      	sub	sp, #8
 8009756:	b901      	cbnz	r1, 800975a <__ascii_mbtowc+0x6>
 8009758:	a901      	add	r1, sp, #4
 800975a:	b142      	cbz	r2, 800976e <__ascii_mbtowc+0x1a>
 800975c:	b14b      	cbz	r3, 8009772 <__ascii_mbtowc+0x1e>
 800975e:	7813      	ldrb	r3, [r2, #0]
 8009760:	600b      	str	r3, [r1, #0]
 8009762:	7812      	ldrb	r2, [r2, #0]
 8009764:	1e10      	subs	r0, r2, #0
 8009766:	bf18      	it	ne
 8009768:	2001      	movne	r0, #1
 800976a:	b002      	add	sp, #8
 800976c:	4770      	bx	lr
 800976e:	4610      	mov	r0, r2
 8009770:	e7fb      	b.n	800976a <__ascii_mbtowc+0x16>
 8009772:	f06f 0001 	mvn.w	r0, #1
 8009776:	e7f8      	b.n	800976a <__ascii_mbtowc+0x16>

08009778 <__malloc_lock>:
 8009778:	4801      	ldr	r0, [pc, #4]	; (8009780 <__malloc_lock+0x8>)
 800977a:	f000 bbeb 	b.w	8009f54 <__retarget_lock_acquire_recursive>
 800977e:	bf00      	nop
 8009780:	20000e3c 	.word	0x20000e3c

08009784 <__malloc_unlock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_unlock+0x8>)
 8009786:	f000 bbe6 	b.w	8009f56 <__retarget_lock_release_recursive>
 800978a:	bf00      	nop
 800978c:	20000e3c 	.word	0x20000e3c

08009790 <_malloc_usable_size_r>:
 8009790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009794:	1f18      	subs	r0, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	bfbc      	itt	lt
 800979a:	580b      	ldrlt	r3, [r1, r0]
 800979c:	18c0      	addlt	r0, r0, r3
 800979e:	4770      	bx	lr

080097a0 <__sfputc_r>:
 80097a0:	6893      	ldr	r3, [r2, #8]
 80097a2:	b410      	push	{r4}
 80097a4:	3b01      	subs	r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	6093      	str	r3, [r2, #8]
 80097aa:	da07      	bge.n	80097bc <__sfputc_r+0x1c>
 80097ac:	6994      	ldr	r4, [r2, #24]
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	db01      	blt.n	80097b6 <__sfputc_r+0x16>
 80097b2:	290a      	cmp	r1, #10
 80097b4:	d102      	bne.n	80097bc <__sfputc_r+0x1c>
 80097b6:	bc10      	pop	{r4}
 80097b8:	f000 b94a 	b.w	8009a50 <__swbuf_r>
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	1c58      	adds	r0, r3, #1
 80097c0:	6010      	str	r0, [r2, #0]
 80097c2:	7019      	strb	r1, [r3, #0]
 80097c4:	4608      	mov	r0, r1
 80097c6:	bc10      	pop	{r4}
 80097c8:	4770      	bx	lr

080097ca <__sfputs_r>:
 80097ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097cc:	4606      	mov	r6, r0
 80097ce:	460f      	mov	r7, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	18d5      	adds	r5, r2, r3
 80097d4:	42ac      	cmp	r4, r5
 80097d6:	d101      	bne.n	80097dc <__sfputs_r+0x12>
 80097d8:	2000      	movs	r0, #0
 80097da:	e007      	b.n	80097ec <__sfputs_r+0x22>
 80097dc:	463a      	mov	r2, r7
 80097de:	4630      	mov	r0, r6
 80097e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e4:	f7ff ffdc 	bl	80097a0 <__sfputc_r>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d1f3      	bne.n	80097d4 <__sfputs_r+0xa>
 80097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097f0 <_vfiprintf_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	460d      	mov	r5, r1
 80097f6:	4614      	mov	r4, r2
 80097f8:	4698      	mov	r8, r3
 80097fa:	4606      	mov	r6, r0
 80097fc:	b09d      	sub	sp, #116	; 0x74
 80097fe:	b118      	cbz	r0, 8009808 <_vfiprintf_r+0x18>
 8009800:	6983      	ldr	r3, [r0, #24]
 8009802:	b90b      	cbnz	r3, 8009808 <_vfiprintf_r+0x18>
 8009804:	f000 fb08 	bl	8009e18 <__sinit>
 8009808:	4b89      	ldr	r3, [pc, #548]	; (8009a30 <_vfiprintf_r+0x240>)
 800980a:	429d      	cmp	r5, r3
 800980c:	d11b      	bne.n	8009846 <_vfiprintf_r+0x56>
 800980e:	6875      	ldr	r5, [r6, #4]
 8009810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009812:	07d9      	lsls	r1, r3, #31
 8009814:	d405      	bmi.n	8009822 <_vfiprintf_r+0x32>
 8009816:	89ab      	ldrh	r3, [r5, #12]
 8009818:	059a      	lsls	r2, r3, #22
 800981a:	d402      	bmi.n	8009822 <_vfiprintf_r+0x32>
 800981c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800981e:	f000 fb99 	bl	8009f54 <__retarget_lock_acquire_recursive>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	071b      	lsls	r3, r3, #28
 8009826:	d501      	bpl.n	800982c <_vfiprintf_r+0x3c>
 8009828:	692b      	ldr	r3, [r5, #16]
 800982a:	b9eb      	cbnz	r3, 8009868 <_vfiprintf_r+0x78>
 800982c:	4629      	mov	r1, r5
 800982e:	4630      	mov	r0, r6
 8009830:	f000 f96e 	bl	8009b10 <__swsetup_r>
 8009834:	b1c0      	cbz	r0, 8009868 <_vfiprintf_r+0x78>
 8009836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009838:	07dc      	lsls	r4, r3, #31
 800983a:	d50e      	bpl.n	800985a <_vfiprintf_r+0x6a>
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	b01d      	add	sp, #116	; 0x74
 8009842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009846:	4b7b      	ldr	r3, [pc, #492]	; (8009a34 <_vfiprintf_r+0x244>)
 8009848:	429d      	cmp	r5, r3
 800984a:	d101      	bne.n	8009850 <_vfiprintf_r+0x60>
 800984c:	68b5      	ldr	r5, [r6, #8]
 800984e:	e7df      	b.n	8009810 <_vfiprintf_r+0x20>
 8009850:	4b79      	ldr	r3, [pc, #484]	; (8009a38 <_vfiprintf_r+0x248>)
 8009852:	429d      	cmp	r5, r3
 8009854:	bf08      	it	eq
 8009856:	68f5      	ldreq	r5, [r6, #12]
 8009858:	e7da      	b.n	8009810 <_vfiprintf_r+0x20>
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	0598      	lsls	r0, r3, #22
 800985e:	d4ed      	bmi.n	800983c <_vfiprintf_r+0x4c>
 8009860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009862:	f000 fb78 	bl	8009f56 <__retarget_lock_release_recursive>
 8009866:	e7e9      	b.n	800983c <_vfiprintf_r+0x4c>
 8009868:	2300      	movs	r3, #0
 800986a:	9309      	str	r3, [sp, #36]	; 0x24
 800986c:	2320      	movs	r3, #32
 800986e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009872:	2330      	movs	r3, #48	; 0x30
 8009874:	f04f 0901 	mov.w	r9, #1
 8009878:	f8cd 800c 	str.w	r8, [sp, #12]
 800987c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009a3c <_vfiprintf_r+0x24c>
 8009880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009884:	4623      	mov	r3, r4
 8009886:	469a      	mov	sl, r3
 8009888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988c:	b10a      	cbz	r2, 8009892 <_vfiprintf_r+0xa2>
 800988e:	2a25      	cmp	r2, #37	; 0x25
 8009890:	d1f9      	bne.n	8009886 <_vfiprintf_r+0x96>
 8009892:	ebba 0b04 	subs.w	fp, sl, r4
 8009896:	d00b      	beq.n	80098b0 <_vfiprintf_r+0xc0>
 8009898:	465b      	mov	r3, fp
 800989a:	4622      	mov	r2, r4
 800989c:	4629      	mov	r1, r5
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ff93 	bl	80097ca <__sfputs_r>
 80098a4:	3001      	adds	r0, #1
 80098a6:	f000 80aa 	beq.w	80099fe <_vfiprintf_r+0x20e>
 80098aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ac:	445a      	add	r2, fp
 80098ae:	9209      	str	r2, [sp, #36]	; 0x24
 80098b0:	f89a 3000 	ldrb.w	r3, [sl]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 80a2 	beq.w	80099fe <_vfiprintf_r+0x20e>
 80098ba:	2300      	movs	r3, #0
 80098bc:	f04f 32ff 	mov.w	r2, #4294967295
 80098c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c4:	f10a 0a01 	add.w	sl, sl, #1
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	9307      	str	r3, [sp, #28]
 80098cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d0:	931a      	str	r3, [sp, #104]	; 0x68
 80098d2:	4654      	mov	r4, sl
 80098d4:	2205      	movs	r2, #5
 80098d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098da:	4858      	ldr	r0, [pc, #352]	; (8009a3c <_vfiprintf_r+0x24c>)
 80098dc:	f7ff fa4a 	bl	8008d74 <memchr>
 80098e0:	9a04      	ldr	r2, [sp, #16]
 80098e2:	b9d8      	cbnz	r0, 800991c <_vfiprintf_r+0x12c>
 80098e4:	06d1      	lsls	r1, r2, #27
 80098e6:	bf44      	itt	mi
 80098e8:	2320      	movmi	r3, #32
 80098ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ee:	0713      	lsls	r3, r2, #28
 80098f0:	bf44      	itt	mi
 80098f2:	232b      	movmi	r3, #43	; 0x2b
 80098f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f8:	f89a 3000 	ldrb.w	r3, [sl]
 80098fc:	2b2a      	cmp	r3, #42	; 0x2a
 80098fe:	d015      	beq.n	800992c <_vfiprintf_r+0x13c>
 8009900:	4654      	mov	r4, sl
 8009902:	2000      	movs	r0, #0
 8009904:	f04f 0c0a 	mov.w	ip, #10
 8009908:	9a07      	ldr	r2, [sp, #28]
 800990a:	4621      	mov	r1, r4
 800990c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009910:	3b30      	subs	r3, #48	; 0x30
 8009912:	2b09      	cmp	r3, #9
 8009914:	d94e      	bls.n	80099b4 <_vfiprintf_r+0x1c4>
 8009916:	b1b0      	cbz	r0, 8009946 <_vfiprintf_r+0x156>
 8009918:	9207      	str	r2, [sp, #28]
 800991a:	e014      	b.n	8009946 <_vfiprintf_r+0x156>
 800991c:	eba0 0308 	sub.w	r3, r0, r8
 8009920:	fa09 f303 	lsl.w	r3, r9, r3
 8009924:	4313      	orrs	r3, r2
 8009926:	46a2      	mov	sl, r4
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	e7d2      	b.n	80098d2 <_vfiprintf_r+0xe2>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	1d19      	adds	r1, r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	9103      	str	r1, [sp, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfbb      	ittet	lt
 8009938:	425b      	neglt	r3, r3
 800993a:	f042 0202 	orrlt.w	r2, r2, #2
 800993e:	9307      	strge	r3, [sp, #28]
 8009940:	9307      	strlt	r3, [sp, #28]
 8009942:	bfb8      	it	lt
 8009944:	9204      	strlt	r2, [sp, #16]
 8009946:	7823      	ldrb	r3, [r4, #0]
 8009948:	2b2e      	cmp	r3, #46	; 0x2e
 800994a:	d10c      	bne.n	8009966 <_vfiprintf_r+0x176>
 800994c:	7863      	ldrb	r3, [r4, #1]
 800994e:	2b2a      	cmp	r3, #42	; 0x2a
 8009950:	d135      	bne.n	80099be <_vfiprintf_r+0x1ce>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	3402      	adds	r4, #2
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	9203      	str	r2, [sp, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	bfb8      	it	lt
 8009960:	f04f 33ff 	movlt.w	r3, #4294967295
 8009964:	9305      	str	r3, [sp, #20]
 8009966:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009a40 <_vfiprintf_r+0x250>
 800996a:	2203      	movs	r2, #3
 800996c:	4650      	mov	r0, sl
 800996e:	7821      	ldrb	r1, [r4, #0]
 8009970:	f7ff fa00 	bl	8008d74 <memchr>
 8009974:	b140      	cbz	r0, 8009988 <_vfiprintf_r+0x198>
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	eba0 000a 	sub.w	r0, r0, sl
 800997c:	fa03 f000 	lsl.w	r0, r3, r0
 8009980:	9b04      	ldr	r3, [sp, #16]
 8009982:	3401      	adds	r4, #1
 8009984:	4303      	orrs	r3, r0
 8009986:	9304      	str	r3, [sp, #16]
 8009988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998c:	2206      	movs	r2, #6
 800998e:	482d      	ldr	r0, [pc, #180]	; (8009a44 <_vfiprintf_r+0x254>)
 8009990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009994:	f7ff f9ee 	bl	8008d74 <memchr>
 8009998:	2800      	cmp	r0, #0
 800999a:	d03f      	beq.n	8009a1c <_vfiprintf_r+0x22c>
 800999c:	4b2a      	ldr	r3, [pc, #168]	; (8009a48 <_vfiprintf_r+0x258>)
 800999e:	bb1b      	cbnz	r3, 80099e8 <_vfiprintf_r+0x1f8>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	3307      	adds	r3, #7
 80099a4:	f023 0307 	bic.w	r3, r3, #7
 80099a8:	3308      	adds	r3, #8
 80099aa:	9303      	str	r3, [sp, #12]
 80099ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ae:	443b      	add	r3, r7
 80099b0:	9309      	str	r3, [sp, #36]	; 0x24
 80099b2:	e767      	b.n	8009884 <_vfiprintf_r+0x94>
 80099b4:	460c      	mov	r4, r1
 80099b6:	2001      	movs	r0, #1
 80099b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099bc:	e7a5      	b.n	800990a <_vfiprintf_r+0x11a>
 80099be:	2300      	movs	r3, #0
 80099c0:	f04f 0c0a 	mov.w	ip, #10
 80099c4:	4619      	mov	r1, r3
 80099c6:	3401      	adds	r4, #1
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	4620      	mov	r0, r4
 80099cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d0:	3a30      	subs	r2, #48	; 0x30
 80099d2:	2a09      	cmp	r2, #9
 80099d4:	d903      	bls.n	80099de <_vfiprintf_r+0x1ee>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0c5      	beq.n	8009966 <_vfiprintf_r+0x176>
 80099da:	9105      	str	r1, [sp, #20]
 80099dc:	e7c3      	b.n	8009966 <_vfiprintf_r+0x176>
 80099de:	4604      	mov	r4, r0
 80099e0:	2301      	movs	r3, #1
 80099e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e6:	e7f0      	b.n	80099ca <_vfiprintf_r+0x1da>
 80099e8:	ab03      	add	r3, sp, #12
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	462a      	mov	r2, r5
 80099ee:	4630      	mov	r0, r6
 80099f0:	4b16      	ldr	r3, [pc, #88]	; (8009a4c <_vfiprintf_r+0x25c>)
 80099f2:	a904      	add	r1, sp, #16
 80099f4:	f7fd ff2a 	bl	800784c <_printf_float>
 80099f8:	4607      	mov	r7, r0
 80099fa:	1c78      	adds	r0, r7, #1
 80099fc:	d1d6      	bne.n	80099ac <_vfiprintf_r+0x1bc>
 80099fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a00:	07d9      	lsls	r1, r3, #31
 8009a02:	d405      	bmi.n	8009a10 <_vfiprintf_r+0x220>
 8009a04:	89ab      	ldrh	r3, [r5, #12]
 8009a06:	059a      	lsls	r2, r3, #22
 8009a08:	d402      	bmi.n	8009a10 <_vfiprintf_r+0x220>
 8009a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a0c:	f000 faa3 	bl	8009f56 <__retarget_lock_release_recursive>
 8009a10:	89ab      	ldrh	r3, [r5, #12]
 8009a12:	065b      	lsls	r3, r3, #25
 8009a14:	f53f af12 	bmi.w	800983c <_vfiprintf_r+0x4c>
 8009a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a1a:	e711      	b.n	8009840 <_vfiprintf_r+0x50>
 8009a1c:	ab03      	add	r3, sp, #12
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	462a      	mov	r2, r5
 8009a22:	4630      	mov	r0, r6
 8009a24:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <_vfiprintf_r+0x25c>)
 8009a26:	a904      	add	r1, sp, #16
 8009a28:	f7fe f9ac 	bl	8007d84 <_printf_i>
 8009a2c:	e7e4      	b.n	80099f8 <_vfiprintf_r+0x208>
 8009a2e:	bf00      	nop
 8009a30:	0800a7c4 	.word	0x0800a7c4
 8009a34:	0800a7e4 	.word	0x0800a7e4
 8009a38:	0800a7a4 	.word	0x0800a7a4
 8009a3c:	0800a692 	.word	0x0800a692
 8009a40:	0800a698 	.word	0x0800a698
 8009a44:	0800a69c 	.word	0x0800a69c
 8009a48:	0800784d 	.word	0x0800784d
 8009a4c:	080097cb 	.word	0x080097cb

08009a50 <__swbuf_r>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	460e      	mov	r6, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	4605      	mov	r5, r0
 8009a58:	b118      	cbz	r0, 8009a62 <__swbuf_r+0x12>
 8009a5a:	6983      	ldr	r3, [r0, #24]
 8009a5c:	b90b      	cbnz	r3, 8009a62 <__swbuf_r+0x12>
 8009a5e:	f000 f9db 	bl	8009e18 <__sinit>
 8009a62:	4b21      	ldr	r3, [pc, #132]	; (8009ae8 <__swbuf_r+0x98>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	d12b      	bne.n	8009ac0 <__swbuf_r+0x70>
 8009a68:	686c      	ldr	r4, [r5, #4]
 8009a6a:	69a3      	ldr	r3, [r4, #24]
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	071a      	lsls	r2, r3, #28
 8009a72:	d52f      	bpl.n	8009ad4 <__swbuf_r+0x84>
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	b36b      	cbz	r3, 8009ad4 <__swbuf_r+0x84>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	6820      	ldr	r0, [r4, #0]
 8009a7c:	b2f6      	uxtb	r6, r6
 8009a7e:	1ac0      	subs	r0, r0, r3
 8009a80:	6963      	ldr	r3, [r4, #20]
 8009a82:	4637      	mov	r7, r6
 8009a84:	4283      	cmp	r3, r0
 8009a86:	dc04      	bgt.n	8009a92 <__swbuf_r+0x42>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f930 	bl	8009cf0 <_fflush_r>
 8009a90:	bb30      	cbnz	r0, 8009ae0 <__swbuf_r+0x90>
 8009a92:	68a3      	ldr	r3, [r4, #8]
 8009a94:	3001      	adds	r0, #1
 8009a96:	3b01      	subs	r3, #1
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	701e      	strb	r6, [r3, #0]
 8009aa2:	6963      	ldr	r3, [r4, #20]
 8009aa4:	4283      	cmp	r3, r0
 8009aa6:	d004      	beq.n	8009ab2 <__swbuf_r+0x62>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	07db      	lsls	r3, r3, #31
 8009aac:	d506      	bpl.n	8009abc <__swbuf_r+0x6c>
 8009aae:	2e0a      	cmp	r6, #10
 8009ab0:	d104      	bne.n	8009abc <__swbuf_r+0x6c>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f000 f91b 	bl	8009cf0 <_fflush_r>
 8009aba:	b988      	cbnz	r0, 8009ae0 <__swbuf_r+0x90>
 8009abc:	4638      	mov	r0, r7
 8009abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <__swbuf_r+0x9c>)
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d101      	bne.n	8009aca <__swbuf_r+0x7a>
 8009ac6:	68ac      	ldr	r4, [r5, #8]
 8009ac8:	e7cf      	b.n	8009a6a <__swbuf_r+0x1a>
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <__swbuf_r+0xa0>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	bf08      	it	eq
 8009ad0:	68ec      	ldreq	r4, [r5, #12]
 8009ad2:	e7ca      	b.n	8009a6a <__swbuf_r+0x1a>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 f81a 	bl	8009b10 <__swsetup_r>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d0cb      	beq.n	8009a78 <__swbuf_r+0x28>
 8009ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ae4:	e7ea      	b.n	8009abc <__swbuf_r+0x6c>
 8009ae6:	bf00      	nop
 8009ae8:	0800a7c4 	.word	0x0800a7c4
 8009aec:	0800a7e4 	.word	0x0800a7e4
 8009af0:	0800a7a4 	.word	0x0800a7a4

08009af4 <__ascii_wctomb>:
 8009af4:	4603      	mov	r3, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	b141      	cbz	r1, 8009b0c <__ascii_wctomb+0x18>
 8009afa:	2aff      	cmp	r2, #255	; 0xff
 8009afc:	d904      	bls.n	8009b08 <__ascii_wctomb+0x14>
 8009afe:	228a      	movs	r2, #138	; 0x8a
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	4770      	bx	lr
 8009b08:	2001      	movs	r0, #1
 8009b0a:	700a      	strb	r2, [r1, #0]
 8009b0c:	4770      	bx	lr
	...

08009b10 <__swsetup_r>:
 8009b10:	4b32      	ldr	r3, [pc, #200]	; (8009bdc <__swsetup_r+0xcc>)
 8009b12:	b570      	push	{r4, r5, r6, lr}
 8009b14:	681d      	ldr	r5, [r3, #0]
 8009b16:	4606      	mov	r6, r0
 8009b18:	460c      	mov	r4, r1
 8009b1a:	b125      	cbz	r5, 8009b26 <__swsetup_r+0x16>
 8009b1c:	69ab      	ldr	r3, [r5, #24]
 8009b1e:	b913      	cbnz	r3, 8009b26 <__swsetup_r+0x16>
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f979 	bl	8009e18 <__sinit>
 8009b26:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <__swsetup_r+0xd0>)
 8009b28:	429c      	cmp	r4, r3
 8009b2a:	d10f      	bne.n	8009b4c <__swsetup_r+0x3c>
 8009b2c:	686c      	ldr	r4, [r5, #4]
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b34:	0719      	lsls	r1, r3, #28
 8009b36:	d42c      	bmi.n	8009b92 <__swsetup_r+0x82>
 8009b38:	06dd      	lsls	r5, r3, #27
 8009b3a:	d411      	bmi.n	8009b60 <__swsetup_r+0x50>
 8009b3c:	2309      	movs	r3, #9
 8009b3e:	6033      	str	r3, [r6, #0]
 8009b40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	e03e      	b.n	8009bca <__swsetup_r+0xba>
 8009b4c:	4b25      	ldr	r3, [pc, #148]	; (8009be4 <__swsetup_r+0xd4>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d101      	bne.n	8009b56 <__swsetup_r+0x46>
 8009b52:	68ac      	ldr	r4, [r5, #8]
 8009b54:	e7eb      	b.n	8009b2e <__swsetup_r+0x1e>
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <__swsetup_r+0xd8>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	bf08      	it	eq
 8009b5c:	68ec      	ldreq	r4, [r5, #12]
 8009b5e:	e7e6      	b.n	8009b2e <__swsetup_r+0x1e>
 8009b60:	0758      	lsls	r0, r3, #29
 8009b62:	d512      	bpl.n	8009b8a <__swsetup_r+0x7a>
 8009b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b66:	b141      	cbz	r1, 8009b7a <__swsetup_r+0x6a>
 8009b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b6c:	4299      	cmp	r1, r3
 8009b6e:	d002      	beq.n	8009b76 <__swsetup_r+0x66>
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff fca3 	bl	80094bc <_free_r>
 8009b76:	2300      	movs	r3, #0
 8009b78:	6363      	str	r3, [r4, #52]	; 0x34
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	2300      	movs	r3, #0
 8009b84:	6063      	str	r3, [r4, #4]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f043 0308 	orr.w	r3, r3, #8
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	b94b      	cbnz	r3, 8009baa <__swsetup_r+0x9a>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ba0:	d003      	beq.n	8009baa <__swsetup_r+0x9a>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 f9fd 	bl	8009fa4 <__smakebuf_r>
 8009baa:	89a0      	ldrh	r0, [r4, #12]
 8009bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb0:	f010 0301 	ands.w	r3, r0, #1
 8009bb4:	d00a      	beq.n	8009bcc <__swsetup_r+0xbc>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60a3      	str	r3, [r4, #8]
 8009bba:	6963      	ldr	r3, [r4, #20]
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	61a3      	str	r3, [r4, #24]
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	b943      	cbnz	r3, 8009bd6 <__swsetup_r+0xc6>
 8009bc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bc8:	d1ba      	bne.n	8009b40 <__swsetup_r+0x30>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	0781      	lsls	r1, r0, #30
 8009bce:	bf58      	it	pl
 8009bd0:	6963      	ldrpl	r3, [r4, #20]
 8009bd2:	60a3      	str	r3, [r4, #8]
 8009bd4:	e7f4      	b.n	8009bc0 <__swsetup_r+0xb0>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e7f7      	b.n	8009bca <__swsetup_r+0xba>
 8009bda:	bf00      	nop
 8009bdc:	200000c4 	.word	0x200000c4
 8009be0:	0800a7c4 	.word	0x0800a7c4
 8009be4:	0800a7e4 	.word	0x0800a7e4
 8009be8:	0800a7a4 	.word	0x0800a7a4

08009bec <__sflush_r>:
 8009bec:	898a      	ldrh	r2, [r1, #12]
 8009bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	0710      	lsls	r0, r2, #28
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	d457      	bmi.n	8009ca8 <__sflush_r+0xbc>
 8009bf8:	684b      	ldr	r3, [r1, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc04      	bgt.n	8009c08 <__sflush_r+0x1c>
 8009bfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dc01      	bgt.n	8009c08 <__sflush_r+0x1c>
 8009c04:	2000      	movs	r0, #0
 8009c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	d0fa      	beq.n	8009c04 <__sflush_r+0x18>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c14:	682f      	ldr	r7, [r5, #0]
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	d032      	beq.n	8009c80 <__sflush_r+0x94>
 8009c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	075a      	lsls	r2, r3, #29
 8009c20:	d505      	bpl.n	8009c2e <__sflush_r+0x42>
 8009c22:	6863      	ldr	r3, [r4, #4]
 8009c24:	1ac0      	subs	r0, r0, r3
 8009c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c28:	b10b      	cbz	r3, 8009c2e <__sflush_r+0x42>
 8009c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c2c:	1ac0      	subs	r0, r0, r3
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4602      	mov	r2, r0
 8009c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c34:	4628      	mov	r0, r5
 8009c36:	6a21      	ldr	r1, [r4, #32]
 8009c38:	47b0      	blx	r6
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	d106      	bne.n	8009c4e <__sflush_r+0x62>
 8009c40:	6829      	ldr	r1, [r5, #0]
 8009c42:	291d      	cmp	r1, #29
 8009c44:	d82c      	bhi.n	8009ca0 <__sflush_r+0xb4>
 8009c46:	4a29      	ldr	r2, [pc, #164]	; (8009cec <__sflush_r+0x100>)
 8009c48:	40ca      	lsrs	r2, r1
 8009c4a:	07d6      	lsls	r6, r2, #31
 8009c4c:	d528      	bpl.n	8009ca0 <__sflush_r+0xb4>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	6062      	str	r2, [r4, #4]
 8009c52:	6922      	ldr	r2, [r4, #16]
 8009c54:	04d9      	lsls	r1, r3, #19
 8009c56:	6022      	str	r2, [r4, #0]
 8009c58:	d504      	bpl.n	8009c64 <__sflush_r+0x78>
 8009c5a:	1c42      	adds	r2, r0, #1
 8009c5c:	d101      	bne.n	8009c62 <__sflush_r+0x76>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b903      	cbnz	r3, 8009c64 <__sflush_r+0x78>
 8009c62:	6560      	str	r0, [r4, #84]	; 0x54
 8009c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c66:	602f      	str	r7, [r5, #0]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d0cb      	beq.n	8009c04 <__sflush_r+0x18>
 8009c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <__sflush_r+0x8e>
 8009c74:	4628      	mov	r0, r5
 8009c76:	f7ff fc21 	bl	80094bc <_free_r>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c7e:	e7c2      	b.n	8009c06 <__sflush_r+0x1a>
 8009c80:	6a21      	ldr	r1, [r4, #32]
 8009c82:	2301      	movs	r3, #1
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b0      	blx	r6
 8009c88:	1c41      	adds	r1, r0, #1
 8009c8a:	d1c7      	bne.n	8009c1c <__sflush_r+0x30>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0c4      	beq.n	8009c1c <__sflush_r+0x30>
 8009c92:	2b1d      	cmp	r3, #29
 8009c94:	d001      	beq.n	8009c9a <__sflush_r+0xae>
 8009c96:	2b16      	cmp	r3, #22
 8009c98:	d101      	bne.n	8009c9e <__sflush_r+0xb2>
 8009c9a:	602f      	str	r7, [r5, #0]
 8009c9c:	e7b2      	b.n	8009c04 <__sflush_r+0x18>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	e7ae      	b.n	8009c06 <__sflush_r+0x1a>
 8009ca8:	690f      	ldr	r7, [r1, #16]
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d0aa      	beq.n	8009c04 <__sflush_r+0x18>
 8009cae:	0793      	lsls	r3, r2, #30
 8009cb0:	bf18      	it	ne
 8009cb2:	2300      	movne	r3, #0
 8009cb4:	680e      	ldr	r6, [r1, #0]
 8009cb6:	bf08      	it	eq
 8009cb8:	694b      	ldreq	r3, [r1, #20]
 8009cba:	1bf6      	subs	r6, r6, r7
 8009cbc:	600f      	str	r7, [r1, #0]
 8009cbe:	608b      	str	r3, [r1, #8]
 8009cc0:	2e00      	cmp	r6, #0
 8009cc2:	dd9f      	ble.n	8009c04 <__sflush_r+0x18>
 8009cc4:	4633      	mov	r3, r6
 8009cc6:	463a      	mov	r2, r7
 8009cc8:	4628      	mov	r0, r5
 8009cca:	6a21      	ldr	r1, [r4, #32]
 8009ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009cd0:	47e0      	blx	ip
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	dc06      	bgt.n	8009ce4 <__sflush_r+0xf8>
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	e790      	b.n	8009c06 <__sflush_r+0x1a>
 8009ce4:	4407      	add	r7, r0
 8009ce6:	1a36      	subs	r6, r6, r0
 8009ce8:	e7ea      	b.n	8009cc0 <__sflush_r+0xd4>
 8009cea:	bf00      	nop
 8009cec:	20400001 	.word	0x20400001

08009cf0 <_fflush_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	b913      	cbnz	r3, 8009d00 <_fflush_r+0x10>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	b118      	cbz	r0, 8009d0a <_fflush_r+0x1a>
 8009d02:	6983      	ldr	r3, [r0, #24]
 8009d04:	b90b      	cbnz	r3, 8009d0a <_fflush_r+0x1a>
 8009d06:	f000 f887 	bl	8009e18 <__sinit>
 8009d0a:	4b14      	ldr	r3, [pc, #80]	; (8009d5c <_fflush_r+0x6c>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d11b      	bne.n	8009d48 <_fflush_r+0x58>
 8009d10:	686c      	ldr	r4, [r5, #4]
 8009d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0ef      	beq.n	8009cfa <_fflush_r+0xa>
 8009d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d1c:	07d0      	lsls	r0, r2, #31
 8009d1e:	d404      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d20:	0599      	lsls	r1, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d26:	f000 f915 	bl	8009f54 <__retarget_lock_acquire_recursive>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f7ff ff5d 	bl	8009bec <__sflush_r>
 8009d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d34:	4605      	mov	r5, r0
 8009d36:	07da      	lsls	r2, r3, #31
 8009d38:	d4e0      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	059b      	lsls	r3, r3, #22
 8009d3e:	d4dd      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d42:	f000 f908 	bl	8009f56 <__retarget_lock_release_recursive>
 8009d46:	e7d9      	b.n	8009cfc <_fflush_r+0xc>
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <_fflush_r+0x70>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d101      	bne.n	8009d52 <_fflush_r+0x62>
 8009d4e:	68ac      	ldr	r4, [r5, #8]
 8009d50:	e7df      	b.n	8009d12 <_fflush_r+0x22>
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <_fflush_r+0x74>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	bf08      	it	eq
 8009d58:	68ec      	ldreq	r4, [r5, #12]
 8009d5a:	e7da      	b.n	8009d12 <_fflush_r+0x22>
 8009d5c:	0800a7c4 	.word	0x0800a7c4
 8009d60:	0800a7e4 	.word	0x0800a7e4
 8009d64:	0800a7a4 	.word	0x0800a7a4

08009d68 <std>:
 8009d68:	2300      	movs	r3, #0
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d76:	6083      	str	r3, [r0, #8]
 8009d78:	8181      	strh	r1, [r0, #12]
 8009d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d7c:	81c2      	strh	r2, [r0, #14]
 8009d7e:	6183      	str	r3, [r0, #24]
 8009d80:	4619      	mov	r1, r3
 8009d82:	2208      	movs	r2, #8
 8009d84:	305c      	adds	r0, #92	; 0x5c
 8009d86:	f7fd fcbb 	bl	8007700 <memset>
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x38>)
 8009d8c:	6224      	str	r4, [r4, #32]
 8009d8e:	6263      	str	r3, [r4, #36]	; 0x24
 8009d90:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <std+0x3c>)
 8009d92:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d94:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <std+0x40>)
 8009d96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d98:	4b04      	ldr	r3, [pc, #16]	; (8009dac <std+0x44>)
 8009d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop
 8009da0:	0800a025 	.word	0x0800a025
 8009da4:	0800a047 	.word	0x0800a047
 8009da8:	0800a07f 	.word	0x0800a07f
 8009dac:	0800a0a3 	.word	0x0800a0a3

08009db0 <_cleanup_r>:
 8009db0:	4901      	ldr	r1, [pc, #4]	; (8009db8 <_cleanup_r+0x8>)
 8009db2:	f000 b8af 	b.w	8009f14 <_fwalk_reent>
 8009db6:	bf00      	nop
 8009db8:	08009cf1 	.word	0x08009cf1

08009dbc <__sfmoreglue>:
 8009dbc:	2268      	movs	r2, #104	; 0x68
 8009dbe:	b570      	push	{r4, r5, r6, lr}
 8009dc0:	1e4d      	subs	r5, r1, #1
 8009dc2:	4355      	muls	r5, r2
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dca:	f7ff fbdf 	bl	800958c <_malloc_r>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	b140      	cbz	r0, 8009de4 <__sfmoreglue+0x28>
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009dd8:	300c      	adds	r0, #12
 8009dda:	60a0      	str	r0, [r4, #8]
 8009ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009de0:	f7fd fc8e 	bl	8007700 <memset>
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd70      	pop	{r4, r5, r6, pc}

08009de8 <__sfp_lock_acquire>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sfp_lock_acquire+0x8>)
 8009dea:	f000 b8b3 	b.w	8009f54 <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	20000e3d 	.word	0x20000e3d

08009df4 <__sfp_lock_release>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sfp_lock_release+0x8>)
 8009df6:	f000 b8ae 	b.w	8009f56 <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	20000e3d 	.word	0x20000e3d

08009e00 <__sinit_lock_acquire>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sinit_lock_acquire+0x8>)
 8009e02:	f000 b8a7 	b.w	8009f54 <__retarget_lock_acquire_recursive>
 8009e06:	bf00      	nop
 8009e08:	20000e3e 	.word	0x20000e3e

08009e0c <__sinit_lock_release>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__sinit_lock_release+0x8>)
 8009e0e:	f000 b8a2 	b.w	8009f56 <__retarget_lock_release_recursive>
 8009e12:	bf00      	nop
 8009e14:	20000e3e 	.word	0x20000e3e

08009e18 <__sinit>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f7ff fff0 	bl	8009e00 <__sinit_lock_acquire>
 8009e20:	69a3      	ldr	r3, [r4, #24]
 8009e22:	b11b      	cbz	r3, 8009e2c <__sinit+0x14>
 8009e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e28:	f7ff bff0 	b.w	8009e0c <__sinit_lock_release>
 8009e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e30:	6523      	str	r3, [r4, #80]	; 0x50
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <__sinit+0x68>)
 8009e34:	4a13      	ldr	r2, [pc, #76]	; (8009e84 <__sinit+0x6c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	bf08      	it	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	4620      	mov	r0, r4
 8009e42:	bf08      	it	eq
 8009e44:	61a3      	streq	r3, [r4, #24]
 8009e46:	f000 f81f 	bl	8009e88 <__sfp>
 8009e4a:	6060      	str	r0, [r4, #4]
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 f81b 	bl	8009e88 <__sfp>
 8009e52:	60a0      	str	r0, [r4, #8]
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 f817 	bl	8009e88 <__sfp>
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	60e0      	str	r0, [r4, #12]
 8009e60:	6860      	ldr	r0, [r4, #4]
 8009e62:	f7ff ff81 	bl	8009d68 <std>
 8009e66:	2201      	movs	r2, #1
 8009e68:	2109      	movs	r1, #9
 8009e6a:	68a0      	ldr	r0, [r4, #8]
 8009e6c:	f7ff ff7c 	bl	8009d68 <std>
 8009e70:	2202      	movs	r2, #2
 8009e72:	2112      	movs	r1, #18
 8009e74:	68e0      	ldr	r0, [r4, #12]
 8009e76:	f7ff ff77 	bl	8009d68 <std>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61a3      	str	r3, [r4, #24]
 8009e7e:	e7d1      	b.n	8009e24 <__sinit+0xc>
 8009e80:	0800a42c 	.word	0x0800a42c
 8009e84:	08009db1 	.word	0x08009db1

08009e88 <__sfp>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	f7ff ffac 	bl	8009de8 <__sfp_lock_acquire>
 8009e90:	4b1e      	ldr	r3, [pc, #120]	; (8009f0c <__sfp+0x84>)
 8009e92:	681e      	ldr	r6, [r3, #0]
 8009e94:	69b3      	ldr	r3, [r6, #24]
 8009e96:	b913      	cbnz	r3, 8009e9e <__sfp+0x16>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff ffbd 	bl	8009e18 <__sinit>
 8009e9e:	3648      	adds	r6, #72	; 0x48
 8009ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	d503      	bpl.n	8009eb0 <__sfp+0x28>
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	b30b      	cbz	r3, 8009ef0 <__sfp+0x68>
 8009eac:	6836      	ldr	r6, [r6, #0]
 8009eae:	e7f7      	b.n	8009ea0 <__sfp+0x18>
 8009eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009eb4:	b9d5      	cbnz	r5, 8009eec <__sfp+0x64>
 8009eb6:	4b16      	ldr	r3, [pc, #88]	; (8009f10 <__sfp+0x88>)
 8009eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ebc:	60e3      	str	r3, [r4, #12]
 8009ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8009ec0:	f000 f847 	bl	8009f52 <__retarget_lock_init_recursive>
 8009ec4:	f7ff ff96 	bl	8009df4 <__sfp_lock_release>
 8009ec8:	2208      	movs	r2, #8
 8009eca:	4629      	mov	r1, r5
 8009ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ed4:	6025      	str	r5, [r4, #0]
 8009ed6:	61a5      	str	r5, [r4, #24]
 8009ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009edc:	f7fd fc10 	bl	8007700 <memset>
 8009ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ee8:	4620      	mov	r0, r4
 8009eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eec:	3468      	adds	r4, #104	; 0x68
 8009eee:	e7d9      	b.n	8009ea4 <__sfp+0x1c>
 8009ef0:	2104      	movs	r1, #4
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ff62 	bl	8009dbc <__sfmoreglue>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	6030      	str	r0, [r6, #0]
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d1d5      	bne.n	8009eac <__sfp+0x24>
 8009f00:	f7ff ff78 	bl	8009df4 <__sfp_lock_release>
 8009f04:	230c      	movs	r3, #12
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	e7ee      	b.n	8009ee8 <__sfp+0x60>
 8009f0a:	bf00      	nop
 8009f0c:	0800a42c 	.word	0x0800a42c
 8009f10:	ffff0001 	.word	0xffff0001

08009f14 <_fwalk_reent>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	4606      	mov	r6, r0
 8009f1a:	4688      	mov	r8, r1
 8009f1c:	2700      	movs	r7, #0
 8009f1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f26:	f1b9 0901 	subs.w	r9, r9, #1
 8009f2a:	d505      	bpl.n	8009f38 <_fwalk_reent+0x24>
 8009f2c:	6824      	ldr	r4, [r4, #0]
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	d1f7      	bne.n	8009f22 <_fwalk_reent+0xe>
 8009f32:	4638      	mov	r0, r7
 8009f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f38:	89ab      	ldrh	r3, [r5, #12]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d907      	bls.n	8009f4e <_fwalk_reent+0x3a>
 8009f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f42:	3301      	adds	r3, #1
 8009f44:	d003      	beq.n	8009f4e <_fwalk_reent+0x3a>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4630      	mov	r0, r6
 8009f4a:	47c0      	blx	r8
 8009f4c:	4307      	orrs	r7, r0
 8009f4e:	3568      	adds	r5, #104	; 0x68
 8009f50:	e7e9      	b.n	8009f26 <_fwalk_reent+0x12>

08009f52 <__retarget_lock_init_recursive>:
 8009f52:	4770      	bx	lr

08009f54 <__retarget_lock_acquire_recursive>:
 8009f54:	4770      	bx	lr

08009f56 <__retarget_lock_release_recursive>:
 8009f56:	4770      	bx	lr

08009f58 <__swhatbuf_r>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	460e      	mov	r6, r1
 8009f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f60:	4614      	mov	r4, r2
 8009f62:	2900      	cmp	r1, #0
 8009f64:	461d      	mov	r5, r3
 8009f66:	b096      	sub	sp, #88	; 0x58
 8009f68:	da08      	bge.n	8009f7c <__swhatbuf_r+0x24>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	061a      	lsls	r2, r3, #24
 8009f74:	d410      	bmi.n	8009f98 <__swhatbuf_r+0x40>
 8009f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7a:	e00e      	b.n	8009f9a <__swhatbuf_r+0x42>
 8009f7c:	466a      	mov	r2, sp
 8009f7e:	f000 f8b7 	bl	800a0f0 <_fstat_r>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	dbf1      	blt.n	8009f6a <__swhatbuf_r+0x12>
 8009f86:	9a01      	ldr	r2, [sp, #4]
 8009f88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f90:	425a      	negs	r2, r3
 8009f92:	415a      	adcs	r2, r3
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	e7ee      	b.n	8009f76 <__swhatbuf_r+0x1e>
 8009f98:	2340      	movs	r3, #64	; 0x40
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	b016      	add	sp, #88	; 0x58
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fa4 <__smakebuf_r>:
 8009fa4:	898b      	ldrh	r3, [r1, #12]
 8009fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fa8:	079d      	lsls	r5, r3, #30
 8009faa:	4606      	mov	r6, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	d507      	bpl.n	8009fc0 <__smakebuf_r+0x1c>
 8009fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	2301      	movs	r3, #1
 8009fba:	6163      	str	r3, [r4, #20]
 8009fbc:	b002      	add	sp, #8
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	466a      	mov	r2, sp
 8009fc2:	ab01      	add	r3, sp, #4
 8009fc4:	f7ff ffc8 	bl	8009f58 <__swhatbuf_r>
 8009fc8:	9900      	ldr	r1, [sp, #0]
 8009fca:	4605      	mov	r5, r0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff fadd 	bl	800958c <_malloc_r>
 8009fd2:	b948      	cbnz	r0, 8009fe8 <__smakebuf_r+0x44>
 8009fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d4ef      	bmi.n	8009fbc <__smakebuf_r+0x18>
 8009fdc:	f023 0303 	bic.w	r3, r3, #3
 8009fe0:	f043 0302 	orr.w	r3, r3, #2
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	e7e3      	b.n	8009fb0 <__smakebuf_r+0xc>
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <__smakebuf_r+0x7c>)
 8009fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	6020      	str	r0, [r4, #0]
 8009ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	9b00      	ldr	r3, [sp, #0]
 8009ff8:	6120      	str	r0, [r4, #16]
 8009ffa:	6163      	str	r3, [r4, #20]
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	b15b      	cbz	r3, 800a018 <__smakebuf_r+0x74>
 800a000:	4630      	mov	r0, r6
 800a002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a006:	f000 f885 	bl	800a114 <_isatty_r>
 800a00a:	b128      	cbz	r0, 800a018 <__smakebuf_r+0x74>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	f043 0301 	orr.w	r3, r3, #1
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	89a0      	ldrh	r0, [r4, #12]
 800a01a:	4305      	orrs	r5, r0
 800a01c:	81a5      	strh	r5, [r4, #12]
 800a01e:	e7cd      	b.n	8009fbc <__smakebuf_r+0x18>
 800a020:	08009db1 	.word	0x08009db1

0800a024 <__sread>:
 800a024:	b510      	push	{r4, lr}
 800a026:	460c      	mov	r4, r1
 800a028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02c:	f000 f894 	bl	800a158 <_read_r>
 800a030:	2800      	cmp	r0, #0
 800a032:	bfab      	itete	ge
 800a034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a036:	89a3      	ldrhlt	r3, [r4, #12]
 800a038:	181b      	addge	r3, r3, r0
 800a03a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a03e:	bfac      	ite	ge
 800a040:	6563      	strge	r3, [r4, #84]	; 0x54
 800a042:	81a3      	strhlt	r3, [r4, #12]
 800a044:	bd10      	pop	{r4, pc}

0800a046 <__swrite>:
 800a046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04a:	461f      	mov	r7, r3
 800a04c:	898b      	ldrh	r3, [r1, #12]
 800a04e:	4605      	mov	r5, r0
 800a050:	05db      	lsls	r3, r3, #23
 800a052:	460c      	mov	r4, r1
 800a054:	4616      	mov	r6, r2
 800a056:	d505      	bpl.n	800a064 <__swrite+0x1e>
 800a058:	2302      	movs	r3, #2
 800a05a:	2200      	movs	r2, #0
 800a05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a060:	f000 f868 	bl	800a134 <_lseek_r>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	4632      	mov	r2, r6
 800a068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	4628      	mov	r0, r5
 800a070:	463b      	mov	r3, r7
 800a072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07a:	f000 b817 	b.w	800a0ac <_write_r>

0800a07e <__sseek>:
 800a07e:	b510      	push	{r4, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a086:	f000 f855 	bl	800a134 <_lseek_r>
 800a08a:	1c43      	adds	r3, r0, #1
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	bf15      	itete	ne
 800a090:	6560      	strne	r0, [r4, #84]	; 0x54
 800a092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a09a:	81a3      	strheq	r3, [r4, #12]
 800a09c:	bf18      	it	ne
 800a09e:	81a3      	strhne	r3, [r4, #12]
 800a0a0:	bd10      	pop	{r4, pc}

0800a0a2 <__sclose>:
 800a0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a6:	f000 b813 	b.w	800a0d0 <_close_r>
	...

0800a0ac <_write_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4d05      	ldr	r5, [pc, #20]	; (800a0cc <_write_r+0x20>)
 800a0b8:	602a      	str	r2, [r5, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f7f9 ffa2 	bl	8004004 <_write>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_write_r+0x1e>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_write_r+0x1e>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20000e38 	.word	0x20000e38

0800a0d0 <_close_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4d05      	ldr	r5, [pc, #20]	; (800a0ec <_close_r+0x1c>)
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7f9 ffae 	bl	800403c <_close>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_close_r+0x1a>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_close_r+0x1a>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20000e38 	.word	0x20000e38

0800a0f0 <_fstat_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	4d06      	ldr	r5, [pc, #24]	; (800a110 <_fstat_r+0x20>)
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f7f9 ffa8 	bl	8004052 <_fstat>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_fstat_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_fstat_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	20000e38 	.word	0x20000e38

0800a114 <_isatty_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	2300      	movs	r3, #0
 800a118:	4d05      	ldr	r5, [pc, #20]	; (800a130 <_isatty_r+0x1c>)
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f9 ffa6 	bl	8004070 <_isatty>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_isatty_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_isatty_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20000e38 	.word	0x20000e38

0800a134 <_lseek_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	2200      	movs	r2, #0
 800a13e:	4d05      	ldr	r5, [pc, #20]	; (800a154 <_lseek_r+0x20>)
 800a140:	602a      	str	r2, [r5, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	f7f9 ff9e 	bl	8004084 <_lseek>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_lseek_r+0x1e>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_lseek_r+0x1e>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	20000e38 	.word	0x20000e38

0800a158 <_read_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	4611      	mov	r1, r2
 800a160:	2200      	movs	r2, #0
 800a162:	4d05      	ldr	r5, [pc, #20]	; (800a178 <_read_r+0x20>)
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	f7f9 ff2f 	bl	8003fca <_read>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_read_r+0x1e>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_read_r+0x1e>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20000e38 	.word	0x20000e38

0800a17c <_init>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	bf00      	nop
 800a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a182:	bc08      	pop	{r3}
 800a184:	469e      	mov	lr, r3
 800a186:	4770      	bx	lr

0800a188 <_fini>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	bf00      	nop
 800a18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18e:	bc08      	pop	{r3}
 800a190:	469e      	mov	lr, r3
 800a192:	4770      	bx	lr
