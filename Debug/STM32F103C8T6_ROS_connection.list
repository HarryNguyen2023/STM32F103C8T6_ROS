
STM32F103C8T6_ROS_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f3c  08004f3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000074  08004fbc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  08004fbc  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5e9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002326  00000000  00000000  0002f686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  00032390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018790  00000000  00000000  00032cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b661  00000000  00000000  0004b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008960d  00000000  00000000  00056ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e00ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c28  00000000  00000000  000e0120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c70 	.word	0x08004c70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004c70 	.word	0x08004c70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f9ce 	bl	8002500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8ac 	bl	80002c4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800016c:	f000 f884 	bl	8000278 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8000170:	f000 f854 	bl	800021c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000174:	f001 f9f2 	bl	800155c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000178:	f001 fa12 	bl	80015a0 <loop>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f004 fbe9 	bl	8004964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a0:	2301      	movs	r3, #1
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001aa:	2300      	movs	r3, #0
 80001ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 ff86 	bl	80030d8 <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	bf14      	ite	ne
 80001d2:	2301      	movne	r3, #1
 80001d4:	2300      	moveq	r3, #0
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80001dc:	f000 f8bc 	bl	8000358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f9ee 	bl	80035dc <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	bf14      	ite	ne
 8000206:	2301      	movne	r3, #1
 8000208:	2300      	moveq	r3, #0
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000210:	f000 f8a2 	bl	8000358 <Error_Handler>
  }
}
 8000214:	bf00      	nop
 8000216:	3740      	adds	r7, #64	; 0x40
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000222:	4a14      	ldr	r2, [pc, #80]	; (8000274 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800022c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000242:	220c      	movs	r2, #12
 8000244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000252:	4807      	ldr	r0, [pc, #28]	; (8000270 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000254:	f003 fb50 	bl	80038f8 <HAL_UART_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	bf14      	ite	ne
 800025e:	2301      	movne	r3, #1
 8000260:	2300      	moveq	r3, #0
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000268:	f000 f876 	bl	8000358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000090 	.word	0x20000090
 8000274:	40013800 	.word	0x40013800

08000278 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <_ZL11MX_DMA_Initv+0x48>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <_ZL11MX_DMA_Initv+0x48>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <_ZL11MX_DMA_Initv+0x48>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f003 0301 	and.w	r3, r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	2100      	movs	r1, #0
 800029a:	200e      	movs	r0, #14
 800029c:	f002 fa8d 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002a0:	200e      	movs	r0, #14
 80002a2:	f002 faa6 	bl	80027f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2100      	movs	r1, #0
 80002aa:	200f      	movs	r0, #15
 80002ac:	f002 fa85 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002b0:	200f      	movs	r0, #15
 80002b2:	f002 fa9e 	bl	80027f2 <HAL_NVIC_EnableIRQ>

}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <_ZL12MX_GPIO_Initv+0x8c>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2102      	movs	r1, #2
 8000324:	480b      	ldr	r0, [pc, #44]	; (8000354 <_ZL12MX_GPIO_Initv+0x90>)
 8000326:	f002 fea5 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800032a:	2302      	movs	r3, #2
 800032c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <_ZL12MX_GPIO_Initv+0x90>)
 8000342:	f002 fd13 	bl	8002d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000360:	e7fe      	b.n	8000360 <Error_Handler+0x8>

08000362 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
	...

08000384 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <_ZN3ros3MsgC1Ev+0x1c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	08004f00 	.word	0x08004f00

080003a4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
      data()
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffe8 	bl	8000384 <_ZN3ros3MsgC1Ev>
 80003b4:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3304      	adds	r3, #4
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ffcf 	bl	8000362 <_ZN3ros4TimeC1Ev>
    {
    }
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4618      	mov	r0, r3
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	08004ee8 	.word	0x08004ee8

080003d4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6859      	ldr	r1, [r3, #4]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	683a      	ldr	r2, [r7, #0]
 80003ea:	4413      	add	r3, r2
 80003ec:	b2ca      	uxtb	r2, r1
 80003ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	0a19      	lsrs	r1, r3, #8
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	3301      	adds	r3, #1
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	b2ca      	uxtb	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	0c19      	lsrs	r1, r3, #16
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3302      	adds	r3, #2
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	4413      	add	r3, r2
 8000410:	b2ca      	uxtb	r2, r1
 8000412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	0e19      	lsrs	r1, r3, #24
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	3303      	adds	r3, #3
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	4413      	add	r3, r2
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3304      	adds	r3, #4
 800042a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6899      	ldr	r1, [r3, #8]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	683a      	ldr	r2, [r7, #0]
 8000434:	4413      	add	r3, r2
 8000436:	b2ca      	uxtb	r2, r1
 8000438:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	0a19      	lsrs	r1, r3, #8
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3301      	adds	r3, #1
 8000444:	683a      	ldr	r2, [r7, #0]
 8000446:	4413      	add	r3, r2
 8000448:	b2ca      	uxtb	r2, r1
 800044a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	0c19      	lsrs	r1, r3, #16
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3302      	adds	r3, #2
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	4413      	add	r3, r2
 800045a:	b2ca      	uxtb	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	0e19      	lsrs	r1, r3, #24
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3303      	adds	r3, #3
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	4413      	add	r3, r2
 800046c:	b2ca      	uxtb	r2, r1
 800046e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3304      	adds	r3, #4
 8000474:	60fb      	str	r3, [r7, #12]
      return offset;
 8000476:	68fb      	ldr	r3, [r7, #12]
    }
 8000478:	4618      	mov	r0, r3
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000482:	b480      	push	{r7}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	440b      	add	r3, r1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	021b      	lsls	r3, r3, #8
 80004ae:	431a      	orrs	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685a      	ldr	r2, [r3, #4]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3302      	adds	r3, #2
 80004bc:	6839      	ldr	r1, [r7, #0]
 80004be:	440b      	add	r3, r1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	041b      	lsls	r3, r3, #16
 80004c4:	431a      	orrs	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685a      	ldr	r2, [r3, #4]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3303      	adds	r3, #3
 80004d2:	6839      	ldr	r1, [r7, #0]
 80004d4:	440b      	add	r3, r1
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	061b      	lsls	r3, r3, #24
 80004da:	431a      	orrs	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3304      	adds	r3, #4
 80004e4:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3301      	adds	r3, #1
 80004fc:	6839      	ldr	r1, [r7, #0]
 80004fe:	440b      	add	r3, r1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	021b      	lsls	r3, r3, #8
 8000504:	431a      	orrs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3302      	adds	r3, #2
 8000512:	6839      	ldr	r1, [r7, #0]
 8000514:	440b      	add	r3, r1
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	041b      	lsls	r3, r3, #16
 800051a:	431a      	orrs	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3303      	adds	r3, #3
 8000528:	6839      	ldr	r1, [r7, #0]
 800052a:	440b      	add	r3, r1
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	061b      	lsls	r3, r3, #24
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3304      	adds	r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
     return offset;
 800053c:	68fb      	ldr	r3, [r7, #12]
    }
 800053e:	4618      	mov	r0, r3
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	08004c88 	.word	0x08004c88

08000560 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	08004c98 	.word	0x08004c98

08000578 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fefe 	bl	8000384 <_ZN3ros3MsgC1Ev>
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	809a      	strh	r2, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a09      	ldr	r2, [pc, #36]	; (80005bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005a4:	611a      	str	r2, [r3, #16]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
    {
    }
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08004ed0 	.word	0x08004ed0
 80005bc:	08004cbc 	.word	0x08004cbc

080005c0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	8899      	ldrh	r1, [r3, #4]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	b2ca      	uxtb	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	b299      	uxth	r1, r3
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	3301      	adds	r3, #1
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	b2ca      	uxtb	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	3302      	adds	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fda6 	bl	800014c <strlen>
 8000600:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	4413      	add	r3, r2
 8000608:	69b9      	ldr	r1, [r7, #24]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fff2 	bl	80015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	3304      	adds	r3, #4
 8000614:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	18d0      	adds	r0, r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	69ba      	ldr	r2, [r7, #24]
 8000622:	4619      	mov	r1, r3
 8000624:	f004 f990 	bl	8004948 <memcpy>
      offset += length_topic_name;
 8000628:	69fa      	ldr	r2, [r7, #28]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	4413      	add	r3, r2
 800062e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fd89 	bl	800014c <strlen>
 800063a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	4413      	add	r3, r2
 8000642:	6979      	ldr	r1, [r7, #20]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 ffd5 	bl	80015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3304      	adds	r3, #4
 800064e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	18d0      	adds	r0, r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4619      	mov	r1, r3
 800065e:	f004 f973 	bl	8004948 <memcpy>
      offset += length_message_type;
 8000662:	69fa      	ldr	r2, [r7, #28]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fd6c 	bl	800014c <strlen>
 8000674:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	6939      	ldr	r1, [r7, #16]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ffb8 	bl	80015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	3304      	adds	r3, #4
 8000688:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	18d0      	adds	r0, r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	4619      	mov	r1, r3
 8000698:	f004 f956 	bl	8004948 <memcpy>
      offset += length_md5sum;
 800069c:	69fa      	ldr	r2, [r7, #28]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4413      	add	r3, r2
 80006a2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80006aa:	68f9      	ldr	r1, [r7, #12]
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	0a19      	lsrs	r1, r3, #8
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	b2ca      	uxtb	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	0c19      	lsrs	r1, r3, #16
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3302      	adds	r3, #2
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	b2ca      	uxtb	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	0e19      	lsrs	r1, r3, #24
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3303      	adds	r3, #3
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	61fb      	str	r3, [r7, #28]
      return offset;
 80006ec:	69fb      	ldr	r3, [r7, #28]
    }
 80006ee:	4618      	mov	r0, r3
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b08a      	sub	sp, #40	; 0x28
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b29a      	uxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	889b      	ldrh	r3, [r3, #4]
 8000716:	b21a      	sxth	r2, r3
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	3301      	adds	r3, #1
 800071c:	6839      	ldr	r1, [r7, #0]
 800071e:	440b      	add	r3, r1
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	b21b      	sxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b21b      	sxth	r3, r3
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	3302      	adds	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	441a      	add	r2, r3
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f000 ff73 	bl	800162e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	3304      	adds	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
 8000752:	69ba      	ldr	r2, [r7, #24]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4413      	add	r3, r2
 8000758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d20c      	bcs.n	8000778 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	441a      	add	r2, r3
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	3b01      	subs	r3, #1
 8000768:	6839      	ldr	r1, [r7, #0]
 800076a:	440b      	add	r3, r1
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	3301      	adds	r3, #1
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
 8000776:	e7ec      	b.n	8000752 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	4413      	add	r3, r2
 800077e:	3b01      	subs	r3, #1
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	3b01      	subs	r3, #1
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	441a      	add	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	4413      	add	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	441a      	add	r2, r3
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 ff40 	bl	800162e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	3304      	adds	r3, #4
 80007b2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	623b      	str	r3, [r7, #32]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4413      	add	r3, r2
 80007be:	6a3a      	ldr	r2, [r7, #32]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d20c      	bcs.n	80007de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	441a      	add	r2, r3
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	440b      	add	r3, r1
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007d6:	6a3b      	ldr	r3, [r7, #32]
 80007d8:	3301      	adds	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e7ec      	b.n	80007b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80007de:	69ba      	ldr	r2, [r7, #24]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	4413      	add	r3, r2
 80007e4:	3b01      	subs	r3, #1
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	441a      	add	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	441a      	add	r2, r3
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ff0d 	bl	800162e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	3304      	adds	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	61fb      	str	r3, [r7, #28]
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	69fa      	ldr	r2, [r7, #28]
 8000826:	429a      	cmp	r2, r3
 8000828:	d20c      	bcs.n	8000844 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	441a      	add	r2, r3
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3b01      	subs	r3, #1
 8000834:	6839      	ldr	r1, [r7, #0]
 8000836:	440b      	add	r3, r1
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3301      	adds	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
 8000842:	e7ec      	b.n	800081e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	3b01      	subs	r3, #1
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3b01      	subs	r3, #1
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	441a      	add	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	6839      	ldr	r1, [r7, #0]
 8000872:	440a      	add	r2, r1
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	4313      	orrs	r3, r2
 8000878:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	3301      	adds	r3, #1
 8000880:	6839      	ldr	r1, [r7, #0]
 8000882:	440b      	add	r3, r1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	4313      	orrs	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	3302      	adds	r3, #2
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	440b      	add	r3, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	041b      	lsls	r3, r3, #16
 800089a:	4313      	orrs	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3303      	adds	r3, #3
 80008a4:	6839      	ldr	r1, [r7, #0]
 80008a6:	440b      	add	r3, r1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	061b      	lsls	r3, r3, #24
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	3304      	adds	r3, #4
 80008ba:	61bb      	str	r3, [r7, #24]
     return offset;
 80008bc:	69bb      	ldr	r3, [r7, #24]
    }
 80008be:	4618      	mov	r0, r3
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	08004cc0 	.word	0x08004cc0

080008e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	08004cdc 	.word	0x08004cdc

080008f8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fd3e 	bl	8000384 <_ZN3ros3MsgC1Ev>
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	711a      	strb	r2, [r3, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000918:	609a      	str	r2, [r3, #8]
    {
    }
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08004eb8 	.word	0x08004eb8
 8000928:	08004cbc 	.word	0x08004cbc

0800092c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fbfb 	bl	800014c <strlen>
 8000956:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4413      	add	r3, r2
 800095e:	68b9      	ldr	r1, [r7, #8]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fe47 	bl	80015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3304      	adds	r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	18d0      	adds	r0, r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	4619      	mov	r1, r3
 800097a:	f003 ffe5 	bl	8004948 <memcpy>
      offset += length_msg;
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
      return offset;
 8000986:	68fb      	ldr	r3, [r7, #12]
    }
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	3301      	adds	r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	441a      	add	r2, r3
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fe36 	bl	800162e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	3304      	adds	r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d20c      	bcs.n	80009f2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	441a      	add	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	440b      	add	r3, r1
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e7ec      	b.n	80009cc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	3b01      	subs	r3, #1
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	441a      	add	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
     return offset;
 8000a16:	693b      	ldr	r3, [r7, #16]
    }
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	08004d00 	.word	0x08004d00

08000a38 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	08004d14 	.word	0x08004d14

08000a50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fc92 	bl	8000384 <_ZN3ros3MsgC1Ev>
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08004ea0 	.word	0x08004ea0

08000aac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6859      	ldr	r1, [r3, #4]
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	0a19      	lsrs	r1, r3, #8
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	0c19      	lsrs	r1, r3, #16
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2ca      	uxtb	r2, r1
 8000aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	0e19      	lsrs	r1, r3, #24
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3303      	adds	r3, #3
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3304      	adds	r3, #4
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d22b      	bcs.n	8000b6a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000b20:	6939      	ldr	r1, [r7, #16]
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	b2ca      	uxtb	r2, r1
 8000b2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	0a19      	lsrs	r1, r3, #8
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	3301      	adds	r3, #1
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	0c19      	lsrs	r1, r3, #16
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	3302      	adds	r3, #2
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2ca      	uxtb	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	0e19      	lsrs	r1, r3, #24
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	3303      	adds	r3, #3
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	b2ca      	uxtb	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	3304      	adds	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	3301      	adds	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	e7ce      	b.n	8000b08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6919      	ldr	r1, [r3, #16]
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	b2ca      	uxtb	r2, r1
 8000b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	0a19      	lsrs	r1, r3, #8
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	3301      	adds	r3, #1
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	b2ca      	uxtb	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	0c19      	lsrs	r1, r3, #16
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	3302      	adds	r3, #2
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	b2ca      	uxtb	r2, r1
 8000b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	0e19      	lsrs	r1, r3, #24
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d22b      	bcs.n	8000c1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	699a      	ldr	r2, [r3, #24]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000bd0:	68f9      	ldr	r1, [r7, #12]
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	0a19      	lsrs	r1, r3, #8
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	3301      	adds	r3, #1
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	b2ca      	uxtb	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	0c19      	lsrs	r1, r3, #16
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	0e19      	lsrs	r1, r3, #24
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	3303      	adds	r3, #3
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	3304      	adds	r3, #4
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3301      	adds	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	e7ce      	b.n	8000bb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69d9      	ldr	r1, [r3, #28]
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	b2ca      	uxtb	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	0a19      	lsrs	r1, r3, #8
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	3301      	adds	r3, #1
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	0c19      	lsrs	r1, r3, #16
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	3302      	adds	r3, #2
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2ca      	uxtb	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	0e19      	lsrs	r1, r3, #24
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	3303      	adds	r3, #3
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	3304      	adds	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d228      	bcs.n	8000cc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fa64 	bl	800014c <strlen>
 8000c84:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	6979      	ldr	r1, [r7, #20]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fcb0 	bl	80015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	3304      	adds	r3, #4
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	18d0      	adds	r0, r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f003 fe4a 	bl	8004948 <memcpy>
      offset += length_stringsi;
 8000cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	4413      	add	r3, r2
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	e7d1      	b.n	8000c68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b08e      	sub	sp, #56	; 0x38
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce8:	3301      	adds	r3, #1
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	6a3a      	ldr	r2, [r7, #32]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	6a3a      	ldr	r2, [r7, #32]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	061b      	lsls	r3, r3, #24
 8000d16:	6a3a      	ldr	r2, [r7, #32]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1e:	3304      	adds	r3, #4
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	6a3a      	ldr	r2, [r7, #32]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d90a      	bls.n	8000d42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4619      	mov	r1, r3
 8000d36:	4610      	mov	r0, r2
 8000d38:	f003 fe1c 	bl	8004974 <realloc>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a3a      	ldr	r2, [r7, #32]
 8000d46:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d236      	bcs.n	8000dc4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	440a      	add	r2, r1
 8000d62:	7812      	ldrb	r2, [r2, #0]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	4313      	orrs	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7e:	3302      	adds	r3, #2
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	440b      	add	r3, r1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	3303      	adds	r3, #3
 8000d92:	6839      	ldr	r1, [r7, #0]
 8000d94:	440b      	add	r3, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	061b      	lsls	r3, r3, #24
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da6:	3304      	adds	r3, #4
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc2:	e7c3      	b.n	8000d4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de2:	3302      	adds	r3, #2
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df4:	3303      	adds	r3, #3
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	061b      	lsls	r3, r3, #24
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e06:	3304      	adds	r3, #4
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d90a      	bls.n	8000e2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699a      	ldr	r2, [r3, #24]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4610      	mov	r0, r2
 8000e20:	f003 fda8 	bl	8004974 <realloc>
 8000e24:	4602      	mov	r2, r0
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d236      	bcs.n	8000eac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	440a      	add	r2, r1
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e54:	3301      	adds	r3, #1
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	440b      	add	r3, r1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	3302      	adds	r3, #2
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	041b      	lsls	r3, r3, #16
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	3303      	adds	r3, #3
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	061b      	lsls	r3, r3, #24
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8e:	3304      	adds	r3, #4
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	3214      	adds	r2, #20
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eaa:	e7c3      	b.n	8000e34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	3301      	adds	r3, #1
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eca:	3302      	adds	r3, #2
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	3303      	adds	r3, #3
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	061b      	lsls	r3, r3, #24
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	3304      	adds	r3, #4
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d90a      	bls.n	8000f12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f003 fd34 	bl	8004974 <realloc>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d23f      	bcs.n	8000fa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	441a      	add	r2, r3
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fb7b 	bl	800162e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d20c      	bcs.n	8000f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	441a      	add	r2, r3
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	440b      	add	r3, r1
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3301      	adds	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	e7ec      	b.n	8000f42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	441a      	add	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	3220      	adds	r2, #32
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa4:	e7ba      	b.n	8000f1c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8000fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3738      	adds	r7, #56	; 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	08004e0c 	.word	0x08004e0c

08000fc8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	08004d38 	.word	0x08004d38

08000fe0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68d8      	ldr	r0, [r3, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6891      	ldr	r1, [r2, #8]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
  };
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
  }
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <_ZN13STM32HardwareC1Ev+0x34>)
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000090 	.word	0x20000090

080010a8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f804 	bl	80010be <_ZN13STM32Hardware10reset_rbufEv>
    }
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3304      	adds	r3, #4
 80010ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d2:	4619      	mov	r1, r3
 80010d4:	f002 fcd0 	bl	8003a78 <HAL_UART_Receive_DMA>
    }
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffa8 	bl	800104a <_ZN13STM32Hardware10getRdmaIndEv>
 80010fa:	4603      	mov	r3, r0
 80010fc:	429c      	cmp	r4, r3
 80010fe:	bf14      	ite	ne
 8001100:	2301      	movne	r3, #1
 8001102:	2300      	moveq	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001110:	1c59      	adds	r1, r3, #1
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001130:	68fb      	ldr	r3, [r7, #12]
    }
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b20      	cmp	r3, #32
 8001150:	d108      	bne.n	8001164 <_ZN13STM32Hardware5flushEv+0x28>
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <_ZN13STM32Hardware5flushEv+0x28>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <_ZN13STM32Hardware5flushEv+0x2a>
 8001164:	2300      	movs	r3, #0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d055      	beq.n	8001216 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <_ZN13STM32Hardware5flushEv+0xe4>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800117c:	429a      	cmp	r2, r3
 800117e:	d047      	beq.n	8001210 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	81fb      	strh	r3, [r7, #14]
          if(tfind < twind){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001190:	429a      	cmp	r2, r3
 8001192:	d217      	bcs.n	80011c4 <_ZN13STM32Hardware5flushEv+0x88>
            len = twind - tfind;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	89fa      	ldrh	r2, [r7, #14]
 80011bc:	4619      	mov	r1, r3
 80011be:	f002 fbeb 	bl	8003998 <HAL_UART_Transmit_DMA>
 80011c2:	e01f      	b.n	8001204 <_ZN13STM32Hardware5flushEv+0xc8>
          }
          else{
            len = tbuflen - tfind;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011d0:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	89fa      	ldrh	r2, [r7, #14]
 80011e6:	4619      	mov	r1, r3
 80011e8:	f002 fbd6 	bl	8003998 <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_DMA(huart, tbuf, twind);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	f002 fbca 	bl	8003998 <HAL_UART_Transmit_DMA>
          }
          tfind = twind;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
      }
    }
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000160 	.word	0x20000160

08001224 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123a:	bfa8      	it	ge
 800123c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001240:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001248:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4293      	cmp	r3, r2
 8001250:	bf28      	it	cs
 8001252:	4613      	movcs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800125c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fb6d 	bl	8004948 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	429a      	cmp	r2, r3
 8001288:	d00b      	beq.n	80012a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	18d1      	adds	r1, r2, r3
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	461a      	mov	r2, r3
 800129e:	f003 fb53 	bl	8004948 <memcpy>
      }

      flush();
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff ff4a 	bl	800113c <_ZN13STM32Hardware5flushEv>
    }
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	f001 f97a 	bl	80025b0 <HAL_GetTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
      data(0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f856 	bl	8000384 <_ZN3ros3MsgC1Ev>
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	809a      	strh	r2, [r3, #4]
    {
    }
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08004e5c 	.word	0x08004e5c

080012f4 <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8899      	ldrh	r1, [r3, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	4413      	add	r3, r2
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	889b      	ldrh	r3, [r3, #4]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b299      	uxth	r1, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	4413      	add	r3, r2
 8001320:	b2ca      	uxtb	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3302      	adds	r3, #2
 8001328:	60fb      	str	r3, [r7, #12]
      return offset;
 800132a:	68fb      	ldr	r3, [r7, #12]
    }
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	b21a      	sxth	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	440b      	add	r3, r1
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3302      	adds	r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
     return offset;
 8001376:	68fb      	ldr	r3, [r7, #12]
    }
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
	...

08001384 <_ZN8std_msgs6UInt167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt16"; };
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <_ZN8std_msgs6UInt167getTypeEv+0x14>)
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	08004d5c 	.word	0x08004d5c

0800139c <_ZN8std_msgs6UInt166getMD5Ev>:
    virtual const char * getMD5() override { return "1df79edf208b629fe6b81923a544552d"; };
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <_ZN8std_msgs6UInt166getMD5Ev+0x14>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	08004d6c 	.word	0x08004d6c

080013b4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	08004e8c 	.word	0x08004e8c

080013d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ffe8 	bl	80013b4 <_ZN3ros15NodeHandleBase_C1Ev>
 80013e4:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe3e 	bl	8001070 <_ZN13STM32HardwareC1Ev>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fa9f 	bl	8004964 <memset>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800142c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fa96 	bl	8004964 <memset>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800143e:	2264      	movs	r2, #100	; 0x64
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fa8e 	bl	8004964 <memset>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800144e:	2264      	movs	r2, #100	; 0x64
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fa86 	bl	8004964 <memset>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff face 	bl	8000a50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	08004e48 	.word	0x08004e48

080014c4 <_Z18leftCmdVelCallBackRKN8std_msgs6UInt16E>:
volatile uint16_t left_motor_vel = 0;
volatile uint16_t right_motor_vel = 0;

// ******************* Motor Velocity Callback ************************* 
void leftCmdVelCallBack(const std_msgs::UInt16& left_vel)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80014cc:	2102      	movs	r1, #2
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <_Z18leftCmdVelCallBackRKN8std_msgs6UInt16E+0x20>)
 80014d0:	f001 fde8 	bl	80030a4 <HAL_GPIO_TogglePin>
	left_motor_vel = left_vel.data;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	889a      	ldrh	r2, [r3, #4]
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <_Z18leftCmdVelCallBackRKN8std_msgs6UInt16E+0x24>)
 80014da:	801a      	strh	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	20000ab0 	.word	0x20000ab0

080014ec <_Z19rightCmdVelCallBackRKN8std_msgs6UInt16E>:

void rightCmdVelCallBack(const std_msgs::UInt16& right_vel)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80014f4:	2101      	movs	r1, #1
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <_Z19rightCmdVelCallBackRKN8std_msgs6UInt16E+0x20>)
 80014f8:	f001 fdd4 	bl	80030a4 <HAL_GPIO_TogglePin>
	right_motor_vel = right_vel.data;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	889a      	ldrh	r2, [r3, #4]
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <_Z19rightCmdVelCallBackRKN8std_msgs6UInt16E+0x24>)
 8001502:	801a      	strh	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40010c00 	.word	0x40010c00
 8001510:	20000ab2 	.word	0x20000ab2

08001514 <HAL_UART_TxCpltCallback>:

// ************************** Declare publishers **********************************
ros::Publisher left_motor_pub("left_motor_pos", &left_motor_pos);
ros::Publisher right_motor_pub("right_motor_pos", &right_motor_pos);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_UART_TxCpltCallback+0x20>)
 800151e:	f000 f8df 	bl	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe09 	bl	800113c <_ZN13STM32Hardware5flushEv>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000164 	.word	0x20000164

08001538 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_UART_RxCpltCallback+0x20>)
 8001542:	f000 f8cd 	bl	80016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001546:	4603      	mov	r3, r0
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fdb8 	bl	80010be <_ZN13STM32Hardware10reset_rbufEv>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000164 	.word	0x20000164

0800155c <setup>:

void setup(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  nh.initNode();
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <setup+0x30>)
 8001562:	f000 f8c8 	bl	80016f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  // Initiate publishers and subscribers
  nh.advertise(left_motor_pub);
 8001566:	490a      	ldr	r1, [pc, #40]	; (8001590 <setup+0x34>)
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <setup+0x30>)
 800156a:	f000 f8e1 	bl	8001730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(right_motor_pub);
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <setup+0x38>)
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <setup+0x30>)
 8001572:	f000 f8dd 	bl	8001730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

  nh.subscribe(left_motor_vel_sub);
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <setup+0x3c>)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <setup+0x30>)
 800157a:	f000 f908 	bl	800178e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.subscribe(right_motor_vel_sub);
 800157e:	4907      	ldr	r1, [pc, #28]	; (800159c <setup+0x40>)
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <setup+0x30>)
 8001582:	f000 f904 	bl	800178e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000164 	.word	0x20000164
 8001590:	20000aec 	.word	0x20000aec
 8001594:	20000b00 	.word	0x20000b00
 8001598:	20000ab4 	.word	0x20000ab4
 800159c:	20000ad0 	.word	0x20000ad0

080015a0 <loop>:

void loop(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
#endif
#ifdef STM32F3xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#endif
  // Publish new data
  left_motor_pos.data = left_motor_vel;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <loop+0x38>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <loop+0x3c>)
 80015ac:	809a      	strh	r2, [r3, #4]
  left_motor_pub.publish(&left_motor_pos);
 80015ae:	490b      	ldr	r1, [pc, #44]	; (80015dc <loop+0x3c>)
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <loop+0x40>)
 80015b2:	f7ff fd2b 	bl	800100c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  right_motor_pos.data = right_motor_vel;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <loop+0x44>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <loop+0x48>)
 80015be:	809a      	strh	r2, [r3, #4]
  right_motor_pub.publish(&right_motor_pos);
 80015c0:	4909      	ldr	r1, [pc, #36]	; (80015e8 <loop+0x48>)
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <loop+0x4c>)
 80015c4:	f7ff fd22 	bl	800100c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  nh.spinOnce();
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <loop+0x50>)
 80015ca:	f000 f90a 	bl	80017e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(20);
 80015ce:	2014      	movs	r0, #20
 80015d0:	f000 fff8 	bl	80025c4 <HAL_Delay>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000ab0 	.word	0x20000ab0
 80015dc:	20000aa0 	.word	0x20000aa0
 80015e0:	20000aec 	.word	0x20000aec
 80015e4:	20000ab2 	.word	0x20000ab2
 80015e8:	20000aa8 	.word	0x20000aa8
 80015ec:	20000b00 	.word	0x20000b00
 80015f0:	20000164 	.word	0x20000164

080015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d80d      	bhi.n	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	fa22 f103 	lsr.w	r1, r2, r3
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e7ee      	b.n	8001602 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d811      	bhi.n	800166c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	440a      	add	r2, r1
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	4611      	mov	r1, r2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	00d2      	lsls	r2, r2, #3
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e7ea      	b.n	8001642 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	08004e74 	.word	0x08004e74

08001698 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffe5 	bl	8001678 <_ZN3ros11Subscriber_C1Ev>
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	330c      	adds	r3, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe05 	bl	80012c8 <_ZN8std_msgs6UInt16C1Ev>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	609a      	str	r2, [r3, #8]
  };
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	08004e30 	.word	0x08004e30

080016e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3304      	adds	r3, #4
  }
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fcd0 	bl	80010a8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b18      	cmp	r3, #24
 8001742:	dc1e      	bgt.n	8001782 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d111      	bne.n	800177a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	60da      	str	r2, [r3, #12]
        return true;
 8001776:	2301      	movs	r3, #1
 8001778:	e004      	b.n	8001784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e7dd      	b.n	800173e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001782:	2300      	movs	r3, #0
  }
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b18      	cmp	r3, #24
 80017a0:	dc19      	bgt.n	80017d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	605a      	str	r2, [r3, #4]
        return true;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e004      	b.n	80017d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e7e2      	b.n	800179c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80017d6:	2300      	movs	r3, #0
  }
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3304      	adds	r3, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fd5e 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 80017f4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001804:	4293      	cmp	r3, r2
 8001806:	d903      	bls.n	8001810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	429a      	cmp	r2, r3
 8001824:	d903      	bls.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001834:	2b00      	cmp	r3, #0
 8001836:	d014      	beq.n	8001862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd37 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 8001842:	4602      	mov	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad2      	subs	r2, r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800184e:	429a      	cmp	r2, r3
 8001850:	bf8c      	ite	hi
 8001852:	2301      	movhi	r3, #1
 8001854:	2300      	movls	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800185c:	f06f 0301 	mvn.w	r3, #1
 8001860:	e194      	b.n	8001b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc3a 	bl	80010e0 <_ZN13STM32Hardware4readEv>
 800186c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f2c0 8174 	blt.w	8001b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	441a      	add	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800188c:	2b07      	cmp	r3, #7
 800188e:	d11e      	bne.n	80018ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	b2d1      	uxtb	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1b4      	bne.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2208      	movs	r2, #8
 80018c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018cc:	e7af      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d128      	bne.n	800192a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d10d      	bne.n	80018fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f103 0214 	add.w	r2, r3, #20
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80018f8:	e799      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fcd6 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	bf8c      	ite	hi
 8001912:	2301      	movhi	r3, #1
 8001914:	2300      	movls	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d088      	beq.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001924:	f06f 0301 	mvn.w	r3, #1
 8001928:	e130      	b.n	8001b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001930:	2b01      	cmp	r3, #1
 8001932:	d118      	bne.n	8001966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2bfe      	cmp	r3, #254	; 0xfe
 8001938:	d107      	bne.n	800194a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001948:	e771      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f af68 	bne.w	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f918 	bl	8001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001964:	e763      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800196c:	2b02      	cmp	r3, #2
 800196e:	d113      	bne.n	8001998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001996:	e74a      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d110      	bne.n	80019c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	441a      	add	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80019c2:	e734      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d116      	bne.n	80019fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80019d4:	425a      	negs	r2, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	bf58      	it	pl
 80019dc:	4253      	negpl	r3, r2
 80019de:	2bff      	cmp	r3, #255	; 0xff
 80019e0:	d107      	bne.n	80019f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80019f0:	e71d      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80019fa:	e718      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d10f      	bne.n	8001a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001a24:	e703      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a2c:	2b06      	cmp	r3, #6
 8001a2e:	d117      	bne.n	8001a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	441a      	add	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2207      	movs	r2, #7
 8001a46:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aeec 	bne.w	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a5e:	e6e6      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	f47f aee1 	bne.w	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001a7a:	425a      	negs	r2, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	bf58      	it	pl
 8001a82:	4253      	negpl	r3, r2
 8001a84:	2bff      	cmp	r3, #255	; 0xff
 8001a86:	f47f aed2 	bne.w	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d110      	bne.n	8001ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f87d 	bl	8001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f898 	bl	8001bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e06a      	b.n	8001b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001abc:	2b0a      	cmp	r3, #10
 8001abe:	d107      	bne.n	8001ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f961 	bl	8001d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001ace:	e6ae      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d10e      	bne.n	8001af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f7ff f8f0 	bl	8000cce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001af6:	e69a      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001afe:	2b0b      	cmp	r3, #11
 8001b00:	d104      	bne.n	8001b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001b0a:	e690      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b12:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f43f ae84 	beq.w	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b2c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b40:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4798      	blx	r3
    while (true)
 8001b5c:	e667      	b.n	800182e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001b5e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00f      	beq.n	8001b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d906      	bls.n	8001b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f809 	bl	8001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001b8a:	2300      	movs	r3, #0
  }
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fbff 	bl	80003a4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f107 020c 	add.w	r2, r7, #12
 8001bb0:	210a      	movs	r1, #10
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
    rt_time = hardware_.time();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb78 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b08b      	sub	sp, #44	; 0x2c
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fccb 	bl	8000578 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	2b18      	cmp	r3, #24
 8001bea:	dc63      	bgt.n	8001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d056      	beq.n	8001cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3308      	adds	r3, #8
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4608      	mov	r0, r1
 8001c4c:	4798      	blx	r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	330c      	adds	r3, #12
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4798      	blx	r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c84:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681c      	ldr	r4, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f9ca 	bl	8001034 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	e798      	b.n	8001be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	dc5f      	bgt.n	8001d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d053      	beq.n	8001d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4608      	mov	r0, r1
 8001d10:	4798      	blx	r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	330c      	adds	r3, #12
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4608      	mov	r0, r1
 8001d36:	4798      	blx	r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d40:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681c      	ldr	r4, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4608      	mov	r0, r1
 8001d68:	4798      	blx	r3
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	461a      	mov	r2, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	e79c      	b.n	8001cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001d86:	bf00      	nop
 8001d88:	372c      	adds	r7, #44	; 0x2c
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
	...

08001d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fb00 	bl	80003a4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fa81 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	6839      	ldr	r1, [r7, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb5e 	bl	8000482 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	4915      	ldr	r1, [pc, #84]	; (8001e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001dcc:	fba1 1303 	umull	r1, r3, r1, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001dd6:	6939      	ldr	r1, [r7, #16]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001ddc:	fba3 0302 	umull	r0, r3, r3, r2
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de6:	fb00 f303 	mul.w	r3, r0, r3
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	440b      	add	r3, r1
 8001df4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8a6 	bl	8001f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fa51 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	10624dd3 	.word	0x10624dd3
 8001e24:	000f4240 	.word	0x000f4240

08001e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b63      	cmp	r3, #99	; 0x63
 8001e38:	dd09      	ble.n	8001e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e079      	b.n	8001f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001e5a:	3207      	adds	r2, #7
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	22fe      	movs	r2, #254	; 0xfe
 8001e70:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	121b      	asrs	r3, r3, #8
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3306      	adds	r3, #6
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dc0d      	bgt.n	8001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	e7ec      	b.n	8001eca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	425a      	negs	r2, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	bf58      	it	pl
 8001f00:	4253      	negpl	r3, r2
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	6179      	str	r1, [r7, #20]
 8001f0a:	43d2      	mvns	r2, r2
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	460a      	mov	r2, r1
 8001f14:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1e:	dc0a      	bgt.n	8001f36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1d18      	adds	r0, r3, #4
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7ff f979 	bl	8001224 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	e005      	b.n	8001f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001f36:	4905      	ldr	r1, [pc, #20]	; (8001f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f849 	bl	8001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08004d90 	.word	0x08004d90

08001f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f9a6 	bl	80012b0 <_ZN13STM32Hardware4timeEv>
 8001f64:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4915      	ldr	r1, [pc, #84]	; (8001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001f6e:	fba1 1303 	umull	r1, r3, r1, r3
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001f86:	fba3 0302 	umull	r0, r3, r3, r2
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f90:	fb00 f303 	mul.w	r3, r0, r3
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	1aca      	subs	r2, r1, r3
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f000 fa50 	bl	800245c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	10624dd3 	.word	0x10624dd3
 8001fc8:	000f4240 	.word	0x000f4240
 8001fcc:	3b9aca00 	.word	0x3b9aca00

08001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	2103      	movs	r1, #3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f804 	bl	8001fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fc7a 	bl	80008f8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f107 0214 	add.w	r2, r7, #20
 8002016:	2107      	movs	r1, #7
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	4798      	blx	r3
  }
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_Z41__static_initialization_and_destruction_0ii>:
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d125      	bne.n	8002080 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203a:	4293      	cmp	r3, r2
 800203c:	d120      	bne.n	8002080 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 800203e:	4812      	ldr	r0, [pc, #72]	; (8002088 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002040:	f7ff f9c8 	bl	80013d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt16 left_motor_pos;
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002046:	f7ff f93f 	bl	80012c8 <_ZN8std_msgs6UInt16C1Ev>
std_msgs::UInt16 right_motor_pos;
 800204a:	4811      	ldr	r0, [pc, #68]	; (8002090 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800204c:	f7ff f93c 	bl	80012c8 <_ZN8std_msgs6UInt16C1Ev>
ros::Subscriber<std_msgs::UInt16> left_motor_vel_sub("left_motor_vel", &leftCmdVelCallBack);
 8002050:	2301      	movs	r3, #1
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002054:	4910      	ldr	r1, [pc, #64]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002058:	f7ff fb1e 	bl	8001698 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt16> right_motor_vel_sub("right_motor_vel", &rightCmdVelCallBack);
 800205c:	2301      	movs	r3, #1
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002060:	4910      	ldr	r1, [pc, #64]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002062:	4811      	ldr	r0, [pc, #68]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002064:	f7ff fb18 	bl	8001698 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
ros::Publisher left_motor_pub("left_motor_pos", &left_motor_pos);
 8002068:	2300      	movs	r3, #0
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800206c:	490f      	ldr	r1, [pc, #60]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002070:	f7fe ffb6 	bl	8000fe0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher right_motor_pub("right_motor_pos", &right_motor_pos);
 8002074:	2300      	movs	r3, #0
 8002076:	4a06      	ldr	r2, [pc, #24]	; (8002090 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800207a:	480f      	ldr	r0, [pc, #60]	; (80020b8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800207c:	f7fe ffb0 	bl	8000fe0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000164 	.word	0x20000164
 800208c:	20000aa0 	.word	0x20000aa0
 8002090:	20000aa8 	.word	0x20000aa8
 8002094:	080014c5 	.word	0x080014c5
 8002098:	08004dcc 	.word	0x08004dcc
 800209c:	20000ab4 	.word	0x20000ab4
 80020a0:	080014ed 	.word	0x080014ed
 80020a4:	08004ddc 	.word	0x08004ddc
 80020a8:	20000ad0 	.word	0x20000ad0
 80020ac:	08004dec 	.word	0x08004dec
 80020b0:	20000aec 	.word	0x20000aec
 80020b4:	08004dfc 	.word	0x08004dfc
 80020b8:	20000b00 	.word	0x20000b00

080020bc <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	330c      	adds	r3, #12
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f932 	bl	8001336 <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	320c      	adds	r2, #12
 80020da:	4610      	mov	r0, r2
 80020dc:	4798      	blx	r3
  }
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
  }
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	330c      	adds	r3, #12
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f93b 	bl	8001384 <_ZN8std_msgs6UInt167getTypeEv>
 800210e:	4603      	mov	r3, r0
  }
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	330c      	adds	r3, #12
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f939 	bl	800139c <_ZN8std_msgs6UInt166getMD5Ev>
 800212a:	4603      	mov	r3, r0
  }
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    return configured_;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <_GLOBAL__sub_I_nh>:
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
 8002150:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff ff65 	bl	8002024 <_Z41__static_initialization_and_destruction_0ii>
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_MspInit+0x5c>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_MspInit+0x5c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6193      	str	r3, [r2, #24]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_MspInit+0x5c>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x5c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_MspInit+0x5c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_MspInit+0x5c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_MspInit+0x60>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_MspInit+0x60>)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <HAL_UART_MspInit+0x138>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	f040 8086 	bne.w	80022ee <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_UART_MspInit+0x13c>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a45      	ldr	r2, [pc, #276]	; (80022fc <HAL_UART_MspInit+0x13c>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_UART_MspInit+0x13c>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_UART_MspInit+0x13c>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <HAL_UART_MspInit+0x13c>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6193      	str	r3, [r2, #24]
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_UART_MspInit+0x13c>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4619      	mov	r1, r3
 8002226:	4836      	ldr	r0, [pc, #216]	; (8002300 <HAL_UART_MspInit+0x140>)
 8002228:	f000 fda0 	bl	8002d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800222c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0310 	add.w	r3, r7, #16
 800223e:	4619      	mov	r1, r3
 8002240:	482f      	ldr	r0, [pc, #188]	; (8002300 <HAL_UART_MspInit+0x140>)
 8002242:	f000 fd93 	bl	8002d6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_UART_MspInit+0x144>)
 8002248:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <HAL_UART_MspInit+0x148>)
 800224a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_UART_MspInit+0x144>)
 800224e:	2200      	movs	r2, #0
 8002250:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <HAL_UART_MspInit+0x144>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_UART_MspInit+0x144>)
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_UART_MspInit+0x144>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_UART_MspInit+0x144>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_UART_MspInit+0x144>)
 800226c:	2220      	movs	r2, #32
 800226e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_UART_MspInit+0x144>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002276:	4823      	ldr	r0, [pc, #140]	; (8002304 <HAL_UART_MspInit+0x144>)
 8002278:	f000 fad6 	bl	8002828 <HAL_DMA_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002282:	f7fe f869 	bl	8000358 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_UART_MspInit+0x144>)
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_UART_MspInit+0x144>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_UART_MspInit+0x14c>)
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_UART_MspInit+0x150>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_UART_MspInit+0x14c>)
 800229a:	2210      	movs	r2, #16
 800229c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022c2:	4812      	ldr	r0, [pc, #72]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022c4:	f000 fab0 	bl	8002828 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80022ce:	f7fe f843 	bl	8000358 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_UART_MspInit+0x14c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	2025      	movs	r0, #37	; 0x25
 80022e4:	f000 fa69 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022e8:	2025      	movs	r0, #37	; 0x25
 80022ea:	f000 fa82 	bl	80027f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010800 	.word	0x40010800
 8002304:	200000d8 	.word	0x200000d8
 8002308:	40020058 	.word	0x40020058
 800230c:	2000011c 	.word	0x2000011c
 8002310:	40020044 	.word	0x40020044

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002318:	e7fe      	b.n	8002318 <NMI_Handler+0x4>

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235a:	f000 f917 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA1_Channel4_IRQHandler+0x10>)
 800236a:	f000 fbcb 	bl	8002b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000011c 	.word	0x2000011c

08002378 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <DMA1_Channel5_IRQHandler+0x10>)
 800237e:	f000 fbc1 	bl	8002b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200000d8 	.word	0x200000d8

0800238c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <USART1_IRQHandler+0x10>)
 8002392:	f001 fb97 	bl	8003ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000090 	.word	0x20000090

080023a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return 1;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <_kill>:

int _kill(int pid, int sig)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b8:	f002 fa9c 	bl	80048f4 <__errno>
 80023bc:	4603      	mov	r3, r0
 80023be:	2216      	movs	r2, #22
 80023c0:	601a      	str	r2, [r3, #0]
  return -1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_exit>:

void _exit (int status)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d6:	f04f 31ff 	mov.w	r1, #4294967295
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffe7 	bl	80023ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80023e0:	e7fe      	b.n	80023e0 <_exit+0x12>
	...

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f002 fa6e 	bl	80048f4 <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20005000 	.word	0x20005000
 8002444:	00000400 	.word	0x00000400
 8002448:	20000b14 	.word	0x20000b14
 800244c:	20000b30 	.word	0x20000b30

08002450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0a5a      	lsrs	r2, r3, #9
 800246c:	490f      	ldr	r1, [pc, #60]	; (80024ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800246e:	fba1 1202 	umull	r1, r2, r1, r2
 8002472:	09d2      	lsrs	r2, r2, #7
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002476:	fb01 f202 	mul.w	r2, r1, r2
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0a5b      	lsrs	r3, r3, #9
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	09db      	lsrs	r3, r3, #7
 800248c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	601a      	str	r2, [r3, #0]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	00044b83 	.word	0x00044b83
 80024b0:	3b9aca00 	.word	0x3b9aca00

080024b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b4:	f7ff ffcc 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b8:	480b      	ldr	r0, [pc, #44]	; (80024e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024ba:	490c      	ldr	r1, [pc, #48]	; (80024ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024d0:	4c09      	ldr	r4, [pc, #36]	; (80024f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024de:	f002 fa0f 	bl	8004900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024e2:	f7fd fe3b 	bl	800015c <main>
  bx lr
 80024e6:	4770      	bx	lr
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024f0:	08004f48 	.word	0x08004f48
  ldr r2, =_sbss
 80024f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80024f8:	20000b2c 	.word	0x20000b2c

080024fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC1_2_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_Init+0x28>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <HAL_Init+0x28>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 f947 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002516:	200f      	movs	r0, #15
 8002518:	f000 f808 	bl	800252c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800251c:	f7ff fe1e 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40022000 	.word	0x40022000

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x54>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x58>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f95f 	bl	800280e <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 f927 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <HAL_InitTick+0x5c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000000 	.word	0x20000000
 8002584:	20000008 	.word	0x20000008
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_IncTick+0x1c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_IncTick+0x20>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_IncTick+0x20>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20000b18 	.word	0x20000b18

080025b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <HAL_GetTick+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000b18 	.word	0x20000b18

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_Delay+0x44>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ea:	bf00      	nop
 80025ec:	f7ff ffe0 	bl	80025b0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000008 	.word	0x20000008

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4906      	ldr	r1, [pc, #24]	; (80026a4 <__NVIC_EnableIRQ+0x34>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff90 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff2d 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff42 	bl	8002654 <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ff90 	bl	80026fc <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff5f 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff35 	bl	8002670 <__NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffa2 	bl	8002760 <SysTick_Config>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e043      	b.n	80028c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_DMA_Init+0xa8>)
 8002846:	4413      	add	r3, r2
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_DMA_Init+0xac>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	009a      	lsls	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_DMA_Init+0xb0>)
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002872:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	bffdfff8 	.word	0xbffdfff8
 80028d4:	cccccccd 	.word	0xcccccccd
 80028d8:	40020000 	.word	0x40020000

080028dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_DMA_Start_IT+0x20>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e04b      	b.n	8002994 <HAL_DMA_Start_IT+0xb8>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d13a      	bne.n	8002986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9eb 	bl	8002d10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 020e 	orr.w	r2, r2, #14
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e00f      	b.n	8002974 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 020a 	orr.w	r2, r2, #10
 8002972:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e005      	b.n	8002992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800298e:	2302      	movs	r3, #2
 8002990:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d008      	beq.n	80029c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e020      	b.n	8002a08 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 020e 	bic.w	r2, r2, #14
 80029d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d005      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e051      	b.n	8002adc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Abort_IT+0xd4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d029      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_DMA_Abort_IT+0xd8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0x9e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_DMA_Abort_IT+0xdc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01a      	beq.n	8002aac <HAL_DMA_Abort_IT+0x98>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_DMA_Abort_IT+0xe0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d012      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x92>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_DMA_Abort_IT+0xe4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00a      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x8c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_DMA_Abort_IT+0xe8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d102      	bne.n	8002a9a <HAL_DMA_Abort_IT+0x86>
 8002a94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a98:	e00e      	b.n	8002ab8 <HAL_DMA_Abort_IT+0xa4>
 8002a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9e:	e00b      	b.n	8002ab8 <HAL_DMA_Abort_IT+0xa4>
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	e008      	b.n	8002ab8 <HAL_DMA_Abort_IT+0xa4>
 8002aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aaa:	e005      	b.n	8002ab8 <HAL_DMA_Abort_IT+0xa4>
 8002aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab0:	e002      	b.n	8002ab8 <HAL_DMA_Abort_IT+0xa4>
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_Abort_IT+0xa4>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_DMA_Abort_IT+0xec>)
 8002aba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
    } 
  }
  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40020008 	.word	0x40020008
 8002aec:	4002001c 	.word	0x4002001c
 8002af0:	40020030 	.word	0x40020030
 8002af4:	40020044 	.word	0x40020044
 8002af8:	40020058 	.word	0x40020058
 8002afc:	4002006c 	.word	0x4002006c
 8002b00:	40020000 	.word	0x40020000

08002b04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2204      	movs	r2, #4
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d04f      	beq.n	8002bcc <HAL_DMA_IRQHandler+0xc8>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d04a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d029      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0xae>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a65      	ldr	r2, [pc, #404]	; (8002cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_IRQHandler+0xaa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <HAL_DMA_IRQHandler+0x1f8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01a      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0xa4>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a62      	ldr	r2, [pc, #392]	; (8002d00 <HAL_DMA_IRQHandler+0x1fc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d012      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x9e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a60      	ldr	r2, [pc, #384]	; (8002d04 <HAL_DMA_IRQHandler+0x200>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00a      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x98>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5f      	ldr	r2, [pc, #380]	; (8002d08 <HAL_DMA_IRQHandler+0x204>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_DMA_IRQHandler+0x92>
 8002b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b94:	e00e      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xb0>
 8002b96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b9a:	e00b      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xb0>
 8002b9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ba0:	e008      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xb0>
 8002ba2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba6:	e005      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xb0>
 8002ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bac:	e002      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xb0>
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xb0>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	4a55      	ldr	r2, [pc, #340]	; (8002d0c <HAL_DMA_IRQHandler+0x208>)
 8002bb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8094 	beq.w	8002cea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bca:	e08e      	b.n	8002cea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d056      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x186>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d051      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 020a 	bic.w	r2, r2, #10
 8002c02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a38      	ldr	r2, [pc, #224]	; (8002cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d029      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x166>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a37      	ldr	r2, [pc, #220]	; (8002cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x162>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_DMA_IRQHandler+0x1f8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01a      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x15c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <HAL_DMA_IRQHandler+0x1fc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x156>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <HAL_DMA_IRQHandler+0x200>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00a      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x150>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <HAL_DMA_IRQHandler+0x204>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d102      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x14a>
 8002c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c4c:	e00e      	b.n	8002c6c <HAL_DMA_IRQHandler+0x168>
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	e00b      	b.n	8002c6c <HAL_DMA_IRQHandler+0x168>
 8002c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c58:	e008      	b.n	8002c6c <HAL_DMA_IRQHandler+0x168>
 8002c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5e:	e005      	b.n	8002c6c <HAL_DMA_IRQHandler+0x168>
 8002c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c64:	e002      	b.n	8002c6c <HAL_DMA_IRQHandler+0x168>
 8002c66:	2320      	movs	r3, #32
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_IRQHandler+0x168>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <HAL_DMA_IRQHandler+0x208>)
 8002c6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d034      	beq.n	8002cea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c88:	e02f      	b.n	8002cea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2208      	movs	r2, #8
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d028      	beq.n	8002cec <HAL_DMA_IRQHandler+0x1e8>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d023      	beq.n	8002cec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020e 	bic.w	r2, r2, #14
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
    }
  }
  return;
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
}
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40020008 	.word	0x40020008
 8002cf8:	4002001c 	.word	0x4002001c
 8002cfc:	40020030 	.word	0x40020030
 8002d00:	40020044 	.word	0x40020044
 8002d04:	40020058 	.word	0x40020058
 8002d08:	4002006c 	.word	0x4002006c
 8002d0c:	40020000 	.word	0x40020000

08002d10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d108      	bne.n	8002d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d4e:	e007      	b.n	8002d60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b08b      	sub	sp, #44	; 0x2c
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	e169      	b.n	8003054 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d80:	2201      	movs	r2, #1
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f040 8158 	bne.w	800304e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a9a      	ldr	r2, [pc, #616]	; (800300c <HAL_GPIO_Init+0x2a0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d05e      	beq.n	8002e66 <HAL_GPIO_Init+0xfa>
 8002da8:	4a98      	ldr	r2, [pc, #608]	; (800300c <HAL_GPIO_Init+0x2a0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d875      	bhi.n	8002e9a <HAL_GPIO_Init+0x12e>
 8002dae:	4a98      	ldr	r2, [pc, #608]	; (8003010 <HAL_GPIO_Init+0x2a4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d058      	beq.n	8002e66 <HAL_GPIO_Init+0xfa>
 8002db4:	4a96      	ldr	r2, [pc, #600]	; (8003010 <HAL_GPIO_Init+0x2a4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d86f      	bhi.n	8002e9a <HAL_GPIO_Init+0x12e>
 8002dba:	4a96      	ldr	r2, [pc, #600]	; (8003014 <HAL_GPIO_Init+0x2a8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d052      	beq.n	8002e66 <HAL_GPIO_Init+0xfa>
 8002dc0:	4a94      	ldr	r2, [pc, #592]	; (8003014 <HAL_GPIO_Init+0x2a8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d869      	bhi.n	8002e9a <HAL_GPIO_Init+0x12e>
 8002dc6:	4a94      	ldr	r2, [pc, #592]	; (8003018 <HAL_GPIO_Init+0x2ac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d04c      	beq.n	8002e66 <HAL_GPIO_Init+0xfa>
 8002dcc:	4a92      	ldr	r2, [pc, #584]	; (8003018 <HAL_GPIO_Init+0x2ac>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d863      	bhi.n	8002e9a <HAL_GPIO_Init+0x12e>
 8002dd2:	4a92      	ldr	r2, [pc, #584]	; (800301c <HAL_GPIO_Init+0x2b0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d046      	beq.n	8002e66 <HAL_GPIO_Init+0xfa>
 8002dd8:	4a90      	ldr	r2, [pc, #576]	; (800301c <HAL_GPIO_Init+0x2b0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d85d      	bhi.n	8002e9a <HAL_GPIO_Init+0x12e>
 8002dde:	2b12      	cmp	r3, #18
 8002de0:	d82a      	bhi.n	8002e38 <HAL_GPIO_Init+0xcc>
 8002de2:	2b12      	cmp	r3, #18
 8002de4:	d859      	bhi.n	8002e9a <HAL_GPIO_Init+0x12e>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <HAL_GPIO_Init+0x80>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e67 	.word	0x08002e67
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08002e53 	.word	0x08002e53
 8002df8:	08002e95 	.word	0x08002e95
 8002dfc:	08002e9b 	.word	0x08002e9b
 8002e00:	08002e9b 	.word	0x08002e9b
 8002e04:	08002e9b 	.word	0x08002e9b
 8002e08:	08002e9b 	.word	0x08002e9b
 8002e0c:	08002e9b 	.word	0x08002e9b
 8002e10:	08002e9b 	.word	0x08002e9b
 8002e14:	08002e9b 	.word	0x08002e9b
 8002e18:	08002e9b 	.word	0x08002e9b
 8002e1c:	08002e9b 	.word	0x08002e9b
 8002e20:	08002e9b 	.word	0x08002e9b
 8002e24:	08002e9b 	.word	0x08002e9b
 8002e28:	08002e9b 	.word	0x08002e9b
 8002e2c:	08002e9b 	.word	0x08002e9b
 8002e30:	08002e49 	.word	0x08002e49
 8002e34:	08002e5d 	.word	0x08002e5d
 8002e38:	4a79      	ldr	r2, [pc, #484]	; (8003020 <HAL_GPIO_Init+0x2b4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e3e:	e02c      	b.n	8002e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	623b      	str	r3, [r7, #32]
          break;
 8002e46:	e029      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	623b      	str	r3, [r7, #32]
          break;
 8002e50:	e024      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	3308      	adds	r3, #8
 8002e58:	623b      	str	r3, [r7, #32]
          break;
 8002e5a:	e01f      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	330c      	adds	r3, #12
 8002e62:	623b      	str	r3, [r7, #32]
          break;
 8002e64:	e01a      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	623b      	str	r3, [r7, #32]
          break;
 8002e72:	e013      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	611a      	str	r2, [r3, #16]
          break;
 8002e86:	e009      	b.n	8002e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	615a      	str	r2, [r3, #20]
          break;
 8002e92:	e003      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e94:	2300      	movs	r3, #0
 8002e96:	623b      	str	r3, [r7, #32]
          break;
 8002e98:	e000      	b.n	8002e9c <HAL_GPIO_Init+0x130>
          break;
 8002e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2bff      	cmp	r3, #255	; 0xff
 8002ea0:	d801      	bhi.n	8002ea6 <HAL_GPIO_Init+0x13a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	e001      	b.n	8002eaa <HAL_GPIO_Init+0x13e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2bff      	cmp	r3, #255	; 0xff
 8002eb0:	d802      	bhi.n	8002eb8 <HAL_GPIO_Init+0x14c>
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	e002      	b.n	8002ebe <HAL_GPIO_Init+0x152>
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	3b08      	subs	r3, #8
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	210f      	movs	r1, #15
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	6a39      	ldr	r1, [r7, #32]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80b1 	beq.w	800304e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eec:	4b4d      	ldr	r3, [pc, #308]	; (8003024 <HAL_GPIO_Init+0x2b8>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a4c      	ldr	r2, [pc, #304]	; (8003024 <HAL_GPIO_Init+0x2b8>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_GPIO_Init+0x2b8>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f04:	4a48      	ldr	r2, [pc, #288]	; (8003028 <HAL_GPIO_Init+0x2bc>)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a40      	ldr	r2, [pc, #256]	; (800302c <HAL_GPIO_Init+0x2c0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_GPIO_Init+0x1ec>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3f      	ldr	r2, [pc, #252]	; (8003030 <HAL_GPIO_Init+0x2c4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00d      	beq.n	8002f54 <HAL_GPIO_Init+0x1e8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3e      	ldr	r2, [pc, #248]	; (8003034 <HAL_GPIO_Init+0x2c8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <HAL_GPIO_Init+0x1e4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <HAL_GPIO_Init+0x2cc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_GPIO_Init+0x1e0>
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x1ee>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e004      	b.n	8002f5a <HAL_GPIO_Init+0x1ee>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e002      	b.n	8002f5a <HAL_GPIO_Init+0x1ee>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_GPIO_Init+0x1ee>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4093      	lsls	r3, r2
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f6a:	492f      	ldr	r1, [pc, #188]	; (8003028 <HAL_GPIO_Init+0x2bc>)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	492c      	ldr	r1, [pc, #176]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	4928      	ldr	r1, [pc, #160]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	491e      	ldr	r1, [pc, #120]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4918      	ldr	r1, [pc, #96]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	4914      	ldr	r1, [pc, #80]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d021      	beq.n	8003040 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e021      	b.n	800304e <HAL_GPIO_Init+0x2e2>
 800300a:	bf00      	nop
 800300c:	10320000 	.word	0x10320000
 8003010:	10310000 	.word	0x10310000
 8003014:	10220000 	.word	0x10220000
 8003018:	10210000 	.word	0x10210000
 800301c:	10120000 	.word	0x10120000
 8003020:	10110000 	.word	0x10110000
 8003024:	40021000 	.word	0x40021000
 8003028:	40010000 	.word	0x40010000
 800302c:	40010800 	.word	0x40010800
 8003030:	40010c00 	.word	0x40010c00
 8003034:	40011000 	.word	0x40011000
 8003038:	40011400 	.word	0x40011400
 800303c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_GPIO_Init+0x304>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	43db      	mvns	r3, r3
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <HAL_GPIO_Init+0x304>)
 800304a:	4013      	ands	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	3301      	adds	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	f47f ae8e 	bne.w	8002d80 <HAL_GPIO_Init+0x14>
  }
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	372c      	adds	r7, #44	; 0x2c
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40010400 	.word	0x40010400

08003074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
 8003080:	4613      	mov	r3, r2
 8003082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003084:	787b      	ldrb	r3, [r7, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003090:	e003      	b.n	800309a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	041a      	lsls	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	611a      	str	r2, [r3, #16]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43d9      	mvns	r1, r3
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	400b      	ands	r3, r1
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	611a      	str	r2, [r3, #16]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e272      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003110:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b89      	ldr	r3, [pc, #548]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e24c      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7f      	ldr	r2, [pc, #508]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a77      	ldr	r2, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7ff f9fc 	bl	80025b0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7ff f9f8 	bl	80025b0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e200      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff f9e8 	bl	80025b0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7ff f9e4 	bl	80025b0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1ec      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800321e:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1c0      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4939      	ldr	r1, [pc, #228]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7ff f99d 	bl	80025b0 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7ff f999 	bl	80025b0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1a1      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4927      	ldr	r1, [pc, #156]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7ff f97c 	bl	80025b0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7ff f978 	bl	80025b0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e180      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03a      	beq.n	800335c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7ff f95c 	bl	80025b0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fc:	f7ff f958 	bl	80025b0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e160      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 face 	bl	80038bc <RCC_Delay>
 8003320:	e01c      	b.n	800335c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7ff f942 	bl	80025b0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7ff f93e 	bl	80025b0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d908      	bls.n	8003350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e146      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	42420000 	.word	0x42420000
 800334c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e9      	bne.n	8003330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a6 	beq.w	80034b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b8b      	ldr	r3, [pc, #556]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a87      	ldr	r2, [pc, #540]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b85      	ldr	r3, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7e      	ldr	r2, [pc, #504]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7ff f8ff 	bl	80025b0 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7ff f8fb 	bl	80025b0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e103      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x312>
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x334>
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a66      	ldr	r2, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x356>
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800342e:	4b5b      	ldr	r3, [pc, #364]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b58      	ldr	r3, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a57      	ldr	r2, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7ff f8af 	bl	80025b0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7ff f8ab 	bl	80025b0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0b1      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x37e>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7ff f899 	bl	80025b0 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7ff f895 	bl	80025b0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e09b      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8087 	beq.w	80035ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d061      	beq.n	8003590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d146      	bne.n	8003562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7ff f869 	bl	80025b0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7ff f865 	bl	80025b0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e06d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	4b29      	ldr	r3, [pc, #164]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4921      	ldr	r1, [pc, #132]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a19      	ldr	r1, [r3, #32]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	430b      	orrs	r3, r1
 800352e:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7ff f839 	bl	80025b0 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7ff f835 	bl	80025b0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x46a>
 8003560:	e035      	b.n	80035ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7ff f822 	bl	80025b0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7ff f81e 	bl	80025b0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e026      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x498>
 800358e:	e01e      	b.n	80035ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e019      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x500>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d0      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d910      	bls.n	8003620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4965      	ldr	r1, [pc, #404]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b8      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800365a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	494d      	ldr	r1, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d040      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d115      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e07f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e073      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06b      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4936      	ldr	r1, [pc, #216]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fe ff70 	bl	80025b0 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fe ff6c 	bl	80025b0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e053      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d210      	bcs.n	800372c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4922      	ldr	r1, [pc, #136]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e032      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800376a:	f000 f821 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 800376e:	4602      	mov	r2, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	490a      	ldr	r1, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	5ccb      	ldrb	r3, [r1, r3]
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1d0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fece 	bl	800252c <HAL_InitTick>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08004f10 	.word	0x08004f10
 80037a8:	20000000 	.word	0x20000000
 80037ac:	20000004 	.word	0x20000004

080037b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_GetSysClockFreq+0x94>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d002      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x30>
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d003      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x36>
 80037de:	e027      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_GetSysClockFreq+0x98>)
 80037e2:	613b      	str	r3, [r7, #16]
      break;
 80037e4:	e027      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0c9b      	lsrs	r3, r3, #18
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_RCC_GetSysClockFreq+0x9c>)
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_GetSysClockFreq+0x94>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0c5b      	lsrs	r3, r3, #17
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	4a11      	ldr	r2, [pc, #68]	; (8003850 <HAL_RCC_GetSysClockFreq+0xa0>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <HAL_RCC_GetSysClockFreq+0x98>)
 8003812:	fb03 f202 	mul.w	r2, r3, r2
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e004      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	613b      	str	r3, [r7, #16]
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetSysClockFreq+0x98>)
 8003832:	613b      	str	r3, [r7, #16]
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	693b      	ldr	r3, [r7, #16]
}
 8003838:	4618      	mov	r0, r3
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	007a1200 	.word	0x007a1200
 800384c:	08004f28 	.word	0x08004f28
 8003850:	08004f38 	.word	0x08004f38
 8003854:	003d0900 	.word	0x003d0900

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <HAL_RCC_GetHCLKFreq+0x10>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	20000000 	.word	0x20000000

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff2 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	08004f20 	.word	0x08004f20

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003898:	f7ff ffde 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	0adb      	lsrs	r3, r3, #11
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	08004f20 	.word	0x08004f20

080038bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <RCC_Delay+0x34>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <RCC_Delay+0x38>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0a5b      	lsrs	r3, r3, #9
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038d8:	bf00      	nop
  }
  while (Delay --);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1e5a      	subs	r2, r3, #1
 80038de:	60fa      	str	r2, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f9      	bne.n	80038d8 <RCC_Delay+0x1c>
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	20000000 	.word	0x20000000
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e042      	b.n	8003990 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe fc4e 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 ff2f 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d156      	bne.n	8003a60 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Transmit_DMA+0x26>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e04f      	b.n	8003a62 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2221      	movs	r2, #33	; 0x21
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_UART_Transmit_DMA+0xd4>)
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <HAL_UART_Transmit_DMA+0xd8>)
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_UART_Transmit_DMA+0xdc>)
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	2200      	movs	r2, #0
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3304      	adds	r3, #4
 8003a16:	461a      	mov	r2, r3
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	f7fe ff5f 	bl	80028dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	617b      	str	r3, [r7, #20]
   return(result);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a48:	627a      	str	r2, [r7, #36]	; 0x24
 8003a4a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08004035 	.word	0x08004035
 8003a70:	080040cf 	.word	0x080040cf
 8003a74:	08004253 	.word	0x08004253

08003a78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d112      	bne.n	8003ab8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_Receive_DMA+0x26>
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00b      	b.n	8003aba <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fc1a 	bl	80042e8 <UART_Start_Receive_DMA>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	e000      	b.n	8003aba <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b0ba      	sub	sp, #232	; 0xe8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_UART_IRQHandler+0x66>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fd7e 	bl	8004624 <UART_Receive_IT>
      return;
 8003b28:	e25b      	b.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80de 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x22c>
 8003b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80d1 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_UART_IRQHandler+0xae>
 8003b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xd2>
 8003b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xf6>
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f043 0204 	orr.w	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <HAL_UART_IRQHandler+0x126>
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f043 0208 	orr.w	r2, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 81f2 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_UART_IRQHandler+0x14e>
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fd09 	bl	8004624 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_UART_IRQHandler+0x17a>
 8003c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d04f      	beq.n	8003cde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fc13 	bl	800446a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d041      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3314      	adds	r3, #20
 8003c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1d9      	bne.n	8003c52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d013      	beq.n	8003cce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	4a7e      	ldr	r2, [pc, #504]	; (8003ea4 <HAL_UART_IRQHandler+0x3e0>)
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe feae 	bl	8002a14 <HAL_DMA_Abort_IT>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	e00e      	b.n	8003cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f99c 	bl	800400c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd4:	e00a      	b.n	8003cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f998 	bl	800400c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	e006      	b.n	8003cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f994 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003cea:	e175      	b.n	8003fd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	bf00      	nop
    return;
 8003cee:	e173      	b.n	8003fd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f040 814f 	bne.w	8003f98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8148 	beq.w	8003f98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8141 	beq.w	8003f98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80b6 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8145 	beq.w	8003fdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	f080 813e 	bcs.w	8003fdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f000 8088 	beq.w	8003e84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003da0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1d9      	bne.n	8003d74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003de4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003de8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e1      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3314      	adds	r3, #20
 8003e02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e20:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e3      	bne.n	8003dfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e54:	f023 0310 	bic.w	r3, r3, #16
 8003e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e66:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e3      	bne.n	8003e42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fd8c 	bl	800299c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8bf 	bl	800401e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ea0:	e09c      	b.n	8003fdc <HAL_UART_IRQHandler+0x518>
 8003ea2:	bf00      	nop
 8003ea4:	0800452f 	.word	0x0800452f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 808e 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8089 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e3      	bne.n	8003ece <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	623b      	str	r3, [r7, #32]
   return(result);
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e3      	bne.n	8003f06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0310 	bic.w	r3, r3, #16
 8003f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f70:	61fa      	str	r2, [r7, #28]
 8003f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e3      	bne.n	8003f4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f844 	bl	800401e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f96:	e023      	b.n	8003fe0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x4f4>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fad0 	bl	8004556 <UART_Transmit_IT>
    return;
 8003fb6:	e014      	b.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fb0f 	bl	80045f4 <UART_EndTransmit_IT>
    return;
 8003fd6:	e004      	b.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fe0:	bf00      	nop
  }
}
 8003fe2:	37e8      	adds	r7, #232	; 0xe8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b090      	sub	sp, #64	; 0x40
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d137      	bne.n	80040c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	2200      	movs	r2, #0
 8004054:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	623b      	str	r3, [r7, #32]
   return(result);
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004076:	633a      	str	r2, [r7, #48]	; 0x30
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800407c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	60fb      	str	r3, [r7, #12]
   return(result);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040aa:	61fa      	str	r2, [r7, #28]
 80040ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	617b      	str	r3, [r7, #20]
   return(result);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040be:	e002      	b.n	80040c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040c2:	f7fd fa27 	bl	8001514 <HAL_UART_TxCpltCallback>
}
 80040c6:	bf00      	nop
 80040c8:	3740      	adds	r7, #64	; 0x40
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff ff83 	bl	8003fe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b09c      	sub	sp, #112	; 0x70
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d172      	bne.n	80041ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	2200      	movs	r2, #0
 800410a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800410c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800411c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004122:	66bb      	str	r3, [r7, #104]	; 0x68
 8004124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800412c:	65ba      	str	r2, [r7, #88]	; 0x58
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3314      	adds	r3, #20
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	667b      	str	r3, [r7, #100]	; 0x64
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004160:	647a      	str	r2, [r7, #68]	; 0x44
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	623b      	str	r3, [r7, #32]
   return(result);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	663b      	str	r3, [r7, #96]	; 0x60
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004194:	633a      	str	r2, [r7, #48]	; 0x30
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d119      	bne.n	80041ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0310 	bic.w	r3, r3, #16
 80041ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	617b      	str	r3, [r7, #20]
   return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ee:	2200      	movs	r2, #0
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d106      	bne.n	8004208 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041fe:	4619      	mov	r1, r3
 8004200:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004202:	f7ff ff0c 	bl	800401e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004206:	e002      	b.n	800420e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004208:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800420a:	f7fd f995 	bl	8001538 <HAL_UART_RxCpltCallback>
}
 800420e:	bf00      	nop
 8004210:	3770      	adds	r7, #112	; 0x70
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	2b01      	cmp	r3, #1
 8004230:	d108      	bne.n	8004244 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	4619      	mov	r1, r3
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff feee 	bl	800401e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004242:	e002      	b.n	800424a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff fed8 	bl	8003ffa <HAL_UART_RxHalfCpltCallback>
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b21      	cmp	r3, #33	; 0x21
 8004284:	d108      	bne.n	8004298 <UART_DMAError+0x46>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004292:	68b8      	ldr	r0, [r7, #8]
 8004294:	f000 f8c2 	bl	800441c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b22      	cmp	r3, #34	; 0x22
 80042b8:	d108      	bne.n	80042cc <UART_DMAError+0x7a>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f000 f8cf 	bl	800446a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	f043 0210 	orr.w	r2, r3, #16
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7ff fe97 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b098      	sub	sp, #96	; 0x60
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2222      	movs	r2, #34	; 0x22
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <UART_Start_Receive_DMA+0x128>)
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	4a3d      	ldr	r2, [pc, #244]	; (8004414 <UART_Start_Receive_DMA+0x12c>)
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <UART_Start_Receive_DMA+0x130>)
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	2200      	movs	r2, #0
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f7fe fac8 	bl	80028dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d019      	beq.n	800439e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	65bb      	str	r3, [r7, #88]	; 0x58
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800438a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3314      	adds	r3, #20
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	657b      	str	r3, [r7, #84]	; 0x54
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3314      	adds	r3, #20
 80043bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043be:	63ba      	str	r2, [r7, #56]	; 0x38
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e5      	bne.n	800439e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	617b      	str	r3, [r7, #20]
   return(result);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e8:	653b      	str	r3, [r7, #80]	; 0x50
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043f2:	627a      	str	r2, [r7, #36]	; 0x24
 80043f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3760      	adds	r7, #96	; 0x60
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	080040eb 	.word	0x080040eb
 8004414:	08004217 	.word	0x08004217
 8004418:	08004253 	.word	0x08004253

0800441c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60bb      	str	r3, [r7, #8]
   return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	61ba      	str	r2, [r7, #24]
 8004446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004460:	bf00      	nop
 8004462:	3724      	adds	r7, #36	; 0x24
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800446a:	b480      	push	{r7}
 800446c:	b095      	sub	sp, #84	; 0x54
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004492:	643a      	str	r2, [r7, #64]	; 0x40
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d119      	bne.n	8004516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0310 	bic.w	r3, r3, #16
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004502:	61ba      	str	r2, [r7, #24]
 8004504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	613b      	str	r3, [r7, #16]
   return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004524:	bf00      	nop
 8004526:	3754      	adds	r7, #84	; 0x54
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fd5f 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b21      	cmp	r3, #33	; 0x21
 8004568:	d13e      	bne.n	80045e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	d114      	bne.n	800459e <UART_Transmit_IT+0x48>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d110      	bne.n	800459e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]
 800459c:	e008      	b.n	80045b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6211      	str	r1, [r2, #32]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4619      	mov	r1, r3
 80045be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10f      	bne.n	80045e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc ff7d 	bl	8001514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b22      	cmp	r3, #34	; 0x22
 8004636:	f040 80ae 	bne.w	8004796 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	d117      	bne.n	8004674 <UART_Receive_IT+0x50>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d113      	bne.n	8004674 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	b29a      	uxth	r2, r3
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
 8004672:	e026      	b.n	80046c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d007      	beq.n	8004698 <UART_Receive_IT+0x74>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <UART_Receive_IT+0x82>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e008      	b.n	80046b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4619      	mov	r1, r3
 80046d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d15d      	bne.n	8004792 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0220 	bic.w	r2, r2, #32
 80046e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	d135      	bne.n	8004788 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	613b      	str	r3, [r7, #16]
   return(result);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	623a      	str	r2, [r7, #32]
 8004744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	69f9      	ldr	r1, [r7, #28]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b10      	cmp	r3, #16
 8004762:	d10a      	bne.n	800477a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fc4c 	bl	800401e <HAL_UARTEx_RxEventCallback>
 8004786:	e002      	b.n	800478e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fed5 	bl	8001538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e002      	b.n	8004798 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3730      	adds	r7, #48	; 0x30
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047da:	f023 030c 	bic.w	r3, r3, #12
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2c      	ldr	r2, [pc, #176]	; (80048b4 <UART_SetConfig+0x114>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7ff f844 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	e002      	b.n	8004816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7ff f82c 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <UART_SetConfig+0x118>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	0119      	lsls	r1, r3, #4
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009a      	lsls	r2, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	fbb2 f2f3 	udiv	r2, r2, r3
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <UART_SetConfig+0x118>)
 800484e:	fba3 0302 	umull	r0, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	2064      	movs	r0, #100	; 0x64
 8004856:	fb00 f303 	mul.w	r3, r0, r3
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	3332      	adds	r3, #50	; 0x32
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486c:	4419      	add	r1, r3
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f2f3 	udiv	r2, r2, r3
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <UART_SetConfig+0x118>)
 8004886:	fba3 0302 	umull	r0, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2064      	movs	r0, #100	; 0x64
 800488e:	fb00 f303 	mul.w	r3, r0, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	440a      	add	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40013800 	.word	0x40013800
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <__cxa_pure_virtual>:
 80048bc:	b508      	push	{r3, lr}
 80048be:	f000 f80d 	bl	80048dc <_ZSt9terminatev>

080048c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80048c2:	b508      	push	{r3, lr}
 80048c4:	4780      	blx	r0
 80048c6:	f000 f80e 	bl	80048e6 <abort>
	...

080048cc <_ZSt13get_terminatev>:
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <_ZSt13get_terminatev+0xc>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	f3bf 8f5b 	dmb	ish
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	2000000c 	.word	0x2000000c

080048dc <_ZSt9terminatev>:
 80048dc:	b508      	push	{r3, lr}
 80048de:	f7ff fff5 	bl	80048cc <_ZSt13get_terminatev>
 80048e2:	f7ff ffee 	bl	80048c2 <_ZN10__cxxabiv111__terminateEPFvvE>

080048e6 <abort>:
 80048e6:	2006      	movs	r0, #6
 80048e8:	b508      	push	{r3, lr}
 80048ea:	f000 f873 	bl	80049d4 <raise>
 80048ee:	2001      	movs	r0, #1
 80048f0:	f7fd fd6d 	bl	80023ce <_exit>

080048f4 <__errno>:
 80048f4:	4b01      	ldr	r3, [pc, #4]	; (80048fc <__errno+0x8>)
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000010 	.word	0x20000010

08004900 <__libc_init_array>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	2600      	movs	r6, #0
 8004904:	4d0c      	ldr	r5, [pc, #48]	; (8004938 <__libc_init_array+0x38>)
 8004906:	4c0d      	ldr	r4, [pc, #52]	; (800493c <__libc_init_array+0x3c>)
 8004908:	1b64      	subs	r4, r4, r5
 800490a:	10a4      	asrs	r4, r4, #2
 800490c:	42a6      	cmp	r6, r4
 800490e:	d109      	bne.n	8004924 <__libc_init_array+0x24>
 8004910:	f000 f9ae 	bl	8004c70 <_init>
 8004914:	2600      	movs	r6, #0
 8004916:	4d0a      	ldr	r5, [pc, #40]	; (8004940 <__libc_init_array+0x40>)
 8004918:	4c0a      	ldr	r4, [pc, #40]	; (8004944 <__libc_init_array+0x44>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	42a6      	cmp	r6, r4
 8004920:	d105      	bne.n	800492e <__libc_init_array+0x2e>
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	f855 3b04 	ldr.w	r3, [r5], #4
 8004928:	4798      	blx	r3
 800492a:	3601      	adds	r6, #1
 800492c:	e7ee      	b.n	800490c <__libc_init_array+0xc>
 800492e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004932:	4798      	blx	r3
 8004934:	3601      	adds	r6, #1
 8004936:	e7f2      	b.n	800491e <__libc_init_array+0x1e>
 8004938:	08004f3c 	.word	0x08004f3c
 800493c:	08004f3c 	.word	0x08004f3c
 8004940:	08004f3c 	.word	0x08004f3c
 8004944:	08004f44 	.word	0x08004f44

08004948 <memcpy>:
 8004948:	440a      	add	r2, r1
 800494a:	4291      	cmp	r1, r2
 800494c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004950:	d100      	bne.n	8004954 <memcpy+0xc>
 8004952:	4770      	bx	lr
 8004954:	b510      	push	{r4, lr}
 8004956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800495a:	4291      	cmp	r1, r2
 800495c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004960:	d1f9      	bne.n	8004956 <memcpy+0xe>
 8004962:	bd10      	pop	{r4, pc}

08004964 <memset>:
 8004964:	4603      	mov	r3, r0
 8004966:	4402      	add	r2, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	d100      	bne.n	800496e <memset+0xa>
 800496c:	4770      	bx	lr
 800496e:	f803 1b01 	strb.w	r1, [r3], #1
 8004972:	e7f9      	b.n	8004968 <memset+0x4>

08004974 <realloc>:
 8004974:	4b02      	ldr	r3, [pc, #8]	; (8004980 <realloc+0xc>)
 8004976:	460a      	mov	r2, r1
 8004978:	4601      	mov	r1, r0
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	f000 b8da 	b.w	8004b34 <_realloc_r>
 8004980:	20000010 	.word	0x20000010

08004984 <_raise_r>:
 8004984:	291f      	cmp	r1, #31
 8004986:	b538      	push	{r3, r4, r5, lr}
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
 800498c:	d904      	bls.n	8004998 <_raise_r+0x14>
 800498e:	2316      	movs	r3, #22
 8004990:	6003      	str	r3, [r0, #0]
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800499a:	b112      	cbz	r2, 80049a2 <_raise_r+0x1e>
 800499c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049a0:	b94b      	cbnz	r3, 80049b6 <_raise_r+0x32>
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 f830 	bl	8004a08 <_getpid_r>
 80049a8:	462a      	mov	r2, r5
 80049aa:	4601      	mov	r1, r0
 80049ac:	4620      	mov	r0, r4
 80049ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b2:	f000 b817 	b.w	80049e4 <_kill_r>
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d00a      	beq.n	80049d0 <_raise_r+0x4c>
 80049ba:	1c59      	adds	r1, r3, #1
 80049bc:	d103      	bne.n	80049c6 <_raise_r+0x42>
 80049be:	2316      	movs	r3, #22
 80049c0:	6003      	str	r3, [r0, #0]
 80049c2:	2001      	movs	r0, #1
 80049c4:	e7e7      	b.n	8004996 <_raise_r+0x12>
 80049c6:	2400      	movs	r4, #0
 80049c8:	4628      	mov	r0, r5
 80049ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049ce:	4798      	blx	r3
 80049d0:	2000      	movs	r0, #0
 80049d2:	e7e0      	b.n	8004996 <_raise_r+0x12>

080049d4 <raise>:
 80049d4:	4b02      	ldr	r3, [pc, #8]	; (80049e0 <raise+0xc>)
 80049d6:	4601      	mov	r1, r0
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f7ff bfd3 	b.w	8004984 <_raise_r>
 80049de:	bf00      	nop
 80049e0:	20000010 	.word	0x20000010

080049e4 <_kill_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	2300      	movs	r3, #0
 80049e8:	4d06      	ldr	r5, [pc, #24]	; (8004a04 <_kill_r+0x20>)
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	f7fd fcdc 	bl	80023ae <_kill>
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	d102      	bne.n	8004a00 <_kill_r+0x1c>
 80049fa:	682b      	ldr	r3, [r5, #0]
 80049fc:	b103      	cbz	r3, 8004a00 <_kill_r+0x1c>
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	bd38      	pop	{r3, r4, r5, pc}
 8004a02:	bf00      	nop
 8004a04:	20000b24 	.word	0x20000b24

08004a08 <_getpid_r>:
 8004a08:	f7fd bcca 	b.w	80023a0 <_getpid>

08004a0c <sbrk_aligned>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0e      	ldr	r6, [pc, #56]	; (8004a48 <sbrk_aligned+0x3c>)
 8004a10:	460c      	mov	r4, r1
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	4605      	mov	r5, r0
 8004a16:	b911      	cbnz	r1, 8004a1e <sbrk_aligned+0x12>
 8004a18:	f000 f8bc 	bl	8004b94 <_sbrk_r>
 8004a1c:	6030      	str	r0, [r6, #0]
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f8b7 	bl	8004b94 <_sbrk_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d00a      	beq.n	8004a40 <sbrk_aligned+0x34>
 8004a2a:	1cc4      	adds	r4, r0, #3
 8004a2c:	f024 0403 	bic.w	r4, r4, #3
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d007      	beq.n	8004a44 <sbrk_aligned+0x38>
 8004a34:	1a21      	subs	r1, r4, r0
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 f8ac 	bl	8004b94 <_sbrk_r>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d101      	bne.n	8004a44 <sbrk_aligned+0x38>
 8004a40:	f04f 34ff 	mov.w	r4, #4294967295
 8004a44:	4620      	mov	r0, r4
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	20000b20 	.word	0x20000b20

08004a4c <_malloc_r>:
 8004a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a50:	1ccd      	adds	r5, r1, #3
 8004a52:	f025 0503 	bic.w	r5, r5, #3
 8004a56:	3508      	adds	r5, #8
 8004a58:	2d0c      	cmp	r5, #12
 8004a5a:	bf38      	it	cc
 8004a5c:	250c      	movcc	r5, #12
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	4607      	mov	r7, r0
 8004a62:	db01      	blt.n	8004a68 <_malloc_r+0x1c>
 8004a64:	42a9      	cmp	r1, r5
 8004a66:	d905      	bls.n	8004a74 <_malloc_r+0x28>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4630      	mov	r0, r6
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	4e2e      	ldr	r6, [pc, #184]	; (8004b30 <_malloc_r+0xe4>)
 8004a76:	f000 f89d 	bl	8004bb4 <__malloc_lock>
 8004a7a:	6833      	ldr	r3, [r6, #0]
 8004a7c:	461c      	mov	r4, r3
 8004a7e:	bb34      	cbnz	r4, 8004ace <_malloc_r+0x82>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4638      	mov	r0, r7
 8004a84:	f7ff ffc2 	bl	8004a0c <sbrk_aligned>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	d14d      	bne.n	8004b2a <_malloc_r+0xde>
 8004a8e:	6834      	ldr	r4, [r6, #0]
 8004a90:	4626      	mov	r6, r4
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	d140      	bne.n	8004b18 <_malloc_r+0xcc>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	eb04 0803 	add.w	r8, r4, r3
 8004aa0:	f000 f878 	bl	8004b94 <_sbrk_r>
 8004aa4:	4580      	cmp	r8, r0
 8004aa6:	d13a      	bne.n	8004b1e <_malloc_r+0xd2>
 8004aa8:	6821      	ldr	r1, [r4, #0]
 8004aaa:	3503      	adds	r5, #3
 8004aac:	1a6d      	subs	r5, r5, r1
 8004aae:	f025 0503 	bic.w	r5, r5, #3
 8004ab2:	3508      	adds	r5, #8
 8004ab4:	2d0c      	cmp	r5, #12
 8004ab6:	bf38      	it	cc
 8004ab8:	250c      	movcc	r5, #12
 8004aba:	4638      	mov	r0, r7
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7ff ffa5 	bl	8004a0c <sbrk_aligned>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d02b      	beq.n	8004b1e <_malloc_r+0xd2>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	442b      	add	r3, r5
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	e00e      	b.n	8004aec <_malloc_r+0xa0>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	1b52      	subs	r2, r2, r5
 8004ad2:	d41e      	bmi.n	8004b12 <_malloc_r+0xc6>
 8004ad4:	2a0b      	cmp	r2, #11
 8004ad6:	d916      	bls.n	8004b06 <_malloc_r+0xba>
 8004ad8:	1961      	adds	r1, r4, r5
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	6025      	str	r5, [r4, #0]
 8004ade:	bf18      	it	ne
 8004ae0:	6059      	strne	r1, [r3, #4]
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	bf08      	it	eq
 8004ae6:	6031      	streq	r1, [r6, #0]
 8004ae8:	5162      	str	r2, [r4, r5]
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	4638      	mov	r0, r7
 8004aee:	f104 060b 	add.w	r6, r4, #11
 8004af2:	f000 f865 	bl	8004bc0 <__malloc_unlock>
 8004af6:	f026 0607 	bic.w	r6, r6, #7
 8004afa:	1d23      	adds	r3, r4, #4
 8004afc:	1af2      	subs	r2, r6, r3
 8004afe:	d0b6      	beq.n	8004a6e <_malloc_r+0x22>
 8004b00:	1b9b      	subs	r3, r3, r6
 8004b02:	50a3      	str	r3, [r4, r2]
 8004b04:	e7b3      	b.n	8004a6e <_malloc_r+0x22>
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	bf0c      	ite	eq
 8004b0c:	6032      	streq	r2, [r6, #0]
 8004b0e:	605a      	strne	r2, [r3, #4]
 8004b10:	e7ec      	b.n	8004aec <_malloc_r+0xa0>
 8004b12:	4623      	mov	r3, r4
 8004b14:	6864      	ldr	r4, [r4, #4]
 8004b16:	e7b2      	b.n	8004a7e <_malloc_r+0x32>
 8004b18:	4634      	mov	r4, r6
 8004b1a:	6876      	ldr	r6, [r6, #4]
 8004b1c:	e7b9      	b.n	8004a92 <_malloc_r+0x46>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	4638      	mov	r0, r7
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	f000 f84c 	bl	8004bc0 <__malloc_unlock>
 8004b28:	e7a1      	b.n	8004a6e <_malloc_r+0x22>
 8004b2a:	6025      	str	r5, [r4, #0]
 8004b2c:	e7de      	b.n	8004aec <_malloc_r+0xa0>
 8004b2e:	bf00      	nop
 8004b30:	20000b1c 	.word	0x20000b1c

08004b34 <_realloc_r>:
 8004b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b38:	4680      	mov	r8, r0
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	460e      	mov	r6, r1
 8004b3e:	b921      	cbnz	r1, 8004b4a <_realloc_r+0x16>
 8004b40:	4611      	mov	r1, r2
 8004b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b46:	f7ff bf81 	b.w	8004a4c <_malloc_r>
 8004b4a:	b92a      	cbnz	r2, 8004b58 <_realloc_r+0x24>
 8004b4c:	f000 f83e 	bl	8004bcc <_free_r>
 8004b50:	4625      	mov	r5, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b58:	f000 f880 	bl	8004c5c <_malloc_usable_size_r>
 8004b5c:	4284      	cmp	r4, r0
 8004b5e:	4607      	mov	r7, r0
 8004b60:	d802      	bhi.n	8004b68 <_realloc_r+0x34>
 8004b62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b66:	d812      	bhi.n	8004b8e <_realloc_r+0x5a>
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f7ff ff6e 	bl	8004a4c <_malloc_r>
 8004b70:	4605      	mov	r5, r0
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d0ed      	beq.n	8004b52 <_realloc_r+0x1e>
 8004b76:	42bc      	cmp	r4, r7
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	bf28      	it	cs
 8004b7e:	463a      	movcs	r2, r7
 8004b80:	f7ff fee2 	bl	8004948 <memcpy>
 8004b84:	4631      	mov	r1, r6
 8004b86:	4640      	mov	r0, r8
 8004b88:	f000 f820 	bl	8004bcc <_free_r>
 8004b8c:	e7e1      	b.n	8004b52 <_realloc_r+0x1e>
 8004b8e:	4635      	mov	r5, r6
 8004b90:	e7df      	b.n	8004b52 <_realloc_r+0x1e>
	...

08004b94 <_sbrk_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	2300      	movs	r3, #0
 8004b98:	4d05      	ldr	r5, [pc, #20]	; (8004bb0 <_sbrk_r+0x1c>)
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fd fc20 	bl	80023e4 <_sbrk>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_sbrk_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_sbrk_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000b24 	.word	0x20000b24

08004bb4 <__malloc_lock>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	; (8004bbc <__malloc_lock+0x8>)
 8004bb6:	f000 b859 	b.w	8004c6c <__retarget_lock_acquire_recursive>
 8004bba:	bf00      	nop
 8004bbc:	20000b28 	.word	0x20000b28

08004bc0 <__malloc_unlock>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__malloc_unlock+0x8>)
 8004bc2:	f000 b854 	b.w	8004c6e <__retarget_lock_release_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20000b28 	.word	0x20000b28

08004bcc <_free_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d040      	beq.n	8004c56 <_free_r+0x8a>
 8004bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd8:	1f0c      	subs	r4, r1, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfb8      	it	lt
 8004bde:	18e4      	addlt	r4, r4, r3
 8004be0:	f7ff ffe8 	bl	8004bb4 <__malloc_lock>
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <_free_r+0x8c>)
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	b933      	cbnz	r3, 8004bf8 <_free_r+0x2c>
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	6014      	str	r4, [r2, #0]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf4:	f7ff bfe4 	b.w	8004bc0 <__malloc_unlock>
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d908      	bls.n	8004c0e <_free_r+0x42>
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	1821      	adds	r1, r4, r0
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf01      	itttt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	1809      	addeq	r1, r1, r0
 8004c0a:	6021      	streq	r1, [r4, #0]
 8004c0c:	e7ed      	b.n	8004bea <_free_r+0x1e>
 8004c0e:	461a      	mov	r2, r3
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b10b      	cbz	r3, 8004c18 <_free_r+0x4c>
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	d9fa      	bls.n	8004c0e <_free_r+0x42>
 8004c18:	6811      	ldr	r1, [r2, #0]
 8004c1a:	1850      	adds	r0, r2, r1
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d10b      	bne.n	8004c38 <_free_r+0x6c>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	4401      	add	r1, r0
 8004c24:	1850      	adds	r0, r2, r1
 8004c26:	4283      	cmp	r3, r0
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	d1e0      	bne.n	8004bee <_free_r+0x22>
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4401      	add	r1, r0
 8004c32:	6011      	str	r1, [r2, #0]
 8004c34:	6053      	str	r3, [r2, #4]
 8004c36:	e7da      	b.n	8004bee <_free_r+0x22>
 8004c38:	d902      	bls.n	8004c40 <_free_r+0x74>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	e7d6      	b.n	8004bee <_free_r+0x22>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf01      	itttt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	1809      	addeq	r1, r1, r0
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	6054      	str	r4, [r2, #4]
 8004c54:	e7cb      	b.n	8004bee <_free_r+0x22>
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000b1c 	.word	0x20000b1c

08004c5c <_malloc_usable_size_r>:
 8004c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c60:	1f18      	subs	r0, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfbc      	itt	lt
 8004c66:	580b      	ldrlt	r3, [r1, r0]
 8004c68:	18c0      	addlt	r0, r0, r3
 8004c6a:	4770      	bx	lr

08004c6c <__retarget_lock_acquire_recursive>:
 8004c6c:	4770      	bx	lr

08004c6e <__retarget_lock_release_recursive>:
 8004c6e:	4770      	bx	lr

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
