
STM32F103C8T6_ROS_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a174  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800a288  0800a288  0001a288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f4  0800a8f4  00020294  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8f4  0800a8f4  00020294  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8f4  0800a8f4  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8fc  0800a8fc  0001a8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800a900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  20000294  0800ab94  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  0800ab94  00020e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016411  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d09  00000000  00000000  000366ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000393d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  0003a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5c3  00000000  00000000  0003b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cbb  00000000  00000000  00056863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ced  00000000  00000000  0006851e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa20b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  000fa25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000294 	.word	0x20000294
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a26c 	.word	0x0800a26c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000298 	.word	0x20000298
 800014c:	0800a26c 	.word	0x0800a26c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfb8      	it	lt
 800108a:	425b      	neglt	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <_ZL14outputSpeedPIDP9PID_motor>:
static void outputSpeedPID(PID_motor* motor);
static uint32_t readEncoder(PID_motor* motor);

// Function to get the output value of the PID speed controller
static void outputSpeedPID(PID_motor* motor)
{
 8001096:	b590      	push	{r4, r7, lr}
 8001098:	b087      	sub	sp, #28
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
    float error, output, prop;
    // Get number of the encoder pulse in the last time frame
    if(motor->direction == CCW_DIRECTION && (motor->current_encoder < motor->prev_encoder) && (motor->prev_encoder - motor->current_encoder > 16000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11f      	bne.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d219      	bcs.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80010c2:	d911      	bls.n	80010e8 <_ZL14outputSpeedPIDP9PID_motor+0x52>
    {
        motor->real_speed = (65535 / 4) - motor->prev_encoder;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c8:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 80010cc:	333f      	adds	r3, #63	; 0x3f
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
        motor->real_speed += motor->current_encoder;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
 80010e6:	e02c      	b.n	8001142 <_ZL14outputSpeedPIDP9PID_motor+0xac>
    }
    else if(motor->direction == CW_DIRECTION && (motor->current_encoder > motor->prev_encoder) && (motor->current_encoder - motor->prev_encoder > 16000) )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d11f      	bne.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d919      	bls.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800110c:	d911      	bls.n	8001132 <_ZL14outputSpeedPIDP9PID_motor+0x9c>
    {
        motor->real_speed = motor->current_encoder - (65535 / 4);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8001116:	3b3f      	subs	r3, #63	; 0x3f
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
        motor->real_speed -= motor->prev_encoder;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
 8001130:	e007      	b.n	8001142 <_ZL14outputSpeedPIDP9PID_motor+0xac>
    }
    else
        motor->real_speed = motor->current_encoder - motor->prev_encoder;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	635a      	str	r2, [r3, #52]	; 0x34

    // Check the state of the motor
	if(motor->moving == MOTOR_STOP && motor->real_speed == 0 && motor->targetPulsePerFrame != 0)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001148:	2b00      	cmp	r3, #0
 800114a:	d115      	bne.n	8001178 <_ZL14outputSpeedPIDP9PID_motor+0xe2>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001150:	2b00      	cmp	r3, #0
 8001152:	d111      	bne.n	8001178 <_ZL14outputSpeedPIDP9PID_motor+0xe2>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f04f 0100 	mov.w	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff35 	bl	8000fcc <__aeabi_fcmpeq>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d107      	bne.n	8001178 <_ZL14outputSpeedPIDP9PID_motor+0xe2>
	{
		motor->moving = MOTOR_MOVING;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		motor->integral_error = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
	}

    // Get the error of the number of encoder per time frame
    error = motor->targetPulsePerFrame - motor->real_speed;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd3b 	bl	8000bfc <__aeabi_i2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fc80 	bl	8000a90 <__aeabi_fsub>
 8001190:	4603      	mov	r3, r0
 8001192:	613b      	str	r3, [r7, #16]
    // Get the output of the PID controller with the new formula to avoid derivative kick as well as accumulation error when updating PID parameters
    prop = motor->speed_controller.Kp * error;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4619      	mov	r1, r3
 800119a:	6938      	ldr	r0, [r7, #16]
 800119c:	f7ff fd82 	bl	8000ca4 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
    motor->integral_error += motor->speed_controller.Ki * error;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd78 	bl	8000ca4 <__aeabi_fmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4620      	mov	r0, r4
 80011ba:	f7ff fc6b 	bl	8000a94 <__addsf3>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44

    // Anti integral wind-up 
    if(motor->MAX_PWM > prop)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	8b1b      	ldrh	r3, [r3, #24]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fd16 	bl	8000bfc <__aeabi_i2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff03 	bl	8000fe0 <__aeabi_fcmplt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00e      	beq.n	80011fe <_ZL14outputSpeedPIDP9PID_motor+0x168>
        motor->lim_max_integ = motor->MAX_PWM - prop;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8b1b      	ldrh	r3, [r3, #24]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fd09 	bl	8000bfc <__aeabi_i2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fc4e 	bl	8000a90 <__aeabi_fsub>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	649a      	str	r2, [r3, #72]	; 0x48
 80011fc:	e003      	b.n	8001206 <_ZL14outputSpeedPIDP9PID_motor+0x170>
    else 
        motor->lim_max_integ = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	649a      	str	r2, [r3, #72]	; 0x48
    
    if(prop > 0)
 8001206:	f04f 0100 	mov.w	r1, #0
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff ff06 	bl	800101c <__aeabi_fcmpgt>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <_ZL14outputSpeedPIDP9PID_motor+0x194>
        motor->lim_min_integ = 0 - prop;
 8001216:	68f9      	ldr	r1, [r7, #12]
 8001218:	f04f 0000 	mov.w	r0, #0
 800121c:	f7ff fc38 	bl	8000a90 <__aeabi_fsub>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	64da      	str	r2, [r3, #76]	; 0x4c
 8001228:	e003      	b.n	8001232 <_ZL14outputSpeedPIDP9PID_motor+0x19c>
    else
        motor->lim_min_integ = 0;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	64da      	str	r2, [r3, #76]	; 0x4c
    // Constraint the integral
    if(motor->integral_error > motor->lim_max_integ)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f7ff feed 	bl	800101c <__aeabi_fcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <_ZL14outputSpeedPIDP9PID_motor+0x1bc>
        motor->integral_error = motor->lim_max_integ;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	645a      	str	r2, [r3, #68]	; 0x44
 8001250:	e00e      	b.n	8001270 <_ZL14outputSpeedPIDP9PID_motor+0x1da>
    else if(motor->integral_error < motor->lim_min_integ)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f7ff febf 	bl	8000fe0 <__aeabi_fcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <_ZL14outputSpeedPIDP9PID_motor+0x1da>
        motor->integral_error = motor->lim_min_integ;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	645a      	str	r2, [r3, #68]	; 0x44

    output = prop + motor->speed_controller.Kd * (motor->real_speed - motor->prev_encoder_feedback) + motor->integral_error;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fcbb 	bl	8000bfc <__aeabi_i2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff fd0a 	bl	8000ca4 <__aeabi_fmul>
 8001290:	4603      	mov	r3, r0
 8001292:	68f9      	ldr	r1, [r7, #12]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fbfd 	bl	8000a94 <__addsf3>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4619      	mov	r1, r3
 80012a4:	4610      	mov	r0, r2
 80012a6:	f7ff fbf5 	bl	8000a94 <__addsf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	617b      	str	r3, [r7, #20]
    // Update the parameters
    motor->prev_encoder = motor->current_encoder;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
    motor->prev_encoder_feedback = motor->real_speed;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    // Limit the output velocity of the motor
    if(output > motor->MAX_PWM)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	8b1b      	ldrh	r3, [r3, #24]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc98 	bl	8000bfc <__aeabi_i2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4619      	mov	r1, r3
 80012d0:	6978      	ldr	r0, [r7, #20]
 80012d2:	f7ff fea3 	bl	800101c <__aeabi_fcmpgt>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <_ZL14outputSpeedPIDP9PID_motor+0x256>
        output = motor->MAX_PWM;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8b1b      	ldrh	r3, [r3, #24]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fc87 	bl	8000bf4 <__aeabi_ui2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e015      	b.n	8001318 <_ZL14outputSpeedPIDP9PID_motor+0x282>
    else if(output < - motor->MAX_PWM)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	8b1b      	ldrh	r3, [r3, #24]
 80012f0:	425b      	negs	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fc82 	bl	8000bfc <__aeabi_i2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4619      	mov	r1, r3
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff fe6f 	bl	8000fe0 <__aeabi_fcmplt>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <_ZL14outputSpeedPIDP9PID_motor+0x282>
        output = - motor->MAX_PWM;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8b1b      	ldrh	r3, [r3, #24]
 800130c:	425b      	negs	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc74 	bl	8000bfc <__aeabi_i2f>
 8001314:	4603      	mov	r3, r0
 8001316:	617b      	str	r3, [r7, #20]
    motor->output = output;
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff fe89 	bl	8001030 <__aeabi_f2iz>
 800131e:	4602      	mov	r2, r0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <_ZL11readEncoderP9PID_motor>:

// Function to get the encoder value of the motor
static uint32_t readEncoder(PID_motor* motor)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    return motor->encoder_tim->CNT / 4;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	089b      	lsrs	r3, r3, #2
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
	...

08001348 <_Z9motorInit9PID_motor>:

// -------------------------------------------------------- General function used by users -----------------------------------------------

// Function to initiate the motor GPIO pins
void motorInit(PID_motor motor)
{
 8001348:	b084      	sub	sp, #16
 800134a:	b580      	push	{r7, lr}
 800134c:	b08a      	sub	sp, #40	; 0x28
 800134e:	af00      	add	r7, sp, #0
 8001350:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001354:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
    // Initiate the GPIO pins of the motor
    for(int i = 0; i < 2; ++i)
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2b01      	cmp	r3, #1
 800136e:	f300 8091 	bgt.w	8001494 <_Z9motorInit9PID_motor+0x14c>
    {
        HAL_GPIO_WritePin(motor.motor_ports[i], motor.motor_pins[i], GPIO_PIN_RESET);
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001378:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	3304      	adds	r3, #4
 8001380:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f003 fd20 	bl	8004dd0 <HAL_GPIO_WritePin>
        if(motor.motor_ports[i] == GPIOA)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	4a42      	ldr	r2, [pc, #264]	; (80014a4 <_Z9motorInit9PID_motor+0x15c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d10c      	bne.n	80013ba <_Z9motorInit9PID_motor+0x72>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	e052      	b.n	8001460 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOB)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	4a39      	ldr	r2, [pc, #228]	; (80014ac <_Z9motorInit9PID_motor+0x164>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10c      	bne.n	80013e4 <_Z9motorInit9PID_motor+0x9c>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a36      	ldr	r2, [pc, #216]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	e03d      	b.n	8001460 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOC)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <_Z9motorInit9PID_motor+0x168>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d10c      	bne.n	800140e <_Z9motorInit9PID_motor+0xc6>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	e028      	b.n	8001460 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOD)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <_Z9motorInit9PID_motor+0x16c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10c      	bne.n	8001438 <_Z9motorInit9PID_motor+0xf0>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6193      	str	r3, [r2, #24]
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	e013      	b.n	8001460 <_Z9motorInit9PID_motor+0x118>
        else if (motor.motor_ports[i] == GPIOE)
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <_Z9motorInit9PID_motor+0x170>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d10b      	bne.n	8001460 <_Z9motorInit9PID_motor+0x118>
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 800144e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <_Z9motorInit9PID_motor+0x160>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
        GPIO_InitStruct.Pin = motor.motor_pins[i];
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	3304      	adds	r3, #4
 8001464:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800146c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(motor.motor_ports[i], &GPIO_InitStruct);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	f107 0214 	add.w	r2, r7, #20
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fb1e 	bl	8004ac8 <HAL_GPIO_Init>
    for(int i = 0; i < 2; ++i)
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	3301      	adds	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
 8001492:	e76a      	b.n	800136a <_Z9motorInit9PID_motor+0x22>
    }
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800149e:	b004      	add	sp, #16
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40011800 	.word	0x40011800

080014bc <_Z15dutyCycleUpdatetP9PID_motor>:

// Function to update the PWM duty cycle of the motor
void dutyCycleUpdate(uint16_t duty_cycle, PID_motor* motor)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	80fb      	strh	r3, [r7, #6]
    switch (motor->pwm_channel)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d81f      	bhi.n	8001510 <_Z15dutyCycleUpdatetP9PID_motor+0x54>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <_Z15dutyCycleUpdatetP9PID_motor+0x1c>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014f3 	.word	0x080014f3
 80014e0:	080014fd 	.word	0x080014fd
 80014e4:	08001507 	.word	0x08001507
    {
        case PWM_CHANNEL_1:
            motor->pwm_tim->CCR1 = duty_cycle;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80014f0:	e00f      	b.n	8001512 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_2:
            motor->pwm_tim->CCR2 = duty_cycle;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 80014fa:	e00a      	b.n	8001512 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_3:
            motor->pwm_tim->CCR3 = duty_cycle;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c
            break;
 8001504:	e005      	b.n	8001512 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
        case PWM_CHANNEL_4:
            motor->pwm_tim->CCR4 = duty_cycle;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	88fa      	ldrh	r2, [r7, #6]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 800150e:	e000      	b.n	8001512 <_Z15dutyCycleUpdatetP9PID_motor+0x56>
    default:
        break;
 8001510:	bf00      	nop
    }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <_Z10motorBrakeP9PID_motor>:

// Function to brake the motor immediately
void motorBrake(PID_motor* motor)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	dutyCycleUpdate(0, motor);
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff ffc8 	bl	80014bc <_Z15dutyCycleUpdatetP9PID_motor>
    HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_RESET);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	891b      	ldrh	r3, [r3, #8]
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	f003 fc4a 	bl	8004dd0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_RESET);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6858      	ldr	r0, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	895b      	ldrh	r3, [r3, #10]
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	f003 fc42 	bl	8004dd0 <HAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_Z18inputSpeedHandlingP9PID_motorf>:

// Function to handle the speed input of the PID controller
void inputSpeedHandling(PID_motor* motor, float speed)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
    // Convert speed rpm into rad/s
    if(speed > motor->MAX_INPUT_SPEED)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8b5b      	ldrh	r3, [r3, #26]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb4a 	bl	8000bfc <__aeabi_i2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7ff fd55 	bl	800101c <__aeabi_fcmpgt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <_Z18inputSpeedHandlingP9PID_motorf+0x34>
        speed = motor->MAX_INPUT_SPEED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8b5b      	ldrh	r3, [r3, #26]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fb39 	bl	8000bf4 <__aeabi_ui2f>
 8001582:	4603      	mov	r3, r0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	e022      	b.n	80015ce <_Z18inputSpeedHandlingP9PID_motorf+0x7a>
    else if(speed < - motor->MAX_INPUT_SPEED)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	8b5b      	ldrh	r3, [r3, #26]
 800158c:	425b      	negs	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fb34 	bl	8000bfc <__aeabi_i2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f7ff fd21 	bl	8000fe0 <__aeabi_fcmplt>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <_Z18inputSpeedHandlingP9PID_motorf+0x62>
        speed = - motor->MAX_INPUT_SPEED;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8b5b      	ldrh	r3, [r3, #26]
 80015a8:	425b      	negs	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fb26 	bl	8000bfc <__aeabi_i2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	e00b      	b.n	80015ce <_Z18inputSpeedHandlingP9PID_motorf+0x7a>
    else if(speed == 0)
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f7ff fd06 	bl	8000fcc <__aeabi_fcmpeq>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <_Z18inputSpeedHandlingP9PID_motorf+0x7a>
    	motor->moving = MOTOR_STOP;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    // Check whether the motor is already moving
    if(motor->moving == MOTOR_STOP && speed != 0)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <_Z18inputSpeedHandlingP9PID_motorf+0x9c>
 80015d8:	f04f 0100 	mov.w	r1, #0
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f7ff fcf5 	bl	8000fcc <__aeabi_fcmpeq>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <_Z18inputSpeedHandlingP9PID_motorf+0x9c>
    {
        motor->moving = MOTOR_MOVING;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    // Check if the motor change direction immediately & stop the motor before changing direction
    if(speed >= 0)
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff fd07 	bl	8001008 <__aeabi_fcmpge>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d010      	beq.n	8001622 <_Z18inputSpeedHandlingP9PID_motorf+0xce>
    {
    	if(motor->direction == CW_DIRECTION)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d106      	bne.n	8001618 <_Z18inputSpeedHandlingP9PID_motorf+0xc4>
    	{
    		motor->moving = MOTOR_STOP;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    		motorBrake(motor);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff82 	bl	800151c <_Z10motorBrakeP9PID_motor>
    	}
        motor->direction = CCW_DIRECTION;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001620:	e00f      	b.n	8001642 <_Z18inputSpeedHandlingP9PID_motorf+0xee>
    }
    else
    {
    	if(motor->direction == CCW_DIRECTION)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <_Z18inputSpeedHandlingP9PID_motorf+0xe6>
    	{
    		motor->moving = MOTOR_STOP;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    		motorBrake(motor);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff71 	bl	800151c <_Z10motorBrakeP9PID_motor>
    	}
        motor->direction = CW_DIRECTION;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    // Convert the desired speed to pulse per frame and input to the motor
    motor->targetPulsePerFrame = (speed * motor->encoder_rev) * time_frame / 60000.0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	8adb      	ldrh	r3, [r3, #22]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fad8 	bl	8000bfc <__aeabi_i2f>
 800164c:	4603      	mov	r3, r0
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb27 	bl	8000ca4 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	461c      	mov	r4, r3
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <_Z18inputSpeedHandlingP9PID_motorf+0x134>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff facc 	bl	8000bfc <__aeabi_i2f>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff fb1b 	bl	8000ca4 <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	4906      	ldr	r1, [pc, #24]	; (800168c <_Z18inputSpeedHandlingP9PID_motorf+0x138>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fbca 	bl	8000e0c <__aeabi_fdiv>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	476a6000 	.word	0x476a6000

08001690 <_Z15speedControlPIDP9PID_motor>:

// Function to control the speed of the motor by PID algorithm
void speedControlPID(PID_motor* motor)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    // Update the motor encoder value
    motor->current_encoder = readEncoder(motor);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe47 	bl	800132c <_ZL11readEncoderP9PID_motor>
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
    // Update the PID output of the controller
    outputSpeedPID(motor);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fcf6 	bl	8001096 <_ZL14outputSpeedPIDP9PID_motor>

    // Get the absolute value of the motor
    uint16_t pwm_dutycycle = abs(motor->output);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fce4 	bl	800107c <_ZSt3absl>
 80016b4:	4603      	mov	r3, r0
 80016b6:	81fb      	strh	r3, [r7, #14]
    if(pwm_dutycycle < motor->DEAD_BAND)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7f1b      	ldrb	r3, [r3, #28]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	89fa      	ldrh	r2, [r7, #14]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d201      	bcs.n	80016c8 <_Z15speedControlPIDP9PID_motor+0x38>
        pwm_dutycycle = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	81fb      	strh	r3, [r7, #14]

    // Control the direction of the motor
    if(motor->moving == MOTOR_MOVING)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d12a      	bne.n	8001728 <_Z15speedControlPIDP9PID_motor+0x98>
    {
    	if(motor->direction == CCW_DIRECTION)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d110      	bne.n	80016fe <_Z15speedControlPIDP9PID_motor+0x6e>
		{
			HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_SET);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	891b      	ldrh	r3, [r3, #8]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f003 fb72 	bl	8004dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_RESET);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6858      	ldr	r0, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	895b      	ldrh	r3, [r3, #10]
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	f003 fb6a 	bl	8004dd0 <HAL_GPIO_WritePin>
 80016fc:	e014      	b.n	8001728 <_Z15speedControlPIDP9PID_motor+0x98>
		}
		else if(motor->direction == CW_DIRECTION)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10f      	bne.n	8001728 <_Z15speedControlPIDP9PID_motor+0x98>
		{
			HAL_GPIO_WritePin(motor->motor_ports[0], motor->motor_pins[0], GPIO_PIN_RESET);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	891b      	ldrh	r3, [r3, #8]
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	f003 fb5c 	bl	8004dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->motor_ports[1], motor->motor_pins[1], GPIO_PIN_SET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6858      	ldr	r0, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	895b      	ldrh	r3, [r3, #10]
 8001720:	2201      	movs	r2, #1
 8001722:	4619      	mov	r1, r3
 8001724:	f003 fb54 	bl	8004dd0 <HAL_GPIO_WritePin>
		}
    }

    // Feed the value of the PWM duty cycle
    if(pwm_dutycycle == 0 || motor->moving == MOTOR_STOP)
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <_Z15speedControlPIDP9PID_motor+0xa8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001734:	2b00      	cmp	r3, #0
 8001736:	d103      	bne.n	8001740 <_Z15speedControlPIDP9PID_motor+0xb0>
        motorBrake(motor);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff feef 	bl	800151c <_Z10motorBrakeP9PID_motor>
    else if(pwm_dutycycle != 0 && motor->moving == MOTOR_MOVING)
    	dutyCycleUpdate(pwm_dutycycle, motor);
}
 800173e:	e00c      	b.n	800175a <_Z15speedControlPIDP9PID_motor+0xca>
    else if(pwm_dutycycle != 0 && motor->moving == MOTOR_MOVING)
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <_Z15speedControlPIDP9PID_motor+0xca>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800174c:	2b01      	cmp	r3, #1
 800174e:	d104      	bne.n	800175a <_Z15speedControlPIDP9PID_motor+0xca>
    	dutyCycleUpdate(pwm_dutycycle, motor);
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff feb1 	bl	80014bc <_Z15dutyCycleUpdatetP9PID_motor>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001768:	f002 fd9c 	bl	80042a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f82e 	bl	80017cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f000 fa8c 	bl	8001c8c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001774:	f000 fa64 	bl	8001c40 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8001778:	f000 fa34 	bl	8001be4 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 800177c:	f000 f876 	bl	800186c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001780:	f000 f8d4 	bl	800192c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001784:	f000 f930 	bl	80019e8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001788:	f000 f98c 	bl	8001aa4 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 800178c:	f001 fc8e 	bl	80030ac <setup>

  // Initiate the PWM of the 2 motors
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001790:	2100      	movs	r1, #0
 8001792:	480a      	ldr	r0, [pc, #40]	; (80017bc <main+0x58>)
 8001794:	f004 f858 	bl	8005848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001798:	2104      	movs	r1, #4
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <main+0x58>)
 800179c:	f004 f854 	bl	8005848 <HAL_TIM_PWM_Start>

    // Initiate the Encoder read of 2 motors
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017a0:	213c      	movs	r1, #60	; 0x3c
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <main+0x5c>)
 80017a4:	f004 f994 	bl	8005ad0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017a8:	213c      	movs	r1, #60	; 0x3c
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <main+0x60>)
 80017ac:	f004 f990 	bl	8005ad0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <main+0x64>)
 80017b2:	f003 ff9f 	bl	80056f4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80017b6:	f001 fcb7 	bl	8003128 <loop>
 80017ba:	e7fc      	b.n	80017b6 <main+0x52>
 80017bc:	20000388 	.word	0x20000388
 80017c0:	200002f8 	.word	0x200002f8
 80017c4:	20000340 	.word	0x20000340
 80017c8:	200002b0 	.word	0x200002b0

080017cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b090      	sub	sp, #64	; 0x40
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	2228      	movs	r2, #40	; 0x28
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 f806 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001800:	2302      	movs	r3, #2
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800180a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fb0d 	bl	8004e34 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800182a:	f000 fab3 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001832:	2302      	movs	r3, #2
 8001834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2102      	movs	r1, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fd75 	bl	8005338 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800185e:	f000 fa99 	bl	8001d94 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3740      	adds	r7, #64	; 0x40
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 800188a:	4a27      	ldr	r2, [pc, #156]	; (8001928 <_ZL12MX_TIM1_Initv+0xbc>)
 800188c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 8001890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001894:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 800189e:	f240 529f 	movw	r2, #1439	; 0x59f
 80018a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b6:	481b      	ldr	r0, [pc, #108]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 80018b8:	f003 fecc 	bl	8005654 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80018cc:	f000 fa62 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	4811      	ldr	r0, [pc, #68]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 80018de:	f004 fb4f 	bl	8005f80 <HAL_TIM_ConfigClockSource>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 80018f2:	f000 fa4f 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <_ZL12MX_TIM1_Initv+0xb8>)
 8001904:	f004 fecc 	bl	80066a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001918:	f000 fa3c 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200002b0 	.word	0x200002b0
 8001928:	40012c00 	.word	0x40012c00

0800192c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	2224      	movs	r2, #36	; 0x24
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f005 ff56 	bl	80077ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 800194a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001970:	2303      	movs	r3, #3
 8001972:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001978:	2301      	movs	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001980:	230f      	movs	r3, #15
 8001982:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001988:	2301      	movs	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001990:	230f      	movs	r3, #15
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 800199c:	f003 fff6 	bl	800598c <HAL_TIM_Encoder_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80019b0:	f000 f9f0 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4808      	ldr	r0, [pc, #32]	; (80019e4 <_ZL12MX_TIM2_Initv+0xb8>)
 80019c2:	f004 fe6d 	bl	80066a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80019d6:	f000 f9dd 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200002f8 	.word	0x200002f8

080019e8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 fef8 	bl	80077ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a06:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <_ZL12MX_TIM3_Initv+0xb8>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4619      	mov	r1, r3
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a56:	f003 ff99 	bl	800598c <HAL_TIM_Encoder_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001a6a:	f000 f993 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <_ZL12MX_TIM3_Initv+0xb4>)
 8001a7c:	f004 fe10 	bl	80066a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2301      	movne	r3, #1
 8001a88:	2300      	moveq	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001a90:	f000 f980 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000340 	.word	0x20000340
 8001aa0:	40000400 	.word	0x40000400

08001aa4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad4:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001ad6:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <_ZL12MX_TIM4_Initv+0x13c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001adc:	2247      	movs	r2, #71	; 0x47
 8001ade:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001ae8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001aec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001afa:	4838      	ldr	r0, [pc, #224]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001afc:	f003 fdaa 	bl	8005654 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8001b10:	f000 f940 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	482e      	ldr	r0, [pc, #184]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001b22:	f004 fa2d 	bl	8005f80 <HAL_TIM_ConfigClockSource>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8001b36:	f000 f92d 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b3a:	4828      	ldr	r0, [pc, #160]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001b3c:	f003 fe2c 	bl	8005798 <HAL_TIM_PWM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8001b50:	f000 f920 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	4619      	mov	r1, r3
 8001b62:	481e      	ldr	r0, [pc, #120]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001b64:	f004 fd9c 	bl	80066a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8001b78:	f000 f90c 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7c:	2360      	movs	r3, #96	; 0x60
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4812      	ldr	r0, [pc, #72]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001b94:	f004 f932 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8001ba8:	f000 f8f4 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480a      	ldr	r0, [pc, #40]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001bb4:	f004 f922 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <_ZL12MX_TIM4_Initv+0x128>
  {
    Error_Handler();
 8001bc8:	f000 f8e4 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <_ZL12MX_TIM4_Initv+0x138>)
 8001bce:	f002 f923 	bl	8003e18 <HAL_TIM_MspPostInit>

}
 8001bd2:	bf00      	nop
 8001bd4:	3738      	adds	r7, #56	; 0x38
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000388 	.word	0x20000388
 8001be0:	40000800 	.word	0x40000800

08001be4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_ZL19MX_USART1_UART_Initv+0x58>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c1c:	f004 fdb0 	bl	8006780 <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001c30:	f000 f8b0 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200003d0 	.word	0x200003d0
 8001c3c:	40013800 	.word	0x40013800

08001c40 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_ZL11MX_DMA_Initv+0x48>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <_ZL11MX_DMA_Initv+0x48>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6153      	str	r3, [r2, #20]
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <_ZL11MX_DMA_Initv+0x48>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	200e      	movs	r0, #14
 8001c64:	f002 fc57 	bl	8004516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c68:	200e      	movs	r0, #14
 8001c6a:	f002 fc70 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	200f      	movs	r0, #15
 8001c74:	f002 fc4f 	bl	8004516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c78:	200f      	movs	r0, #15
 8001c7a:	f002 fc68 	bl	800454e <HAL_NVIC_EnableIRQ>

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000

08001c8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a31      	ldr	r2, [pc, #196]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cbe:	f043 0320 	orr.w	r3, r3, #32
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d08:	f003 f862 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d12:	481e      	ldr	r0, [pc, #120]	; (8001d8c <_ZL12MX_GPIO_Initv+0x100>)
 8001d14:	f003 f85c 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2138      	movs	r1, #56	; 0x38
 8001d1c:	481c      	ldr	r0, [pc, #112]	; (8001d90 <_ZL12MX_GPIO_Initv+0x104>)
 8001d1e:	f003 f857 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4813      	ldr	r0, [pc, #76]	; (8001d88 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d3c:	f002 fec4 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <_ZL12MX_GPIO_Initv+0x100>)
 8001d5a:	f002 feb5 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d5e:	2338      	movs	r3, #56	; 0x38
 8001d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <_ZL12MX_GPIO_Initv+0x104>)
 8001d76:	f002 fea7 	bl	8004ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40010c00 	.word	0x40010c00

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>

08001d9e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <_ZN3ros3MsgC1Ev+0x1c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	0800a4e0 	.word	0x0800a4e0

08001de0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
      data()
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffe8 	bl	8001dc0 <_ZN3ros3MsgC1Ev>
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ffcf 	bl	8001d9e <_ZN3ros4TimeC1Ev>
    {
    }
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	0800a4c8 	.word	0x0800a4c8

08001e10 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0a19      	lsrs	r1, r3, #8
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0c19      	lsrs	r1, r3, #16
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3302      	adds	r3, #2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0e19      	lsrs	r1, r3, #24
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a19      	lsrs	r1, r3, #8
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	0c19      	lsrs	r1, r3, #16
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3302      	adds	r3, #2
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0e19      	lsrs	r1, r3, #24
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    }
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	440b      	add	r3, r1
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	6839      	ldr	r1, [r7, #0]
 8001f10:	440b      	add	r3, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	440b      	add	r3, r1
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	440b      	add	r3, r1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3303      	adds	r3, #3
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	440b      	add	r3, r1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	061b      	lsls	r3, r3, #24
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
     return offset;
 8001f78:	68fb      	ldr	r3, [r7, #12]
    }
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	0800a288 	.word	0x0800a288

08001f9c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	0800a298 	.word	0x0800a298

08001fb4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fefe 	bl	8001dc0 <_ZN3ros3MsgC1Ev>
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	809a      	strh	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
    {
    }
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	0800a4b0 	.word	0x0800a4b0
 8001ff8:	0800a2bc 	.word	0x0800a2bc

08001ffc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8899      	ldrh	r1, [r3, #4]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4413      	add	r3, r2
 8002014:	b2ca      	uxtb	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b299      	uxth	r1, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3301      	adds	r3, #1
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	b2ca      	uxtb	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3302      	adds	r3, #2
 8002030:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f88a 	bl	8000150 <strlen>
 800203c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	69b9      	ldr	r1, [r7, #24]
 8002046:	4618      	mov	r0, r3
 8002048:	f001 f878 	bl	800313c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3304      	adds	r3, #4
 8002050:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	18d0      	adds	r0, r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4619      	mov	r1, r3
 8002060:	f005 fbb6 	bl	80077d0 <memcpy>
      offset += length_topic_name;
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4413      	add	r3, r2
 800206a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe f86d 	bl	8000150 <strlen>
 8002076:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f85b 	bl	800313c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	18d0      	adds	r0, r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4619      	mov	r1, r3
 800209a:	f005 fb99 	bl	80077d0 <memcpy>
      offset += length_message_type;
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4413      	add	r3, r2
 80020a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f850 	bl	8000150 <strlen>
 80020b0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 f83e 	bl	800313c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3304      	adds	r3, #4
 80020c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	18d0      	adds	r0, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4619      	mov	r1, r3
 80020d4:	f005 fb7c 	bl	80077d0 <memcpy>
      offset += length_md5sum;
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0a19      	lsrs	r1, r3, #8
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	b2ca      	uxtb	r2, r1
 8002100:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	0c19      	lsrs	r1, r3, #16
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3302      	adds	r3, #2
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	0e19      	lsrs	r1, r3, #24
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3303      	adds	r3, #3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	61fb      	str	r3, [r7, #28]
      return offset;
 8002128:	69fb      	ldr	r3, [r7, #28]
    }
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002132:	b580      	push	{r7, lr}
 8002134:	b08a      	sub	sp, #40	; 0x28
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	889b      	ldrh	r3, [r3, #4]
 8002152:	b21a      	sxth	r2, r3
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	3301      	adds	r3, #1
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	440b      	add	r3, r1
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	3302      	adds	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	441a      	add	r2, r3
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fff9 	bl	8003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3304      	adds	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4413      	add	r3, r2
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	429a      	cmp	r2, r3
 8002198:	d20c      	bcs.n	80021b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	441a      	add	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	440b      	add	r3, r1
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	3301      	adds	r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	e7ec      	b.n	800218e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4413      	add	r3, r2
 80021ba:	3b01      	subs	r3, #1
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	441a      	add	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4413      	add	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	441a      	add	r2, r3
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 ffc6 	bl	8003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	3304      	adds	r3, #4
 80021ee:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d20c      	bcs.n	800221a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	441a      	add	r2, r3
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	3b01      	subs	r3, #1
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	440b      	add	r3, r1
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	3301      	adds	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	e7ec      	b.n	80021f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	3b01      	subs	r3, #1
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4413      	add	r3, r2
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	3b01      	subs	r3, #1
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	441a      	add	r2, r3
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 ff93 	bl	8003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3304      	adds	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	441a      	add	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3b01      	subs	r3, #1
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	440b      	add	r3, r1
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3301      	adds	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e7ec      	b.n	800225a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	3b01      	subs	r3, #1
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4413      	add	r3, r2
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	3b01      	subs	r3, #1
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	441a      	add	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	440a      	add	r2, r1
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	3301      	adds	r3, #1
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	440b      	add	r3, r1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	3302      	adds	r3, #2
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	440b      	add	r3, r1
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3303      	adds	r3, #3
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	440b      	add	r3, r1
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3304      	adds	r3, #4
 80022f6:	61bb      	str	r3, [r7, #24]
     return offset;
 80022f8:	69bb      	ldr	r3, [r7, #24]
    }
 80022fa:	4618      	mov	r0, r3
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	0800a2c0 	.word	0x0800a2c0

0800231c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	0800a2dc 	.word	0x0800a2dc

08002334 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fd3e 	bl	8001dc0 <_ZN3ros3MsgC1Ev>
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	711a      	strb	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002354:	609a      	str	r2, [r3, #8]
    {
    }
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0800a498 	.word	0x0800a498
 8002364:	0800a2bc 	.word	0x0800a2bc

08002368 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	7912      	ldrb	r2, [r2, #4]
 8002380:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fd fedf 	bl	8000150 <strlen>
 8002392:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fecd 	bl	800313c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3304      	adds	r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	18d0      	adds	r0, r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f005 fa0b 	bl	80077d0 <memcpy>
      offset += length_msg;
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80023c2:	68fb      	ldr	r3, [r7, #12]
    }
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	3301      	adds	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	441a      	add	r2, r3
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 febc 	bl	8003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	3304      	adds	r3, #4
 8002402:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	d20c      	bcs.n	800242e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	441a      	add	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3b01      	subs	r3, #1
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	440b      	add	r3, r1
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e7ec      	b.n	8002408 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	3b01      	subs	r3, #1
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	3b01      	subs	r3, #1
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
     return offset;
 8002452:	693b      	ldr	r3, [r7, #16]
    }
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	0800a300 	.word	0x0800a300

08002474 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	0800a314 	.word	0x0800a314

0800248c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fc92 	bl	8001dc0 <_ZN3ros3MsgC1Ev>
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0800a480 	.word	0x0800a480

080024e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	b2ca      	uxtb	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	0a19      	lsrs	r1, r3, #8
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	3301      	adds	r3, #1
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	4413      	add	r3, r2
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	0c19      	lsrs	r1, r3, #16
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3302      	adds	r3, #2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	4413      	add	r3, r2
 8002524:	b2ca      	uxtb	r2, r1
 8002526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0e19      	lsrs	r1, r3, #24
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3303      	adds	r3, #3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	3304      	adds	r3, #4
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	429a      	cmp	r2, r3
 800254c:	d22b      	bcs.n	80025a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800255c:	6939      	ldr	r1, [r7, #16]
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	b2ca      	uxtb	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	0a19      	lsrs	r1, r3, #8
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	3301      	adds	r3, #1
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	0c19      	lsrs	r1, r3, #16
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3302      	adds	r3, #2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4413      	add	r3, r2
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	0e19      	lsrs	r1, r3, #24
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	3303      	adds	r3, #3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	3304      	adds	r3, #4
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	3301      	adds	r3, #1
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	e7ce      	b.n	8002544 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	b2ca      	uxtb	r2, r1
 80025b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	0a19      	lsrs	r1, r3, #8
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	b2ca      	uxtb	r2, r1
 80025c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	0c19      	lsrs	r1, r3, #16
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	3302      	adds	r3, #2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	b2ca      	uxtb	r2, r1
 80025d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	0e19      	lsrs	r1, r3, #24
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	3303      	adds	r3, #3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	b2ca      	uxtb	r2, r1
 80025e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	3304      	adds	r3, #4
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d22b      	bcs.n	8002656 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	4413      	add	r3, r2
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	0a19      	lsrs	r1, r3, #8
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	3301      	adds	r3, #1
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	4413      	add	r3, r2
 8002624:	b2ca      	uxtb	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0c19      	lsrs	r1, r3, #16
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	3302      	adds	r3, #2
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4413      	add	r3, r2
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0e19      	lsrs	r1, r3, #24
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	3303      	adds	r3, #3
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	b2ca      	uxtb	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3304      	adds	r3, #4
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	e7ce      	b.n	80025f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69d9      	ldr	r1, [r3, #28]
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	b2ca      	uxtb	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	0a19      	lsrs	r1, r3, #8
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	3301      	adds	r3, #1
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	0c19      	lsrs	r1, r3, #16
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	3302      	adds	r3, #2
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	0e19      	lsrs	r1, r3, #24
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	3303      	adds	r3, #3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	b2ca      	uxtb	r2, r1
 8002698:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3304      	adds	r3, #4
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d228      	bcs.n	8002700 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fd48 	bl	8000150 <strlen>
 80026c0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	6979      	ldr	r1, [r7, #20]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fd36 	bl	800313c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	3304      	adds	r3, #4
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	18d0      	adds	r0, r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f005 f870 	bl	80077d0 <memcpy>
      offset += length_stringsi;
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e7d1      	b.n	80026a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002702:	4618      	mov	r0, r3
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800270a:	b580      	push	{r7, lr}
 800270c:	b08e      	sub	sp, #56	; 0x38
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	3301      	adds	r3, #1
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	4413      	add	r3, r2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	4313      	orrs	r3, r2
 8002732:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	3302      	adds	r3, #2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	4313      	orrs	r3, r2
 8002744:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	3303      	adds	r3, #3
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	061b      	lsls	r3, r3, #24
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	4313      	orrs	r3, r2
 8002756:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	3304      	adds	r3, #4
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	429a      	cmp	r2, r3
 8002766:	d90a      	bls.n	800277e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f005 fca2 	bl	80080bc <realloc>
 8002778:	4602      	mov	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002784:	2300      	movs	r3, #0
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278e:	429a      	cmp	r2, r3
 8002790:	d236      	bcs.n	8002800 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	440a      	add	r2, r1
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	3301      	adds	r3, #1
 80027aa:	6839      	ldr	r1, [r7, #0]
 80027ac:	440b      	add	r3, r1
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	3302      	adds	r3, #2
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	440b      	add	r3, r1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027cc:	3303      	adds	r3, #3
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	440b      	add	r3, r1
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80027e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e2:	3304      	adds	r3, #4
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	3301      	adds	r3, #1
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
 80027fe:	e7c3      	b.n	8002788 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	3301      	adds	r3, #1
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	4413      	add	r3, r2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	4313      	orrs	r3, r2
 800281a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	3302      	adds	r3, #2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	4313      	orrs	r3, r2
 800282c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	3303      	adds	r3, #3
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	4313      	orrs	r3, r2
 800283e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002842:	3304      	adds	r3, #4
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d90a      	bls.n	8002866 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f005 fc2e 	bl	80080bc <realloc>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	429a      	cmp	r2, r3
 8002878:	d236      	bcs.n	80028e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	440a      	add	r2, r1
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002890:	3301      	adds	r3, #1
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	440b      	add	r3, r1
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	3302      	adds	r3, #2
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	440b      	add	r3, r1
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	3303      	adds	r3, #3
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	440b      	add	r3, r1
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	3304      	adds	r3, #4
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	3214      	adds	r2, #20
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	3301      	adds	r3, #1
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	e7c3      	b.n	8002870 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	3301      	adds	r3, #1
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002906:	3302      	adds	r3, #2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	3303      	adds	r3, #3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	3304      	adds	r3, #4
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	429a      	cmp	r2, r3
 8002936:	d90a      	bls.n	800294e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f005 fbba 	bl	80080bc <realloc>
 8002948:	4602      	mov	r2, r0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295e:	429a      	cmp	r2, r3
 8002960:	d23f      	bcs.n	80029e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	441a      	add	r2, r3
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fc01 	bl	8003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	3304      	adds	r3, #4
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	429a      	cmp	r2, r3
 8002988:	d20c      	bcs.n	80029a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	441a      	add	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3b01      	subs	r3, #1
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	440b      	add	r3, r1
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3301      	adds	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e7ec      	b.n	800297e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80029a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	3b01      	subs	r3, #1
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	3b01      	subs	r3, #1
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80029c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	3220      	adds	r2, #32
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	3301      	adds	r3, #1
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e0:	e7ba      	b.n	8002958 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80029e4:	4618      	mov	r0, r3
 80029e6:	3738      	adds	r7, #56	; 0x38
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	0800a3ec 	.word	0x0800a3ec

08002a04 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	0800a338 	.word	0x0800a338

08002a1c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68d8      	ldr	r0, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6891      	ldr	r1, [r2, #8]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4798      	blx	r3
 8002a66:	4603      	mov	r3, r0
  };
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
  }
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <_ZN13STM32HardwareC1Ev+0x34>)
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200003d0 	.word	0x200003d0

08002ae4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f804 	bl	8002afa <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f003 fef6 	bl	8006900 <HAL_UART_Receive_DMA>
    }
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ffa8 	bl	8002a86 <_ZN13STM32Hardware10getRdmaIndEv>
 8002b36:	4603      	mov	r3, r0
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b4c:	1c59      	adds	r1, r3, #1
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    }
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}
	...

08002b78 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d108      	bne.n	8002ba0 <_ZN13STM32Hardware5flushEv+0x28>
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <_ZN13STM32Hardware5flushEv+0xe4>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <_ZN13STM32Hardware5flushEv+0x28>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <_ZN13STM32Hardware5flushEv+0x2a>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d055      	beq.n	8002c52 <_ZN13STM32Hardware5flushEv+0xda>
      {
        mutex = true;
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <_ZN13STM32Hardware5flushEv+0xe4>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d047      	beq.n	8002c4c <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	81fb      	strh	r3, [r7, #14]
          if(tfind < twind){
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d217      	bcs.n	8002c00 <_ZN13STM32Hardware5flushEv+0x88>
            len = twind - tfind;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	89fa      	ldrh	r2, [r7, #14]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f003 fe11 	bl	8006820 <HAL_UART_Transmit_DMA>
 8002bfe:	e01f      	b.n	8002c40 <_ZN13STM32Hardware5flushEv+0xc8>
          }
          else{
            len = tbuflen - tfind;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002c0c:	81fb      	strh	r3, [r7, #14]
            HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	89fa      	ldrh	r2, [r7, #14]
 8002c22:	4619      	mov	r1, r3
 8002c24:	f003 fdfc 	bl	8006820 <HAL_UART_Transmit_DMA>
            HAL_UART_Transmit_DMA(huart, &tbuf[0], twind);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f003 fdf0 	bl	8006820 <HAL_UART_Transmit_DMA>
          }
          tfind = twind;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <_ZN13STM32Hardware5flushEv+0xe4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
      }
    }
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200004a0 	.word	0x200004a0

08002c60 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
      int n = length;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	617b      	str	r3, [r7, #20]
      n = (n <= tbuflen) ? n : tbuflen;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c76:	bfa8      	it	ge
 8002c78:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002c7c:	617b      	str	r3, [r7, #20]

      int n_tail = (n <= tbuflen - twind) ? n : tbuflen - twind;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c84:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	bf28      	it	cs
 8002c8e:	4613      	movcs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f004 fd93 	bl	80077d0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d00b      	beq.n	8002cde <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	18d1      	adds	r1, r2, r3
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f004 fd79 	bl	80077d0 <memcpy>
      }
      flush();
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f7ff ff4a 	bl	8002b78 <_ZN13STM32Hardware5flushEv>
    }
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	f001 fb2e 	bl	8004354 <HAL_GetTick>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
      data(0)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f856 	bl	8001dc0 <_ZN3ros3MsgC1Ev>
 8002d14:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <_ZN8std_msgs6UInt32C1Ev+0x28>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
    {
    }
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	0800a43c 	.word	0x0800a43c

08002d30 <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	b2ca      	uxtb	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0a19      	lsrs	r1, r3, #8
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3301      	adds	r3, #1
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0c19      	lsrs	r1, r3, #16
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3302      	adds	r3, #2
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b2ca      	uxtb	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0e19      	lsrs	r1, r3, #24
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3303      	adds	r3, #3
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b2ca      	uxtb	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d88:	68fb      	ldr	r3, [r7, #12]
    }
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	440b      	add	r3, r1
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3302      	adds	r3, #2
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	440b      	add	r3, r1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3303      	adds	r3, #3
 8002de4:	6839      	ldr	r1, [r7, #0]
 8002de6:	440b      	add	r3, r1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3304      	adds	r3, #4
 8002df6:	60fb      	str	r3, [r7, #12]
     return offset;
 8002df8:	68fb      	ldr	r3, [r7, #12]
    }
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	0800a35c 	.word	0x0800a35c

08002e1c <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	0800a36c 	.word	0x0800a36c

08002e34 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	0800a46c 	.word	0x0800a46c

08002e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ffe8 	bl	8002e34 <_ZN3ros15NodeHandleBase_C1Ev>
 8002e64:	4a36      	ldr	r2, [pc, #216]	; (8002f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fe1c 	bl	8002aac <_ZN13STM32HardwareC1Ev>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fca3 	bl	80077ec <memset>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fc9a 	bl	80077ec <memset>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002ebe:	2264      	movs	r2, #100	; 0x64
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fc92 	bl	80077ec <memset>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002ece:	2264      	movs	r2, #100	; 0x64
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fc8a 	bl	80077ec <memset>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff faac 	bl	800248c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0800a428 	.word	0x0800a428

08002f44 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E>:
static int16_t left_enc_ticks = 0;
static int16_t right_enc_ticks = 0;

// ******************* Motor Velocity Callback ************************* 
void robotCmdVelCallBack(const std_msgs::UInt32& robot_vel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f50:	4810      	ldr	r0, [pc, #64]	; (8002f94 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x50>)
 8002f52:	f001 ff55 	bl	8004e00 <HAL_GPIO_TogglePin>
	rcv_buffer.robot_vel_msg = robot_vel.data;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002f5c:	6013      	str	r3, [r2, #0]
	inputSpeedHandling(&motor_left, (float)rcv_buffer.robot_wheels_vel[0]);
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fe49 	bl	8000bfc <__aeabi_i2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480b      	ldr	r0, [pc, #44]	; (8002f9c <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x58>)
 8002f70:	f7fe faf0 	bl	8001554 <_Z18inputSpeedHandlingP9PID_motorf>
	inputSpeedHandling(&motor_right, (float)rcv_buffer.robot_wheels_vel[1]);
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x54>)
 8002f76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fe3e 	bl	8000bfc <__aeabi_i2f>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4619      	mov	r1, r3
 8002f84:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <_Z19robotCmdVelCallBackRKN8std_msgs6UInt32E+0x5c>)
 8002f86:	f7fe fae5 	bl	8001554 <_Z18inputSpeedHandlingP9PID_motorf>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40011000 	.word	0x40011000
 8002f98:	20000dec 	.word	0x20000dec
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	2000005c 	.word	0x2000005c

08002fa4 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt32> robot_vel_sub("robot_wheel_vel", &robotCmdVelCallBack);

// ************************** Declare publishers **********************************
ros::Publisher robot_pos_pub("robot_wheel_pos", &robot_wheels_pos);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <HAL_UART_TxCpltCallback+0x20>)
 8002fae:	f000 f93b 	bl	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fddf 	bl	8002b78 <_ZN13STM32Hardware5flushEv>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200004a4 	.word	0x200004a4

08002fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <HAL_UART_RxCpltCallback+0x20>)
 8002fd2:	f000 f929 	bl	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fd8e 	bl	8002afa <_ZN13STM32Hardware10reset_rbufEv>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200004a4 	.word	0x200004a4

08002fec <HAL_TIM_PeriodElapsedCallback>:

// Function for timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	speedControlPID(&motor_left);
 8002ff4:	4825      	ldr	r0, [pc, #148]	; (800308c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ff6:	f7fe fb4b 	bl	8001690 <_Z15speedControlPIDP9PID_motor>
	speedControlPID(&motor_right);
 8002ffa:	4825      	ldr	r0, [pc, #148]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002ffc:	f7fe fb48 	bl	8001690 <_Z15speedControlPIDP9PID_motor>

	left_enc_ticks += motor_left.real_speed;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300c:	b29b      	uxth	r3, r3
 800300e:	4413      	add	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21a      	sxth	r2, r3
 8003014:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003016:	801a      	strh	r2, [r3, #0]
	right_enc_ticks += motor_right.real_speed;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003024:	b29b      	uxth	r3, r3
 8003026:	4413      	add	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	b21a      	sxth	r2, r3
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800302e:	801a      	strh	r2, [r3, #0]

	// Publish new data every 100 ms
	if(++tick == 5)
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	3301      	adds	r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800303c:	4619      	mov	r1, r3
 800303e:	7011      	strb	r1, [r2, #0]
 8003040:	2b05      	cmp	r3, #5
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01a      	beq.n	8003084 <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		tick = 0;
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
		send_buffer.robot_wheels_pos[0] = left_enc_ticks;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003056:	f9b3 2000 	ldrsh.w	r2, [r3]
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800305c:	801a      	strh	r2, [r3, #0]
		send_buffer.robot_wheels_pos[1] = right_enc_ticks;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003060:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003066:	805a      	strh	r2, [r3, #2]
		robot_wheels_pos.data = send_buffer.robot_pos_msg;
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800306e:	6053      	str	r3, [r2, #4]
		robot_pos_pub.publish(&robot_wheels_pos);
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003072:	480d      	ldr	r0, [pc, #52]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003074:	f7ff fce8 	bl	8002a48 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		// Reset the encoders tick
		left_enc_ticks = 0;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800307a:	2200      	movs	r2, #0
 800307c:	801a      	strh	r2, [r3, #0]
		right_enc_ticks = 0;
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003080:	2200      	movs	r2, #0
 8003082:	801a      	strh	r2, [r3, #0]
	}
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000004 	.word	0x20000004
 8003090:	2000005c 	.word	0x2000005c
 8003094:	20000df2 	.word	0x20000df2
 8003098:	20000df4 	.word	0x20000df4
 800309c:	20000df0 	.word	0x20000df0
 80030a0:	20000de8 	.word	0x20000de8
 80030a4:	20000de0 	.word	0x20000de0
 80030a8:	20000e14 	.word	0x20000e14

080030ac <setup>:

void setup(void)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b093      	sub	sp, #76	; 0x4c
 80030b0:	af12      	add	r7, sp, #72	; 0x48
  nh.initNode();
 80030b2:	4817      	ldr	r0, [pc, #92]	; (8003110 <setup+0x64>)
 80030b4:	f000 f8c3 	bl	800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  // Initiate publishers and subscribers
  nh.advertise(robot_pos_pub);
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <setup+0x68>)
 80030ba:	4815      	ldr	r0, [pc, #84]	; (8003110 <setup+0x64>)
 80030bc:	f000 f8dc 	bl	8003278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(robot_vel_sub);
 80030c0:	4915      	ldr	r1, [pc, #84]	; (8003118 <setup+0x6c>)
 80030c2:	4813      	ldr	r0, [pc, #76]	; (8003110 <setup+0x64>)
 80030c4:	f000 f907 	bl	80032d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

  motorInit(motor_left);
 80030c8:	4c14      	ldr	r4, [pc, #80]	; (800311c <setup+0x70>)
 80030ca:	4668      	mov	r0, sp
 80030cc:	f104 0310 	add.w	r3, r4, #16
 80030d0:	2248      	movs	r2, #72	; 0x48
 80030d2:	4619      	mov	r1, r3
 80030d4:	f004 fb7c 	bl	80077d0 <memcpy>
 80030d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030dc:	f7fe f934 	bl	8001348 <_Z9motorInit9PID_motor>
  motorInit(motor_right);
 80030e0:	4c0f      	ldr	r4, [pc, #60]	; (8003120 <setup+0x74>)
 80030e2:	4668      	mov	r0, sp
 80030e4:	f104 0310 	add.w	r3, r4, #16
 80030e8:	2248      	movs	r2, #72	; 0x48
 80030ea:	4619      	mov	r1, r3
 80030ec:	f004 fb70 	bl	80077d0 <memcpy>
 80030f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030f4:	f7fe f928 	bl	8001348 <_Z9motorInit9PID_motor>

  inputSpeedHandling(&motor_left, 50.0);
 80030f8:	490a      	ldr	r1, [pc, #40]	; (8003124 <setup+0x78>)
 80030fa:	4808      	ldr	r0, [pc, #32]	; (800311c <setup+0x70>)
 80030fc:	f7fe fa2a 	bl	8001554 <_Z18inputSpeedHandlingP9PID_motorf>
  inputSpeedHandling(&motor_right, 50.0);
 8003100:	4908      	ldr	r1, [pc, #32]	; (8003124 <setup+0x78>)
 8003102:	4807      	ldr	r0, [pc, #28]	; (8003120 <setup+0x74>)
 8003104:	f7fe fa26 	bl	8001554 <_Z18inputSpeedHandlingP9PID_motorf>
}
 8003108:	bf00      	nop
 800310a:	3704      	adds	r7, #4
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	200004a4 	.word	0x200004a4
 8003114:	20000e14 	.word	0x20000e14
 8003118:	20000df8 	.word	0x20000df8
 800311c:	20000004 	.word	0x20000004
 8003120:	2000005c 	.word	0x2000005c
 8003124:	42480000 	.word	0x42480000

08003128 <loop>:

void loop(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
#endif
#ifdef STM32F3xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#endif

  nh.spinOnce();
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <loop+0x10>)
 800312e:	f000 f8fc 	bl	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200004a4 	.word	0x200004a4

0800313c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d80d      	bhi.n	800316c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	fa22 f103 	lsr.w	r1, r2, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	b2ca      	uxtb	r2, r1
 8003162:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e7ee      	b.n	800314a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d811      	bhi.n	80031b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	440a      	add	r2, r1
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	4611      	mov	r1, r2
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	00d2      	lsls	r2, r2, #3
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e7ea      	b.n	800318a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
	...

080031c0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	0800a454 	.word	0x0800a454

080031e0 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ffe5 	bl	80031c0 <_ZN3ros11Subscriber_C1Ev>
 80031f6:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	330c      	adds	r3, #12
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fd7f 	bl	8002d04 <_ZN8std_msgs6UInt32C1Ev>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	615a      	str	r2, [r3, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
  };
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	0800a410 	.word	0x0800a410

08003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
  }
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fc4a 	bl	8002ae4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b18      	cmp	r3, #24
 800328a:	dc1e      	bgt.n	80032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d111      	bne.n	80032c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	60da      	str	r2, [r3, #12]
        return true;
 80032be:	2301      	movs	r3, #1
 80032c0:	e004      	b.n	80032cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3301      	adds	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e7dd      	b.n	8003286 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80032ca:	2300      	movs	r3, #0
  }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b18      	cmp	r3, #24
 80032e8:	dc19      	bgt.n	800331e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003302:	6839      	ldr	r1, [r7, #0]
 8003304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	605a      	str	r2, [r3, #4]
        return true;
 8003312:	2301      	movs	r3, #1
 8003314:	e004      	b.n	8003320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e7e2      	b.n	80032e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800331e:	2300      	movs	r3, #0
  }
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fcd8 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 800333c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800334c:	4293      	cmp	r3, r2
 800334e:	d903      	bls.n	8003358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	429a      	cmp	r2, r3
 800336c:	d903      	bls.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800337c:	2b00      	cmp	r3, #0
 800337e:	d014      	beq.n	80033aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fcb1 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003396:	429a      	cmp	r2, r3
 8003398:	bf8c      	ite	hi
 800339a:	2301      	movhi	r3, #1
 800339c:	2300      	movls	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80033a4:	f06f 0301 	mvn.w	r3, #1
 80033a8:	e194      	b.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fbb4 	bl	8002b1c <_ZN13STM32Hardware4readEv>
 80033b4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f2c0 8174 	blt.w	80036a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	441a      	add	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033d4:	2b07      	cmp	r3, #7
 80033d6:	d11e      	bne.n	8003416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80033de:	1c59      	adds	r1, r3, #1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	b2d1      	uxtb	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	460a      	mov	r2, r1
 80033f0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1b4      	bne.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2208      	movs	r2, #8
 8003410:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003414:	e7af      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800341c:	2b00      	cmp	r3, #0
 800341e:	d128      	bne.n	8003472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2bff      	cmp	r3, #255	; 0xff
 8003424:	d10d      	bne.n	8003442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f103 0214 	add.w	r2, r3, #20
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003440:	e799      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fc50 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	bf8c      	ite	hi
 800345a:	2301      	movhi	r3, #1
 800345c:	2300      	movls	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d088      	beq.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800346c:	f06f 0301 	mvn.w	r3, #1
 8003470:	e130      	b.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003478:	2b01      	cmp	r3, #1
 800347a:	d118      	bne.n	80034ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2bfe      	cmp	r3, #254	; 0xfe
 8003480:	d107      	bne.n	8003492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003490:	e771      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f47f af68 	bne.w	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f918 	bl	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80034ac:	e763      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d113      	bne.n	80034e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80034de:	e74a      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d110      	bne.n	800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800350a:	e734      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003512:	2b04      	cmp	r3, #4
 8003514:	d116      	bne.n	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800351c:	425a      	negs	r2, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	bf58      	it	pl
 8003524:	4253      	negpl	r3, r2
 8003526:	2bff      	cmp	r3, #255	; 0xff
 8003528:	d107      	bne.n	800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003538:	e71d      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003542:	e718      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800354a:	2b05      	cmp	r3, #5
 800354c:	d10f      	bne.n	800356e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800356c:	e703      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003574:	2b06      	cmp	r3, #6
 8003576:	d117      	bne.n	80035a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	441a      	add	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2207      	movs	r2, #7
 800358e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f aeec 	bne.w	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035a6:	e6e6      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	f47f aee1 	bne.w	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80035c2:	425a      	negs	r2, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	bf58      	it	pl
 80035ca:	4253      	negpl	r3, r2
 80035cc:	2bff      	cmp	r3, #255	; 0xff
 80035ce:	f47f aed2 	bne.w	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d110      	bne.n	80035fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f87d 	bl	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f898 	bl	8003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e06a      	b.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003604:	2b0a      	cmp	r3, #10
 8003606:	d107      	bne.n	8003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f961 	bl	80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003616:	e6ae      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d10e      	bne.n	8003640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f7ff f86a 	bl	800270a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800363e:	e69a      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003646:	2b0b      	cmp	r3, #11
 8003648:	d104      	bne.n	8003654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003652:	e690      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800365a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f43f ae84 	beq.w	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003674:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800367e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003688:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80036a0:	4611      	mov	r1, r2
 80036a2:	4798      	blx	r3
    while (true)
 80036a4:	e667      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80036a6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00f      	beq.n	80036d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d906      	bls.n	80036d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f809 	bl	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80036d2:	2300      	movs	r3, #0
  }
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fb79 	bl	8001de0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f107 020c 	add.w	r2, r7, #12
 80036f8:	210a      	movs	r1, #10
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
    rt_time = hardware_.time();
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff faf2 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b08b      	sub	sp, #44	; 0x2c
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fc45 	bl	8001fb4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b18      	cmp	r3, #24
 8003732:	dc63      	bgt.n	80037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d056      	beq.n	80037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	b29b      	uxth	r3, r3
 8003758:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4608      	mov	r0, r1
 8003794:	4798      	blx	r3
 8003796:	4603      	mov	r3, r0
 8003798:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4798      	blx	r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80037c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037cc:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681c      	ldr	r4, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f944 	bl	8002a70 <_ZN3ros9Publisher15getEndpointTypeEv>
 80037e8:	4601      	mov	r1, r0
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	461a      	mov	r2, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	3301      	adds	r3, #1
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	e798      	b.n	800372e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2b18      	cmp	r3, #24
 8003804:	dc5f      	bgt.n	80038c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d053      	beq.n	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800381e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b29b      	uxth	r3, r3
 8003826:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	f202 2222 	addw	r2, r2, #546	; 0x222
 800384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4608      	mov	r0, r1
 8003858:	4798      	blx	r3
 800385a:	4603      	mov	r3, r0
 800385c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003866:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4608      	mov	r0, r1
 800387e:	4798      	blx	r3
 8003880:	4603      	mov	r3, r0
 8003882:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003888:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681c      	ldr	r4, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3304      	adds	r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4608      	mov	r0, r1
 80038b0:	4798      	blx	r3
 80038b2:	4601      	mov	r1, r0
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	461a      	mov	r2, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	3301      	adds	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	e79c      	b.n	8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80038ce:	bf00      	nop
 80038d0:	372c      	adds	r7, #44	; 0x2c
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
	...

080038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80038e2:	f107 0308 	add.w	r3, r7, #8
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fa7a 	bl	8001de0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f9fb 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 80038f6:	4602      	mov	r2, r0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003902:	f107 0308 	add.w	r3, r7, #8
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fad8 	bl	8001ebe <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	4915      	ldr	r1, [pc, #84]	; (8003968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003914:	fba1 1303 	umull	r1, r3, r1, r3
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800391e:	6939      	ldr	r1, [r7, #16]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003924:	fba3 0302 	umull	r0, r3, r3, r2
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	440b      	add	r3, r1
 800393c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8a6 	bl	8003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f9cb 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 8003956:	4602      	mov	r2, r0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	10624dd3 	.word	0x10624dd3
 800396c:	000f4240 	.word	0x000f4240

08003970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b63      	cmp	r3, #99	; 0x63
 8003980:	dd09      	ble.n	8003996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003992:	2300      	movs	r3, #0
 8003994:	e079      	b.n	8003a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80039a2:	3207      	adds	r2, #7
 80039a4:	4611      	mov	r1, r2
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
 80039aa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	22fe      	movs	r2, #254	; 0xfe
 80039b8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80039e2:	4413      	add	r3, r2
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	b21b      	sxth	r3, r3
 80039fe:	121b      	asrs	r3, r3, #8
 8003a00:	b21b      	sxth	r3, r3
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003a0e:	2305      	movs	r3, #5
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3306      	adds	r3, #6
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	dc0d      	bgt.n	8003a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4413      	add	r3, r2
 8003a22:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	3301      	adds	r3, #1
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e7ec      	b.n	8003a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3307      	adds	r3, #7
 8003a3c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	425a      	negs	r2, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	bf58      	it	pl
 8003a48:	4253      	negpl	r3, r2
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1c59      	adds	r1, r3, #1
 8003a50:	6179      	str	r1, [r7, #20]
 8003a52:	43d2      	mvns	r2, r2
 8003a54:	b2d1      	uxtb	r1, r2
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	460a      	mov	r2, r1
 8003a5c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a66:	dc0a      	bgt.n	8003a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1d18      	adds	r0, r3, #4
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7ff f8f3 	bl	8002c60 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	e005      	b.n	8003a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003a7e:	4905      	ldr	r1, [pc, #20]	; (8003a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f849 	bl	8003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	0800a390 	.word	0x0800a390

08003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff f920 	bl	8002cec <_ZN13STM32Hardware4timeEv>
 8003aac:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4915      	ldr	r1, [pc, #84]	; (8003b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003ab6:	fba1 1303 	umull	r1, r3, r1, r3
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	1e5a      	subs	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003ace:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ad8:	fb00 f303 	mul.w	r3, r0, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	1aca      	subs	r2, r1, r3
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 fb7e 	bl	8004200 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	10624dd3 	.word	0x10624dd3
 8003b10:	000f4240 	.word	0x000f4240
 8003b14:	3b9aca00 	.word	0x3b9aca00

08003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	2103      	movs	r1, #3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f804 	bl	8003b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fbf4 	bl	8002334 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f107 0214 	add.w	r2, r7, #20
 8003b5e:	2107      	movs	r1, #7
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	4798      	blx	r3
  }
 8003b64:	bf00      	nop
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_Z41__static_initialization_and_destruction_0ii>:
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d116      	bne.n	8003baa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d111      	bne.n	8003baa <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003b86:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003b88:	f7ff f964 	bl	8002e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt32 robot_wheels_pos;
 8003b8c:	480a      	ldr	r0, [pc, #40]	; (8003bb8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003b8e:	f7ff f8b9 	bl	8002d04 <_ZN8std_msgs6UInt32C1Ev>
ros::Subscriber<std_msgs::UInt32> robot_vel_sub("robot_wheel_vel", &robotCmdVelCallBack);
 8003b92:	2301      	movs	r3, #1
 8003b94:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003b96:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003b9a:	f7ff fb21 	bl	80031e0 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher robot_pos_pub("robot_wheel_pos", &robot_wheels_pos);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003ba2:	4909      	ldr	r1, [pc, #36]	; (8003bc8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003ba6:	f7fe ff39 	bl	8002a1c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200004a4 	.word	0x200004a4
 8003bb8:	20000de0 	.word	0x20000de0
 8003bbc:	08002f45 	.word	0x08002f45
 8003bc0:	0800a3cc 	.word	0x0800a3cc
 8003bc4:	20000df8 	.word	0x20000df8
 8003bc8:	0800a3dc 	.word	0x0800a3dc
 8003bcc:	20000e14 	.word	0x20000e14

08003bd0 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff f8d7 	bl	8002d94 <_ZN8std_msgs6UInt3211deserializeEPh>
    this->cb_(msg);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	320c      	adds	r2, #12
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4798      	blx	r3
  }
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
  }
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff f8f1 	bl	8002e04 <_ZN8std_msgs6UInt327getTypeEv>
 8003c22:	4603      	mov	r3, r0
  }
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZN3ros10SubscriberIN8std_msgs6UInt32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	330c      	adds	r3, #12
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f8ef 	bl	8002e1c <_ZN8std_msgs6UInt326getMD5Ev>
 8003c3e:	4603      	mov	r3, r0
  }
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <_GLOBAL__sub_I_nh>:
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f7ff ff7f 	bl	8003b6c <_Z41__static_initialization_and_destruction_0ii>
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_MspInit+0x5c>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_MspInit+0x5c>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6193      	str	r3, [r2, #24]
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_MspInit+0x5c>)
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <HAL_MspInit+0x5c>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <HAL_MspInit+0x5c>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c98:	61d3      	str	r3, [r2, #28]
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_MspInit+0x5c>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_MspInit+0x60>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_MspInit+0x60>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40010000 	.word	0x40010000

08003cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a16      	ldr	r2, [pc, #88]	; (8003d3c <HAL_TIM_Base_MspInit+0x68>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d114      	bne.n	8003d10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_TIM_Base_MspInit+0x6c>)
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <HAL_TIM_Base_MspInit+0x6c>)
 8003cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf0:	6193      	str	r3, [r2, #24]
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_TIM_Base_MspInit+0x6c>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	2019      	movs	r0, #25
 8003d04:	f000 fc07 	bl	8004516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003d08:	2019      	movs	r0, #25
 8003d0a:	f000 fc20 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d0e:	e010      	b.n	8003d32 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <HAL_TIM_Base_MspInit+0x70>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10b      	bne.n	8003d32 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_TIM_Base_MspInit+0x6c>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_TIM_Base_MspInit+0x6c>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	61d3      	str	r3, [r2, #28]
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_TIM_Base_MspInit+0x6c>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40000800 	.word	0x40000800

08003d48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 0318 	add.w	r3, r7, #24
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d124      	bne.n	8003db2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d68:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	61d3      	str	r3, [r2, #28]
 8003d74:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6193      	str	r3, [r2, #24]
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da4:	f107 0318 	add.w	r3, r7, #24
 8003da8:	4619      	mov	r1, r3
 8003daa:	4819      	ldr	r0, [pc, #100]	; (8003e10 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003dac:	f000 fe8c 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003db0:	e028      	b.n	8003e04 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d123      	bne.n	8003e04 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	61d3      	str	r3, [r2, #28]
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6193      	str	r3, [r2, #24]
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dec:	23c0      	movs	r3, #192	; 0xc0
 8003dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df8:	f107 0318 	add.w	r3, r7, #24
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4804      	ldr	r0, [pc, #16]	; (8003e10 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e00:	f000 fe62 	bl	8004ac8 <HAL_GPIO_Init>
}
 8003e04:	bf00      	nop
 8003e06:	3728      	adds	r7, #40	; 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010800 	.word	0x40010800
 8003e14:	40000400 	.word	0x40000400

08003e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <HAL_TIM_MspPostInit+0x58>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d117      	bne.n	8003e68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_TIM_MspPostInit+0x5c>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <HAL_TIM_MspPostInit+0x5c>)
 8003e3e:	f043 0308 	orr.w	r3, r3, #8
 8003e42:	6193      	str	r3, [r2, #24]
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_TIM_MspPostInit+0x5c>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e50:	23c0      	movs	r3, #192	; 0xc0
 8003e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5c:	f107 0310 	add.w	r3, r7, #16
 8003e60:	4619      	mov	r1, r3
 8003e62:	4805      	ldr	r0, [pc, #20]	; (8003e78 <HAL_TIM_MspPostInit+0x60>)
 8003e64:	f000 fe30 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003e68:	bf00      	nop
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40010c00 	.word	0x40010c00

08003e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e84:	f107 0310 	add.w	r3, r7, #16
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a48      	ldr	r2, [pc, #288]	; (8003fb8 <HAL_UART_MspInit+0x13c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	f040 8088 	bne.w	8003fae <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	4a46      	ldr	r2, [pc, #280]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea8:	6193      	str	r3, [r2, #24]
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6193      	str	r3, [r2, #24]
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <HAL_UART_MspInit+0x140>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	f107 0310 	add.w	r3, r7, #16
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4837      	ldr	r0, [pc, #220]	; (8003fc0 <HAL_UART_MspInit+0x144>)
 8003ee4:	f000 fdf0 	bl	8004ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	4619      	mov	r1, r3
 8003efc:	4830      	ldr	r0, [pc, #192]	; (8003fc0 <HAL_UART_MspInit+0x144>)
 8003efe:	f000 fde3 	bl	8004ac8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003f02:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f04:	4a30      	ldr	r2, [pc, #192]	; (8003fc8 <HAL_UART_MspInit+0x14c>)
 8003f06:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f08:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f14:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f28:	2220      	movs	r2, #32
 8003f2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f34:	4823      	ldr	r0, [pc, #140]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f36:	f000 fb25 	bl	8004584 <HAL_DMA_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003f40:	f7fd ff28 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f48:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_UART_MspInit+0x148>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_UART_MspInit+0x154>)
 8003f54:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f58:	2210      	movs	r2, #16
 8003f5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f68:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f80:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f82:	4812      	ldr	r0, [pc, #72]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f84:	f000 fafe 	bl	8004584 <HAL_DMA_Init>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003f8e:	f7fd ff01 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_UART_MspInit+0x150>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2025      	movs	r0, #37	; 0x25
 8003fa4:	f000 fab7 	bl	8004516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fa8:	2025      	movs	r0, #37	; 0x25
 8003faa:	f000 fad0 	bl	800454e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003fae:	bf00      	nop
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40013800 	.word	0x40013800
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40010800 	.word	0x40010800
 8003fc4:	20000418 	.word	0x20000418
 8003fc8:	40020058 	.word	0x40020058
 8003fcc:	2000045c 	.word	0x2000045c
 8003fd0:	40020044 	.word	0x40020044

08003fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fd8:	e7fe      	b.n	8003fd8 <NMI_Handler+0x4>

08003fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fde:	e7fe      	b.n	8003fde <HardFault_Handler+0x4>

08003fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe4:	e7fe      	b.n	8003fe4 <MemManage_Handler+0x4>

08003fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fea:	e7fe      	b.n	8003fea <BusFault_Handler+0x4>

08003fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff0:	e7fe      	b.n	8003ff0 <UsageFault_Handler+0x4>

08003ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800401a:	f000 f989 	bl	8004330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004028:	4802      	ldr	r0, [pc, #8]	; (8004034 <DMA1_Channel4_IRQHandler+0x10>)
 800402a:	f000 fc19 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000045c 	.word	0x2000045c

08004038 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <DMA1_Channel5_IRQHandler+0x10>)
 800403e:	f000 fc0f 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000418 	.word	0x20000418

0800404c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004050:	4802      	ldr	r0, [pc, #8]	; (800405c <TIM1_UP_IRQHandler+0x10>)
 8004052:	f001 fdcb 	bl	8005bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200002b0 	.word	0x200002b0

08004060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <USART1_IRQHandler+0x10>)
 8004066:	f002 fc71 	bl	800694c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200003d0 	.word	0x200003d0

08004074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <_kill>:

int _kill(int pid, int sig)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800408c:	f003 fb76 	bl	800777c <__errno>
 8004090:	4603      	mov	r3, r0
 8004092:	2216      	movs	r2, #22
 8004094:	601a      	str	r2, [r3, #0]
  return -1;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_exit>:

void _exit (int status)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040aa:	f04f 31ff 	mov.w	r1, #4294967295
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffe7 	bl	8004082 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040b4:	e7fe      	b.n	80040b4 <_exit+0x12>

080040b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e00a      	b.n	80040de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040c8:	f3af 8000 	nop.w
 80040cc:	4601      	mov	r1, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	60ba      	str	r2, [r7, #8]
 80040d4:	b2ca      	uxtb	r2, r1
 80040d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	dbf0      	blt.n	80040c8 <_read+0x12>
  }

  return len;
 80040e6:	687b      	ldr	r3, [r7, #4]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e009      	b.n	8004116 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	60ba      	str	r2, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	dbf1      	blt.n	8004102 <_write+0x12>
  }
  return len;
 800411e:	687b      	ldr	r3, [r7, #4]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_close>:

int _close(int file)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800414e:	605a      	str	r2, [r3, #4]
  return 0;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <_isatty>:

int _isatty(int file)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004164:	2301      	movs	r3, #1
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <_sbrk+0x5c>)
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <_sbrk+0x60>)
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <_sbrk+0x64>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <_sbrk+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <_sbrk+0x64>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d207      	bcs.n	80041c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b8:	f003 fae0 	bl	800777c <__errno>
 80041bc:	4603      	mov	r3, r0
 80041be:	220c      	movs	r2, #12
 80041c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e009      	b.n	80041dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c8:	4b08      	ldr	r3, [pc, #32]	; (80041ec <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <_sbrk+0x64>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <_sbrk+0x64>)
 80041d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20005000 	.word	0x20005000
 80041e8:	00000400 	.word	0x00000400
 80041ec:	20000e28 	.word	0x20000e28
 80041f0:	20000e40 	.word	0x20000e40

080041f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0a5a      	lsrs	r2, r3, #9
 8004210:	490f      	ldr	r1, [pc, #60]	; (8004250 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004212:	fba1 1202 	umull	r1, r2, r1, r2
 8004216:	09d2      	lsrs	r2, r2, #7
 8004218:	490e      	ldr	r1, [pc, #56]	; (8004254 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800421a:	fb01 f202 	mul.w	r2, r1, r2
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0a5b      	lsrs	r3, r3, #9
 8004228:	4a09      	ldr	r2, [pc, #36]	; (8004250 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	09db      	lsrs	r3, r3, #7
 8004230:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	00044b83 	.word	0x00044b83
 8004254:	3b9aca00 	.word	0x3b9aca00

08004258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004258:	f7ff ffcc 	bl	80041f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800425c:	480b      	ldr	r0, [pc, #44]	; (800428c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800425e:	490c      	ldr	r1, [pc, #48]	; (8004290 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004260:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004264:	e002      	b.n	800426c <LoopCopyDataInit>

08004266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800426a:	3304      	adds	r3, #4

0800426c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800426c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800426e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004270:	d3f9      	bcc.n	8004266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004274:	4c09      	ldr	r4, [pc, #36]	; (800429c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004278:	e001      	b.n	800427e <LoopFillZerobss>

0800427a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800427a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800427c:	3204      	adds	r2, #4

0800427e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800427e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004280:	d3fb      	bcc.n	800427a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004282:	f003 fa81 	bl	8007788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004286:	f7fd fa6d 	bl	8001764 <main>
  bx lr
 800428a:	4770      	bx	lr
  ldr r0, =_sdata
 800428c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004290:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8004294:	0800a900 	.word	0x0800a900
  ldr r2, =_sbss
 8004298:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 800429c:	20000e40 	.word	0x20000e40

080042a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042a0:	e7fe      	b.n	80042a0 <ADC1_2_IRQHandler>
	...

080042a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_Init+0x28>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a07      	ldr	r2, [pc, #28]	; (80042cc <HAL_Init+0x28>)
 80042ae:	f043 0310 	orr.w	r3, r3, #16
 80042b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b4:	2003      	movs	r0, #3
 80042b6:	f000 f923 	bl	8004500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ba:	200f      	movs	r0, #15
 80042bc:	f000 f808 	bl	80042d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042c0:	f7ff fcd6 	bl	8003c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40022000 	.word	0x40022000

080042d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_InitTick+0x54>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_InitTick+0x58>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f93b 	bl	800456a <HAL_SYSTICK_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00e      	b.n	800431c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d80a      	bhi.n	800431a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004304:	2200      	movs	r2, #0
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	f000 f903 	bl	8004516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <HAL_InitTick+0x5c>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	200000b4 	.word	0x200000b4
 8004328:	200000bc 	.word	0x200000bc
 800432c:	200000b8 	.word	0x200000b8

08004330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_IncTick+0x1c>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_IncTick+0x20>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	4a03      	ldr	r2, [pc, #12]	; (8004350 <HAL_IncTick+0x20>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	200000bc 	.word	0x200000bc
 8004350:	20000e2c 	.word	0x20000e2c

08004354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return uwTick;
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <HAL_GetTick+0x10>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	20000e2c 	.word	0x20000e2c

08004368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	60d3      	str	r3, [r2, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__NVIC_GetPriorityGrouping+0x18>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f003 0307 	and.w	r3, r3, #7
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db0b      	blt.n	80043f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <__NVIC_EnableIRQ+0x34>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	e000e100 	.word	0xe000e100

08004404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	2b00      	cmp	r3, #0
 8004416:	db0a      	blt.n	800442e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	490c      	ldr	r1, [pc, #48]	; (8004450 <__NVIC_SetPriority+0x4c>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	440b      	add	r3, r1
 8004428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800442c:	e00a      	b.n	8004444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4908      	ldr	r1, [pc, #32]	; (8004454 <__NVIC_SetPriority+0x50>)
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	3b04      	subs	r3, #4
 800443c:	0112      	lsls	r2, r2, #4
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	440b      	add	r3, r1
 8004442:	761a      	strb	r2, [r3, #24]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e100 	.word	0xe000e100
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	bf28      	it	cs
 8004476:	2304      	movcs	r3, #4
 8004478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3304      	adds	r3, #4
 800447e:	2b06      	cmp	r3, #6
 8004480:	d902      	bls.n	8004488 <NVIC_EncodePriority+0x30>
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3b03      	subs	r3, #3
 8004486:	e000      	b.n	800448a <NVIC_EncodePriority+0x32>
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	401a      	ands	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	43d9      	mvns	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b0:	4313      	orrs	r3, r2
         );
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044cc:	d301      	bcc.n	80044d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <SysTick_Config+0x40>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044da:	210f      	movs	r1, #15
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	f7ff ff90 	bl	8004404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <SysTick_Config+0x40>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <SysTick_Config+0x40>)
 80044ec:	2207      	movs	r2, #7
 80044ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	e000e010 	.word	0xe000e010

08004500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff2d 	bl	8004368 <__NVIC_SetPriorityGrouping>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004528:	f7ff ff42 	bl	80043b0 <__NVIC_GetPriorityGrouping>
 800452c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff ff90 	bl	8004458 <NVIC_EncodePriority>
 8004538:	4602      	mov	r2, r0
 800453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff5f 	bl	8004404 <__NVIC_SetPriority>
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff35 	bl	80043cc <__NVIC_EnableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ffa2 	bl	80044bc <SysTick_Config>
 8004578:	4603      	mov	r3, r0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e043      	b.n	8004622 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_DMA_Init+0xa8>)
 80045a2:	4413      	add	r3, r2
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_Init+0xac>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	009a      	lsls	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_DMA_Init+0xb0>)
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80045d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	bffdfff8 	.word	0xbffdfff8
 8004630:	cccccccd 	.word	0xcccccccd
 8004634:	40020000 	.word	0x40020000

08004638 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_DMA_Start_IT+0x20>
 8004654:	2302      	movs	r3, #2
 8004656:	e04b      	b.n	80046f0 <HAL_DMA_Start_IT+0xb8>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d13a      	bne.n	80046e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f9eb 	bl	8004a6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 020e 	orr.w	r2, r2, #14
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e00f      	b.n	80046d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 020a 	orr.w	r2, r2, #10
 80046ce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e005      	b.n	80046ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
 80046ec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d008      	beq.n	8004722 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2204      	movs	r2, #4
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e020      	b.n	8004764 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 020e 	bic.w	r2, r2, #14
 8004730:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f202 	lsl.w	r2, r1, r2
 8004750:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
	...

08004770 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d005      	beq.n	8004794 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2204      	movs	r2, #4
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e051      	b.n	8004838 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 020e 	bic.w	r2, r2, #14
 80047a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <HAL_DMA_Abort_IT+0xd4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d029      	beq.n	8004812 <HAL_DMA_Abort_IT+0xa2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a21      	ldr	r2, [pc, #132]	; (8004848 <HAL_DMA_Abort_IT+0xd8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_Abort_IT+0x9e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1f      	ldr	r2, [pc, #124]	; (800484c <HAL_DMA_Abort_IT+0xdc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01a      	beq.n	8004808 <HAL_DMA_Abort_IT+0x98>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_DMA_Abort_IT+0xe0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d012      	beq.n	8004802 <HAL_DMA_Abort_IT+0x92>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <HAL_DMA_Abort_IT+0xe4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00a      	beq.n	80047fc <HAL_DMA_Abort_IT+0x8c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_DMA_Abort_IT+0xe8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d102      	bne.n	80047f6 <HAL_DMA_Abort_IT+0x86>
 80047f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047f4:	e00e      	b.n	8004814 <HAL_DMA_Abort_IT+0xa4>
 80047f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047fa:	e00b      	b.n	8004814 <HAL_DMA_Abort_IT+0xa4>
 80047fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004800:	e008      	b.n	8004814 <HAL_DMA_Abort_IT+0xa4>
 8004802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004806:	e005      	b.n	8004814 <HAL_DMA_Abort_IT+0xa4>
 8004808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800480c:	e002      	b.n	8004814 <HAL_DMA_Abort_IT+0xa4>
 800480e:	2310      	movs	r3, #16
 8004810:	e000      	b.n	8004814 <HAL_DMA_Abort_IT+0xa4>
 8004812:	2301      	movs	r3, #1
 8004814:	4a11      	ldr	r2, [pc, #68]	; (800485c <HAL_DMA_Abort_IT+0xec>)
 8004816:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
    } 
  }
  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40020008 	.word	0x40020008
 8004848:	4002001c 	.word	0x4002001c
 800484c:	40020030 	.word	0x40020030
 8004850:	40020044 	.word	0x40020044
 8004854:	40020058 	.word	0x40020058
 8004858:	4002006c 	.word	0x4002006c
 800485c:	40020000 	.word	0x40020000

08004860 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2204      	movs	r2, #4
 800487e:	409a      	lsls	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d04f      	beq.n	8004928 <HAL_DMA_IRQHandler+0xc8>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04a      	beq.n	8004928 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a66      	ldr	r2, [pc, #408]	; (8004a50 <HAL_DMA_IRQHandler+0x1f0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d029      	beq.n	800490e <HAL_DMA_IRQHandler+0xae>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a65      	ldr	r2, [pc, #404]	; (8004a54 <HAL_DMA_IRQHandler+0x1f4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_DMA_IRQHandler+0xaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a63      	ldr	r2, [pc, #396]	; (8004a58 <HAL_DMA_IRQHandler+0x1f8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01a      	beq.n	8004904 <HAL_DMA_IRQHandler+0xa4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a62      	ldr	r2, [pc, #392]	; (8004a5c <HAL_DMA_IRQHandler+0x1fc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d012      	beq.n	80048fe <HAL_DMA_IRQHandler+0x9e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a60      	ldr	r2, [pc, #384]	; (8004a60 <HAL_DMA_IRQHandler+0x200>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00a      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x98>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5f      	ldr	r2, [pc, #380]	; (8004a64 <HAL_DMA_IRQHandler+0x204>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d102      	bne.n	80048f2 <HAL_DMA_IRQHandler+0x92>
 80048ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048f0:	e00e      	b.n	8004910 <HAL_DMA_IRQHandler+0xb0>
 80048f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048f6:	e00b      	b.n	8004910 <HAL_DMA_IRQHandler+0xb0>
 80048f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048fc:	e008      	b.n	8004910 <HAL_DMA_IRQHandler+0xb0>
 80048fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004902:	e005      	b.n	8004910 <HAL_DMA_IRQHandler+0xb0>
 8004904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004908:	e002      	b.n	8004910 <HAL_DMA_IRQHandler+0xb0>
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	e000      	b.n	8004910 <HAL_DMA_IRQHandler+0xb0>
 800490e:	2304      	movs	r3, #4
 8004910:	4a55      	ldr	r2, [pc, #340]	; (8004a68 <HAL_DMA_IRQHandler+0x208>)
 8004912:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8094 	beq.w	8004a46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004926:	e08e      	b.n	8004a46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	2202      	movs	r2, #2
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d056      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x186>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d051      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020a 	bic.w	r2, r2, #10
 800495e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a38      	ldr	r2, [pc, #224]	; (8004a50 <HAL_DMA_IRQHandler+0x1f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d029      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x166>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a37      	ldr	r2, [pc, #220]	; (8004a54 <HAL_DMA_IRQHandler+0x1f4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x162>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a35      	ldr	r2, [pc, #212]	; (8004a58 <HAL_DMA_IRQHandler+0x1f8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x15c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a34      	ldr	r2, [pc, #208]	; (8004a5c <HAL_DMA_IRQHandler+0x1fc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d012      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x156>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a32      	ldr	r2, [pc, #200]	; (8004a60 <HAL_DMA_IRQHandler+0x200>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00a      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x150>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a31      	ldr	r2, [pc, #196]	; (8004a64 <HAL_DMA_IRQHandler+0x204>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d102      	bne.n	80049aa <HAL_DMA_IRQHandler+0x14a>
 80049a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049a8:	e00e      	b.n	80049c8 <HAL_DMA_IRQHandler+0x168>
 80049aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ae:	e00b      	b.n	80049c8 <HAL_DMA_IRQHandler+0x168>
 80049b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b4:	e008      	b.n	80049c8 <HAL_DMA_IRQHandler+0x168>
 80049b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049ba:	e005      	b.n	80049c8 <HAL_DMA_IRQHandler+0x168>
 80049bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c0:	e002      	b.n	80049c8 <HAL_DMA_IRQHandler+0x168>
 80049c2:	2320      	movs	r3, #32
 80049c4:	e000      	b.n	80049c8 <HAL_DMA_IRQHandler+0x168>
 80049c6:	2302      	movs	r3, #2
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <HAL_DMA_IRQHandler+0x208>)
 80049ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d034      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80049e4:	e02f      	b.n	8004a46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2208      	movs	r2, #8
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d028      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x1e8>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 020e 	bic.w	r2, r2, #14
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4798      	blx	r3
    }
  }
  return;
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
}
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40020008 	.word	0x40020008
 8004a54:	4002001c 	.word	0x4002001c
 8004a58:	40020030 	.word	0x40020030
 8004a5c:	40020044 	.word	0x40020044
 8004a60:	40020058 	.word	0x40020058
 8004a64:	4002006c 	.word	0x4002006c
 8004a68:	40020000 	.word	0x40020000

08004a6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f202 	lsl.w	r2, r1, r2
 8004a88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d108      	bne.n	8004aac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004aaa:	e007      	b.n	8004abc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b08b      	sub	sp, #44	; 0x2c
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ada:	e169      	b.n	8004db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004adc:	2201      	movs	r2, #1
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	f040 8158 	bne.w	8004daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a9a      	ldr	r2, [pc, #616]	; (8004d68 <HAL_GPIO_Init+0x2a0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d05e      	beq.n	8004bc2 <HAL_GPIO_Init+0xfa>
 8004b04:	4a98      	ldr	r2, [pc, #608]	; (8004d68 <HAL_GPIO_Init+0x2a0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d875      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b0a:	4a98      	ldr	r2, [pc, #608]	; (8004d6c <HAL_GPIO_Init+0x2a4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d058      	beq.n	8004bc2 <HAL_GPIO_Init+0xfa>
 8004b10:	4a96      	ldr	r2, [pc, #600]	; (8004d6c <HAL_GPIO_Init+0x2a4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d86f      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b16:	4a96      	ldr	r2, [pc, #600]	; (8004d70 <HAL_GPIO_Init+0x2a8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d052      	beq.n	8004bc2 <HAL_GPIO_Init+0xfa>
 8004b1c:	4a94      	ldr	r2, [pc, #592]	; (8004d70 <HAL_GPIO_Init+0x2a8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d869      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b22:	4a94      	ldr	r2, [pc, #592]	; (8004d74 <HAL_GPIO_Init+0x2ac>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04c      	beq.n	8004bc2 <HAL_GPIO_Init+0xfa>
 8004b28:	4a92      	ldr	r2, [pc, #584]	; (8004d74 <HAL_GPIO_Init+0x2ac>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d863      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b2e:	4a92      	ldr	r2, [pc, #584]	; (8004d78 <HAL_GPIO_Init+0x2b0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d046      	beq.n	8004bc2 <HAL_GPIO_Init+0xfa>
 8004b34:	4a90      	ldr	r2, [pc, #576]	; (8004d78 <HAL_GPIO_Init+0x2b0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d85d      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b3a:	2b12      	cmp	r3, #18
 8004b3c:	d82a      	bhi.n	8004b94 <HAL_GPIO_Init+0xcc>
 8004b3e:	2b12      	cmp	r3, #18
 8004b40:	d859      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <HAL_GPIO_Init+0x80>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004bc3 	.word	0x08004bc3
 8004b4c:	08004b9d 	.word	0x08004b9d
 8004b50:	08004baf 	.word	0x08004baf
 8004b54:	08004bf1 	.word	0x08004bf1
 8004b58:	08004bf7 	.word	0x08004bf7
 8004b5c:	08004bf7 	.word	0x08004bf7
 8004b60:	08004bf7 	.word	0x08004bf7
 8004b64:	08004bf7 	.word	0x08004bf7
 8004b68:	08004bf7 	.word	0x08004bf7
 8004b6c:	08004bf7 	.word	0x08004bf7
 8004b70:	08004bf7 	.word	0x08004bf7
 8004b74:	08004bf7 	.word	0x08004bf7
 8004b78:	08004bf7 	.word	0x08004bf7
 8004b7c:	08004bf7 	.word	0x08004bf7
 8004b80:	08004bf7 	.word	0x08004bf7
 8004b84:	08004bf7 	.word	0x08004bf7
 8004b88:	08004bf7 	.word	0x08004bf7
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	4a79      	ldr	r2, [pc, #484]	; (8004d7c <HAL_GPIO_Init+0x2b4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b9a:	e02c      	b.n	8004bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	623b      	str	r3, [r7, #32]
          break;
 8004ba2:	e029      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	623b      	str	r3, [r7, #32]
          break;
 8004bac:	e024      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	623b      	str	r3, [r7, #32]
          break;
 8004bb6:	e01f      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	623b      	str	r3, [r7, #32]
          break;
 8004bc0:	e01a      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004bca:	2304      	movs	r3, #4
 8004bcc:	623b      	str	r3, [r7, #32]
          break;
 8004bce:	e013      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d105      	bne.n	8004be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bd8:	2308      	movs	r3, #8
 8004bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	611a      	str	r2, [r3, #16]
          break;
 8004be2:	e009      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004be4:	2308      	movs	r3, #8
 8004be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	615a      	str	r2, [r3, #20]
          break;
 8004bee:	e003      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]
          break;
 8004bf4:	e000      	b.n	8004bf8 <HAL_GPIO_Init+0x130>
          break;
 8004bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2bff      	cmp	r3, #255	; 0xff
 8004bfc:	d801      	bhi.n	8004c02 <HAL_GPIO_Init+0x13a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	e001      	b.n	8004c06 <HAL_GPIO_Init+0x13e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2bff      	cmp	r3, #255	; 0xff
 8004c0c:	d802      	bhi.n	8004c14 <HAL_GPIO_Init+0x14c>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	e002      	b.n	8004c1a <HAL_GPIO_Init+0x152>
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	3b08      	subs	r3, #8
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	210f      	movs	r1, #15
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	401a      	ands	r2, r3
 8004c2c:	6a39      	ldr	r1, [r7, #32]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	431a      	orrs	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80b1 	beq.w	8004daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c48:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_GPIO_Init+0x2b8>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4a4c      	ldr	r2, [pc, #304]	; (8004d80 <HAL_GPIO_Init+0x2b8>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6193      	str	r3, [r2, #24]
 8004c54:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_GPIO_Init+0x2b8>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c60:	4a48      	ldr	r2, [pc, #288]	; (8004d84 <HAL_GPIO_Init+0x2bc>)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	220f      	movs	r2, #15
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a40      	ldr	r2, [pc, #256]	; (8004d88 <HAL_GPIO_Init+0x2c0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_GPIO_Init+0x1ec>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3f      	ldr	r2, [pc, #252]	; (8004d8c <HAL_GPIO_Init+0x2c4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00d      	beq.n	8004cb0 <HAL_GPIO_Init+0x1e8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3e      	ldr	r2, [pc, #248]	; (8004d90 <HAL_GPIO_Init+0x2c8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <HAL_GPIO_Init+0x1e4>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3d      	ldr	r2, [pc, #244]	; (8004d94 <HAL_GPIO_Init+0x2cc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_GPIO_Init+0x1e0>
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e006      	b.n	8004cb6 <HAL_GPIO_Init+0x1ee>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	e004      	b.n	8004cb6 <HAL_GPIO_Init+0x1ee>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e002      	b.n	8004cb6 <HAL_GPIO_Init+0x1ee>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_GPIO_Init+0x1ee>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	f002 0203 	and.w	r2, r2, #3
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	4093      	lsls	r3, r2
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cc6:	492f      	ldr	r1, [pc, #188]	; (8004d84 <HAL_GPIO_Init+0x2bc>)
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	3302      	adds	r3, #2
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	492c      	ldr	r1, [pc, #176]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
 8004cec:	e006      	b.n	8004cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	4928      	ldr	r1, [pc, #160]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d08:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	4922      	ldr	r1, [pc, #136]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60cb      	str	r3, [r1, #12]
 8004d14:	e006      	b.n	8004d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	491e      	ldr	r1, [pc, #120]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4918      	ldr	r1, [pc, #96]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	e006      	b.n	8004d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	4914      	ldr	r1, [pc, #80]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d021      	beq.n	8004d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]
 8004d64:	e021      	b.n	8004daa <HAL_GPIO_Init+0x2e2>
 8004d66:	bf00      	nop
 8004d68:	10320000 	.word	0x10320000
 8004d6c:	10310000 	.word	0x10310000
 8004d70:	10220000 	.word	0x10220000
 8004d74:	10210000 	.word	0x10210000
 8004d78:	10120000 	.word	0x10120000
 8004d7c:	10110000 	.word	0x10110000
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010800 	.word	0x40010800
 8004d8c:	40010c00 	.word	0x40010c00
 8004d90:	40011000 	.word	0x40011000
 8004d94:	40011400 	.word	0x40011400
 8004d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_GPIO_Init+0x304>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	4909      	ldr	r1, [pc, #36]	; (8004dcc <HAL_GPIO_Init+0x304>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	3301      	adds	r3, #1
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f47f ae8e 	bne.w	8004adc <HAL_GPIO_Init+0x14>
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	372c      	adds	r7, #44	; 0x2c
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004dec:	e003      	b.n	8004df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	041a      	lsls	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4013      	ands	r3, r2
 8004e18:	041a      	lsls	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	43d9      	mvns	r1, r3
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	400b      	ands	r3, r1
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	611a      	str	r2, [r3, #16]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e272      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8087 	beq.w	8004f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e54:	4b92      	ldr	r3, [pc, #584]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d00c      	beq.n	8004e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e60:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d112      	bne.n	8004e92 <HAL_RCC_OscConfig+0x5e>
 8004e6c:	4b8c      	ldr	r3, [pc, #560]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d10b      	bne.n	8004e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7a:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d06c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x12c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d168      	bne.n	8004f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e24c      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x76>
 8004e9c:	4b80      	ldr	r3, [pc, #512]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7f      	ldr	r2, [pc, #508]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e02e      	b.n	8004f08 <HAL_RCC_OscConfig+0xd4>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x98>
 8004eb2:	4b7b      	ldr	r3, [pc, #492]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7a      	ldr	r2, [pc, #488]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b78      	ldr	r3, [pc, #480]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a77      	ldr	r2, [pc, #476]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xd4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xbc>
 8004ed6:	4b72      	ldr	r3, [pc, #456]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a71      	ldr	r2, [pc, #452]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6e      	ldr	r2, [pc, #440]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xd4>
 8004ef0:	4b6b      	ldr	r3, [pc, #428]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6a      	ldr	r2, [pc, #424]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7ff fa20 	bl	8004354 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7ff fa1c 	bl	8004354 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e200      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b5d      	ldr	r3, [pc, #372]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xe4>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7ff fa0c 	bl	8004354 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7ff fa08 	bl	8004354 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e1ec      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x10c>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d063      	beq.n	8005036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f6e:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f7a:	4b49      	ldr	r3, [pc, #292]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d11c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x18c>
 8004f86:	4b46      	ldr	r3, [pc, #280]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x176>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1c0      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4939      	ldr	r1, [pc, #228]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	e03a      	b.n	8005036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCC_OscConfig+0x270>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fce:	f7ff f9c1 	bl	8004354 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd6:	f7ff f9bd 	bl	8004354 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e1a1      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe8:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff4:	4b2a      	ldr	r3, [pc, #168]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4927      	ldr	r1, [pc, #156]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	e015      	b.n	8005036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_RCC_OscConfig+0x270>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7ff f9a0 	bl	8004354 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005018:	f7ff f99c 	bl	8004354 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e180      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03a      	beq.n	80050b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d019      	beq.n	800507e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_RCC_OscConfig+0x274>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005050:	f7ff f980 	bl	8004354 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005058:	f7ff f97c 	bl	8004354 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e160      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_RCC_OscConfig+0x26c>)
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005076:	2001      	movs	r0, #1
 8005078:	f000 face 	bl	8005618 <RCC_Delay>
 800507c:	e01c      	b.n	80050b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_OscConfig+0x274>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005084:	f7ff f966 	bl	8004354 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508a:	e00f      	b.n	80050ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508c:	f7ff f962 	bl	8004354 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d908      	bls.n	80050ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e146      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	42420000 	.word	0x42420000
 80050a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e9      	bne.n	800508c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80a6 	beq.w	8005212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ca:	4b8b      	ldr	r3, [pc, #556]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	4b88      	ldr	r3, [pc, #544]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4a87      	ldr	r2, [pc, #540]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	61d3      	str	r3, [r2, #28]
 80050e2:	4b85      	ldr	r3, [pc, #532]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	4b82      	ldr	r3, [pc, #520]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d118      	bne.n	8005130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fe:	4b7f      	ldr	r3, [pc, #508]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a7e      	ldr	r2, [pc, #504]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510a:	f7ff f923 	bl	8004354 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005112:	f7ff f91f 	bl	8004354 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b64      	cmp	r3, #100	; 0x64
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e103      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	4b75      	ldr	r3, [pc, #468]	; (80052fc <HAL_RCC_OscConfig+0x4c8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x312>
 8005138:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6213      	str	r3, [r2, #32]
 8005144:	e02d      	b.n	80051a2 <HAL_RCC_OscConfig+0x36e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x334>
 800514e:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	6213      	str	r3, [r2, #32]
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4a66      	ldr	r2, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005160:	f023 0304 	bic.w	r3, r3, #4
 8005164:	6213      	str	r3, [r2, #32]
 8005166:	e01c      	b.n	80051a2 <HAL_RCC_OscConfig+0x36e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b05      	cmp	r3, #5
 800516e:	d10c      	bne.n	800518a <HAL_RCC_OscConfig+0x356>
 8005170:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	4a60      	ldr	r2, [pc, #384]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005176:	f043 0304 	orr.w	r3, r3, #4
 800517a:	6213      	str	r3, [r2, #32]
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4a5d      	ldr	r2, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6213      	str	r3, [r2, #32]
 8005188:	e00b      	b.n	80051a2 <HAL_RCC_OscConfig+0x36e>
 800518a:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	4a5a      	ldr	r2, [pc, #360]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6213      	str	r3, [r2, #32]
 8005196:	4b58      	ldr	r3, [pc, #352]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4a57      	ldr	r2, [pc, #348]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d015      	beq.n	80051d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7ff f8d3 	bl	8004354 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7ff f8cf 	bl	8004354 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e0b1      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c8:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ee      	beq.n	80051b2 <HAL_RCC_OscConfig+0x37e>
 80051d4:	e014      	b.n	8005200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d6:	f7ff f8bd 	bl	8004354 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7ff f8b9 	bl	8004354 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e09b      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f4:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ee      	bne.n	80051de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d105      	bne.n	8005212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005206:	4b3c      	ldr	r3, [pc, #240]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8087 	beq.w	800532a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d061      	beq.n	80052ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d146      	bne.n	80052be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005230:	4b33      	ldr	r3, [pc, #204]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7ff f88d 	bl	8004354 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523e:	f7ff f889 	bl	8004354 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e06d      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d108      	bne.n	8005278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4921      	ldr	r1, [pc, #132]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005278:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a19      	ldr	r1, [r3, #32]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	430b      	orrs	r3, r1
 800528a:	491b      	ldr	r1, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7ff f85d 	bl	8004354 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529e:	f7ff f859 	bl	8004354 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e03d      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x46a>
 80052bc:	e035      	b.n	800532a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7ff f846 	bl	8004354 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7ff f842 	bl	8004354 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e026      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x498>
 80052ea:	e01e      	b.n	800532a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e019      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
 8005300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_OscConfig+0x500>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	429a      	cmp	r2, r3
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d001      	beq.n	800532a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000

08005338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0d0      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d910      	bls.n	800537c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b67      	ldr	r3, [pc, #412]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 0207 	bic.w	r2, r3, #7
 8005362:	4965      	ldr	r1, [pc, #404]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b63      	ldr	r3, [pc, #396]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0b8      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005394:	4b59      	ldr	r3, [pc, #356]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a58      	ldr	r2, [pc, #352]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800539e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ac:	4b53      	ldr	r3, [pc, #332]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a52      	ldr	r2, [pc, #328]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b8:	4b50      	ldr	r3, [pc, #320]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	494d      	ldr	r1, [pc, #308]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d040      	beq.n	8005458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	4b47      	ldr	r3, [pc, #284]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d115      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07f      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e073      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	4b3d      	ldr	r3, [pc, #244]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e06b      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005416:	4b39      	ldr	r3, [pc, #228]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f023 0203 	bic.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4936      	ldr	r1, [pc, #216]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005428:	f7fe ff94 	bl	8004354 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	e00a      	b.n	8005446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005430:	f7fe ff90 	bl	8004354 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	; 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e053      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	4b2d      	ldr	r3, [pc, #180]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 020c 	and.w	r2, r3, #12
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	429a      	cmp	r2, r3
 8005456:	d1eb      	bne.n	8005430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005458:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d210      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 0207 	bic.w	r2, r3, #7
 800546e:	4922      	ldr	r1, [pc, #136]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e032      	b.n	80054ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005494:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4916      	ldr	r1, [pc, #88]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054b2:	4b12      	ldr	r3, [pc, #72]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	490e      	ldr	r1, [pc, #56]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054c6:	f000 f821 	bl	800550c <HAL_RCC_GetSysClockFreq>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	490a      	ldr	r1, [pc, #40]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	5ccb      	ldrb	r3, [r1, r3]
 80054da:	fa22 f303 	lsr.w	r3, r2, r3
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <HAL_RCC_ClockConfig+0x1cc>)
 80054e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054e2:	4b09      	ldr	r3, [pc, #36]	; (8005508 <HAL_RCC_ClockConfig+0x1d0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fef2 	bl	80042d0 <HAL_InitTick>

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40022000 	.word	0x40022000
 80054fc:	40021000 	.word	0x40021000
 8005500:	0800a4f0 	.word	0x0800a4f0
 8005504:	200000b4 	.word	0x200000b4
 8005508:	200000b8 	.word	0x200000b8

0800550c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	2300      	movs	r3, #0
 8005520:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005526:	4b1e      	ldr	r3, [pc, #120]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b04      	cmp	r3, #4
 8005534:	d002      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x30>
 8005536:	2b08      	cmp	r3, #8
 8005538:	d003      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x36>
 800553a:	e027      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800553e:	613b      	str	r3, [r7, #16]
      break;
 8005540:	e027      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	0c9b      	lsrs	r3, r3, #18
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800554c:	5cd3      	ldrb	r3, [r2, r3]
 800554e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	0c5b      	lsrs	r3, r3, #17
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005566:	5cd3      	ldrb	r3, [r2, r3]
 8005568:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800556e:	fb03 f202 	mul.w	r2, r3, r2
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e004      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a0c      	ldr	r2, [pc, #48]	; (80055b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	613b      	str	r3, [r7, #16]
      break;
 800558a:	e002      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800558e:	613b      	str	r3, [r7, #16]
      break;
 8005590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005592:	693b      	ldr	r3, [r7, #16]
}
 8005594:	4618      	mov	r0, r3
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000
 80055a4:	007a1200 	.word	0x007a1200
 80055a8:	0800a508 	.word	0x0800a508
 80055ac:	0800a518 	.word	0x0800a518
 80055b0:	003d0900 	.word	0x003d0900

080055b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b8:	4b02      	ldr	r3, [pc, #8]	; (80055c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr
 80055c4:	200000b4 	.word	0x200000b4

080055c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055cc:	f7ff fff2 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4903      	ldr	r1, [pc, #12]	; (80055ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	0800a500 	.word	0x0800a500

080055f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055f4:	f7ff ffde 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	0adb      	lsrs	r3, r3, #11
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4903      	ldr	r1, [pc, #12]	; (8005614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000
 8005614:	0800a500 	.word	0x0800a500

08005618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <RCC_Delay+0x34>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <RCC_Delay+0x38>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	0a5b      	lsrs	r3, r3, #9
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005634:	bf00      	nop
  }
  while (Delay --);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1e5a      	subs	r2, r3, #1
 800563a:	60fa      	str	r2, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f9      	bne.n	8005634 <RCC_Delay+0x1c>
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	200000b4 	.word	0x200000b4
 8005650:	10624dd3 	.word	0x10624dd3

08005654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e041      	b.n	80056ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fe fb2a 	bl	8003cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fd60 	bl	8006158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d001      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e03a      	b.n	8005782 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_Base_Start_IT+0x98>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x58>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d009      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x58>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_TIM_Base_Start_IT+0x9c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x58>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a13      	ldr	r2, [pc, #76]	; (8005794 <HAL_TIM_Base_Start_IT+0xa0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d111      	bne.n	8005770 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b06      	cmp	r3, #6
 800575c:	d010      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	e007      	b.n	8005780 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800

08005798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e041      	b.n	800582e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f839 	bl	8005836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f000 fcbe 	bl	8006158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start+0x24>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e022      	b.n	80058b2 <HAL_TIM_PWM_Start+0x6a>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d109      	bne.n	8005886 <HAL_TIM_PWM_Start+0x3e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e015      	b.n	80058b2 <HAL_TIM_PWM_Start+0x6a>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d109      	bne.n	80058a0 <HAL_TIM_PWM_Start+0x58>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e008      	b.n	80058b2 <HAL_TIM_PWM_Start+0x6a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e05e      	b.n	8005978 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0x82>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	e013      	b.n	80058f2 <HAL_TIM_PWM_Start+0xaa>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0x92>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d8:	e00b      	b.n	80058f2 <HAL_TIM_PWM_Start+0xaa>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e8:	e003      	b.n	80058f2 <HAL_TIM_PWM_Start+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 feac 	bl	8006658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <HAL_TIM_PWM_Start+0x138>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d107      	bne.n	800591a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_TIM_PWM_Start+0x138>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_TIM_PWM_Start+0xfa>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592c:	d009      	beq.n	8005942 <HAL_TIM_PWM_Start+0xfa>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a14      	ldr	r2, [pc, #80]	; (8005984 <HAL_TIM_PWM_Start+0x13c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_PWM_Start+0xfa>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a12      	ldr	r2, [pc, #72]	; (8005988 <HAL_TIM_PWM_Start+0x140>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d111      	bne.n	8005966 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b06      	cmp	r3, #6
 8005952:	d010      	beq.n	8005976 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	e007      	b.n	8005976 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800

0800598c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e093      	b.n	8005ac8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fe f9c7 	bl	8003d48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f000 fbb9 	bl	8006158 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a2c:	f023 030c 	bic.w	r3, r3, #12
 8005a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	011a      	lsls	r2, r3, #4
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	031b      	lsls	r3, r3, #12
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4313      	orrs	r3, r2
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ae8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005af0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005af8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d110      	bne.n	8005b22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d102      	bne.n	8005b0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b06:	7b7b      	ldrb	r3, [r7, #13]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d001      	beq.n	8005b10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e069      	b.n	8005be4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b20:	e031      	b.n	8005b86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d110      	bne.n	8005b4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d102      	bne.n	8005b34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b2e:	7b3b      	ldrb	r3, [r7, #12]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d001      	beq.n	8005b38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e055      	b.n	8005be4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b48:	e01d      	b.n	8005b86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d105      	bne.n	8005b62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b56:	7b7b      	ldrb	r3, [r7, #13]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d102      	bne.n	8005b62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b5c:	7b3b      	ldrb	r3, [r7, #12]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d001      	beq.n	8005b66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e03e      	b.n	8005be4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_TIM_Encoder_Start+0xc4>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d008      	beq.n	8005ba4 <HAL_TIM_Encoder_Start+0xd4>
 8005b92:	e00f      	b.n	8005bb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fd5b 	bl	8006658 <TIM_CCxChannelCmd>
      break;
 8005ba2:	e016      	b.n	8005bd2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	2104      	movs	r1, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fd53 	bl	8006658 <TIM_CCxChannelCmd>
      break;
 8005bb2:	e00e      	b.n	8005bd2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fd4b 	bl	8006658 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2104      	movs	r1, #4
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fd44 	bl	8006658 <TIM_CCxChannelCmd>
      break;
 8005bd0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0202 	mvn.w	r2, #2
 8005c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa76 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa69 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa78 	bl	8006132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0204 	mvn.w	r2, #4
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fa4c 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa3f 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa4e 	bl	8006132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0208 	mvn.w	r2, #8
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa22 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa15 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa24 	bl	8006132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0210 	mvn.w	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f9f8 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9eb 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9fa 	bl	8006132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0201 	mvn.w	r2, #1
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fd f93e 	bl	8002fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fce9 	bl	800676e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f9be 	bl	8006144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0220 	mvn.w	r2, #32
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fcb4 	bl	800675c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e0ae      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b0c      	cmp	r3, #12
 8005e26:	f200 809f 	bhi.w	8005f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005f69 	.word	0x08005f69
 8005e38:	08005f69 	.word	0x08005f69
 8005e3c:	08005f69 	.word	0x08005f69
 8005e40:	08005ea5 	.word	0x08005ea5
 8005e44:	08005f69 	.word	0x08005f69
 8005e48:	08005f69 	.word	0x08005f69
 8005e4c:	08005f69 	.word	0x08005f69
 8005e50:	08005ee7 	.word	0x08005ee7
 8005e54:	08005f69 	.word	0x08005f69
 8005e58:	08005f69 	.word	0x08005f69
 8005e5c:	08005f69 	.word	0x08005f69
 8005e60:	08005f27 	.word	0x08005f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f9d6 	bl	800621c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0208 	orr.w	r2, r2, #8
 8005e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0204 	bic.w	r2, r2, #4
 8005e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6999      	ldr	r1, [r3, #24]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	619a      	str	r2, [r3, #24]
      break;
 8005ea2:	e064      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fa1c 	bl	80062e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6999      	ldr	r1, [r3, #24]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	021a      	lsls	r2, r3, #8
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	619a      	str	r2, [r3, #24]
      break;
 8005ee4:	e043      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fa65 	bl	80063bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0208 	orr.w	r2, r2, #8
 8005f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0204 	bic.w	r2, r2, #4
 8005f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	61da      	str	r2, [r3, #28]
      break;
 8005f24:	e023      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 faaf 	bl	8006490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69d9      	ldr	r1, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	021a      	lsls	r2, r3, #8
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	61da      	str	r2, [r3, #28]
      break;
 8005f66:	e002      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0b4      	b.n	8006106 <HAL_TIM_ConfigClockSource+0x186>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd4:	d03e      	beq.n	8006054 <HAL_TIM_ConfigClockSource+0xd4>
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	f200 8087 	bhi.w	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe2:	f000 8086 	beq.w	80060f2 <HAL_TIM_ConfigClockSource+0x172>
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fea:	d87f      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d01a      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0xa6>
 8005ff0:	2b70      	cmp	r3, #112	; 0x70
 8005ff2:	d87b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d050      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x11a>
 8005ff8:	2b60      	cmp	r3, #96	; 0x60
 8005ffa:	d877      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b50      	cmp	r3, #80	; 0x50
 8005ffe:	d03c      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xfa>
 8006000:	2b50      	cmp	r3, #80	; 0x50
 8006002:	d873      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d058      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x13a>
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d86f      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d064      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006010:	2b30      	cmp	r3, #48	; 0x30
 8006012:	d86b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d060      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006018:	2b20      	cmp	r3, #32
 800601a:	d867      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05c      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006020:	2b10      	cmp	r3, #16
 8006022:	d05a      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006024:	e062      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6899      	ldr	r1, [r3, #8]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f000 faf0 	bl	800661a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	609a      	str	r2, [r3, #8]
      break;
 8006052:	e04f      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	6899      	ldr	r1, [r3, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f000 fad9 	bl	800661a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006076:	609a      	str	r2, [r3, #8]
      break;
 8006078:	e03c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fa50 	bl	800652c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2150      	movs	r1, #80	; 0x50
 8006092:	4618      	mov	r0, r3
 8006094:	f000 faa7 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 8006098:	e02c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 fa6e 	bl	8006588 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2160      	movs	r1, #96	; 0x60
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fa97 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e01c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 fa30 	bl	800652c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2140      	movs	r1, #64	; 0x40
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fa87 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 80060d8:	e00c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f000 fa7e 	bl	80065e6 <TIM_ITRx_SetConfig>
      break;
 80060ea:	e003      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	e000      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
	...

08006158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a29      	ldr	r2, [pc, #164]	; (8006210 <TIM_Base_SetConfig+0xb8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_Base_SetConfig+0x30>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006176:	d007      	beq.n	8006188 <TIM_Base_SetConfig+0x30>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a26      	ldr	r2, [pc, #152]	; (8006214 <TIM_Base_SetConfig+0xbc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0x30>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a25      	ldr	r2, [pc, #148]	; (8006218 <TIM_Base_SetConfig+0xc0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <TIM_Base_SetConfig+0xb8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00b      	beq.n	80061ba <TIM_Base_SetConfig+0x62>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d007      	beq.n	80061ba <TIM_Base_SetConfig+0x62>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a19      	ldr	r2, [pc, #100]	; (8006214 <TIM_Base_SetConfig+0xbc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_Base_SetConfig+0x62>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <TIM_Base_SetConfig+0xc0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d108      	bne.n	80061cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a07      	ldr	r2, [pc, #28]	; (8006210 <TIM_Base_SetConfig+0xb8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d103      	bne.n	8006200 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	615a      	str	r2, [r3, #20]
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800

0800621c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f023 0201 	bic.w	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 0302 	bic.w	r3, r3, #2
 8006264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <TIM_OC1_SetConfig+0xc8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d10c      	bne.n	8006292 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0308 	bic.w	r3, r3, #8
 800627e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f023 0304 	bic.w	r3, r3, #4
 8006290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <TIM_OC1_SetConfig+0xc8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d111      	bne.n	80062be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00

080062e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f023 0210 	bic.w	r2, r3, #16
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0320 	bic.w	r3, r3, #32
 8006332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <TIM_OC2_SetConfig+0xd0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d10d      	bne.n	8006364 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <TIM_OC2_SetConfig+0xd0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d113      	bne.n	8006394 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800637a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00

080063bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <TIM_OC3_SetConfig+0xd0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <TIM_OC3_SetConfig+0xd0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d113      	bne.n	8006466 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800644c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00

08006490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a0f      	ldr	r2, [pc, #60]	; (8006528 <TIM_OC4_SetConfig+0x98>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d109      	bne.n	8006504 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	019b      	lsls	r3, r3, #6
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	40012c00 	.word	0x40012c00

0800652c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 030a 	bic.w	r3, r3, #10
 8006568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f023 0210 	bic.w	r2, r3, #16
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	031b      	lsls	r3, r3, #12
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	f043 0307 	orr.w	r3, r3, #7
 8006608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800661a:	b480      	push	{r7}
 800661c:	b087      	sub	sp, #28
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006634:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	021a      	lsls	r2, r3, #8
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	431a      	orrs	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4313      	orrs	r3, r2
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	609a      	str	r2, [r3, #8]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2201      	movs	r2, #1
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	43db      	mvns	r3, r3
 800667a:	401a      	ands	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a1a      	ldr	r2, [r3, #32]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	fa01 f303 	lsl.w	r3, r1, r3
 8006690:	431a      	orrs	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e046      	b.n	8006746 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00e      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006704:	d009      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d004      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a10      	ldr	r2, [pc, #64]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d10c      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	4313      	orrs	r3, r2
 800672a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800

0800675c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e042      	b.n	8006818 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fd fb68 	bl	8003e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2224      	movs	r2, #36	; 0x24
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 ff2f 	bl	8007628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08c      	sub	sp, #48	; 0x30
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b20      	cmp	r3, #32
 8006838:	d156      	bne.n	80068e8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_UART_Transmit_DMA+0x26>
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e04f      	b.n	80068ea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2221      	movs	r2, #33	; 0x21
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <HAL_UART_Transmit_DMA+0xd4>)
 8006870:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <HAL_UART_Transmit_DMA+0xd8>)
 8006878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	4a1f      	ldr	r2, [pc, #124]	; (80068fc <HAL_UART_Transmit_DMA+0xdc>)
 8006880:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	2200      	movs	r2, #0
 8006888:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800688a:	f107 0308 	add.w	r3, r7, #8
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	6819      	ldr	r1, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3304      	adds	r3, #4
 800689e:	461a      	mov	r2, r3
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	f7fd fec9 	bl	8004638 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3314      	adds	r3, #20
 80068b6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	617b      	str	r3, [r7, #20]
   return(result);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d0:	627a      	str	r2, [r7, #36]	; 0x24
 80068d2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6a39      	ldr	r1, [r7, #32]
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e5      	bne.n	80068b0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3730      	adds	r7, #48	; 0x30
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	08006ebd 	.word	0x08006ebd
 80068f8:	08006f57 	.word	0x08006f57
 80068fc:	080070db 	.word	0x080070db

08006900 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b20      	cmp	r3, #32
 8006918:	d112      	bne.n	8006940 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_UART_Receive_DMA+0x26>
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e00b      	b.n	8006942 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	461a      	mov	r2, r3
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fc1a 	bl	8007170 <UART_Start_Receive_DMA>
 800693c:	4603      	mov	r3, r0
 800693e:	e000      	b.n	8006942 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b0ba      	sub	sp, #232	; 0xe8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800698a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_UART_IRQHandler+0x66>
 800699e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fd7e 	bl	80074ac <UART_Receive_IT>
      return;
 80069b0:	e25b      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80de 	beq.w	8006b78 <HAL_UART_IRQHandler+0x22c>
 80069bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80d1 	beq.w	8006b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_UART_IRQHandler+0xae>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_UART_IRQHandler+0xd2>
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	f043 0202 	orr.w	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <HAL_UART_IRQHandler+0xf6>
 8006a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	f043 0204 	orr.w	r2, r3, #4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d011      	beq.n	8006a72 <HAL_UART_IRQHandler+0x126>
 8006a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d105      	bne.n	8006a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	f043 0208 	orr.w	r2, r3, #8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 81f2 	beq.w	8006e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x14e>
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fd09 	bl	80074ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x17a>
 8006abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d04f      	beq.n	8006b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fc13 	bl	80072f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d041      	beq.n	8006b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d9      	bne.n	8006ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d013      	beq.n	8006b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	4a7e      	ldr	r2, [pc, #504]	; (8006d2c <HAL_UART_IRQHandler+0x3e0>)
 8006b34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd fe18 	bl	8004770 <HAL_DMA_Abort_IT>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	e00e      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f99c 	bl	8006e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00a      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f998 	bl	8006e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e006      	b.n	8006b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f994 	bl	8006e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006b72:	e175      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	bf00      	nop
    return;
 8006b76:	e173      	b.n	8006e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	f040 814f 	bne.w	8006e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8148 	beq.w	8006e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8141 	beq.w	8006e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80b6 	beq.w	8006d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8145 	beq.w	8006e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006be2:	429a      	cmp	r2, r3
 8006be4:	f080 813e 	bcs.w	8006e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	f000 8088 	beq.w	8006d0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1d9      	bne.n	8006bfc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e1      	bne.n	8006c48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e3      	bne.n	8006c84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e3      	bne.n	8006cca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd fcf6 	bl	80046f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f8bf 	bl	8006ea6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d28:	e09c      	b.n	8006e64 <HAL_UART_IRQHandler+0x518>
 8006d2a:	bf00      	nop
 8006d2c:	080073b7 	.word	0x080073b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 808e 	beq.w	8006e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8089 	beq.w	8006e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e3      	bne.n	8006d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3314      	adds	r3, #20
 8006dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006db2:	633a      	str	r2, [r7, #48]	; 0x30
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006df8:	61fa      	str	r2, [r7, #28]
 8006dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	617b      	str	r3, [r7, #20]
   return(result);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e3      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f844 	bl	8006ea6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e1e:	e023      	b.n	8006e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d009      	beq.n	8006e40 <HAL_UART_IRQHandler+0x4f4>
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fad0 	bl	80073de <UART_Transmit_IT>
    return;
 8006e3e:	e014      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <HAL_UART_IRQHandler+0x51e>
 8006e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb0f 	bl	800747c <UART_EndTransmit_IT>
    return;
 8006e5e:	e004      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8006e60:	bf00      	nop
 8006e62:	e002      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e64:	bf00      	nop
 8006e66:	e000      	b.n	8006e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e68:	bf00      	nop
  }
}
 8006e6a:	37e8      	adds	r7, #232	; 0xe8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b090      	sub	sp, #64	; 0x40
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d137      	bne.n	8006f48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eda:	2200      	movs	r2, #0
 8006edc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	623b      	str	r3, [r7, #32]
   return(result);
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3314      	adds	r3, #20
 8006efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efe:	633a      	str	r2, [r7, #48]	; 0x30
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e5      	bne.n	8006ede <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	330c      	adds	r3, #12
 8006f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f32:	61fa      	str	r2, [r7, #28]
 8006f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	69b9      	ldr	r1, [r7, #24]
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e5      	bne.n	8006f12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f46:	e002      	b.n	8006f4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f4a:	f7fc f82b 	bl	8002fa4 <HAL_UART_TxCpltCallback>
}
 8006f4e:	bf00      	nop
 8006f50:	3740      	adds	r7, #64	; 0x40
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff83 	bl	8006e70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b09c      	sub	sp, #112	; 0x70
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d172      	bne.n	8007074 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	2200      	movs	r2, #0
 8006f92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	667b      	str	r3, [r7, #100]	; 0x64
 8006fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fe8:	647a      	str	r2, [r7, #68]	; 0x44
 8006fea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3314      	adds	r3, #20
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	623b      	str	r3, [r7, #32]
   return(result);
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007012:	663b      	str	r3, [r7, #96]	; 0x60
 8007014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3314      	adds	r3, #20
 800701a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800701c:	633a      	str	r2, [r7, #48]	; 0x30
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e5      	bne.n	8006ffc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	2b01      	cmp	r3, #1
 800703e:	d119      	bne.n	8007074 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007060:	61fa      	str	r2, [r7, #28]
 8007062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	617b      	str	r3, [r7, #20]
   return(result);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	2200      	movs	r2, #0
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	2b01      	cmp	r3, #1
 8007080:	d106      	bne.n	8007090 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007086:	4619      	mov	r1, r3
 8007088:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800708a:	f7ff ff0c 	bl	8006ea6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800708e:	e002      	b.n	8007096 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007090:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007092:	f7fb ff99 	bl	8002fc8 <HAL_UART_RxCpltCallback>
}
 8007096:	bf00      	nop
 8007098:	3770      	adds	r7, #112	; 0x70
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d108      	bne.n	80070cc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff feee 	bl	8006ea6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ca:	e002      	b.n	80070d2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fed8 	bl	8006e82 <HAL_UART_RxHalfCpltCallback>
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf14      	ite	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	2300      	moveq	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b21      	cmp	r3, #33	; 0x21
 800710c:	d108      	bne.n	8007120 <UART_DMAError+0x46>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800711a:	68b8      	ldr	r0, [r7, #8]
 800711c:	f000 f8c2 	bl	80072a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	bf14      	ite	ne
 800712e:	2301      	movne	r3, #1
 8007130:	2300      	moveq	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b22      	cmp	r3, #34	; 0x22
 8007140:	d108      	bne.n	8007154 <UART_DMAError+0x7a>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800714e:	68b8      	ldr	r0, [r7, #8]
 8007150:	f000 f8cf 	bl	80072f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	f043 0210 	orr.w	r2, r3, #16
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f7ff fe97 	bl	8006e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b098      	sub	sp, #96	; 0x60
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2222      	movs	r2, #34	; 0x22
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	4a3e      	ldr	r2, [pc, #248]	; (8007298 <UART_Start_Receive_DMA+0x128>)
 800719e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a4:	4a3d      	ldr	r2, [pc, #244]	; (800729c <UART_Start_Receive_DMA+0x12c>)
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	4a3c      	ldr	r2, [pc, #240]	; (80072a0 <UART_Start_Receive_DMA+0x130>)
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b4:	2200      	movs	r2, #0
 80071b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80071b8:	f107 0308 	add.w	r3, r7, #8
 80071bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	f7fd fa32 	bl	8004638 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80071d4:	2300      	movs	r3, #0
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d019      	beq.n	8007226 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007208:	65bb      	str	r3, [r7, #88]	; 0x58
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007212:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3314      	adds	r3, #20
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	657b      	str	r3, [r7, #84]	; 0x54
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3314      	adds	r3, #20
 8007244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007246:	63ba      	str	r2, [r7, #56]	; 0x38
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800724c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e5      	bne.n	8007226 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	617b      	str	r3, [r7, #20]
   return(result);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007270:	653b      	str	r3, [r7, #80]	; 0x50
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800727a:	627a      	str	r2, [r7, #36]	; 0x24
 800727c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6a39      	ldr	r1, [r7, #32]
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	61fb      	str	r3, [r7, #28]
   return(result);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e5      	bne.n	800725a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3760      	adds	r7, #96	; 0x60
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	08006f73 	.word	0x08006f73
 800729c:	0800709f 	.word	0x0800709f
 80072a0:	080070db 	.word	0x080070db

080072a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b089      	sub	sp, #36	; 0x24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	61ba      	str	r2, [r7, #24]
 80072ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6979      	ldr	r1, [r7, #20]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	613b      	str	r3, [r7, #16]
   return(result);
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80072e8:	bf00      	nop
 80072ea:	3724      	adds	r7, #36	; 0x24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr

080072f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b095      	sub	sp, #84	; 0x54
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	330c      	adds	r3, #12
 8007318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800731a:	643a      	str	r2, [r7, #64]	; 0x40
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3314      	adds	r3, #20
 8007334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	61fb      	str	r3, [r7, #28]
   return(result);
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f023 0301 	bic.w	r3, r3, #1
 8007344:	64bb      	str	r3, [r7, #72]	; 0x48
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	2b01      	cmp	r3, #1
 8007368:	d119      	bne.n	800739e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	60bb      	str	r3, [r7, #8]
   return(result);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f023 0310 	bic.w	r3, r3, #16
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800738a:	61ba      	str	r2, [r7, #24]
 800738c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	613b      	str	r3, [r7, #16]
   return(result);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073ac:	bf00      	nop
 80073ae:	3754      	adds	r7, #84	; 0x54
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff fd5f 	bl	8006e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b21      	cmp	r3, #33	; 0x21
 80073f0:	d13e      	bne.n	8007470 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d114      	bne.n	8007426 <UART_Transmit_IT+0x48>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d110      	bne.n	8007426 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007418:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	1c9a      	adds	r2, r3, #2
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	621a      	str	r2, [r3, #32]
 8007424:	e008      	b.n	8007438 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	1c59      	adds	r1, r3, #1
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6211      	str	r1, [r2, #32]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29b      	uxth	r3, r3
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4619      	mov	r1, r3
 8007446:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10f      	bne.n	800746c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800745a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800746a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e000      	b.n	8007472 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007492:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fb fd81 	bl	8002fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b22      	cmp	r3, #34	; 0x22
 80074be:	f040 80ae 	bne.w	800761e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ca:	d117      	bne.n	80074fc <UART_Receive_IT+0x50>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d113      	bne.n	80074fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	629a      	str	r2, [r3, #40]	; 0x28
 80074fa:	e026      	b.n	800754a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007502:	2300      	movs	r3, #0
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750e:	d007      	beq.n	8007520 <UART_Receive_IT+0x74>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <UART_Receive_IT+0x82>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e008      	b.n	8007540 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753a:	b2da      	uxtb	r2, r3
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29b      	uxth	r3, r3
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	4619      	mov	r1, r3
 8007558:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800755a:	2b00      	cmp	r3, #0
 800755c:	d15d      	bne.n	800761a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0220 	bic.w	r2, r2, #32
 800756c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800757c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0201 	bic.w	r2, r2, #1
 800758c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d135      	bne.n	8007610 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	330c      	adds	r3, #12
 80075b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f023 0310 	bic.w	r3, r3, #16
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	330c      	adds	r3, #12
 80075c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ca:	623a      	str	r2, [r7, #32]
 80075cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	69f9      	ldr	r1, [r7, #28]
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e5      	bne.n	80075aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b10      	cmp	r3, #16
 80075ea:	d10a      	bne.n	8007602 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fc4c 	bl	8006ea6 <HAL_UARTEx_RxEventCallback>
 800760e:	e002      	b.n	8007616 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7fb fcd9 	bl	8002fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e002      	b.n	8007620 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e000      	b.n	8007620 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800761e:	2302      	movs	r3, #2
  }
}
 8007620:	4618      	mov	r0, r3
 8007622:	3730      	adds	r7, #48	; 0x30
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007662:	f023 030c 	bic.w	r3, r3, #12
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	430b      	orrs	r3, r1
 800766e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a2c      	ldr	r2, [pc, #176]	; (800773c <UART_SetConfig+0x114>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007690:	f7fd ffae 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	e002      	b.n	800769e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fd ff96 	bl	80055c8 <HAL_RCC_GetPCLK1Freq>
 800769c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009a      	lsls	r2, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b4:	4a22      	ldr	r2, [pc, #136]	; (8007740 <UART_SetConfig+0x118>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	0119      	lsls	r1, r3, #4
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009a      	lsls	r2, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <UART_SetConfig+0x118>)
 80076d6:	fba3 0302 	umull	r0, r3, r3, r2
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2064      	movs	r0, #100	; 0x64
 80076de:	fb00 f303 	mul.w	r3, r0, r3
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	3332      	adds	r3, #50	; 0x32
 80076e8:	4a15      	ldr	r2, [pc, #84]	; (8007740 <UART_SetConfig+0x118>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f4:	4419      	add	r1, r3
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009a      	lsls	r2, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	fbb2 f2f3 	udiv	r2, r2, r3
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <UART_SetConfig+0x118>)
 800770e:	fba3 0302 	umull	r0, r3, r3, r2
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	2064      	movs	r0, #100	; 0x64
 8007716:	fb00 f303 	mul.w	r3, r0, r3
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	3332      	adds	r3, #50	; 0x32
 8007720:	4a07      	ldr	r2, [pc, #28]	; (8007740 <UART_SetConfig+0x118>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	f003 020f 	and.w	r2, r3, #15
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	440a      	add	r2, r1
 8007732:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40013800 	.word	0x40013800
 8007740:	51eb851f 	.word	0x51eb851f

08007744 <__cxa_pure_virtual>:
 8007744:	b508      	push	{r3, lr}
 8007746:	f000 f80d 	bl	8007764 <_ZSt9terminatev>

0800774a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800774a:	b508      	push	{r3, lr}
 800774c:	4780      	blx	r0
 800774e:	f000 f80e 	bl	800776e <abort>
	...

08007754 <_ZSt13get_terminatev>:
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <_ZSt13get_terminatev+0xc>)
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	f3bf 8f5b 	dmb	ish
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	200000c0 	.word	0x200000c0

08007764 <_ZSt9terminatev>:
 8007764:	b508      	push	{r3, lr}
 8007766:	f7ff fff5 	bl	8007754 <_ZSt13get_terminatev>
 800776a:	f7ff ffee 	bl	800774a <_ZN10__cxxabiv111__terminateEPFvvE>

0800776e <abort>:
 800776e:	2006      	movs	r0, #6
 8007770:	b508      	push	{r3, lr}
 8007772:	f000 fcd3 	bl	800811c <raise>
 8007776:	2001      	movs	r0, #1
 8007778:	f7fc fc93 	bl	80040a2 <_exit>

0800777c <__errno>:
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <__errno+0x8>)
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	200000c4 	.word	0x200000c4

08007788 <__libc_init_array>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	2600      	movs	r6, #0
 800778c:	4d0c      	ldr	r5, [pc, #48]	; (80077c0 <__libc_init_array+0x38>)
 800778e:	4c0d      	ldr	r4, [pc, #52]	; (80077c4 <__libc_init_array+0x3c>)
 8007790:	1b64      	subs	r4, r4, r5
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	42a6      	cmp	r6, r4
 8007796:	d109      	bne.n	80077ac <__libc_init_array+0x24>
 8007798:	f002 fd68 	bl	800a26c <_init>
 800779c:	2600      	movs	r6, #0
 800779e:	4d0a      	ldr	r5, [pc, #40]	; (80077c8 <__libc_init_array+0x40>)
 80077a0:	4c0a      	ldr	r4, [pc, #40]	; (80077cc <__libc_init_array+0x44>)
 80077a2:	1b64      	subs	r4, r4, r5
 80077a4:	10a4      	asrs	r4, r4, #2
 80077a6:	42a6      	cmp	r6, r4
 80077a8:	d105      	bne.n	80077b6 <__libc_init_array+0x2e>
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b0:	4798      	blx	r3
 80077b2:	3601      	adds	r6, #1
 80077b4:	e7ee      	b.n	8007794 <__libc_init_array+0xc>
 80077b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ba:	4798      	blx	r3
 80077bc:	3601      	adds	r6, #1
 80077be:	e7f2      	b.n	80077a6 <__libc_init_array+0x1e>
 80077c0:	0800a8f4 	.word	0x0800a8f4
 80077c4:	0800a8f4 	.word	0x0800a8f4
 80077c8:	0800a8f4 	.word	0x0800a8f4
 80077cc:	0800a8fc 	.word	0x0800a8fc

080077d0 <memcpy>:
 80077d0:	440a      	add	r2, r1
 80077d2:	4291      	cmp	r1, r2
 80077d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077d8:	d100      	bne.n	80077dc <memcpy+0xc>
 80077da:	4770      	bx	lr
 80077dc:	b510      	push	{r4, lr}
 80077de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077e2:	4291      	cmp	r1, r2
 80077e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077e8:	d1f9      	bne.n	80077de <memcpy+0xe>
 80077ea:	bd10      	pop	{r4, pc}

080077ec <memset>:
 80077ec:	4603      	mov	r3, r0
 80077ee:	4402      	add	r2, r0
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	f803 1b01 	strb.w	r1, [r3], #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <__cvt>:
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007802:	461f      	mov	r7, r3
 8007804:	bfbb      	ittet	lt
 8007806:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800780a:	461f      	movlt	r7, r3
 800780c:	2300      	movge	r3, #0
 800780e:	232d      	movlt	r3, #45	; 0x2d
 8007810:	b088      	sub	sp, #32
 8007812:	4614      	mov	r4, r2
 8007814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007816:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007818:	7013      	strb	r3, [r2, #0]
 800781a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800781c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007820:	f023 0820 	bic.w	r8, r3, #32
 8007824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007828:	d005      	beq.n	8007836 <__cvt+0x3a>
 800782a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800782e:	d100      	bne.n	8007832 <__cvt+0x36>
 8007830:	3501      	adds	r5, #1
 8007832:	2302      	movs	r3, #2
 8007834:	e000      	b.n	8007838 <__cvt+0x3c>
 8007836:	2303      	movs	r3, #3
 8007838:	aa07      	add	r2, sp, #28
 800783a:	9204      	str	r2, [sp, #16]
 800783c:	aa06      	add	r2, sp, #24
 800783e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007842:	e9cd 3500 	strd	r3, r5, [sp]
 8007846:	4622      	mov	r2, r4
 8007848:	463b      	mov	r3, r7
 800784a:	f000 fd11 	bl	8008270 <_dtoa_r>
 800784e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007852:	4606      	mov	r6, r0
 8007854:	d102      	bne.n	800785c <__cvt+0x60>
 8007856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007858:	07db      	lsls	r3, r3, #31
 800785a:	d522      	bpl.n	80078a2 <__cvt+0xa6>
 800785c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007860:	eb06 0905 	add.w	r9, r6, r5
 8007864:	d110      	bne.n	8007888 <__cvt+0x8c>
 8007866:	7833      	ldrb	r3, [r6, #0]
 8007868:	2b30      	cmp	r3, #48	; 0x30
 800786a:	d10a      	bne.n	8007882 <__cvt+0x86>
 800786c:	2200      	movs	r2, #0
 800786e:	2300      	movs	r3, #0
 8007870:	4620      	mov	r0, r4
 8007872:	4639      	mov	r1, r7
 8007874:	f7f9 f898 	bl	80009a8 <__aeabi_dcmpeq>
 8007878:	b918      	cbnz	r0, 8007882 <__cvt+0x86>
 800787a:	f1c5 0501 	rsb	r5, r5, #1
 800787e:	f8ca 5000 	str.w	r5, [sl]
 8007882:	f8da 3000 	ldr.w	r3, [sl]
 8007886:	4499      	add	r9, r3
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	4620      	mov	r0, r4
 800788e:	4639      	mov	r1, r7
 8007890:	f7f9 f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8007894:	b108      	cbz	r0, 800789a <__cvt+0x9e>
 8007896:	f8cd 901c 	str.w	r9, [sp, #28]
 800789a:	2230      	movs	r2, #48	; 0x30
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	454b      	cmp	r3, r9
 80078a0:	d307      	bcc.n	80078b2 <__cvt+0xb6>
 80078a2:	4630      	mov	r0, r6
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078a8:	1b9b      	subs	r3, r3, r6
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	b008      	add	sp, #32
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	9107      	str	r1, [sp, #28]
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e7f0      	b.n	800789c <__cvt+0xa0>

080078ba <__exponent>:
 80078ba:	4603      	mov	r3, r0
 80078bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078be:	2900      	cmp	r1, #0
 80078c0:	f803 2b02 	strb.w	r2, [r3], #2
 80078c4:	bfb6      	itet	lt
 80078c6:	222d      	movlt	r2, #45	; 0x2d
 80078c8:	222b      	movge	r2, #43	; 0x2b
 80078ca:	4249      	neglt	r1, r1
 80078cc:	2909      	cmp	r1, #9
 80078ce:	7042      	strb	r2, [r0, #1]
 80078d0:	dd2b      	ble.n	800792a <__exponent+0x70>
 80078d2:	f10d 0407 	add.w	r4, sp, #7
 80078d6:	46a4      	mov	ip, r4
 80078d8:	270a      	movs	r7, #10
 80078da:	fb91 f6f7 	sdiv	r6, r1, r7
 80078de:	460a      	mov	r2, r1
 80078e0:	46a6      	mov	lr, r4
 80078e2:	fb07 1516 	mls	r5, r7, r6, r1
 80078e6:	2a63      	cmp	r2, #99	; 0x63
 80078e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80078ec:	4631      	mov	r1, r6
 80078ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80078f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078f6:	dcf0      	bgt.n	80078da <__exponent+0x20>
 80078f8:	3130      	adds	r1, #48	; 0x30
 80078fa:	f1ae 0502 	sub.w	r5, lr, #2
 80078fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007902:	4629      	mov	r1, r5
 8007904:	1c44      	adds	r4, r0, #1
 8007906:	4561      	cmp	r1, ip
 8007908:	d30a      	bcc.n	8007920 <__exponent+0x66>
 800790a:	f10d 0209 	add.w	r2, sp, #9
 800790e:	eba2 020e 	sub.w	r2, r2, lr
 8007912:	4565      	cmp	r5, ip
 8007914:	bf88      	it	hi
 8007916:	2200      	movhi	r2, #0
 8007918:	4413      	add	r3, r2
 800791a:	1a18      	subs	r0, r3, r0
 800791c:	b003      	add	sp, #12
 800791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007924:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007928:	e7ed      	b.n	8007906 <__exponent+0x4c>
 800792a:	2330      	movs	r3, #48	; 0x30
 800792c:	3130      	adds	r1, #48	; 0x30
 800792e:	7083      	strb	r3, [r0, #2]
 8007930:	70c1      	strb	r1, [r0, #3]
 8007932:	1d03      	adds	r3, r0, #4
 8007934:	e7f1      	b.n	800791a <__exponent+0x60>
	...

08007938 <_printf_float>:
 8007938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793c:	b091      	sub	sp, #68	; 0x44
 800793e:	460c      	mov	r4, r1
 8007940:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007944:	4616      	mov	r6, r2
 8007946:	461f      	mov	r7, r3
 8007948:	4605      	mov	r5, r0
 800794a:	f001 fa7f 	bl	8008e4c <_localeconv_r>
 800794e:	6803      	ldr	r3, [r0, #0]
 8007950:	4618      	mov	r0, r3
 8007952:	9309      	str	r3, [sp, #36]	; 0x24
 8007954:	f7f8 fbfc 	bl	8000150 <strlen>
 8007958:	2300      	movs	r3, #0
 800795a:	930e      	str	r3, [sp, #56]	; 0x38
 800795c:	f8d8 3000 	ldr.w	r3, [r8]
 8007960:	900a      	str	r0, [sp, #40]	; 0x28
 8007962:	3307      	adds	r3, #7
 8007964:	f023 0307 	bic.w	r3, r3, #7
 8007968:	f103 0208 	add.w	r2, r3, #8
 800796c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007970:	f8d4 b000 	ldr.w	fp, [r4]
 8007974:	f8c8 2000 	str.w	r2, [r8]
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007980:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007984:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007988:	930b      	str	r3, [sp, #44]	; 0x2c
 800798a:	f04f 32ff 	mov.w	r2, #4294967295
 800798e:	4640      	mov	r0, r8
 8007990:	4b9c      	ldr	r3, [pc, #624]	; (8007c04 <_printf_float+0x2cc>)
 8007992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007994:	f7f9 f83a 	bl	8000a0c <__aeabi_dcmpun>
 8007998:	bb70      	cbnz	r0, 80079f8 <_printf_float+0xc0>
 800799a:	f04f 32ff 	mov.w	r2, #4294967295
 800799e:	4640      	mov	r0, r8
 80079a0:	4b98      	ldr	r3, [pc, #608]	; (8007c04 <_printf_float+0x2cc>)
 80079a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079a4:	f7f9 f814 	bl	80009d0 <__aeabi_dcmple>
 80079a8:	bb30      	cbnz	r0, 80079f8 <_printf_float+0xc0>
 80079aa:	2200      	movs	r2, #0
 80079ac:	2300      	movs	r3, #0
 80079ae:	4640      	mov	r0, r8
 80079b0:	4651      	mov	r1, sl
 80079b2:	f7f9 f803 	bl	80009bc <__aeabi_dcmplt>
 80079b6:	b110      	cbz	r0, 80079be <_printf_float+0x86>
 80079b8:	232d      	movs	r3, #45	; 0x2d
 80079ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079be:	4b92      	ldr	r3, [pc, #584]	; (8007c08 <_printf_float+0x2d0>)
 80079c0:	4892      	ldr	r0, [pc, #584]	; (8007c0c <_printf_float+0x2d4>)
 80079c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80079c6:	bf94      	ite	ls
 80079c8:	4698      	movls	r8, r3
 80079ca:	4680      	movhi	r8, r0
 80079cc:	2303      	movs	r3, #3
 80079ce:	f04f 0a00 	mov.w	sl, #0
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	f02b 0304 	bic.w	r3, fp, #4
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	4633      	mov	r3, r6
 80079dc:	4621      	mov	r1, r4
 80079de:	4628      	mov	r0, r5
 80079e0:	9700      	str	r7, [sp, #0]
 80079e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80079e4:	f000 f9d4 	bl	8007d90 <_printf_common>
 80079e8:	3001      	adds	r0, #1
 80079ea:	f040 8090 	bne.w	8007b0e <_printf_float+0x1d6>
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	b011      	add	sp, #68	; 0x44
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	4642      	mov	r2, r8
 80079fa:	4653      	mov	r3, sl
 80079fc:	4640      	mov	r0, r8
 80079fe:	4651      	mov	r1, sl
 8007a00:	f7f9 f804 	bl	8000a0c <__aeabi_dcmpun>
 8007a04:	b148      	cbz	r0, 8007a1a <_printf_float+0xe2>
 8007a06:	f1ba 0f00 	cmp.w	sl, #0
 8007a0a:	bfb8      	it	lt
 8007a0c:	232d      	movlt	r3, #45	; 0x2d
 8007a0e:	4880      	ldr	r0, [pc, #512]	; (8007c10 <_printf_float+0x2d8>)
 8007a10:	bfb8      	it	lt
 8007a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a16:	4b7f      	ldr	r3, [pc, #508]	; (8007c14 <_printf_float+0x2dc>)
 8007a18:	e7d3      	b.n	80079c2 <_printf_float+0x8a>
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	d142      	bne.n	8007aaa <_printf_float+0x172>
 8007a24:	2306      	movs	r3, #6
 8007a26:	6063      	str	r3, [r4, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	9206      	str	r2, [sp, #24]
 8007a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8007a2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007a32:	aa0d      	add	r2, sp, #52	; 0x34
 8007a34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007a38:	9203      	str	r2, [sp, #12]
 8007a3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007a3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	6863      	ldr	r3, [r4, #4]
 8007a46:	4642      	mov	r2, r8
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	4653      	mov	r3, sl
 8007a4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a50:	f7ff fed4 	bl	80077fc <__cvt>
 8007a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a56:	4680      	mov	r8, r0
 8007a58:	2947      	cmp	r1, #71	; 0x47
 8007a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a5c:	d108      	bne.n	8007a70 <_printf_float+0x138>
 8007a5e:	1cc8      	adds	r0, r1, #3
 8007a60:	db02      	blt.n	8007a68 <_printf_float+0x130>
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	4299      	cmp	r1, r3
 8007a66:	dd40      	ble.n	8007aea <_printf_float+0x1b2>
 8007a68:	f1a9 0902 	sub.w	r9, r9, #2
 8007a6c:	fa5f f989 	uxtb.w	r9, r9
 8007a70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a74:	d81f      	bhi.n	8007ab6 <_printf_float+0x17e>
 8007a76:	464a      	mov	r2, r9
 8007a78:	3901      	subs	r1, #1
 8007a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a7e:	910d      	str	r1, [sp, #52]	; 0x34
 8007a80:	f7ff ff1b 	bl	80078ba <__exponent>
 8007a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a86:	4682      	mov	sl, r0
 8007a88:	1813      	adds	r3, r2, r0
 8007a8a:	2a01      	cmp	r2, #1
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	dc02      	bgt.n	8007a96 <_printf_float+0x15e>
 8007a90:	6822      	ldr	r2, [r4, #0]
 8007a92:	07d2      	lsls	r2, r2, #31
 8007a94:	d501      	bpl.n	8007a9a <_printf_float+0x162>
 8007a96:	3301      	adds	r3, #1
 8007a98:	6123      	str	r3, [r4, #16]
 8007a9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d09b      	beq.n	80079da <_printf_float+0xa2>
 8007aa2:	232d      	movs	r3, #45	; 0x2d
 8007aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa8:	e797      	b.n	80079da <_printf_float+0xa2>
 8007aaa:	2947      	cmp	r1, #71	; 0x47
 8007aac:	d1bc      	bne.n	8007a28 <_printf_float+0xf0>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1ba      	bne.n	8007a28 <_printf_float+0xf0>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7b7      	b.n	8007a26 <_printf_float+0xee>
 8007ab6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007aba:	d118      	bne.n	8007aee <_printf_float+0x1b6>
 8007abc:	2900      	cmp	r1, #0
 8007abe:	6863      	ldr	r3, [r4, #4]
 8007ac0:	dd0b      	ble.n	8007ada <_printf_float+0x1a2>
 8007ac2:	6121      	str	r1, [r4, #16]
 8007ac4:	b913      	cbnz	r3, 8007acc <_printf_float+0x194>
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	07d0      	lsls	r0, r2, #31
 8007aca:	d502      	bpl.n	8007ad2 <_printf_float+0x19a>
 8007acc:	3301      	adds	r3, #1
 8007ace:	440b      	add	r3, r1
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	f04f 0a00 	mov.w	sl, #0
 8007ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ad8:	e7df      	b.n	8007a9a <_printf_float+0x162>
 8007ada:	b913      	cbnz	r3, 8007ae2 <_printf_float+0x1aa>
 8007adc:	6822      	ldr	r2, [r4, #0]
 8007ade:	07d2      	lsls	r2, r2, #31
 8007ae0:	d501      	bpl.n	8007ae6 <_printf_float+0x1ae>
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	e7f4      	b.n	8007ad0 <_printf_float+0x198>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7f2      	b.n	8007ad0 <_printf_float+0x198>
 8007aea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af0:	4299      	cmp	r1, r3
 8007af2:	db05      	blt.n	8007b00 <_printf_float+0x1c8>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	6121      	str	r1, [r4, #16]
 8007af8:	07d8      	lsls	r0, r3, #31
 8007afa:	d5ea      	bpl.n	8007ad2 <_printf_float+0x19a>
 8007afc:	1c4b      	adds	r3, r1, #1
 8007afe:	e7e7      	b.n	8007ad0 <_printf_float+0x198>
 8007b00:	2900      	cmp	r1, #0
 8007b02:	bfcc      	ite	gt
 8007b04:	2201      	movgt	r2, #1
 8007b06:	f1c1 0202 	rsble	r2, r1, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	e7e0      	b.n	8007ad0 <_printf_float+0x198>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	055a      	lsls	r2, r3, #21
 8007b12:	d407      	bmi.n	8007b24 <_printf_float+0x1ec>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	4642      	mov	r2, r8
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b8      	blx	r7
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d12b      	bne.n	8007b7a <_printf_float+0x242>
 8007b22:	e764      	b.n	80079ee <_printf_float+0xb6>
 8007b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b28:	f240 80dd 	bls.w	8007ce6 <_printf_float+0x3ae>
 8007b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b30:	2200      	movs	r2, #0
 8007b32:	2300      	movs	r3, #0
 8007b34:	f7f8 ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d033      	beq.n	8007ba4 <_printf_float+0x26c>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	4a35      	ldr	r2, [pc, #212]	; (8007c18 <_printf_float+0x2e0>)
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f af51 	beq.w	80079ee <_printf_float+0xb6>
 8007b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b50:	429a      	cmp	r2, r3
 8007b52:	db02      	blt.n	8007b5a <_printf_float+0x222>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	07d8      	lsls	r0, r3, #31
 8007b58:	d50f      	bpl.n	8007b7a <_printf_float+0x242>
 8007b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f af42 	beq.w	80079ee <_printf_float+0xb6>
 8007b6a:	f04f 0800 	mov.w	r8, #0
 8007b6e:	f104 091a 	add.w	r9, r4, #26
 8007b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b74:	3b01      	subs	r3, #1
 8007b76:	4543      	cmp	r3, r8
 8007b78:	dc09      	bgt.n	8007b8e <_printf_float+0x256>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	079b      	lsls	r3, r3, #30
 8007b7e:	f100 8102 	bmi.w	8007d86 <_printf_float+0x44e>
 8007b82:	68e0      	ldr	r0, [r4, #12]
 8007b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b86:	4298      	cmp	r0, r3
 8007b88:	bfb8      	it	lt
 8007b8a:	4618      	movlt	r0, r3
 8007b8c:	e731      	b.n	80079f2 <_printf_float+0xba>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	464a      	mov	r2, r9
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f af28 	beq.w	80079ee <_printf_float+0xb6>
 8007b9e:	f108 0801 	add.w	r8, r8, #1
 8007ba2:	e7e6      	b.n	8007b72 <_printf_float+0x23a>
 8007ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dc38      	bgt.n	8007c1c <_printf_float+0x2e4>
 8007baa:	2301      	movs	r3, #1
 8007bac:	4631      	mov	r1, r6
 8007bae:	4628      	mov	r0, r5
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <_printf_float+0x2e0>)
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f43f af1a 	beq.w	80079ee <_printf_float+0xb6>
 8007bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	d102      	bne.n	8007bc8 <_printf_float+0x290>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	07d9      	lsls	r1, r3, #31
 8007bc6:	d5d8      	bpl.n	8007b7a <_printf_float+0x242>
 8007bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f af0b 	beq.w	80079ee <_printf_float+0xb6>
 8007bd8:	f04f 0900 	mov.w	r9, #0
 8007bdc:	f104 0a1a 	add.w	sl, r4, #26
 8007be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be2:	425b      	negs	r3, r3
 8007be4:	454b      	cmp	r3, r9
 8007be6:	dc01      	bgt.n	8007bec <_printf_float+0x2b4>
 8007be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bea:	e794      	b.n	8007b16 <_printf_float+0x1de>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4652      	mov	r2, sl
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	47b8      	blx	r7
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f aef9 	beq.w	80079ee <_printf_float+0xb6>
 8007bfc:	f109 0901 	add.w	r9, r9, #1
 8007c00:	e7ee      	b.n	8007be0 <_printf_float+0x2a8>
 8007c02:	bf00      	nop
 8007c04:	7fefffff 	.word	0x7fefffff
 8007c08:	0800a520 	.word	0x0800a520
 8007c0c:	0800a524 	.word	0x0800a524
 8007c10:	0800a52c 	.word	0x0800a52c
 8007c14:	0800a528 	.word	0x0800a528
 8007c18:	0800a530 	.word	0x0800a530
 8007c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c20:	429a      	cmp	r2, r3
 8007c22:	bfa8      	it	ge
 8007c24:	461a      	movge	r2, r3
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	4691      	mov	r9, r2
 8007c2a:	dc37      	bgt.n	8007c9c <_printf_float+0x364>
 8007c2c:	f04f 0b00 	mov.w	fp, #0
 8007c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c34:	f104 021a 	add.w	r2, r4, #26
 8007c38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c3c:	ebaa 0309 	sub.w	r3, sl, r9
 8007c40:	455b      	cmp	r3, fp
 8007c42:	dc33      	bgt.n	8007cac <_printf_float+0x374>
 8007c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	db3b      	blt.n	8007cc4 <_printf_float+0x38c>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	07da      	lsls	r2, r3, #31
 8007c50:	d438      	bmi.n	8007cc4 <_printf_float+0x38c>
 8007c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c56:	eba3 020a 	sub.w	r2, r3, sl
 8007c5a:	eba3 0901 	sub.w	r9, r3, r1
 8007c5e:	4591      	cmp	r9, r2
 8007c60:	bfa8      	it	ge
 8007c62:	4691      	movge	r9, r2
 8007c64:	f1b9 0f00 	cmp.w	r9, #0
 8007c68:	dc34      	bgt.n	8007cd4 <_printf_float+0x39c>
 8007c6a:	f04f 0800 	mov.w	r8, #0
 8007c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c72:	f104 0a1a 	add.w	sl, r4, #26
 8007c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	eba3 0309 	sub.w	r3, r3, r9
 8007c80:	4543      	cmp	r3, r8
 8007c82:	f77f af7a 	ble.w	8007b7a <_printf_float+0x242>
 8007c86:	2301      	movs	r3, #1
 8007c88:	4652      	mov	r2, sl
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	f43f aeac 	beq.w	80079ee <_printf_float+0xb6>
 8007c96:	f108 0801 	add.w	r8, r8, #1
 8007c9a:	e7ec      	b.n	8007c76 <_printf_float+0x33e>
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d1c0      	bne.n	8007c2c <_printf_float+0x2f4>
 8007caa:	e6a0      	b.n	80079ee <_printf_float+0xb6>
 8007cac:	2301      	movs	r3, #1
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f43f ae99 	beq.w	80079ee <_printf_float+0xb6>
 8007cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cbe:	f10b 0b01 	add.w	fp, fp, #1
 8007cc2:	e7b9      	b.n	8007c38 <_printf_float+0x300>
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d1bf      	bne.n	8007c52 <_printf_float+0x31a>
 8007cd2:	e68c      	b.n	80079ee <_printf_float+0xb6>
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	eb08 020a 	add.w	r2, r8, sl
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1c2      	bne.n	8007c6a <_printf_float+0x332>
 8007ce4:	e683      	b.n	80079ee <_printf_float+0xb6>
 8007ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ce8:	2a01      	cmp	r2, #1
 8007cea:	dc01      	bgt.n	8007cf0 <_printf_float+0x3b8>
 8007cec:	07db      	lsls	r3, r3, #31
 8007cee:	d537      	bpl.n	8007d60 <_printf_float+0x428>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	47b8      	blx	r7
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f43f ae77 	beq.w	80079ee <_printf_float+0xb6>
 8007d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f43f ae6f 	beq.w	80079ee <_printf_float+0xb6>
 8007d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d14:	2200      	movs	r2, #0
 8007d16:	2300      	movs	r3, #0
 8007d18:	f7f8 fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8007d1c:	b9d8      	cbnz	r0, 8007d56 <_printf_float+0x41e>
 8007d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d20:	f108 0201 	add.w	r2, r8, #1
 8007d24:	3b01      	subs	r3, #1
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d10e      	bne.n	8007d4e <_printf_float+0x416>
 8007d30:	e65d      	b.n	80079ee <_printf_float+0xb6>
 8007d32:	2301      	movs	r3, #1
 8007d34:	464a      	mov	r2, r9
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f43f ae56 	beq.w	80079ee <_printf_float+0xb6>
 8007d42:	f108 0801 	add.w	r8, r8, #1
 8007d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	4543      	cmp	r3, r8
 8007d4c:	dcf1      	bgt.n	8007d32 <_printf_float+0x3fa>
 8007d4e:	4653      	mov	r3, sl
 8007d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d54:	e6e0      	b.n	8007b18 <_printf_float+0x1e0>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	f104 091a 	add.w	r9, r4, #26
 8007d5e:	e7f2      	b.n	8007d46 <_printf_float+0x40e>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4642      	mov	r2, r8
 8007d64:	e7df      	b.n	8007d26 <_printf_float+0x3ee>
 8007d66:	2301      	movs	r3, #1
 8007d68:	464a      	mov	r2, r9
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f ae3c 	beq.w	80079ee <_printf_float+0xb6>
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	68e3      	ldr	r3, [r4, #12]
 8007d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d7e:	1a5b      	subs	r3, r3, r1
 8007d80:	4543      	cmp	r3, r8
 8007d82:	dcf0      	bgt.n	8007d66 <_printf_float+0x42e>
 8007d84:	e6fd      	b.n	8007b82 <_printf_float+0x24a>
 8007d86:	f04f 0800 	mov.w	r8, #0
 8007d8a:	f104 0919 	add.w	r9, r4, #25
 8007d8e:	e7f4      	b.n	8007d7a <_printf_float+0x442>

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4616      	mov	r6, r2
 8007d96:	4699      	mov	r9, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	bfb8      	it	lt
 8007da2:	4613      	movlt	r3, r2
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007daa:	460c      	mov	r4, r1
 8007dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007db0:	b10a      	cbz	r2, 8007db6 <_printf_common+0x26>
 8007db2:	3301      	adds	r3, #1
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	0699      	lsls	r1, r3, #26
 8007dba:	bf42      	ittt	mi
 8007dbc:	6833      	ldrmi	r3, [r6, #0]
 8007dbe:	3302      	addmi	r3, #2
 8007dc0:	6033      	strmi	r3, [r6, #0]
 8007dc2:	6825      	ldr	r5, [r4, #0]
 8007dc4:	f015 0506 	ands.w	r5, r5, #6
 8007dc8:	d106      	bne.n	8007dd8 <_printf_common+0x48>
 8007dca:	f104 0a19 	add.w	sl, r4, #25
 8007dce:	68e3      	ldr	r3, [r4, #12]
 8007dd0:	6832      	ldr	r2, [r6, #0]
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dc28      	bgt.n	8007e2a <_printf_common+0x9a>
 8007dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ddc:	1e13      	subs	r3, r2, #0
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	bf18      	it	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	0692      	lsls	r2, r2, #26
 8007de6:	d42d      	bmi.n	8007e44 <_printf_common+0xb4>
 8007de8:	4649      	mov	r1, r9
 8007dea:	4638      	mov	r0, r7
 8007dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df0:	47c0      	blx	r8
 8007df2:	3001      	adds	r0, #1
 8007df4:	d020      	beq.n	8007e38 <_printf_common+0xa8>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	68e5      	ldr	r5, [r4, #12]
 8007dfa:	f003 0306 	and.w	r3, r3, #6
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	bf18      	it	ne
 8007e02:	2500      	movne	r5, #0
 8007e04:	6832      	ldr	r2, [r6, #0]
 8007e06:	f04f 0600 	mov.w	r6, #0
 8007e0a:	68a3      	ldr	r3, [r4, #8]
 8007e0c:	bf08      	it	eq
 8007e0e:	1aad      	subeq	r5, r5, r2
 8007e10:	6922      	ldr	r2, [r4, #16]
 8007e12:	bf08      	it	eq
 8007e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	bfc4      	itt	gt
 8007e1c:	1a9b      	subgt	r3, r3, r2
 8007e1e:	18ed      	addgt	r5, r5, r3
 8007e20:	341a      	adds	r4, #26
 8007e22:	42b5      	cmp	r5, r6
 8007e24:	d11a      	bne.n	8007e5c <_printf_common+0xcc>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e008      	b.n	8007e3c <_printf_common+0xac>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	4649      	mov	r1, r9
 8007e30:	4638      	mov	r0, r7
 8007e32:	47c0      	blx	r8
 8007e34:	3001      	adds	r0, #1
 8007e36:	d103      	bne.n	8007e40 <_printf_common+0xb0>
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e40:	3501      	adds	r5, #1
 8007e42:	e7c4      	b.n	8007dce <_printf_common+0x3e>
 8007e44:	2030      	movs	r0, #48	; 0x30
 8007e46:	18e1      	adds	r1, r4, r3
 8007e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e52:	4422      	add	r2, r4
 8007e54:	3302      	adds	r3, #2
 8007e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e5a:	e7c5      	b.n	8007de8 <_printf_common+0x58>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4649      	mov	r1, r9
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c0      	blx	r8
 8007e66:	3001      	adds	r0, #1
 8007e68:	d0e6      	beq.n	8007e38 <_printf_common+0xa8>
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7d9      	b.n	8007e22 <_printf_common+0x92>
	...

08007e70 <_printf_i>:
 8007e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	7e0f      	ldrb	r7, [r1, #24]
 8007e76:	4691      	mov	r9, r2
 8007e78:	2f78      	cmp	r7, #120	; 0x78
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	469a      	mov	sl, r3
 8007e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e86:	d807      	bhi.n	8007e98 <_printf_i+0x28>
 8007e88:	2f62      	cmp	r7, #98	; 0x62
 8007e8a:	d80a      	bhi.n	8007ea2 <_printf_i+0x32>
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	f000 80d9 	beq.w	8008044 <_printf_i+0x1d4>
 8007e92:	2f58      	cmp	r7, #88	; 0x58
 8007e94:	f000 80a4 	beq.w	8007fe0 <_printf_i+0x170>
 8007e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ea0:	e03a      	b.n	8007f18 <_printf_i+0xa8>
 8007ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ea6:	2b15      	cmp	r3, #21
 8007ea8:	d8f6      	bhi.n	8007e98 <_printf_i+0x28>
 8007eaa:	a101      	add	r1, pc, #4	; (adr r1, 8007eb0 <_printf_i+0x40>)
 8007eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007f1d 	.word	0x08007f1d
 8007eb8:	08007e99 	.word	0x08007e99
 8007ebc:	08007e99 	.word	0x08007e99
 8007ec0:	08007e99 	.word	0x08007e99
 8007ec4:	08007e99 	.word	0x08007e99
 8007ec8:	08007f1d 	.word	0x08007f1d
 8007ecc:	08007e99 	.word	0x08007e99
 8007ed0:	08007e99 	.word	0x08007e99
 8007ed4:	08007e99 	.word	0x08007e99
 8007ed8:	08007e99 	.word	0x08007e99
 8007edc:	0800802b 	.word	0x0800802b
 8007ee0:	08007f4d 	.word	0x08007f4d
 8007ee4:	0800800d 	.word	0x0800800d
 8007ee8:	08007e99 	.word	0x08007e99
 8007eec:	08007e99 	.word	0x08007e99
 8007ef0:	0800804d 	.word	0x0800804d
 8007ef4:	08007e99 	.word	0x08007e99
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007e99 	.word	0x08007e99
 8007f00:	08007e99 	.word	0x08007e99
 8007f04:	08008015 	.word	0x08008015
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	1d1a      	adds	r2, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	602a      	str	r2, [r5, #0]
 8007f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0a4      	b.n	8008066 <_printf_i+0x1f6>
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	6829      	ldr	r1, [r5, #0]
 8007f20:	0606      	lsls	r6, r0, #24
 8007f22:	f101 0304 	add.w	r3, r1, #4
 8007f26:	d50a      	bpl.n	8007f3e <_printf_i+0xce>
 8007f28:	680e      	ldr	r6, [r1, #0]
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	2e00      	cmp	r6, #0
 8007f2e:	da03      	bge.n	8007f38 <_printf_i+0xc8>
 8007f30:	232d      	movs	r3, #45	; 0x2d
 8007f32:	4276      	negs	r6, r6
 8007f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f38:	230a      	movs	r3, #10
 8007f3a:	485e      	ldr	r0, [pc, #376]	; (80080b4 <_printf_i+0x244>)
 8007f3c:	e019      	b.n	8007f72 <_printf_i+0x102>
 8007f3e:	680e      	ldr	r6, [r1, #0]
 8007f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	bf18      	it	ne
 8007f48:	b236      	sxthne	r6, r6
 8007f4a:	e7ef      	b.n	8007f2c <_printf_i+0xbc>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	6820      	ldr	r0, [r4, #0]
 8007f50:	1d19      	adds	r1, r3, #4
 8007f52:	6029      	str	r1, [r5, #0]
 8007f54:	0601      	lsls	r1, r0, #24
 8007f56:	d501      	bpl.n	8007f5c <_printf_i+0xec>
 8007f58:	681e      	ldr	r6, [r3, #0]
 8007f5a:	e002      	b.n	8007f62 <_printf_i+0xf2>
 8007f5c:	0646      	lsls	r6, r0, #25
 8007f5e:	d5fb      	bpl.n	8007f58 <_printf_i+0xe8>
 8007f60:	881e      	ldrh	r6, [r3, #0]
 8007f62:	2f6f      	cmp	r7, #111	; 0x6f
 8007f64:	bf0c      	ite	eq
 8007f66:	2308      	moveq	r3, #8
 8007f68:	230a      	movne	r3, #10
 8007f6a:	4852      	ldr	r0, [pc, #328]	; (80080b4 <_printf_i+0x244>)
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f72:	6865      	ldr	r5, [r4, #4]
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	bfa8      	it	ge
 8007f78:	6821      	ldrge	r1, [r4, #0]
 8007f7a:	60a5      	str	r5, [r4, #8]
 8007f7c:	bfa4      	itt	ge
 8007f7e:	f021 0104 	bicge.w	r1, r1, #4
 8007f82:	6021      	strge	r1, [r4, #0]
 8007f84:	b90e      	cbnz	r6, 8007f8a <_printf_i+0x11a>
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	d04d      	beq.n	8008026 <_printf_i+0x1b6>
 8007f8a:	4615      	mov	r5, r2
 8007f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f90:	fb03 6711 	mls	r7, r3, r1, r6
 8007f94:	5dc7      	ldrb	r7, [r0, r7]
 8007f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f9a:	4637      	mov	r7, r6
 8007f9c:	42bb      	cmp	r3, r7
 8007f9e:	460e      	mov	r6, r1
 8007fa0:	d9f4      	bls.n	8007f8c <_printf_i+0x11c>
 8007fa2:	2b08      	cmp	r3, #8
 8007fa4:	d10b      	bne.n	8007fbe <_printf_i+0x14e>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	07de      	lsls	r6, r3, #31
 8007faa:	d508      	bpl.n	8007fbe <_printf_i+0x14e>
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	6861      	ldr	r1, [r4, #4]
 8007fb0:	4299      	cmp	r1, r3
 8007fb2:	bfde      	ittt	le
 8007fb4:	2330      	movle	r3, #48	; 0x30
 8007fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fbe:	1b52      	subs	r2, r2, r5
 8007fc0:	6122      	str	r2, [r4, #16]
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f8cd a000 	str.w	sl, [sp]
 8007fcc:	aa03      	add	r2, sp, #12
 8007fce:	f7ff fedf 	bl	8007d90 <_printf_common>
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d14c      	bne.n	8008070 <_printf_i+0x200>
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fda:	b004      	add	sp, #16
 8007fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe0:	4834      	ldr	r0, [pc, #208]	; (80080b4 <_printf_i+0x244>)
 8007fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fe6:	6829      	ldr	r1, [r5, #0]
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fee:	6029      	str	r1, [r5, #0]
 8007ff0:	061d      	lsls	r5, r3, #24
 8007ff2:	d514      	bpl.n	800801e <_printf_i+0x1ae>
 8007ff4:	07df      	lsls	r7, r3, #31
 8007ff6:	bf44      	itt	mi
 8007ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8007ffc:	6023      	strmi	r3, [r4, #0]
 8007ffe:	b91e      	cbnz	r6, 8008008 <_printf_i+0x198>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	f023 0320 	bic.w	r3, r3, #32
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	2310      	movs	r3, #16
 800800a:	e7af      	b.n	8007f6c <_printf_i+0xfc>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	f043 0320 	orr.w	r3, r3, #32
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	2378      	movs	r3, #120	; 0x78
 8008016:	4828      	ldr	r0, [pc, #160]	; (80080b8 <_printf_i+0x248>)
 8008018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800801c:	e7e3      	b.n	8007fe6 <_printf_i+0x176>
 800801e:	0659      	lsls	r1, r3, #25
 8008020:	bf48      	it	mi
 8008022:	b2b6      	uxthmi	r6, r6
 8008024:	e7e6      	b.n	8007ff4 <_printf_i+0x184>
 8008026:	4615      	mov	r5, r2
 8008028:	e7bb      	b.n	8007fa2 <_printf_i+0x132>
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	6826      	ldr	r6, [r4, #0]
 800802e:	1d18      	adds	r0, r3, #4
 8008030:	6961      	ldr	r1, [r4, #20]
 8008032:	6028      	str	r0, [r5, #0]
 8008034:	0635      	lsls	r5, r6, #24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	d501      	bpl.n	800803e <_printf_i+0x1ce>
 800803a:	6019      	str	r1, [r3, #0]
 800803c:	e002      	b.n	8008044 <_printf_i+0x1d4>
 800803e:	0670      	lsls	r0, r6, #25
 8008040:	d5fb      	bpl.n	800803a <_printf_i+0x1ca>
 8008042:	8019      	strh	r1, [r3, #0]
 8008044:	2300      	movs	r3, #0
 8008046:	4615      	mov	r5, r2
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	e7ba      	b.n	8007fc2 <_printf_i+0x152>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	2100      	movs	r1, #0
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	602a      	str	r2, [r5, #0]
 8008054:	681d      	ldr	r5, [r3, #0]
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	4628      	mov	r0, r5
 800805a:	f000 ff03 	bl	8008e64 <memchr>
 800805e:	b108      	cbz	r0, 8008064 <_printf_i+0x1f4>
 8008060:	1b40      	subs	r0, r0, r5
 8008062:	6060      	str	r0, [r4, #4]
 8008064:	6863      	ldr	r3, [r4, #4]
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	2300      	movs	r3, #0
 800806a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800806e:	e7a8      	b.n	8007fc2 <_printf_i+0x152>
 8008070:	462a      	mov	r2, r5
 8008072:	4649      	mov	r1, r9
 8008074:	4640      	mov	r0, r8
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	47d0      	blx	sl
 800807a:	3001      	adds	r0, #1
 800807c:	d0ab      	beq.n	8007fd6 <_printf_i+0x166>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	079b      	lsls	r3, r3, #30
 8008082:	d413      	bmi.n	80080ac <_printf_i+0x23c>
 8008084:	68e0      	ldr	r0, [r4, #12]
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	4298      	cmp	r0, r3
 800808a:	bfb8      	it	lt
 800808c:	4618      	movlt	r0, r3
 800808e:	e7a4      	b.n	8007fda <_printf_i+0x16a>
 8008090:	2301      	movs	r3, #1
 8008092:	4632      	mov	r2, r6
 8008094:	4649      	mov	r1, r9
 8008096:	4640      	mov	r0, r8
 8008098:	47d0      	blx	sl
 800809a:	3001      	adds	r0, #1
 800809c:	d09b      	beq.n	8007fd6 <_printf_i+0x166>
 800809e:	3501      	adds	r5, #1
 80080a0:	68e3      	ldr	r3, [r4, #12]
 80080a2:	9903      	ldr	r1, [sp, #12]
 80080a4:	1a5b      	subs	r3, r3, r1
 80080a6:	42ab      	cmp	r3, r5
 80080a8:	dcf2      	bgt.n	8008090 <_printf_i+0x220>
 80080aa:	e7eb      	b.n	8008084 <_printf_i+0x214>
 80080ac:	2500      	movs	r5, #0
 80080ae:	f104 0619 	add.w	r6, r4, #25
 80080b2:	e7f5      	b.n	80080a0 <_printf_i+0x230>
 80080b4:	0800a532 	.word	0x0800a532
 80080b8:	0800a543 	.word	0x0800a543

080080bc <realloc>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <realloc+0xc>)
 80080be:	460a      	mov	r2, r1
 80080c0:	4601      	mov	r1, r0
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	f001 bb4e 	b.w	8009764 <_realloc_r>
 80080c8:	200000c4 	.word	0x200000c4

080080cc <_raise_r>:
 80080cc:	291f      	cmp	r1, #31
 80080ce:	b538      	push	{r3, r4, r5, lr}
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
 80080d4:	d904      	bls.n	80080e0 <_raise_r+0x14>
 80080d6:	2316      	movs	r3, #22
 80080d8:	6003      	str	r3, [r0, #0]
 80080da:	f04f 30ff 	mov.w	r0, #4294967295
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080e2:	b112      	cbz	r2, 80080ea <_raise_r+0x1e>
 80080e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080e8:	b94b      	cbnz	r3, 80080fe <_raise_r+0x32>
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f830 	bl	8008150 <_getpid_r>
 80080f0:	462a      	mov	r2, r5
 80080f2:	4601      	mov	r1, r0
 80080f4:	4620      	mov	r0, r4
 80080f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fa:	f000 b817 	b.w	800812c <_kill_r>
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d00a      	beq.n	8008118 <_raise_r+0x4c>
 8008102:	1c59      	adds	r1, r3, #1
 8008104:	d103      	bne.n	800810e <_raise_r+0x42>
 8008106:	2316      	movs	r3, #22
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	2001      	movs	r0, #1
 800810c:	e7e7      	b.n	80080de <_raise_r+0x12>
 800810e:	2400      	movs	r4, #0
 8008110:	4628      	mov	r0, r5
 8008112:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008116:	4798      	blx	r3
 8008118:	2000      	movs	r0, #0
 800811a:	e7e0      	b.n	80080de <_raise_r+0x12>

0800811c <raise>:
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <raise+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f7ff bfd3 	b.w	80080cc <_raise_r>
 8008126:	bf00      	nop
 8008128:	200000c4 	.word	0x200000c4

0800812c <_kill_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	2300      	movs	r3, #0
 8008130:	4d06      	ldr	r5, [pc, #24]	; (800814c <_kill_r+0x20>)
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	4611      	mov	r1, r2
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	f7fb ffa2 	bl	8004082 <_kill>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d102      	bne.n	8008148 <_kill_r+0x1c>
 8008142:	682b      	ldr	r3, [r5, #0]
 8008144:	b103      	cbz	r3, 8008148 <_kill_r+0x1c>
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	bd38      	pop	{r3, r4, r5, pc}
 800814a:	bf00      	nop
 800814c:	20000e38 	.word	0x20000e38

08008150 <_getpid_r>:
 8008150:	f7fb bf90 	b.w	8004074 <_getpid>

08008154 <quorem>:
 8008154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	6903      	ldr	r3, [r0, #16]
 800815a:	690c      	ldr	r4, [r1, #16]
 800815c:	4607      	mov	r7, r0
 800815e:	42a3      	cmp	r3, r4
 8008160:	f2c0 8082 	blt.w	8008268 <quorem+0x114>
 8008164:	3c01      	subs	r4, #1
 8008166:	f100 0514 	add.w	r5, r0, #20
 800816a:	f101 0814 	add.w	r8, r1, #20
 800816e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800817c:	3301      	adds	r3, #1
 800817e:	429a      	cmp	r2, r3
 8008180:	fbb2 f6f3 	udiv	r6, r2, r3
 8008184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800818c:	d331      	bcc.n	80081f2 <quorem+0x9e>
 800818e:	f04f 0e00 	mov.w	lr, #0
 8008192:	4640      	mov	r0, r8
 8008194:	46ac      	mov	ip, r5
 8008196:	46f2      	mov	sl, lr
 8008198:	f850 2b04 	ldr.w	r2, [r0], #4
 800819c:	b293      	uxth	r3, r2
 800819e:	fb06 e303 	mla	r3, r6, r3, lr
 80081a2:	0c12      	lsrs	r2, r2, #16
 80081a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	fb06 e202 	mla	r2, r6, r2, lr
 80081ae:	ebaa 0303 	sub.w	r3, sl, r3
 80081b2:	f8dc a000 	ldr.w	sl, [ip]
 80081b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ba:	fa1f fa8a 	uxth.w	sl, sl
 80081be:	4453      	add	r3, sl
 80081c0:	f8dc a000 	ldr.w	sl, [ip]
 80081c4:	b292      	uxth	r2, r2
 80081c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d4:	4581      	cmp	r9, r0
 80081d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081da:	f84c 3b04 	str.w	r3, [ip], #4
 80081de:	d2db      	bcs.n	8008198 <quorem+0x44>
 80081e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80081e4:	b92b      	cbnz	r3, 80081f2 <quorem+0x9e>
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	3b04      	subs	r3, #4
 80081ea:	429d      	cmp	r5, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	d32f      	bcc.n	8008250 <quorem+0xfc>
 80081f0:	613c      	str	r4, [r7, #16]
 80081f2:	4638      	mov	r0, r7
 80081f4:	f001 f8c2 	bl	800937c <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	db25      	blt.n	8008248 <quorem+0xf4>
 80081fc:	4628      	mov	r0, r5
 80081fe:	f04f 0c00 	mov.w	ip, #0
 8008202:	3601      	adds	r6, #1
 8008204:	f858 1b04 	ldr.w	r1, [r8], #4
 8008208:	f8d0 e000 	ldr.w	lr, [r0]
 800820c:	b28b      	uxth	r3, r1
 800820e:	ebac 0303 	sub.w	r3, ip, r3
 8008212:	fa1f f28e 	uxth.w	r2, lr
 8008216:	4413      	add	r3, r2
 8008218:	0c0a      	lsrs	r2, r1, #16
 800821a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800821e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008228:	45c1      	cmp	r9, r8
 800822a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800822e:	f840 3b04 	str.w	r3, [r0], #4
 8008232:	d2e7      	bcs.n	8008204 <quorem+0xb0>
 8008234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800823c:	b922      	cbnz	r2, 8008248 <quorem+0xf4>
 800823e:	3b04      	subs	r3, #4
 8008240:	429d      	cmp	r5, r3
 8008242:	461a      	mov	r2, r3
 8008244:	d30a      	bcc.n	800825c <quorem+0x108>
 8008246:	613c      	str	r4, [r7, #16]
 8008248:	4630      	mov	r0, r6
 800824a:	b003      	add	sp, #12
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	3b04      	subs	r3, #4
 8008254:	2a00      	cmp	r2, #0
 8008256:	d1cb      	bne.n	80081f0 <quorem+0x9c>
 8008258:	3c01      	subs	r4, #1
 800825a:	e7c6      	b.n	80081ea <quorem+0x96>
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	3b04      	subs	r3, #4
 8008260:	2a00      	cmp	r2, #0
 8008262:	d1f0      	bne.n	8008246 <quorem+0xf2>
 8008264:	3c01      	subs	r4, #1
 8008266:	e7eb      	b.n	8008240 <quorem+0xec>
 8008268:	2000      	movs	r0, #0
 800826a:	e7ee      	b.n	800824a <quorem+0xf6>
 800826c:	0000      	movs	r0, r0
	...

08008270 <_dtoa_r>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	4616      	mov	r6, r2
 8008276:	461f      	mov	r7, r3
 8008278:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800827a:	b099      	sub	sp, #100	; 0x64
 800827c:	4605      	mov	r5, r0
 800827e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008282:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008286:	b974      	cbnz	r4, 80082a6 <_dtoa_r+0x36>
 8008288:	2010      	movs	r0, #16
 800828a:	f000 fde3 	bl	8008e54 <malloc>
 800828e:	4602      	mov	r2, r0
 8008290:	6268      	str	r0, [r5, #36]	; 0x24
 8008292:	b920      	cbnz	r0, 800829e <_dtoa_r+0x2e>
 8008294:	21ea      	movs	r1, #234	; 0xea
 8008296:	4ba8      	ldr	r3, [pc, #672]	; (8008538 <_dtoa_r+0x2c8>)
 8008298:	48a8      	ldr	r0, [pc, #672]	; (800853c <_dtoa_r+0x2cc>)
 800829a:	f001 faa3 	bl	80097e4 <__assert_func>
 800829e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a2:	6004      	str	r4, [r0, #0]
 80082a4:	60c4      	str	r4, [r0, #12]
 80082a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082a8:	6819      	ldr	r1, [r3, #0]
 80082aa:	b151      	cbz	r1, 80082c2 <_dtoa_r+0x52>
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	2301      	movs	r3, #1
 80082b0:	4093      	lsls	r3, r2
 80082b2:	604a      	str	r2, [r1, #4]
 80082b4:	608b      	str	r3, [r1, #8]
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 fe22 	bl	8008f00 <_Bfree>
 80082bc:	2200      	movs	r2, #0
 80082be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	1e3b      	subs	r3, r7, #0
 80082c4:	bfaf      	iteee	ge
 80082c6:	2300      	movge	r3, #0
 80082c8:	2201      	movlt	r2, #1
 80082ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082ce:	9305      	strlt	r3, [sp, #20]
 80082d0:	bfa8      	it	ge
 80082d2:	f8c8 3000 	strge.w	r3, [r8]
 80082d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80082da:	4b99      	ldr	r3, [pc, #612]	; (8008540 <_dtoa_r+0x2d0>)
 80082dc:	bfb8      	it	lt
 80082de:	f8c8 2000 	strlt.w	r2, [r8]
 80082e2:	ea33 0309 	bics.w	r3, r3, r9
 80082e6:	d119      	bne.n	800831c <_dtoa_r+0xac>
 80082e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80082ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082f4:	4333      	orrs	r3, r6
 80082f6:	f000 857f 	beq.w	8008df8 <_dtoa_r+0xb88>
 80082fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082fc:	b953      	cbnz	r3, 8008314 <_dtoa_r+0xa4>
 80082fe:	4b91      	ldr	r3, [pc, #580]	; (8008544 <_dtoa_r+0x2d4>)
 8008300:	e022      	b.n	8008348 <_dtoa_r+0xd8>
 8008302:	4b91      	ldr	r3, [pc, #580]	; (8008548 <_dtoa_r+0x2d8>)
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	3308      	adds	r3, #8
 8008308:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	9803      	ldr	r0, [sp, #12]
 800830e:	b019      	add	sp, #100	; 0x64
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	4b8b      	ldr	r3, [pc, #556]	; (8008544 <_dtoa_r+0x2d4>)
 8008316:	9303      	str	r3, [sp, #12]
 8008318:	3303      	adds	r3, #3
 800831a:	e7f5      	b.n	8008308 <_dtoa_r+0x98>
 800831c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008320:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008328:	2200      	movs	r2, #0
 800832a:	2300      	movs	r3, #0
 800832c:	f7f8 fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008330:	4680      	mov	r8, r0
 8008332:	b158      	cbz	r0, 800834c <_dtoa_r+0xdc>
 8008334:	2301      	movs	r3, #1
 8008336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8558 	beq.w	8008df2 <_dtoa_r+0xb82>
 8008342:	4882      	ldr	r0, [pc, #520]	; (800854c <_dtoa_r+0x2dc>)
 8008344:	6018      	str	r0, [r3, #0]
 8008346:	1e43      	subs	r3, r0, #1
 8008348:	9303      	str	r3, [sp, #12]
 800834a:	e7df      	b.n	800830c <_dtoa_r+0x9c>
 800834c:	ab16      	add	r3, sp, #88	; 0x58
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	ab17      	add	r3, sp, #92	; 0x5c
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	4628      	mov	r0, r5
 8008356:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800835a:	f001 f8b7 	bl	80094cc <__d2b>
 800835e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008362:	4683      	mov	fp, r0
 8008364:	2c00      	cmp	r4, #0
 8008366:	d07f      	beq.n	8008468 <_dtoa_r+0x1f8>
 8008368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800836c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008376:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800837a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800837e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008382:	2200      	movs	r2, #0
 8008384:	4b72      	ldr	r3, [pc, #456]	; (8008550 <_dtoa_r+0x2e0>)
 8008386:	f7f7 feef 	bl	8000168 <__aeabi_dsub>
 800838a:	a365      	add	r3, pc, #404	; (adr r3, 8008520 <_dtoa_r+0x2b0>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f8 f8a2 	bl	80004d8 <__aeabi_dmul>
 8008394:	a364      	add	r3, pc, #400	; (adr r3, 8008528 <_dtoa_r+0x2b8>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f7 fee7 	bl	800016c <__adddf3>
 800839e:	4606      	mov	r6, r0
 80083a0:	4620      	mov	r0, r4
 80083a2:	460f      	mov	r7, r1
 80083a4:	f7f8 f82e 	bl	8000404 <__aeabi_i2d>
 80083a8:	a361      	add	r3, pc, #388	; (adr r3, 8008530 <_dtoa_r+0x2c0>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f8 f893 	bl	80004d8 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4630      	mov	r0, r6
 80083b8:	4639      	mov	r1, r7
 80083ba:	f7f7 fed7 	bl	800016c <__adddf3>
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	f7f8 fb39 	bl	8000a38 <__aeabi_d2iz>
 80083c6:	2200      	movs	r2, #0
 80083c8:	4682      	mov	sl, r0
 80083ca:	2300      	movs	r3, #0
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f8 faf4 	bl	80009bc <__aeabi_dcmplt>
 80083d4:	b148      	cbz	r0, 80083ea <_dtoa_r+0x17a>
 80083d6:	4650      	mov	r0, sl
 80083d8:	f7f8 f814 	bl	8000404 <__aeabi_i2d>
 80083dc:	4632      	mov	r2, r6
 80083de:	463b      	mov	r3, r7
 80083e0:	f7f8 fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80083e4:	b908      	cbnz	r0, 80083ea <_dtoa_r+0x17a>
 80083e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ea:	f1ba 0f16 	cmp.w	sl, #22
 80083ee:	d858      	bhi.n	80084a2 <_dtoa_r+0x232>
 80083f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083f4:	4b57      	ldr	r3, [pc, #348]	; (8008554 <_dtoa_r+0x2e4>)
 80083f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f8 fadd 	bl	80009bc <__aeabi_dcmplt>
 8008402:	2800      	cmp	r0, #0
 8008404:	d04f      	beq.n	80084a6 <_dtoa_r+0x236>
 8008406:	2300      	movs	r3, #0
 8008408:	f10a 3aff 	add.w	sl, sl, #4294967295
 800840c:	930f      	str	r3, [sp, #60]	; 0x3c
 800840e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008410:	1b1c      	subs	r4, r3, r4
 8008412:	1e63      	subs	r3, r4, #1
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	bf49      	itett	mi
 8008418:	f1c4 0301 	rsbmi	r3, r4, #1
 800841c:	2300      	movpl	r3, #0
 800841e:	9306      	strmi	r3, [sp, #24]
 8008420:	2300      	movmi	r3, #0
 8008422:	bf54      	ite	pl
 8008424:	9306      	strpl	r3, [sp, #24]
 8008426:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	db3d      	blt.n	80084aa <_dtoa_r+0x23a>
 800842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008430:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008434:	4453      	add	r3, sl
 8008436:	9309      	str	r3, [sp, #36]	; 0x24
 8008438:	2300      	movs	r3, #0
 800843a:	930a      	str	r3, [sp, #40]	; 0x28
 800843c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800843e:	2b09      	cmp	r3, #9
 8008440:	f200 808c 	bhi.w	800855c <_dtoa_r+0x2ec>
 8008444:	2b05      	cmp	r3, #5
 8008446:	bfc4      	itt	gt
 8008448:	3b04      	subgt	r3, #4
 800844a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800844c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800844e:	bfc8      	it	gt
 8008450:	2400      	movgt	r4, #0
 8008452:	f1a3 0302 	sub.w	r3, r3, #2
 8008456:	bfd8      	it	le
 8008458:	2401      	movle	r4, #1
 800845a:	2b03      	cmp	r3, #3
 800845c:	f200 808a 	bhi.w	8008574 <_dtoa_r+0x304>
 8008460:	e8df f003 	tbb	[pc, r3]
 8008464:	5b4d4f2d 	.word	0x5b4d4f2d
 8008468:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800846c:	441c      	add	r4, r3
 800846e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008472:	2b20      	cmp	r3, #32
 8008474:	bfc3      	ittte	gt
 8008476:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800847a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800847e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008482:	f1c3 0320 	rsble	r3, r3, #32
 8008486:	bfc6      	itte	gt
 8008488:	fa26 f000 	lsrgt.w	r0, r6, r0
 800848c:	4318      	orrgt	r0, r3
 800848e:	fa06 f003 	lslle.w	r0, r6, r3
 8008492:	f7f7 ffa7 	bl	80003e4 <__aeabi_ui2d>
 8008496:	2301      	movs	r3, #1
 8008498:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800849c:	3c01      	subs	r4, #1
 800849e:	9313      	str	r3, [sp, #76]	; 0x4c
 80084a0:	e76f      	b.n	8008382 <_dtoa_r+0x112>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e7b2      	b.n	800840c <_dtoa_r+0x19c>
 80084a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80084a8:	e7b1      	b.n	800840e <_dtoa_r+0x19e>
 80084aa:	9b06      	ldr	r3, [sp, #24]
 80084ac:	eba3 030a 	sub.w	r3, r3, sl
 80084b0:	9306      	str	r3, [sp, #24]
 80084b2:	f1ca 0300 	rsb	r3, sl, #0
 80084b6:	930a      	str	r3, [sp, #40]	; 0x28
 80084b8:	2300      	movs	r3, #0
 80084ba:	930e      	str	r3, [sp, #56]	; 0x38
 80084bc:	e7be      	b.n	800843c <_dtoa_r+0x1cc>
 80084be:	2300      	movs	r3, #0
 80084c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dc58      	bgt.n	800857a <_dtoa_r+0x30a>
 80084c8:	f04f 0901 	mov.w	r9, #1
 80084cc:	464b      	mov	r3, r9
 80084ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80084d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80084d6:	2200      	movs	r2, #0
 80084d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80084da:	6042      	str	r2, [r0, #4]
 80084dc:	2204      	movs	r2, #4
 80084de:	f102 0614 	add.w	r6, r2, #20
 80084e2:	429e      	cmp	r6, r3
 80084e4:	6841      	ldr	r1, [r0, #4]
 80084e6:	d94e      	bls.n	8008586 <_dtoa_r+0x316>
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 fcc9 	bl	8008e80 <_Balloc>
 80084ee:	9003      	str	r0, [sp, #12]
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d14c      	bne.n	800858e <_dtoa_r+0x31e>
 80084f4:	4602      	mov	r2, r0
 80084f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084fa:	4b17      	ldr	r3, [pc, #92]	; (8008558 <_dtoa_r+0x2e8>)
 80084fc:	e6cc      	b.n	8008298 <_dtoa_r+0x28>
 80084fe:	2301      	movs	r3, #1
 8008500:	e7de      	b.n	80084c0 <_dtoa_r+0x250>
 8008502:	2300      	movs	r3, #0
 8008504:	930b      	str	r3, [sp, #44]	; 0x2c
 8008506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008508:	eb0a 0903 	add.w	r9, sl, r3
 800850c:	f109 0301 	add.w	r3, r9, #1
 8008510:	2b01      	cmp	r3, #1
 8008512:	9308      	str	r3, [sp, #32]
 8008514:	bfb8      	it	lt
 8008516:	2301      	movlt	r3, #1
 8008518:	e7dd      	b.n	80084d6 <_dtoa_r+0x266>
 800851a:	2301      	movs	r3, #1
 800851c:	e7f2      	b.n	8008504 <_dtoa_r+0x294>
 800851e:	bf00      	nop
 8008520:	636f4361 	.word	0x636f4361
 8008524:	3fd287a7 	.word	0x3fd287a7
 8008528:	8b60c8b3 	.word	0x8b60c8b3
 800852c:	3fc68a28 	.word	0x3fc68a28
 8008530:	509f79fb 	.word	0x509f79fb
 8008534:	3fd34413 	.word	0x3fd34413
 8008538:	0800a561 	.word	0x0800a561
 800853c:	0800a578 	.word	0x0800a578
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	0800a55d 	.word	0x0800a55d
 8008548:	0800a554 	.word	0x0800a554
 800854c:	0800a531 	.word	0x0800a531
 8008550:	3ff80000 	.word	0x3ff80000
 8008554:	0800a668 	.word	0x0800a668
 8008558:	0800a5d3 	.word	0x0800a5d3
 800855c:	2401      	movs	r4, #1
 800855e:	2300      	movs	r3, #0
 8008560:	940b      	str	r4, [sp, #44]	; 0x2c
 8008562:	9322      	str	r3, [sp, #136]	; 0x88
 8008564:	f04f 39ff 	mov.w	r9, #4294967295
 8008568:	2200      	movs	r2, #0
 800856a:	2312      	movs	r3, #18
 800856c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008570:	9223      	str	r2, [sp, #140]	; 0x8c
 8008572:	e7b0      	b.n	80084d6 <_dtoa_r+0x266>
 8008574:	2301      	movs	r3, #1
 8008576:	930b      	str	r3, [sp, #44]	; 0x2c
 8008578:	e7f4      	b.n	8008564 <_dtoa_r+0x2f4>
 800857a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800857e:	464b      	mov	r3, r9
 8008580:	f8cd 9020 	str.w	r9, [sp, #32]
 8008584:	e7a7      	b.n	80084d6 <_dtoa_r+0x266>
 8008586:	3101      	adds	r1, #1
 8008588:	6041      	str	r1, [r0, #4]
 800858a:	0052      	lsls	r2, r2, #1
 800858c:	e7a7      	b.n	80084de <_dtoa_r+0x26e>
 800858e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008590:	9a03      	ldr	r2, [sp, #12]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	9b08      	ldr	r3, [sp, #32]
 8008596:	2b0e      	cmp	r3, #14
 8008598:	f200 80a8 	bhi.w	80086ec <_dtoa_r+0x47c>
 800859c:	2c00      	cmp	r4, #0
 800859e:	f000 80a5 	beq.w	80086ec <_dtoa_r+0x47c>
 80085a2:	f1ba 0f00 	cmp.w	sl, #0
 80085a6:	dd34      	ble.n	8008612 <_dtoa_r+0x3a2>
 80085a8:	4a9a      	ldr	r2, [pc, #616]	; (8008814 <_dtoa_r+0x5a4>)
 80085aa:	f00a 030f 	and.w	r3, sl, #15
 80085ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80085b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80085be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80085c2:	d016      	beq.n	80085f2 <_dtoa_r+0x382>
 80085c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085c8:	4b93      	ldr	r3, [pc, #588]	; (8008818 <_dtoa_r+0x5a8>)
 80085ca:	2703      	movs	r7, #3
 80085cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085d0:	f7f8 f8ac 	bl	800072c <__aeabi_ddiv>
 80085d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085d8:	f004 040f 	and.w	r4, r4, #15
 80085dc:	4e8e      	ldr	r6, [pc, #568]	; (8008818 <_dtoa_r+0x5a8>)
 80085de:	b954      	cbnz	r4, 80085f6 <_dtoa_r+0x386>
 80085e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e8:	f7f8 f8a0 	bl	800072c <__aeabi_ddiv>
 80085ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085f0:	e029      	b.n	8008646 <_dtoa_r+0x3d6>
 80085f2:	2702      	movs	r7, #2
 80085f4:	e7f2      	b.n	80085dc <_dtoa_r+0x36c>
 80085f6:	07e1      	lsls	r1, r4, #31
 80085f8:	d508      	bpl.n	800860c <_dtoa_r+0x39c>
 80085fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008602:	f7f7 ff69 	bl	80004d8 <__aeabi_dmul>
 8008606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800860a:	3701      	adds	r7, #1
 800860c:	1064      	asrs	r4, r4, #1
 800860e:	3608      	adds	r6, #8
 8008610:	e7e5      	b.n	80085de <_dtoa_r+0x36e>
 8008612:	f000 80a5 	beq.w	8008760 <_dtoa_r+0x4f0>
 8008616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800861a:	f1ca 0400 	rsb	r4, sl, #0
 800861e:	4b7d      	ldr	r3, [pc, #500]	; (8008814 <_dtoa_r+0x5a4>)
 8008620:	f004 020f 	and.w	r2, r4, #15
 8008624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f7 ff54 	bl	80004d8 <__aeabi_dmul>
 8008630:	2702      	movs	r7, #2
 8008632:	2300      	movs	r3, #0
 8008634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008638:	4e77      	ldr	r6, [pc, #476]	; (8008818 <_dtoa_r+0x5a8>)
 800863a:	1124      	asrs	r4, r4, #4
 800863c:	2c00      	cmp	r4, #0
 800863e:	f040 8084 	bne.w	800874a <_dtoa_r+0x4da>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1d2      	bne.n	80085ec <_dtoa_r+0x37c>
 8008646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 808b 	beq.w	8008764 <_dtoa_r+0x4f4>
 800864e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008652:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008656:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800865a:	2200      	movs	r2, #0
 800865c:	4b6f      	ldr	r3, [pc, #444]	; (800881c <_dtoa_r+0x5ac>)
 800865e:	f7f8 f9ad 	bl	80009bc <__aeabi_dcmplt>
 8008662:	2800      	cmp	r0, #0
 8008664:	d07e      	beq.n	8008764 <_dtoa_r+0x4f4>
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d07b      	beq.n	8008764 <_dtoa_r+0x4f4>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	dd38      	ble.n	80086e4 <_dtoa_r+0x474>
 8008672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008676:	2200      	movs	r2, #0
 8008678:	4b69      	ldr	r3, [pc, #420]	; (8008820 <_dtoa_r+0x5b0>)
 800867a:	f7f7 ff2d 	bl	80004d8 <__aeabi_dmul>
 800867e:	464c      	mov	r4, r9
 8008680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008684:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008688:	3701      	adds	r7, #1
 800868a:	4638      	mov	r0, r7
 800868c:	f7f7 feba 	bl	8000404 <__aeabi_i2d>
 8008690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008694:	f7f7 ff20 	bl	80004d8 <__aeabi_dmul>
 8008698:	2200      	movs	r2, #0
 800869a:	4b62      	ldr	r3, [pc, #392]	; (8008824 <_dtoa_r+0x5b4>)
 800869c:	f7f7 fd66 	bl	800016c <__adddf3>
 80086a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80086a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086a8:	9611      	str	r6, [sp, #68]	; 0x44
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	d15d      	bne.n	800876a <_dtoa_r+0x4fa>
 80086ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086b2:	2200      	movs	r2, #0
 80086b4:	4b5c      	ldr	r3, [pc, #368]	; (8008828 <_dtoa_r+0x5b8>)
 80086b6:	f7f7 fd57 	bl	8000168 <__aeabi_dsub>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086c2:	4633      	mov	r3, r6
 80086c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086c6:	f7f8 f997 	bl	80009f8 <__aeabi_dcmpgt>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f040 829c 	bne.w	8008c08 <_dtoa_r+0x998>
 80086d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80086da:	f7f8 f96f 	bl	80009bc <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f040 8290 	bne.w	8008c04 <_dtoa_r+0x994>
 80086e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80086e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f2c0 8152 	blt.w	8008998 <_dtoa_r+0x728>
 80086f4:	f1ba 0f0e 	cmp.w	sl, #14
 80086f8:	f300 814e 	bgt.w	8008998 <_dtoa_r+0x728>
 80086fc:	4b45      	ldr	r3, [pc, #276]	; (8008814 <_dtoa_r+0x5a4>)
 80086fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008702:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008706:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800870a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800870c:	2b00      	cmp	r3, #0
 800870e:	f280 80db 	bge.w	80088c8 <_dtoa_r+0x658>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f300 80d7 	bgt.w	80088c8 <_dtoa_r+0x658>
 800871a:	f040 8272 	bne.w	8008c02 <_dtoa_r+0x992>
 800871e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008722:	2200      	movs	r2, #0
 8008724:	4b40      	ldr	r3, [pc, #256]	; (8008828 <_dtoa_r+0x5b8>)
 8008726:	f7f7 fed7 	bl	80004d8 <__aeabi_dmul>
 800872a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800872e:	f7f8 f959 	bl	80009e4 <__aeabi_dcmpge>
 8008732:	9c08      	ldr	r4, [sp, #32]
 8008734:	4626      	mov	r6, r4
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8248 	bne.w	8008bcc <_dtoa_r+0x95c>
 800873c:	2331      	movs	r3, #49	; 0x31
 800873e:	9f03      	ldr	r7, [sp, #12]
 8008740:	f10a 0a01 	add.w	sl, sl, #1
 8008744:	f807 3b01 	strb.w	r3, [r7], #1
 8008748:	e244      	b.n	8008bd4 <_dtoa_r+0x964>
 800874a:	07e2      	lsls	r2, r4, #31
 800874c:	d505      	bpl.n	800875a <_dtoa_r+0x4ea>
 800874e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008752:	f7f7 fec1 	bl	80004d8 <__aeabi_dmul>
 8008756:	2301      	movs	r3, #1
 8008758:	3701      	adds	r7, #1
 800875a:	1064      	asrs	r4, r4, #1
 800875c:	3608      	adds	r6, #8
 800875e:	e76d      	b.n	800863c <_dtoa_r+0x3cc>
 8008760:	2702      	movs	r7, #2
 8008762:	e770      	b.n	8008646 <_dtoa_r+0x3d6>
 8008764:	46d0      	mov	r8, sl
 8008766:	9c08      	ldr	r4, [sp, #32]
 8008768:	e78f      	b.n	800868a <_dtoa_r+0x41a>
 800876a:	9903      	ldr	r1, [sp, #12]
 800876c:	4b29      	ldr	r3, [pc, #164]	; (8008814 <_dtoa_r+0x5a4>)
 800876e:	4421      	add	r1, r4
 8008770:	9112      	str	r1, [sp, #72]	; 0x48
 8008772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008774:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008778:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800877c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008780:	2900      	cmp	r1, #0
 8008782:	d055      	beq.n	8008830 <_dtoa_r+0x5c0>
 8008784:	2000      	movs	r0, #0
 8008786:	4929      	ldr	r1, [pc, #164]	; (800882c <_dtoa_r+0x5bc>)
 8008788:	f7f7 ffd0 	bl	800072c <__aeabi_ddiv>
 800878c:	463b      	mov	r3, r7
 800878e:	4632      	mov	r2, r6
 8008790:	f7f7 fcea 	bl	8000168 <__aeabi_dsub>
 8008794:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008798:	9f03      	ldr	r7, [sp, #12]
 800879a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800879e:	f7f8 f94b 	bl	8000a38 <__aeabi_d2iz>
 80087a2:	4604      	mov	r4, r0
 80087a4:	f7f7 fe2e 	bl	8000404 <__aeabi_i2d>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087b0:	f7f7 fcda 	bl	8000168 <__aeabi_dsub>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	3430      	adds	r4, #48	; 0x30
 80087ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087c2:	f807 4b01 	strb.w	r4, [r7], #1
 80087c6:	f7f8 f8f9 	bl	80009bc <__aeabi_dcmplt>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d174      	bne.n	80088b8 <_dtoa_r+0x648>
 80087ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d2:	2000      	movs	r0, #0
 80087d4:	4911      	ldr	r1, [pc, #68]	; (800881c <_dtoa_r+0x5ac>)
 80087d6:	f7f7 fcc7 	bl	8000168 <__aeabi_dsub>
 80087da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087de:	f7f8 f8ed 	bl	80009bc <__aeabi_dcmplt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f040 80b7 	bne.w	8008956 <_dtoa_r+0x6e6>
 80087e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ea:	429f      	cmp	r7, r3
 80087ec:	f43f af7a 	beq.w	80086e4 <_dtoa_r+0x474>
 80087f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087f4:	2200      	movs	r2, #0
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <_dtoa_r+0x5b0>)
 80087f8:	f7f7 fe6e 	bl	80004d8 <__aeabi_dmul>
 80087fc:	2200      	movs	r2, #0
 80087fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <_dtoa_r+0x5b0>)
 8008808:	f7f7 fe66 	bl	80004d8 <__aeabi_dmul>
 800880c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008810:	e7c3      	b.n	800879a <_dtoa_r+0x52a>
 8008812:	bf00      	nop
 8008814:	0800a668 	.word	0x0800a668
 8008818:	0800a640 	.word	0x0800a640
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	40240000 	.word	0x40240000
 8008824:	401c0000 	.word	0x401c0000
 8008828:	40140000 	.word	0x40140000
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 fe50 	bl	80004d8 <__aeabi_dmul>
 8008838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800883a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800883e:	9c03      	ldr	r4, [sp, #12]
 8008840:	9314      	str	r3, [sp, #80]	; 0x50
 8008842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008846:	f7f8 f8f7 	bl	8000a38 <__aeabi_d2iz>
 800884a:	9015      	str	r0, [sp, #84]	; 0x54
 800884c:	f7f7 fdda 	bl	8000404 <__aeabi_i2d>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008858:	f7f7 fc86 	bl	8000168 <__aeabi_dsub>
 800885c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800885e:	4606      	mov	r6, r0
 8008860:	3330      	adds	r3, #48	; 0x30
 8008862:	f804 3b01 	strb.w	r3, [r4], #1
 8008866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008868:	460f      	mov	r7, r1
 800886a:	429c      	cmp	r4, r3
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	d124      	bne.n	80088bc <_dtoa_r+0x64c>
 8008872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008876:	4bb0      	ldr	r3, [pc, #704]	; (8008b38 <_dtoa_r+0x8c8>)
 8008878:	f7f7 fc78 	bl	800016c <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f8 f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 8008888:	2800      	cmp	r0, #0
 800888a:	d163      	bne.n	8008954 <_dtoa_r+0x6e4>
 800888c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008890:	2000      	movs	r0, #0
 8008892:	49a9      	ldr	r1, [pc, #676]	; (8008b38 <_dtoa_r+0x8c8>)
 8008894:	f7f7 fc68 	bl	8000168 <__aeabi_dsub>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4630      	mov	r0, r6
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f8 f88c 	bl	80009bc <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f43f af1d 	beq.w	80086e4 <_dtoa_r+0x474>
 80088aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80088ac:	1e7b      	subs	r3, r7, #1
 80088ae:	9314      	str	r3, [sp, #80]	; 0x50
 80088b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80088b4:	2b30      	cmp	r3, #48	; 0x30
 80088b6:	d0f8      	beq.n	80088aa <_dtoa_r+0x63a>
 80088b8:	46c2      	mov	sl, r8
 80088ba:	e03b      	b.n	8008934 <_dtoa_r+0x6c4>
 80088bc:	4b9f      	ldr	r3, [pc, #636]	; (8008b3c <_dtoa_r+0x8cc>)
 80088be:	f7f7 fe0b 	bl	80004d8 <__aeabi_dmul>
 80088c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088c6:	e7bc      	b.n	8008842 <_dtoa_r+0x5d2>
 80088c8:	9f03      	ldr	r7, [sp, #12]
 80088ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80088ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088d2:	4640      	mov	r0, r8
 80088d4:	4649      	mov	r1, r9
 80088d6:	f7f7 ff29 	bl	800072c <__aeabi_ddiv>
 80088da:	f7f8 f8ad 	bl	8000a38 <__aeabi_d2iz>
 80088de:	4604      	mov	r4, r0
 80088e0:	f7f7 fd90 	bl	8000404 <__aeabi_i2d>
 80088e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088e8:	f7f7 fdf6 	bl	80004d8 <__aeabi_dmul>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f7 fc38 	bl	8000168 <__aeabi_dsub>
 80088f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80088fc:	f807 6b01 	strb.w	r6, [r7], #1
 8008900:	9e03      	ldr	r6, [sp, #12]
 8008902:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008906:	1bbe      	subs	r6, r7, r6
 8008908:	45b4      	cmp	ip, r6
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	d136      	bne.n	800897e <_dtoa_r+0x70e>
 8008910:	f7f7 fc2c 	bl	800016c <__adddf3>
 8008914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008918:	4680      	mov	r8, r0
 800891a:	4689      	mov	r9, r1
 800891c:	f7f8 f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8008920:	bb58      	cbnz	r0, 800897a <_dtoa_r+0x70a>
 8008922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f8 f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800892e:	b108      	cbz	r0, 8008934 <_dtoa_r+0x6c4>
 8008930:	07e1      	lsls	r1, r4, #31
 8008932:	d422      	bmi.n	800897a <_dtoa_r+0x70a>
 8008934:	4628      	mov	r0, r5
 8008936:	4659      	mov	r1, fp
 8008938:	f000 fae2 	bl	8008f00 <_Bfree>
 800893c:	2300      	movs	r3, #0
 800893e:	703b      	strb	r3, [r7, #0]
 8008940:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008942:	f10a 0001 	add.w	r0, sl, #1
 8008946:	6018      	str	r0, [r3, #0]
 8008948:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800894a:	2b00      	cmp	r3, #0
 800894c:	f43f acde 	beq.w	800830c <_dtoa_r+0x9c>
 8008950:	601f      	str	r7, [r3, #0]
 8008952:	e4db      	b.n	800830c <_dtoa_r+0x9c>
 8008954:	4627      	mov	r7, r4
 8008956:	463b      	mov	r3, r7
 8008958:	461f      	mov	r7, r3
 800895a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800895e:	2a39      	cmp	r2, #57	; 0x39
 8008960:	d107      	bne.n	8008972 <_dtoa_r+0x702>
 8008962:	9a03      	ldr	r2, [sp, #12]
 8008964:	429a      	cmp	r2, r3
 8008966:	d1f7      	bne.n	8008958 <_dtoa_r+0x6e8>
 8008968:	2230      	movs	r2, #48	; 0x30
 800896a:	9903      	ldr	r1, [sp, #12]
 800896c:	f108 0801 	add.w	r8, r8, #1
 8008970:	700a      	strb	r2, [r1, #0]
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	3201      	adds	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	e79e      	b.n	80088b8 <_dtoa_r+0x648>
 800897a:	46d0      	mov	r8, sl
 800897c:	e7eb      	b.n	8008956 <_dtoa_r+0x6e6>
 800897e:	2200      	movs	r2, #0
 8008980:	4b6e      	ldr	r3, [pc, #440]	; (8008b3c <_dtoa_r+0x8cc>)
 8008982:	f7f7 fda9 	bl	80004d8 <__aeabi_dmul>
 8008986:	2200      	movs	r2, #0
 8008988:	2300      	movs	r3, #0
 800898a:	4680      	mov	r8, r0
 800898c:	4689      	mov	r9, r1
 800898e:	f7f8 f80b 	bl	80009a8 <__aeabi_dcmpeq>
 8008992:	2800      	cmp	r0, #0
 8008994:	d09b      	beq.n	80088ce <_dtoa_r+0x65e>
 8008996:	e7cd      	b.n	8008934 <_dtoa_r+0x6c4>
 8008998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800899a:	2a00      	cmp	r2, #0
 800899c:	f000 80d0 	beq.w	8008b40 <_dtoa_r+0x8d0>
 80089a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80089a2:	2a01      	cmp	r2, #1
 80089a4:	f300 80ae 	bgt.w	8008b04 <_dtoa_r+0x894>
 80089a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	f000 80a6 	beq.w	8008afc <_dtoa_r+0x88c>
 80089b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089b6:	9f06      	ldr	r7, [sp, #24]
 80089b8:	9a06      	ldr	r2, [sp, #24]
 80089ba:	2101      	movs	r1, #1
 80089bc:	441a      	add	r2, r3
 80089be:	9206      	str	r2, [sp, #24]
 80089c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c2:	4628      	mov	r0, r5
 80089c4:	441a      	add	r2, r3
 80089c6:	9209      	str	r2, [sp, #36]	; 0x24
 80089c8:	f000 fb50 	bl	800906c <__i2b>
 80089cc:	4606      	mov	r6, r0
 80089ce:	2f00      	cmp	r7, #0
 80089d0:	dd0c      	ble.n	80089ec <_dtoa_r+0x77c>
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd09      	ble.n	80089ec <_dtoa_r+0x77c>
 80089d8:	42bb      	cmp	r3, r7
 80089da:	bfa8      	it	ge
 80089dc:	463b      	movge	r3, r7
 80089de:	9a06      	ldr	r2, [sp, #24]
 80089e0:	1aff      	subs	r7, r7, r3
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	9206      	str	r2, [sp, #24]
 80089e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	9309      	str	r3, [sp, #36]	; 0x24
 80089ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ee:	b1f3      	cbz	r3, 8008a2e <_dtoa_r+0x7be>
 80089f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 80a8 	beq.w	8008b48 <_dtoa_r+0x8d8>
 80089f8:	2c00      	cmp	r4, #0
 80089fa:	dd10      	ble.n	8008a1e <_dtoa_r+0x7ae>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4622      	mov	r2, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 fbf1 	bl	80091e8 <__pow5mult>
 8008a06:	465a      	mov	r2, fp
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 fb43 	bl	8009098 <__multiply>
 8008a12:	4680      	mov	r8, r0
 8008a14:	4659      	mov	r1, fp
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 fa72 	bl	8008f00 <_Bfree>
 8008a1c:	46c3      	mov	fp, r8
 8008a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a20:	1b1a      	subs	r2, r3, r4
 8008a22:	d004      	beq.n	8008a2e <_dtoa_r+0x7be>
 8008a24:	4659      	mov	r1, fp
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 fbde 	bl	80091e8 <__pow5mult>
 8008a2c:	4683      	mov	fp, r0
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4628      	mov	r0, r5
 8008a32:	f000 fb1b 	bl	800906c <__i2b>
 8008a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a38:	4604      	mov	r4, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f340 8086 	ble.w	8008b4c <_dtoa_r+0x8dc>
 8008a40:	461a      	mov	r2, r3
 8008a42:	4601      	mov	r1, r0
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 fbcf 	bl	80091e8 <__pow5mult>
 8008a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	dd7f      	ble.n	8008b52 <_dtoa_r+0x8e2>
 8008a52:	f04f 0800 	mov.w	r8, #0
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a5c:	6918      	ldr	r0, [r3, #16]
 8008a5e:	f000 fab7 	bl	8008fd0 <__hi0bits>
 8008a62:	f1c0 0020 	rsb	r0, r0, #32
 8008a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a68:	4418      	add	r0, r3
 8008a6a:	f010 001f 	ands.w	r0, r0, #31
 8008a6e:	f000 8092 	beq.w	8008b96 <_dtoa_r+0x926>
 8008a72:	f1c0 0320 	rsb	r3, r0, #32
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	f340 808a 	ble.w	8008b90 <_dtoa_r+0x920>
 8008a7c:	f1c0 001c 	rsb	r0, r0, #28
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	4407      	add	r7, r0
 8008a84:	4403      	add	r3, r0
 8008a86:	9306      	str	r3, [sp, #24]
 8008a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8a:	4403      	add	r3, r0
 8008a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8e:	9b06      	ldr	r3, [sp, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dd05      	ble.n	8008aa0 <_dtoa_r+0x830>
 8008a94:	4659      	mov	r1, fp
 8008a96:	461a      	mov	r2, r3
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f000 fbff 	bl	800929c <__lshift>
 8008a9e:	4683      	mov	fp, r0
 8008aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dd05      	ble.n	8008ab2 <_dtoa_r+0x842>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f000 fbf6 	bl	800929c <__lshift>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d070      	beq.n	8008b9a <_dtoa_r+0x92a>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 fc5e 	bl	800937c <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	da6a      	bge.n	8008b9a <_dtoa_r+0x92a>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	220a      	movs	r2, #10
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 fa3a 	bl	8008f44 <__multadd>
 8008ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad2:	4683      	mov	fp, r0
 8008ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8194 	beq.w	8008e06 <_dtoa_r+0xb96>
 8008ade:	4631      	mov	r1, r6
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 fa2d 	bl	8008f44 <__multadd>
 8008aea:	f1b9 0f00 	cmp.w	r9, #0
 8008aee:	4606      	mov	r6, r0
 8008af0:	f300 8093 	bgt.w	8008c1a <_dtoa_r+0x9aa>
 8008af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	dc57      	bgt.n	8008baa <_dtoa_r+0x93a>
 8008afa:	e08e      	b.n	8008c1a <_dtoa_r+0x9aa>
 8008afc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b02:	e757      	b.n	80089b4 <_dtoa_r+0x744>
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	1e5c      	subs	r4, r3, #1
 8008b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	bfb7      	itett	lt
 8008b0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b10:	1b1c      	subge	r4, r3, r4
 8008b12:	1ae2      	sublt	r2, r4, r3
 8008b14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008b16:	bfbe      	ittt	lt
 8008b18:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008b1a:	189b      	addlt	r3, r3, r2
 8008b1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	bfb8      	it	lt
 8008b22:	2400      	movlt	r4, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bfbb      	ittet	lt
 8008b28:	9b06      	ldrlt	r3, [sp, #24]
 8008b2a:	9a08      	ldrlt	r2, [sp, #32]
 8008b2c:	9f06      	ldrge	r7, [sp, #24]
 8008b2e:	1a9f      	sublt	r7, r3, r2
 8008b30:	bfac      	ite	ge
 8008b32:	9b08      	ldrge	r3, [sp, #32]
 8008b34:	2300      	movlt	r3, #0
 8008b36:	e73f      	b.n	80089b8 <_dtoa_r+0x748>
 8008b38:	3fe00000 	.word	0x3fe00000
 8008b3c:	40240000 	.word	0x40240000
 8008b40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b42:	9f06      	ldr	r7, [sp, #24]
 8008b44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008b46:	e742      	b.n	80089ce <_dtoa_r+0x75e>
 8008b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b4a:	e76b      	b.n	8008a24 <_dtoa_r+0x7b4>
 8008b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	dc19      	bgt.n	8008b86 <_dtoa_r+0x916>
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	b9bb      	cbnz	r3, 8008b86 <_dtoa_r+0x916>
 8008b56:	9b05      	ldr	r3, [sp, #20]
 8008b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b5c:	b99b      	cbnz	r3, 8008b86 <_dtoa_r+0x916>
 8008b5e:	9b05      	ldr	r3, [sp, #20]
 8008b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b64:	0d1b      	lsrs	r3, r3, #20
 8008b66:	051b      	lsls	r3, r3, #20
 8008b68:	b183      	cbz	r3, 8008b8c <_dtoa_r+0x91c>
 8008b6a:	f04f 0801 	mov.w	r8, #1
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	3301      	adds	r3, #1
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b76:	3301      	adds	r3, #1
 8008b78:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f47f af6a 	bne.w	8008a56 <_dtoa_r+0x7e6>
 8008b82:	2001      	movs	r0, #1
 8008b84:	e76f      	b.n	8008a66 <_dtoa_r+0x7f6>
 8008b86:	f04f 0800 	mov.w	r8, #0
 8008b8a:	e7f6      	b.n	8008b7a <_dtoa_r+0x90a>
 8008b8c:	4698      	mov	r8, r3
 8008b8e:	e7f4      	b.n	8008b7a <_dtoa_r+0x90a>
 8008b90:	f43f af7d 	beq.w	8008a8e <_dtoa_r+0x81e>
 8008b94:	4618      	mov	r0, r3
 8008b96:	301c      	adds	r0, #28
 8008b98:	e772      	b.n	8008a80 <_dtoa_r+0x810>
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc36      	bgt.n	8008c0e <_dtoa_r+0x99e>
 8008ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	dd33      	ble.n	8008c0e <_dtoa_r+0x99e>
 8008ba6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008baa:	f1b9 0f00 	cmp.w	r9, #0
 8008bae:	d10d      	bne.n	8008bcc <_dtoa_r+0x95c>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f000 f9c4 	bl	8008f44 <__multadd>
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4658      	mov	r0, fp
 8008bc2:	f000 fbdb 	bl	800937c <__mcmp>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f73f adb8 	bgt.w	800873c <_dtoa_r+0x4cc>
 8008bcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bce:	9f03      	ldr	r7, [sp, #12]
 8008bd0:	ea6f 0a03 	mvn.w	sl, r3
 8008bd4:	f04f 0800 	mov.w	r8, #0
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f000 f990 	bl	8008f00 <_Bfree>
 8008be0:	2e00      	cmp	r6, #0
 8008be2:	f43f aea7 	beq.w	8008934 <_dtoa_r+0x6c4>
 8008be6:	f1b8 0f00 	cmp.w	r8, #0
 8008bea:	d005      	beq.n	8008bf8 <_dtoa_r+0x988>
 8008bec:	45b0      	cmp	r8, r6
 8008bee:	d003      	beq.n	8008bf8 <_dtoa_r+0x988>
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f000 f984 	bl	8008f00 <_Bfree>
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 f980 	bl	8008f00 <_Bfree>
 8008c00:	e698      	b.n	8008934 <_dtoa_r+0x6c4>
 8008c02:	2400      	movs	r4, #0
 8008c04:	4626      	mov	r6, r4
 8008c06:	e7e1      	b.n	8008bcc <_dtoa_r+0x95c>
 8008c08:	46c2      	mov	sl, r8
 8008c0a:	4626      	mov	r6, r4
 8008c0c:	e596      	b.n	800873c <_dtoa_r+0x4cc>
 8008c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 80fd 	beq.w	8008e14 <_dtoa_r+0xba4>
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	dd05      	ble.n	8008c2a <_dtoa_r+0x9ba>
 8008c1e:	4631      	mov	r1, r6
 8008c20:	463a      	mov	r2, r7
 8008c22:	4628      	mov	r0, r5
 8008c24:	f000 fb3a 	bl	800929c <__lshift>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	f1b8 0f00 	cmp.w	r8, #0
 8008c2e:	d05c      	beq.n	8008cea <_dtoa_r+0xa7a>
 8008c30:	4628      	mov	r0, r5
 8008c32:	6871      	ldr	r1, [r6, #4]
 8008c34:	f000 f924 	bl	8008e80 <_Balloc>
 8008c38:	4607      	mov	r7, r0
 8008c3a:	b928      	cbnz	r0, 8008c48 <_dtoa_r+0x9d8>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c42:	4b7f      	ldr	r3, [pc, #508]	; (8008e40 <_dtoa_r+0xbd0>)
 8008c44:	f7ff bb28 	b.w	8008298 <_dtoa_r+0x28>
 8008c48:	6932      	ldr	r2, [r6, #16]
 8008c4a:	f106 010c 	add.w	r1, r6, #12
 8008c4e:	3202      	adds	r2, #2
 8008c50:	0092      	lsls	r2, r2, #2
 8008c52:	300c      	adds	r0, #12
 8008c54:	f7fe fdbc 	bl	80077d0 <memcpy>
 8008c58:	2201      	movs	r2, #1
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 fb1d 	bl	800929c <__lshift>
 8008c62:	46b0      	mov	r8, r6
 8008c64:	4606      	mov	r6, r0
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	9308      	str	r3, [sp, #32]
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	444b      	add	r3, r9
 8008c70:	930a      	str	r3, [sp, #40]	; 0x28
 8008c72:	9b04      	ldr	r3, [sp, #16]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7a:	9b08      	ldr	r3, [sp, #32]
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	4658      	mov	r0, fp
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	f7ff fa66 	bl	8008154 <quorem>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	3330      	adds	r3, #48	; 0x30
 8008c8e:	9006      	str	r0, [sp, #24]
 8008c90:	4658      	mov	r0, fp
 8008c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c94:	f000 fb72 	bl	800937c <__mcmp>
 8008c98:	4632      	mov	r2, r6
 8008c9a:	4681      	mov	r9, r0
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 fb88 	bl	80093b4 <__mdiff>
 8008ca4:	68c2      	ldr	r2, [r0, #12]
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008caa:	bb02      	cbnz	r2, 8008cee <_dtoa_r+0xa7e>
 8008cac:	4601      	mov	r1, r0
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f000 fb64 	bl	800937c <__mcmp>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb8:	4639      	mov	r1, r7
 8008cba:	4628      	mov	r0, r5
 8008cbc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008cc0:	f000 f91e 	bl	8008f00 <_Bfree>
 8008cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cc8:	9f08      	ldr	r7, [sp, #32]
 8008cca:	ea43 0102 	orr.w	r1, r3, r2
 8008cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd4:	d10d      	bne.n	8008cf2 <_dtoa_r+0xa82>
 8008cd6:	2b39      	cmp	r3, #57	; 0x39
 8008cd8:	d029      	beq.n	8008d2e <_dtoa_r+0xabe>
 8008cda:	f1b9 0f00 	cmp.w	r9, #0
 8008cde:	dd01      	ble.n	8008ce4 <_dtoa_r+0xa74>
 8008ce0:	9b06      	ldr	r3, [sp, #24]
 8008ce2:	3331      	adds	r3, #49	; 0x31
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	7013      	strb	r3, [r2, #0]
 8008ce8:	e776      	b.n	8008bd8 <_dtoa_r+0x968>
 8008cea:	4630      	mov	r0, r6
 8008cec:	e7b9      	b.n	8008c62 <_dtoa_r+0x9f2>
 8008cee:	2201      	movs	r2, #1
 8008cf0:	e7e2      	b.n	8008cb8 <_dtoa_r+0xa48>
 8008cf2:	f1b9 0f00 	cmp.w	r9, #0
 8008cf6:	db06      	blt.n	8008d06 <_dtoa_r+0xa96>
 8008cf8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008cfa:	ea41 0909 	orr.w	r9, r1, r9
 8008cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d00:	ea59 0101 	orrs.w	r1, r9, r1
 8008d04:	d120      	bne.n	8008d48 <_dtoa_r+0xad8>
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	ddec      	ble.n	8008ce4 <_dtoa_r+0xa74>
 8008d0a:	4659      	mov	r1, fp
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	4628      	mov	r0, r5
 8008d10:	9308      	str	r3, [sp, #32]
 8008d12:	f000 fac3 	bl	800929c <__lshift>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4683      	mov	fp, r0
 8008d1a:	f000 fb2f 	bl	800937c <__mcmp>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	dc02      	bgt.n	8008d2a <_dtoa_r+0xaba>
 8008d24:	d1de      	bne.n	8008ce4 <_dtoa_r+0xa74>
 8008d26:	07da      	lsls	r2, r3, #31
 8008d28:	d5dc      	bpl.n	8008ce4 <_dtoa_r+0xa74>
 8008d2a:	2b39      	cmp	r3, #57	; 0x39
 8008d2c:	d1d8      	bne.n	8008ce0 <_dtoa_r+0xa70>
 8008d2e:	2339      	movs	r3, #57	; 0x39
 8008d30:	9a04      	ldr	r2, [sp, #16]
 8008d32:	7013      	strb	r3, [r2, #0]
 8008d34:	463b      	mov	r3, r7
 8008d36:	461f      	mov	r7, r3
 8008d38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	2a39      	cmp	r2, #57	; 0x39
 8008d40:	d050      	beq.n	8008de4 <_dtoa_r+0xb74>
 8008d42:	3201      	adds	r2, #1
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	e747      	b.n	8008bd8 <_dtoa_r+0x968>
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	dd03      	ble.n	8008d54 <_dtoa_r+0xae4>
 8008d4c:	2b39      	cmp	r3, #57	; 0x39
 8008d4e:	d0ee      	beq.n	8008d2e <_dtoa_r+0xabe>
 8008d50:	3301      	adds	r3, #1
 8008d52:	e7c7      	b.n	8008ce4 <_dtoa_r+0xa74>
 8008d54:	9a08      	ldr	r2, [sp, #32]
 8008d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d5c:	428a      	cmp	r2, r1
 8008d5e:	d02a      	beq.n	8008db6 <_dtoa_r+0xb46>
 8008d60:	4659      	mov	r1, fp
 8008d62:	2300      	movs	r3, #0
 8008d64:	220a      	movs	r2, #10
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 f8ec 	bl	8008f44 <__multadd>
 8008d6c:	45b0      	cmp	r8, r6
 8008d6e:	4683      	mov	fp, r0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	f04f 020a 	mov.w	r2, #10
 8008d78:	4641      	mov	r1, r8
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	d107      	bne.n	8008d8e <_dtoa_r+0xb1e>
 8008d7e:	f000 f8e1 	bl	8008f44 <__multadd>
 8008d82:	4680      	mov	r8, r0
 8008d84:	4606      	mov	r6, r0
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	9308      	str	r3, [sp, #32]
 8008d8c:	e775      	b.n	8008c7a <_dtoa_r+0xa0a>
 8008d8e:	f000 f8d9 	bl	8008f44 <__multadd>
 8008d92:	4631      	mov	r1, r6
 8008d94:	4680      	mov	r8, r0
 8008d96:	2300      	movs	r3, #0
 8008d98:	220a      	movs	r2, #10
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 f8d2 	bl	8008f44 <__multadd>
 8008da0:	4606      	mov	r6, r0
 8008da2:	e7f0      	b.n	8008d86 <_dtoa_r+0xb16>
 8008da4:	f1b9 0f00 	cmp.w	r9, #0
 8008da8:	bfcc      	ite	gt
 8008daa:	464f      	movgt	r7, r9
 8008dac:	2701      	movle	r7, #1
 8008dae:	f04f 0800 	mov.w	r8, #0
 8008db2:	9a03      	ldr	r2, [sp, #12]
 8008db4:	4417      	add	r7, r2
 8008db6:	4659      	mov	r1, fp
 8008db8:	2201      	movs	r2, #1
 8008dba:	4628      	mov	r0, r5
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	f000 fa6d 	bl	800929c <__lshift>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4683      	mov	fp, r0
 8008dc6:	f000 fad9 	bl	800937c <__mcmp>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	dcb2      	bgt.n	8008d34 <_dtoa_r+0xac4>
 8008dce:	d102      	bne.n	8008dd6 <_dtoa_r+0xb66>
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	07db      	lsls	r3, r3, #31
 8008dd4:	d4ae      	bmi.n	8008d34 <_dtoa_r+0xac4>
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	461f      	mov	r7, r3
 8008dda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dde:	2a30      	cmp	r2, #48	; 0x30
 8008de0:	d0fa      	beq.n	8008dd8 <_dtoa_r+0xb68>
 8008de2:	e6f9      	b.n	8008bd8 <_dtoa_r+0x968>
 8008de4:	9a03      	ldr	r2, [sp, #12]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d1a5      	bne.n	8008d36 <_dtoa_r+0xac6>
 8008dea:	2331      	movs	r3, #49	; 0x31
 8008dec:	f10a 0a01 	add.w	sl, sl, #1
 8008df0:	e779      	b.n	8008ce6 <_dtoa_r+0xa76>
 8008df2:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <_dtoa_r+0xbd4>)
 8008df4:	f7ff baa8 	b.w	8008348 <_dtoa_r+0xd8>
 8008df8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f47f aa81 	bne.w	8008302 <_dtoa_r+0x92>
 8008e00:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <_dtoa_r+0xbd8>)
 8008e02:	f7ff baa1 	b.w	8008348 <_dtoa_r+0xd8>
 8008e06:	f1b9 0f00 	cmp.w	r9, #0
 8008e0a:	dc03      	bgt.n	8008e14 <_dtoa_r+0xba4>
 8008e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	f73f aecb 	bgt.w	8008baa <_dtoa_r+0x93a>
 8008e14:	9f03      	ldr	r7, [sp, #12]
 8008e16:	4621      	mov	r1, r4
 8008e18:	4658      	mov	r0, fp
 8008e1a:	f7ff f99b 	bl	8008154 <quorem>
 8008e1e:	9a03      	ldr	r2, [sp, #12]
 8008e20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008e24:	f807 3b01 	strb.w	r3, [r7], #1
 8008e28:	1aba      	subs	r2, r7, r2
 8008e2a:	4591      	cmp	r9, r2
 8008e2c:	ddba      	ble.n	8008da4 <_dtoa_r+0xb34>
 8008e2e:	4659      	mov	r1, fp
 8008e30:	2300      	movs	r3, #0
 8008e32:	220a      	movs	r2, #10
 8008e34:	4628      	mov	r0, r5
 8008e36:	f000 f885 	bl	8008f44 <__multadd>
 8008e3a:	4683      	mov	fp, r0
 8008e3c:	e7eb      	b.n	8008e16 <_dtoa_r+0xba6>
 8008e3e:	bf00      	nop
 8008e40:	0800a5d3 	.word	0x0800a5d3
 8008e44:	0800a530 	.word	0x0800a530
 8008e48:	0800a554 	.word	0x0800a554

08008e4c <_localeconv_r>:
 8008e4c:	4800      	ldr	r0, [pc, #0]	; (8008e50 <_localeconv_r+0x4>)
 8008e4e:	4770      	bx	lr
 8008e50:	20000218 	.word	0x20000218

08008e54 <malloc>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <malloc+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f000 bc0f 	b.w	800967c <_malloc_r>
 8008e5e:	bf00      	nop
 8008e60:	200000c4 	.word	0x200000c4

08008e64 <memchr>:
 8008e64:	4603      	mov	r3, r0
 8008e66:	b510      	push	{r4, lr}
 8008e68:	b2c9      	uxtb	r1, r1
 8008e6a:	4402      	add	r2, r0
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	d101      	bne.n	8008e76 <memchr+0x12>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e003      	b.n	8008e7e <memchr+0x1a>
 8008e76:	7804      	ldrb	r4, [r0, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	428c      	cmp	r4, r1
 8008e7c:	d1f6      	bne.n	8008e6c <memchr+0x8>
 8008e7e:	bd10      	pop	{r4, pc}

08008e80 <_Balloc>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e84:	4604      	mov	r4, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	b976      	cbnz	r6, 8008ea8 <_Balloc+0x28>
 8008e8a:	2010      	movs	r0, #16
 8008e8c:	f7ff ffe2 	bl	8008e54 <malloc>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6260      	str	r0, [r4, #36]	; 0x24
 8008e94:	b920      	cbnz	r0, 8008ea0 <_Balloc+0x20>
 8008e96:	2166      	movs	r1, #102	; 0x66
 8008e98:	4b17      	ldr	r3, [pc, #92]	; (8008ef8 <_Balloc+0x78>)
 8008e9a:	4818      	ldr	r0, [pc, #96]	; (8008efc <_Balloc+0x7c>)
 8008e9c:	f000 fca2 	bl	80097e4 <__assert_func>
 8008ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea4:	6006      	str	r6, [r0, #0]
 8008ea6:	60c6      	str	r6, [r0, #12]
 8008ea8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eaa:	68f3      	ldr	r3, [r6, #12]
 8008eac:	b183      	cbz	r3, 8008ed0 <_Balloc+0x50>
 8008eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eb6:	b9b8      	cbnz	r0, 8008ee8 <_Balloc+0x68>
 8008eb8:	2101      	movs	r1, #1
 8008eba:	fa01 f605 	lsl.w	r6, r1, r5
 8008ebe:	1d72      	adds	r2, r6, #5
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	0092      	lsls	r2, r2, #2
 8008ec4:	f000 fb5e 	bl	8009584 <_calloc_r>
 8008ec8:	b160      	cbz	r0, 8008ee4 <_Balloc+0x64>
 8008eca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ece:	e00e      	b.n	8008eee <_Balloc+0x6e>
 8008ed0:	2221      	movs	r2, #33	; 0x21
 8008ed2:	2104      	movs	r1, #4
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fb55 	bl	8009584 <_calloc_r>
 8008eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008edc:	60f0      	str	r0, [r6, #12]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e4      	bne.n	8008eae <_Balloc+0x2e>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	6802      	ldr	r2, [r0, #0]
 8008eea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ef4:	e7f7      	b.n	8008ee6 <_Balloc+0x66>
 8008ef6:	bf00      	nop
 8008ef8:	0800a561 	.word	0x0800a561
 8008efc:	0800a5e4 	.word	0x0800a5e4

08008f00 <_Bfree>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f04:	4605      	mov	r5, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	b976      	cbnz	r6, 8008f28 <_Bfree+0x28>
 8008f0a:	2010      	movs	r0, #16
 8008f0c:	f7ff ffa2 	bl	8008e54 <malloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6268      	str	r0, [r5, #36]	; 0x24
 8008f14:	b920      	cbnz	r0, 8008f20 <_Bfree+0x20>
 8008f16:	218a      	movs	r1, #138	; 0x8a
 8008f18:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <_Bfree+0x3c>)
 8008f1a:	4809      	ldr	r0, [pc, #36]	; (8008f40 <_Bfree+0x40>)
 8008f1c:	f000 fc62 	bl	80097e4 <__assert_func>
 8008f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f24:	6006      	str	r6, [r0, #0]
 8008f26:	60c6      	str	r6, [r0, #12]
 8008f28:	b13c      	cbz	r4, 8008f3a <_Bfree+0x3a>
 8008f2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f2c:	6862      	ldr	r2, [r4, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f34:	6021      	str	r1, [r4, #0]
 8008f36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	0800a561 	.word	0x0800a561
 8008f40:	0800a5e4 	.word	0x0800a5e4

08008f44 <__multadd>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4607      	mov	r7, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	461e      	mov	r6, r3
 8008f4e:	2000      	movs	r0, #0
 8008f50:	690d      	ldr	r5, [r1, #16]
 8008f52:	f101 0c14 	add.w	ip, r1, #20
 8008f56:	f8dc 3000 	ldr.w	r3, [ip]
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	fb02 6101 	mla	r1, r2, r1, r6
 8008f62:	0c1e      	lsrs	r6, r3, #16
 8008f64:	0c0b      	lsrs	r3, r1, #16
 8008f66:	fb02 3306 	mla	r3, r2, r6, r3
 8008f6a:	b289      	uxth	r1, r1
 8008f6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f70:	4285      	cmp	r5, r0
 8008f72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f76:	f84c 1b04 	str.w	r1, [ip], #4
 8008f7a:	dcec      	bgt.n	8008f56 <__multadd+0x12>
 8008f7c:	b30e      	cbz	r6, 8008fc2 <__multadd+0x7e>
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	dc19      	bgt.n	8008fb8 <__multadd+0x74>
 8008f84:	6861      	ldr	r1, [r4, #4]
 8008f86:	4638      	mov	r0, r7
 8008f88:	3101      	adds	r1, #1
 8008f8a:	f7ff ff79 	bl	8008e80 <_Balloc>
 8008f8e:	4680      	mov	r8, r0
 8008f90:	b928      	cbnz	r0, 8008f9e <__multadd+0x5a>
 8008f92:	4602      	mov	r2, r0
 8008f94:	21b5      	movs	r1, #181	; 0xb5
 8008f96:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <__multadd+0x84>)
 8008f98:	480c      	ldr	r0, [pc, #48]	; (8008fcc <__multadd+0x88>)
 8008f9a:	f000 fc23 	bl	80097e4 <__assert_func>
 8008f9e:	6922      	ldr	r2, [r4, #16]
 8008fa0:	f104 010c 	add.w	r1, r4, #12
 8008fa4:	3202      	adds	r2, #2
 8008fa6:	0092      	lsls	r2, r2, #2
 8008fa8:	300c      	adds	r0, #12
 8008faa:	f7fe fc11 	bl	80077d0 <memcpy>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ffa5 	bl	8008f00 <_Bfree>
 8008fb6:	4644      	mov	r4, r8
 8008fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	615e      	str	r6, [r3, #20]
 8008fc0:	6125      	str	r5, [r4, #16]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	0800a5d3 	.word	0x0800a5d3
 8008fcc:	0800a5e4 	.word	0x0800a5e4

08008fd0 <__hi0bits>:
 8008fd0:	0c02      	lsrs	r2, r0, #16
 8008fd2:	0412      	lsls	r2, r2, #16
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	b9ca      	cbnz	r2, 800900c <__hi0bits+0x3c>
 8008fd8:	0403      	lsls	r3, r0, #16
 8008fda:	2010      	movs	r0, #16
 8008fdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fe0:	bf04      	itt	eq
 8008fe2:	021b      	lsleq	r3, r3, #8
 8008fe4:	3008      	addeq	r0, #8
 8008fe6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008fea:	bf04      	itt	eq
 8008fec:	011b      	lsleq	r3, r3, #4
 8008fee:	3004      	addeq	r0, #4
 8008ff0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ff4:	bf04      	itt	eq
 8008ff6:	009b      	lsleq	r3, r3, #2
 8008ff8:	3002      	addeq	r0, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	db05      	blt.n	800900a <__hi0bits+0x3a>
 8008ffe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009002:	f100 0001 	add.w	r0, r0, #1
 8009006:	bf08      	it	eq
 8009008:	2020      	moveq	r0, #32
 800900a:	4770      	bx	lr
 800900c:	2000      	movs	r0, #0
 800900e:	e7e5      	b.n	8008fdc <__hi0bits+0xc>

08009010 <__lo0bits>:
 8009010:	6803      	ldr	r3, [r0, #0]
 8009012:	4602      	mov	r2, r0
 8009014:	f013 0007 	ands.w	r0, r3, #7
 8009018:	d00b      	beq.n	8009032 <__lo0bits+0x22>
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d421      	bmi.n	8009062 <__lo0bits+0x52>
 800901e:	0798      	lsls	r0, r3, #30
 8009020:	bf49      	itett	mi
 8009022:	085b      	lsrmi	r3, r3, #1
 8009024:	089b      	lsrpl	r3, r3, #2
 8009026:	2001      	movmi	r0, #1
 8009028:	6013      	strmi	r3, [r2, #0]
 800902a:	bf5c      	itt	pl
 800902c:	2002      	movpl	r0, #2
 800902e:	6013      	strpl	r3, [r2, #0]
 8009030:	4770      	bx	lr
 8009032:	b299      	uxth	r1, r3
 8009034:	b909      	cbnz	r1, 800903a <__lo0bits+0x2a>
 8009036:	2010      	movs	r0, #16
 8009038:	0c1b      	lsrs	r3, r3, #16
 800903a:	b2d9      	uxtb	r1, r3
 800903c:	b909      	cbnz	r1, 8009042 <__lo0bits+0x32>
 800903e:	3008      	adds	r0, #8
 8009040:	0a1b      	lsrs	r3, r3, #8
 8009042:	0719      	lsls	r1, r3, #28
 8009044:	bf04      	itt	eq
 8009046:	091b      	lsreq	r3, r3, #4
 8009048:	3004      	addeq	r0, #4
 800904a:	0799      	lsls	r1, r3, #30
 800904c:	bf04      	itt	eq
 800904e:	089b      	lsreq	r3, r3, #2
 8009050:	3002      	addeq	r0, #2
 8009052:	07d9      	lsls	r1, r3, #31
 8009054:	d403      	bmi.n	800905e <__lo0bits+0x4e>
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	f100 0001 	add.w	r0, r0, #1
 800905c:	d003      	beq.n	8009066 <__lo0bits+0x56>
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	4770      	bx	lr
 8009062:	2000      	movs	r0, #0
 8009064:	4770      	bx	lr
 8009066:	2020      	movs	r0, #32
 8009068:	4770      	bx	lr
	...

0800906c <__i2b>:
 800906c:	b510      	push	{r4, lr}
 800906e:	460c      	mov	r4, r1
 8009070:	2101      	movs	r1, #1
 8009072:	f7ff ff05 	bl	8008e80 <_Balloc>
 8009076:	4602      	mov	r2, r0
 8009078:	b928      	cbnz	r0, 8009086 <__i2b+0x1a>
 800907a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800907e:	4b04      	ldr	r3, [pc, #16]	; (8009090 <__i2b+0x24>)
 8009080:	4804      	ldr	r0, [pc, #16]	; (8009094 <__i2b+0x28>)
 8009082:	f000 fbaf 	bl	80097e4 <__assert_func>
 8009086:	2301      	movs	r3, #1
 8009088:	6144      	str	r4, [r0, #20]
 800908a:	6103      	str	r3, [r0, #16]
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	0800a5d3 	.word	0x0800a5d3
 8009094:	0800a5e4 	.word	0x0800a5e4

08009098 <__multiply>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	4691      	mov	r9, r2
 800909e:	690a      	ldr	r2, [r1, #16]
 80090a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090a4:	460c      	mov	r4, r1
 80090a6:	429a      	cmp	r2, r3
 80090a8:	bfbe      	ittt	lt
 80090aa:	460b      	movlt	r3, r1
 80090ac:	464c      	movlt	r4, r9
 80090ae:	4699      	movlt	r9, r3
 80090b0:	6927      	ldr	r7, [r4, #16]
 80090b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	6861      	ldr	r1, [r4, #4]
 80090ba:	eb07 060a 	add.w	r6, r7, sl
 80090be:	42b3      	cmp	r3, r6
 80090c0:	b085      	sub	sp, #20
 80090c2:	bfb8      	it	lt
 80090c4:	3101      	addlt	r1, #1
 80090c6:	f7ff fedb 	bl	8008e80 <_Balloc>
 80090ca:	b930      	cbnz	r0, 80090da <__multiply+0x42>
 80090cc:	4602      	mov	r2, r0
 80090ce:	f240 115d 	movw	r1, #349	; 0x15d
 80090d2:	4b43      	ldr	r3, [pc, #268]	; (80091e0 <__multiply+0x148>)
 80090d4:	4843      	ldr	r0, [pc, #268]	; (80091e4 <__multiply+0x14c>)
 80090d6:	f000 fb85 	bl	80097e4 <__assert_func>
 80090da:	f100 0514 	add.w	r5, r0, #20
 80090de:	462b      	mov	r3, r5
 80090e0:	2200      	movs	r2, #0
 80090e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090e6:	4543      	cmp	r3, r8
 80090e8:	d321      	bcc.n	800912e <__multiply+0x96>
 80090ea:	f104 0314 	add.w	r3, r4, #20
 80090ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090f2:	f109 0314 	add.w	r3, r9, #20
 80090f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090fa:	9202      	str	r2, [sp, #8]
 80090fc:	1b3a      	subs	r2, r7, r4
 80090fe:	3a15      	subs	r2, #21
 8009100:	f022 0203 	bic.w	r2, r2, #3
 8009104:	3204      	adds	r2, #4
 8009106:	f104 0115 	add.w	r1, r4, #21
 800910a:	428f      	cmp	r7, r1
 800910c:	bf38      	it	cc
 800910e:	2204      	movcc	r2, #4
 8009110:	9201      	str	r2, [sp, #4]
 8009112:	9a02      	ldr	r2, [sp, #8]
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	429a      	cmp	r2, r3
 8009118:	d80c      	bhi.n	8009134 <__multiply+0x9c>
 800911a:	2e00      	cmp	r6, #0
 800911c:	dd03      	ble.n	8009126 <__multiply+0x8e>
 800911e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009122:	2b00      	cmp	r3, #0
 8009124:	d059      	beq.n	80091da <__multiply+0x142>
 8009126:	6106      	str	r6, [r0, #16]
 8009128:	b005      	add	sp, #20
 800912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912e:	f843 2b04 	str.w	r2, [r3], #4
 8009132:	e7d8      	b.n	80090e6 <__multiply+0x4e>
 8009134:	f8b3 a000 	ldrh.w	sl, [r3]
 8009138:	f1ba 0f00 	cmp.w	sl, #0
 800913c:	d023      	beq.n	8009186 <__multiply+0xee>
 800913e:	46a9      	mov	r9, r5
 8009140:	f04f 0c00 	mov.w	ip, #0
 8009144:	f104 0e14 	add.w	lr, r4, #20
 8009148:	f85e 2b04 	ldr.w	r2, [lr], #4
 800914c:	f8d9 1000 	ldr.w	r1, [r9]
 8009150:	fa1f fb82 	uxth.w	fp, r2
 8009154:	b289      	uxth	r1, r1
 8009156:	fb0a 110b 	mla	r1, sl, fp, r1
 800915a:	4461      	add	r1, ip
 800915c:	f8d9 c000 	ldr.w	ip, [r9]
 8009160:	0c12      	lsrs	r2, r2, #16
 8009162:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009166:	fb0a c202 	mla	r2, sl, r2, ip
 800916a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800916e:	b289      	uxth	r1, r1
 8009170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009174:	4577      	cmp	r7, lr
 8009176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800917a:	f849 1b04 	str.w	r1, [r9], #4
 800917e:	d8e3      	bhi.n	8009148 <__multiply+0xb0>
 8009180:	9a01      	ldr	r2, [sp, #4]
 8009182:	f845 c002 	str.w	ip, [r5, r2]
 8009186:	9a03      	ldr	r2, [sp, #12]
 8009188:	3304      	adds	r3, #4
 800918a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800918e:	f1b9 0f00 	cmp.w	r9, #0
 8009192:	d020      	beq.n	80091d6 <__multiply+0x13e>
 8009194:	46ae      	mov	lr, r5
 8009196:	f04f 0a00 	mov.w	sl, #0
 800919a:	6829      	ldr	r1, [r5, #0]
 800919c:	f104 0c14 	add.w	ip, r4, #20
 80091a0:	f8bc b000 	ldrh.w	fp, [ip]
 80091a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091a8:	b289      	uxth	r1, r1
 80091aa:	fb09 220b 	mla	r2, r9, fp, r2
 80091ae:	4492      	add	sl, r2
 80091b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091b4:	f84e 1b04 	str.w	r1, [lr], #4
 80091b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091bc:	f8be 1000 	ldrh.w	r1, [lr]
 80091c0:	0c12      	lsrs	r2, r2, #16
 80091c2:	fb09 1102 	mla	r1, r9, r2, r1
 80091c6:	4567      	cmp	r7, ip
 80091c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091d0:	d8e6      	bhi.n	80091a0 <__multiply+0x108>
 80091d2:	9a01      	ldr	r2, [sp, #4]
 80091d4:	50a9      	str	r1, [r5, r2]
 80091d6:	3504      	adds	r5, #4
 80091d8:	e79b      	b.n	8009112 <__multiply+0x7a>
 80091da:	3e01      	subs	r6, #1
 80091dc:	e79d      	b.n	800911a <__multiply+0x82>
 80091de:	bf00      	nop
 80091e0:	0800a5d3 	.word	0x0800a5d3
 80091e4:	0800a5e4 	.word	0x0800a5e4

080091e8 <__pow5mult>:
 80091e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ec:	4615      	mov	r5, r2
 80091ee:	f012 0203 	ands.w	r2, r2, #3
 80091f2:	4606      	mov	r6, r0
 80091f4:	460f      	mov	r7, r1
 80091f6:	d007      	beq.n	8009208 <__pow5mult+0x20>
 80091f8:	4c25      	ldr	r4, [pc, #148]	; (8009290 <__pow5mult+0xa8>)
 80091fa:	3a01      	subs	r2, #1
 80091fc:	2300      	movs	r3, #0
 80091fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009202:	f7ff fe9f 	bl	8008f44 <__multadd>
 8009206:	4607      	mov	r7, r0
 8009208:	10ad      	asrs	r5, r5, #2
 800920a:	d03d      	beq.n	8009288 <__pow5mult+0xa0>
 800920c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800920e:	b97c      	cbnz	r4, 8009230 <__pow5mult+0x48>
 8009210:	2010      	movs	r0, #16
 8009212:	f7ff fe1f 	bl	8008e54 <malloc>
 8009216:	4602      	mov	r2, r0
 8009218:	6270      	str	r0, [r6, #36]	; 0x24
 800921a:	b928      	cbnz	r0, 8009228 <__pow5mult+0x40>
 800921c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009220:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <__pow5mult+0xac>)
 8009222:	481d      	ldr	r0, [pc, #116]	; (8009298 <__pow5mult+0xb0>)
 8009224:	f000 fade 	bl	80097e4 <__assert_func>
 8009228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800922c:	6004      	str	r4, [r0, #0]
 800922e:	60c4      	str	r4, [r0, #12]
 8009230:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009234:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009238:	b94c      	cbnz	r4, 800924e <__pow5mult+0x66>
 800923a:	f240 2171 	movw	r1, #625	; 0x271
 800923e:	4630      	mov	r0, r6
 8009240:	f7ff ff14 	bl	800906c <__i2b>
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	f8c8 0008 	str.w	r0, [r8, #8]
 800924c:	6003      	str	r3, [r0, #0]
 800924e:	f04f 0900 	mov.w	r9, #0
 8009252:	07eb      	lsls	r3, r5, #31
 8009254:	d50a      	bpl.n	800926c <__pow5mult+0x84>
 8009256:	4639      	mov	r1, r7
 8009258:	4622      	mov	r2, r4
 800925a:	4630      	mov	r0, r6
 800925c:	f7ff ff1c 	bl	8009098 <__multiply>
 8009260:	4680      	mov	r8, r0
 8009262:	4639      	mov	r1, r7
 8009264:	4630      	mov	r0, r6
 8009266:	f7ff fe4b 	bl	8008f00 <_Bfree>
 800926a:	4647      	mov	r7, r8
 800926c:	106d      	asrs	r5, r5, #1
 800926e:	d00b      	beq.n	8009288 <__pow5mult+0xa0>
 8009270:	6820      	ldr	r0, [r4, #0]
 8009272:	b938      	cbnz	r0, 8009284 <__pow5mult+0x9c>
 8009274:	4622      	mov	r2, r4
 8009276:	4621      	mov	r1, r4
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff ff0d 	bl	8009098 <__multiply>
 800927e:	6020      	str	r0, [r4, #0]
 8009280:	f8c0 9000 	str.w	r9, [r0]
 8009284:	4604      	mov	r4, r0
 8009286:	e7e4      	b.n	8009252 <__pow5mult+0x6a>
 8009288:	4638      	mov	r0, r7
 800928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928e:	bf00      	nop
 8009290:	0800a730 	.word	0x0800a730
 8009294:	0800a561 	.word	0x0800a561
 8009298:	0800a5e4 	.word	0x0800a5e4

0800929c <__lshift>:
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	4607      	mov	r7, r0
 80092a4:	4691      	mov	r9, r2
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	6849      	ldr	r1, [r1, #4]
 80092aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092b4:	f108 0601 	add.w	r6, r8, #1
 80092b8:	42b3      	cmp	r3, r6
 80092ba:	db0b      	blt.n	80092d4 <__lshift+0x38>
 80092bc:	4638      	mov	r0, r7
 80092be:	f7ff fddf 	bl	8008e80 <_Balloc>
 80092c2:	4605      	mov	r5, r0
 80092c4:	b948      	cbnz	r0, 80092da <__lshift+0x3e>
 80092c6:	4602      	mov	r2, r0
 80092c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092cc:	4b29      	ldr	r3, [pc, #164]	; (8009374 <__lshift+0xd8>)
 80092ce:	482a      	ldr	r0, [pc, #168]	; (8009378 <__lshift+0xdc>)
 80092d0:	f000 fa88 	bl	80097e4 <__assert_func>
 80092d4:	3101      	adds	r1, #1
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	e7ee      	b.n	80092b8 <__lshift+0x1c>
 80092da:	2300      	movs	r3, #0
 80092dc:	f100 0114 	add.w	r1, r0, #20
 80092e0:	f100 0210 	add.w	r2, r0, #16
 80092e4:	4618      	mov	r0, r3
 80092e6:	4553      	cmp	r3, sl
 80092e8:	db37      	blt.n	800935a <__lshift+0xbe>
 80092ea:	6920      	ldr	r0, [r4, #16]
 80092ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092f0:	f104 0314 	add.w	r3, r4, #20
 80092f4:	f019 091f 	ands.w	r9, r9, #31
 80092f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009300:	d02f      	beq.n	8009362 <__lshift+0xc6>
 8009302:	468a      	mov	sl, r1
 8009304:	f04f 0c00 	mov.w	ip, #0
 8009308:	f1c9 0e20 	rsb	lr, r9, #32
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	fa02 f209 	lsl.w	r2, r2, r9
 8009312:	ea42 020c 	orr.w	r2, r2, ip
 8009316:	f84a 2b04 	str.w	r2, [sl], #4
 800931a:	f853 2b04 	ldr.w	r2, [r3], #4
 800931e:	4298      	cmp	r0, r3
 8009320:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009324:	d8f2      	bhi.n	800930c <__lshift+0x70>
 8009326:	1b03      	subs	r3, r0, r4
 8009328:	3b15      	subs	r3, #21
 800932a:	f023 0303 	bic.w	r3, r3, #3
 800932e:	3304      	adds	r3, #4
 8009330:	f104 0215 	add.w	r2, r4, #21
 8009334:	4290      	cmp	r0, r2
 8009336:	bf38      	it	cc
 8009338:	2304      	movcc	r3, #4
 800933a:	f841 c003 	str.w	ip, [r1, r3]
 800933e:	f1bc 0f00 	cmp.w	ip, #0
 8009342:	d001      	beq.n	8009348 <__lshift+0xac>
 8009344:	f108 0602 	add.w	r6, r8, #2
 8009348:	3e01      	subs	r6, #1
 800934a:	4638      	mov	r0, r7
 800934c:	4621      	mov	r1, r4
 800934e:	612e      	str	r6, [r5, #16]
 8009350:	f7ff fdd6 	bl	8008f00 <_Bfree>
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	f842 0f04 	str.w	r0, [r2, #4]!
 800935e:	3301      	adds	r3, #1
 8009360:	e7c1      	b.n	80092e6 <__lshift+0x4a>
 8009362:	3904      	subs	r1, #4
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	4298      	cmp	r0, r3
 800936a:	f841 2f04 	str.w	r2, [r1, #4]!
 800936e:	d8f9      	bhi.n	8009364 <__lshift+0xc8>
 8009370:	e7ea      	b.n	8009348 <__lshift+0xac>
 8009372:	bf00      	nop
 8009374:	0800a5d3 	.word	0x0800a5d3
 8009378:	0800a5e4 	.word	0x0800a5e4

0800937c <__mcmp>:
 800937c:	4603      	mov	r3, r0
 800937e:	690a      	ldr	r2, [r1, #16]
 8009380:	6900      	ldr	r0, [r0, #16]
 8009382:	b530      	push	{r4, r5, lr}
 8009384:	1a80      	subs	r0, r0, r2
 8009386:	d10d      	bne.n	80093a4 <__mcmp+0x28>
 8009388:	3314      	adds	r3, #20
 800938a:	3114      	adds	r1, #20
 800938c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009390:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009394:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009398:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800939c:	4295      	cmp	r5, r2
 800939e:	d002      	beq.n	80093a6 <__mcmp+0x2a>
 80093a0:	d304      	bcc.n	80093ac <__mcmp+0x30>
 80093a2:	2001      	movs	r0, #1
 80093a4:	bd30      	pop	{r4, r5, pc}
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	d3f4      	bcc.n	8009394 <__mcmp+0x18>
 80093aa:	e7fb      	b.n	80093a4 <__mcmp+0x28>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e7f8      	b.n	80093a4 <__mcmp+0x28>
	...

080093b4 <__mdiff>:
 80093b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	460d      	mov	r5, r1
 80093ba:	4607      	mov	r7, r0
 80093bc:	4611      	mov	r1, r2
 80093be:	4628      	mov	r0, r5
 80093c0:	4614      	mov	r4, r2
 80093c2:	f7ff ffdb 	bl	800937c <__mcmp>
 80093c6:	1e06      	subs	r6, r0, #0
 80093c8:	d111      	bne.n	80093ee <__mdiff+0x3a>
 80093ca:	4631      	mov	r1, r6
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff fd57 	bl	8008e80 <_Balloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	b928      	cbnz	r0, 80093e2 <__mdiff+0x2e>
 80093d6:	f240 2132 	movw	r1, #562	; 0x232
 80093da:	4b3a      	ldr	r3, [pc, #232]	; (80094c4 <__mdiff+0x110>)
 80093dc:	483a      	ldr	r0, [pc, #232]	; (80094c8 <__mdiff+0x114>)
 80093de:	f000 fa01 	bl	80097e4 <__assert_func>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093e8:	4610      	mov	r0, r2
 80093ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	bfa4      	itt	ge
 80093f0:	4623      	movge	r3, r4
 80093f2:	462c      	movge	r4, r5
 80093f4:	4638      	mov	r0, r7
 80093f6:	6861      	ldr	r1, [r4, #4]
 80093f8:	bfa6      	itte	ge
 80093fa:	461d      	movge	r5, r3
 80093fc:	2600      	movge	r6, #0
 80093fe:	2601      	movlt	r6, #1
 8009400:	f7ff fd3e 	bl	8008e80 <_Balloc>
 8009404:	4602      	mov	r2, r0
 8009406:	b918      	cbnz	r0, 8009410 <__mdiff+0x5c>
 8009408:	f44f 7110 	mov.w	r1, #576	; 0x240
 800940c:	4b2d      	ldr	r3, [pc, #180]	; (80094c4 <__mdiff+0x110>)
 800940e:	e7e5      	b.n	80093dc <__mdiff+0x28>
 8009410:	f102 0814 	add.w	r8, r2, #20
 8009414:	46c2      	mov	sl, r8
 8009416:	f04f 0c00 	mov.w	ip, #0
 800941a:	6927      	ldr	r7, [r4, #16]
 800941c:	60c6      	str	r6, [r0, #12]
 800941e:	692e      	ldr	r6, [r5, #16]
 8009420:	f104 0014 	add.w	r0, r4, #20
 8009424:	f105 0914 	add.w	r9, r5, #20
 8009428:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800942c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009430:	3410      	adds	r4, #16
 8009432:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009436:	f859 3b04 	ldr.w	r3, [r9], #4
 800943a:	fa1f f18b 	uxth.w	r1, fp
 800943e:	448c      	add	ip, r1
 8009440:	b299      	uxth	r1, r3
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	ebac 0101 	sub.w	r1, ip, r1
 8009448:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800944c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009450:	b289      	uxth	r1, r1
 8009452:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009456:	454e      	cmp	r6, r9
 8009458:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800945c:	f84a 3b04 	str.w	r3, [sl], #4
 8009460:	d8e7      	bhi.n	8009432 <__mdiff+0x7e>
 8009462:	1b73      	subs	r3, r6, r5
 8009464:	3b15      	subs	r3, #21
 8009466:	f023 0303 	bic.w	r3, r3, #3
 800946a:	3515      	adds	r5, #21
 800946c:	3304      	adds	r3, #4
 800946e:	42ae      	cmp	r6, r5
 8009470:	bf38      	it	cc
 8009472:	2304      	movcc	r3, #4
 8009474:	4418      	add	r0, r3
 8009476:	4443      	add	r3, r8
 8009478:	461e      	mov	r6, r3
 800947a:	4605      	mov	r5, r0
 800947c:	4575      	cmp	r5, lr
 800947e:	d30e      	bcc.n	800949e <__mdiff+0xea>
 8009480:	f10e 0103 	add.w	r1, lr, #3
 8009484:	1a09      	subs	r1, r1, r0
 8009486:	f021 0103 	bic.w	r1, r1, #3
 800948a:	3803      	subs	r0, #3
 800948c:	4586      	cmp	lr, r0
 800948e:	bf38      	it	cc
 8009490:	2100      	movcc	r1, #0
 8009492:	4419      	add	r1, r3
 8009494:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009498:	b18b      	cbz	r3, 80094be <__mdiff+0x10a>
 800949a:	6117      	str	r7, [r2, #16]
 800949c:	e7a4      	b.n	80093e8 <__mdiff+0x34>
 800949e:	f855 8b04 	ldr.w	r8, [r5], #4
 80094a2:	fa1f f188 	uxth.w	r1, r8
 80094a6:	4461      	add	r1, ip
 80094a8:	140c      	asrs	r4, r1, #16
 80094aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094ae:	b289      	uxth	r1, r1
 80094b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80094b8:	f846 1b04 	str.w	r1, [r6], #4
 80094bc:	e7de      	b.n	800947c <__mdiff+0xc8>
 80094be:	3f01      	subs	r7, #1
 80094c0:	e7e8      	b.n	8009494 <__mdiff+0xe0>
 80094c2:	bf00      	nop
 80094c4:	0800a5d3 	.word	0x0800a5d3
 80094c8:	0800a5e4 	.word	0x0800a5e4

080094cc <__d2b>:
 80094cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80094d0:	2101      	movs	r1, #1
 80094d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80094d6:	4690      	mov	r8, r2
 80094d8:	461d      	mov	r5, r3
 80094da:	f7ff fcd1 	bl	8008e80 <_Balloc>
 80094de:	4604      	mov	r4, r0
 80094e0:	b930      	cbnz	r0, 80094f0 <__d2b+0x24>
 80094e2:	4602      	mov	r2, r0
 80094e4:	f240 310a 	movw	r1, #778	; 0x30a
 80094e8:	4b24      	ldr	r3, [pc, #144]	; (800957c <__d2b+0xb0>)
 80094ea:	4825      	ldr	r0, [pc, #148]	; (8009580 <__d2b+0xb4>)
 80094ec:	f000 f97a 	bl	80097e4 <__assert_func>
 80094f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80094f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80094f8:	bb2d      	cbnz	r5, 8009546 <__d2b+0x7a>
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	f1b8 0300 	subs.w	r3, r8, #0
 8009500:	d026      	beq.n	8009550 <__d2b+0x84>
 8009502:	4668      	mov	r0, sp
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	f7ff fd83 	bl	8009010 <__lo0bits>
 800950a:	9900      	ldr	r1, [sp, #0]
 800950c:	b1f0      	cbz	r0, 800954c <__d2b+0x80>
 800950e:	9a01      	ldr	r2, [sp, #4]
 8009510:	f1c0 0320 	rsb	r3, r0, #32
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	430b      	orrs	r3, r1
 800951a:	40c2      	lsrs	r2, r0
 800951c:	6163      	str	r3, [r4, #20]
 800951e:	9201      	str	r2, [sp, #4]
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	bf14      	ite	ne
 8009526:	2102      	movne	r1, #2
 8009528:	2101      	moveq	r1, #1
 800952a:	61a3      	str	r3, [r4, #24]
 800952c:	6121      	str	r1, [r4, #16]
 800952e:	b1c5      	cbz	r5, 8009562 <__d2b+0x96>
 8009530:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009534:	4405      	add	r5, r0
 8009536:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800953a:	603d      	str	r5, [r7, #0]
 800953c:	6030      	str	r0, [r6, #0]
 800953e:	4620      	mov	r0, r4
 8009540:	b002      	add	sp, #8
 8009542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800954a:	e7d6      	b.n	80094fa <__d2b+0x2e>
 800954c:	6161      	str	r1, [r4, #20]
 800954e:	e7e7      	b.n	8009520 <__d2b+0x54>
 8009550:	a801      	add	r0, sp, #4
 8009552:	f7ff fd5d 	bl	8009010 <__lo0bits>
 8009556:	2101      	movs	r1, #1
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	6121      	str	r1, [r4, #16]
 800955c:	6163      	str	r3, [r4, #20]
 800955e:	3020      	adds	r0, #32
 8009560:	e7e5      	b.n	800952e <__d2b+0x62>
 8009562:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009566:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800956a:	6038      	str	r0, [r7, #0]
 800956c:	6918      	ldr	r0, [r3, #16]
 800956e:	f7ff fd2f 	bl	8008fd0 <__hi0bits>
 8009572:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009576:	6031      	str	r1, [r6, #0]
 8009578:	e7e1      	b.n	800953e <__d2b+0x72>
 800957a:	bf00      	nop
 800957c:	0800a5d3 	.word	0x0800a5d3
 8009580:	0800a5e4 	.word	0x0800a5e4

08009584 <_calloc_r>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	fba1 5402 	umull	r5, r4, r1, r2
 800958a:	b934      	cbnz	r4, 800959a <_calloc_r+0x16>
 800958c:	4629      	mov	r1, r5
 800958e:	f000 f875 	bl	800967c <_malloc_r>
 8009592:	4606      	mov	r6, r0
 8009594:	b928      	cbnz	r0, 80095a2 <_calloc_r+0x1e>
 8009596:	4630      	mov	r0, r6
 8009598:	bd70      	pop	{r4, r5, r6, pc}
 800959a:	220c      	movs	r2, #12
 800959c:	2600      	movs	r6, #0
 800959e:	6002      	str	r2, [r0, #0]
 80095a0:	e7f9      	b.n	8009596 <_calloc_r+0x12>
 80095a2:	462a      	mov	r2, r5
 80095a4:	4621      	mov	r1, r4
 80095a6:	f7fe f921 	bl	80077ec <memset>
 80095aa:	e7f4      	b.n	8009596 <_calloc_r+0x12>

080095ac <_free_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4605      	mov	r5, r0
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d040      	beq.n	8009636 <_free_r+0x8a>
 80095b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b8:	1f0c      	subs	r4, r1, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bfb8      	it	lt
 80095be:	18e4      	addlt	r4, r4, r3
 80095c0:	f000 f952 	bl	8009868 <__malloc_lock>
 80095c4:	4a1c      	ldr	r2, [pc, #112]	; (8009638 <_free_r+0x8c>)
 80095c6:	6813      	ldr	r3, [r2, #0]
 80095c8:	b933      	cbnz	r3, 80095d8 <_free_r+0x2c>
 80095ca:	6063      	str	r3, [r4, #4]
 80095cc:	6014      	str	r4, [r2, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d4:	f000 b94e 	b.w	8009874 <__malloc_unlock>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d908      	bls.n	80095ee <_free_r+0x42>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	1821      	adds	r1, r4, r0
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf01      	itttt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	1809      	addeq	r1, r1, r0
 80095ea:	6021      	streq	r1, [r4, #0]
 80095ec:	e7ed      	b.n	80095ca <_free_r+0x1e>
 80095ee:	461a      	mov	r2, r3
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	b10b      	cbz	r3, 80095f8 <_free_r+0x4c>
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d9fa      	bls.n	80095ee <_free_r+0x42>
 80095f8:	6811      	ldr	r1, [r2, #0]
 80095fa:	1850      	adds	r0, r2, r1
 80095fc:	42a0      	cmp	r0, r4
 80095fe:	d10b      	bne.n	8009618 <_free_r+0x6c>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	4401      	add	r1, r0
 8009604:	1850      	adds	r0, r2, r1
 8009606:	4283      	cmp	r3, r0
 8009608:	6011      	str	r1, [r2, #0]
 800960a:	d1e0      	bne.n	80095ce <_free_r+0x22>
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4401      	add	r1, r0
 8009612:	6011      	str	r1, [r2, #0]
 8009614:	6053      	str	r3, [r2, #4]
 8009616:	e7da      	b.n	80095ce <_free_r+0x22>
 8009618:	d902      	bls.n	8009620 <_free_r+0x74>
 800961a:	230c      	movs	r3, #12
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	e7d6      	b.n	80095ce <_free_r+0x22>
 8009620:	6820      	ldr	r0, [r4, #0]
 8009622:	1821      	adds	r1, r4, r0
 8009624:	428b      	cmp	r3, r1
 8009626:	bf01      	itttt	eq
 8009628:	6819      	ldreq	r1, [r3, #0]
 800962a:	685b      	ldreq	r3, [r3, #4]
 800962c:	1809      	addeq	r1, r1, r0
 800962e:	6021      	streq	r1, [r4, #0]
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	6054      	str	r4, [r2, #4]
 8009634:	e7cb      	b.n	80095ce <_free_r+0x22>
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	20000e30 	.word	0x20000e30

0800963c <sbrk_aligned>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	4e0e      	ldr	r6, [pc, #56]	; (8009678 <sbrk_aligned+0x3c>)
 8009640:	460c      	mov	r4, r1
 8009642:	6831      	ldr	r1, [r6, #0]
 8009644:	4605      	mov	r5, r0
 8009646:	b911      	cbnz	r1, 800964e <sbrk_aligned+0x12>
 8009648:	f000 f8bc 	bl	80097c4 <_sbrk_r>
 800964c:	6030      	str	r0, [r6, #0]
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	f000 f8b7 	bl	80097c4 <_sbrk_r>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d00a      	beq.n	8009670 <sbrk_aligned+0x34>
 800965a:	1cc4      	adds	r4, r0, #3
 800965c:	f024 0403 	bic.w	r4, r4, #3
 8009660:	42a0      	cmp	r0, r4
 8009662:	d007      	beq.n	8009674 <sbrk_aligned+0x38>
 8009664:	1a21      	subs	r1, r4, r0
 8009666:	4628      	mov	r0, r5
 8009668:	f000 f8ac 	bl	80097c4 <_sbrk_r>
 800966c:	3001      	adds	r0, #1
 800966e:	d101      	bne.n	8009674 <sbrk_aligned+0x38>
 8009670:	f04f 34ff 	mov.w	r4, #4294967295
 8009674:	4620      	mov	r0, r4
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	20000e34 	.word	0x20000e34

0800967c <_malloc_r>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	1ccd      	adds	r5, r1, #3
 8009682:	f025 0503 	bic.w	r5, r5, #3
 8009686:	3508      	adds	r5, #8
 8009688:	2d0c      	cmp	r5, #12
 800968a:	bf38      	it	cc
 800968c:	250c      	movcc	r5, #12
 800968e:	2d00      	cmp	r5, #0
 8009690:	4607      	mov	r7, r0
 8009692:	db01      	blt.n	8009698 <_malloc_r+0x1c>
 8009694:	42a9      	cmp	r1, r5
 8009696:	d905      	bls.n	80096a4 <_malloc_r+0x28>
 8009698:	230c      	movs	r3, #12
 800969a:	2600      	movs	r6, #0
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4630      	mov	r0, r6
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a4:	4e2e      	ldr	r6, [pc, #184]	; (8009760 <_malloc_r+0xe4>)
 80096a6:	f000 f8df 	bl	8009868 <__malloc_lock>
 80096aa:	6833      	ldr	r3, [r6, #0]
 80096ac:	461c      	mov	r4, r3
 80096ae:	bb34      	cbnz	r4, 80096fe <_malloc_r+0x82>
 80096b0:	4629      	mov	r1, r5
 80096b2:	4638      	mov	r0, r7
 80096b4:	f7ff ffc2 	bl	800963c <sbrk_aligned>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	4604      	mov	r4, r0
 80096bc:	d14d      	bne.n	800975a <_malloc_r+0xde>
 80096be:	6834      	ldr	r4, [r6, #0]
 80096c0:	4626      	mov	r6, r4
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	d140      	bne.n	8009748 <_malloc_r+0xcc>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	4631      	mov	r1, r6
 80096ca:	4638      	mov	r0, r7
 80096cc:	eb04 0803 	add.w	r8, r4, r3
 80096d0:	f000 f878 	bl	80097c4 <_sbrk_r>
 80096d4:	4580      	cmp	r8, r0
 80096d6:	d13a      	bne.n	800974e <_malloc_r+0xd2>
 80096d8:	6821      	ldr	r1, [r4, #0]
 80096da:	3503      	adds	r5, #3
 80096dc:	1a6d      	subs	r5, r5, r1
 80096de:	f025 0503 	bic.w	r5, r5, #3
 80096e2:	3508      	adds	r5, #8
 80096e4:	2d0c      	cmp	r5, #12
 80096e6:	bf38      	it	cc
 80096e8:	250c      	movcc	r5, #12
 80096ea:	4638      	mov	r0, r7
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7ff ffa5 	bl	800963c <sbrk_aligned>
 80096f2:	3001      	adds	r0, #1
 80096f4:	d02b      	beq.n	800974e <_malloc_r+0xd2>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	442b      	add	r3, r5
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	e00e      	b.n	800971c <_malloc_r+0xa0>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	1b52      	subs	r2, r2, r5
 8009702:	d41e      	bmi.n	8009742 <_malloc_r+0xc6>
 8009704:	2a0b      	cmp	r2, #11
 8009706:	d916      	bls.n	8009736 <_malloc_r+0xba>
 8009708:	1961      	adds	r1, r4, r5
 800970a:	42a3      	cmp	r3, r4
 800970c:	6025      	str	r5, [r4, #0]
 800970e:	bf18      	it	ne
 8009710:	6059      	strne	r1, [r3, #4]
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	bf08      	it	eq
 8009716:	6031      	streq	r1, [r6, #0]
 8009718:	5162      	str	r2, [r4, r5]
 800971a:	604b      	str	r3, [r1, #4]
 800971c:	4638      	mov	r0, r7
 800971e:	f104 060b 	add.w	r6, r4, #11
 8009722:	f000 f8a7 	bl	8009874 <__malloc_unlock>
 8009726:	f026 0607 	bic.w	r6, r6, #7
 800972a:	1d23      	adds	r3, r4, #4
 800972c:	1af2      	subs	r2, r6, r3
 800972e:	d0b6      	beq.n	800969e <_malloc_r+0x22>
 8009730:	1b9b      	subs	r3, r3, r6
 8009732:	50a3      	str	r3, [r4, r2]
 8009734:	e7b3      	b.n	800969e <_malloc_r+0x22>
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	42a3      	cmp	r3, r4
 800973a:	bf0c      	ite	eq
 800973c:	6032      	streq	r2, [r6, #0]
 800973e:	605a      	strne	r2, [r3, #4]
 8009740:	e7ec      	b.n	800971c <_malloc_r+0xa0>
 8009742:	4623      	mov	r3, r4
 8009744:	6864      	ldr	r4, [r4, #4]
 8009746:	e7b2      	b.n	80096ae <_malloc_r+0x32>
 8009748:	4634      	mov	r4, r6
 800974a:	6876      	ldr	r6, [r6, #4]
 800974c:	e7b9      	b.n	80096c2 <_malloc_r+0x46>
 800974e:	230c      	movs	r3, #12
 8009750:	4638      	mov	r0, r7
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	f000 f88e 	bl	8009874 <__malloc_unlock>
 8009758:	e7a1      	b.n	800969e <_malloc_r+0x22>
 800975a:	6025      	str	r5, [r4, #0]
 800975c:	e7de      	b.n	800971c <_malloc_r+0xa0>
 800975e:	bf00      	nop
 8009760:	20000e30 	.word	0x20000e30

08009764 <_realloc_r>:
 8009764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	4680      	mov	r8, r0
 800976a:	4614      	mov	r4, r2
 800976c:	460e      	mov	r6, r1
 800976e:	b921      	cbnz	r1, 800977a <_realloc_r+0x16>
 8009770:	4611      	mov	r1, r2
 8009772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009776:	f7ff bf81 	b.w	800967c <_malloc_r>
 800977a:	b92a      	cbnz	r2, 8009788 <_realloc_r+0x24>
 800977c:	f7ff ff16 	bl	80095ac <_free_r>
 8009780:	4625      	mov	r5, r4
 8009782:	4628      	mov	r0, r5
 8009784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009788:	f000 f87a 	bl	8009880 <_malloc_usable_size_r>
 800978c:	4284      	cmp	r4, r0
 800978e:	4607      	mov	r7, r0
 8009790:	d802      	bhi.n	8009798 <_realloc_r+0x34>
 8009792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009796:	d812      	bhi.n	80097be <_realloc_r+0x5a>
 8009798:	4621      	mov	r1, r4
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff ff6e 	bl	800967c <_malloc_r>
 80097a0:	4605      	mov	r5, r0
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0ed      	beq.n	8009782 <_realloc_r+0x1e>
 80097a6:	42bc      	cmp	r4, r7
 80097a8:	4622      	mov	r2, r4
 80097aa:	4631      	mov	r1, r6
 80097ac:	bf28      	it	cs
 80097ae:	463a      	movcs	r2, r7
 80097b0:	f7fe f80e 	bl	80077d0 <memcpy>
 80097b4:	4631      	mov	r1, r6
 80097b6:	4640      	mov	r0, r8
 80097b8:	f7ff fef8 	bl	80095ac <_free_r>
 80097bc:	e7e1      	b.n	8009782 <_realloc_r+0x1e>
 80097be:	4635      	mov	r5, r6
 80097c0:	e7df      	b.n	8009782 <_realloc_r+0x1e>
	...

080097c4 <_sbrk_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	2300      	movs	r3, #0
 80097c8:	4d05      	ldr	r5, [pc, #20]	; (80097e0 <_sbrk_r+0x1c>)
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	f7fa fcda 	bl	8004188 <_sbrk>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_sbrk_r+0x1a>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_sbrk_r+0x1a>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20000e38 	.word	0x20000e38

080097e4 <__assert_func>:
 80097e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097e6:	4614      	mov	r4, r2
 80097e8:	461a      	mov	r2, r3
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <__assert_func+0x2c>)
 80097ec:	4605      	mov	r5, r0
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68d8      	ldr	r0, [r3, #12]
 80097f2:	b14c      	cbz	r4, 8009808 <__assert_func+0x24>
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <__assert_func+0x30>)
 80097f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097fa:	9100      	str	r1, [sp, #0]
 80097fc:	462b      	mov	r3, r5
 80097fe:	4906      	ldr	r1, [pc, #24]	; (8009818 <__assert_func+0x34>)
 8009800:	f000 f80e 	bl	8009820 <fiprintf>
 8009804:	f7fd ffb3 	bl	800776e <abort>
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <__assert_func+0x38>)
 800980a:	461c      	mov	r4, r3
 800980c:	e7f3      	b.n	80097f6 <__assert_func+0x12>
 800980e:	bf00      	nop
 8009810:	200000c4 	.word	0x200000c4
 8009814:	0800a73c 	.word	0x0800a73c
 8009818:	0800a749 	.word	0x0800a749
 800981c:	0800a777 	.word	0x0800a777

08009820 <fiprintf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b503      	push	{r0, r1, lr}
 8009824:	4601      	mov	r1, r0
 8009826:	ab03      	add	r3, sp, #12
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <fiprintf+0x20>)
 800982a:	f853 2b04 	ldr.w	r2, [r3], #4
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	f000 f855 	bl	80098e0 <_vfiprintf_r>
 8009836:	b002      	add	sp, #8
 8009838:	f85d eb04 	ldr.w	lr, [sp], #4
 800983c:	b003      	add	sp, #12
 800983e:	4770      	bx	lr
 8009840:	200000c4 	.word	0x200000c4

08009844 <__ascii_mbtowc>:
 8009844:	b082      	sub	sp, #8
 8009846:	b901      	cbnz	r1, 800984a <__ascii_mbtowc+0x6>
 8009848:	a901      	add	r1, sp, #4
 800984a:	b142      	cbz	r2, 800985e <__ascii_mbtowc+0x1a>
 800984c:	b14b      	cbz	r3, 8009862 <__ascii_mbtowc+0x1e>
 800984e:	7813      	ldrb	r3, [r2, #0]
 8009850:	600b      	str	r3, [r1, #0]
 8009852:	7812      	ldrb	r2, [r2, #0]
 8009854:	1e10      	subs	r0, r2, #0
 8009856:	bf18      	it	ne
 8009858:	2001      	movne	r0, #1
 800985a:	b002      	add	sp, #8
 800985c:	4770      	bx	lr
 800985e:	4610      	mov	r0, r2
 8009860:	e7fb      	b.n	800985a <__ascii_mbtowc+0x16>
 8009862:	f06f 0001 	mvn.w	r0, #1
 8009866:	e7f8      	b.n	800985a <__ascii_mbtowc+0x16>

08009868 <__malloc_lock>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__malloc_lock+0x8>)
 800986a:	f000 bbeb 	b.w	800a044 <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	20000e3c 	.word	0x20000e3c

08009874 <__malloc_unlock>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__malloc_unlock+0x8>)
 8009876:	f000 bbe6 	b.w	800a046 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	20000e3c 	.word	0x20000e3c

08009880 <_malloc_usable_size_r>:
 8009880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009884:	1f18      	subs	r0, r3, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfbc      	itt	lt
 800988a:	580b      	ldrlt	r3, [r1, r0]
 800988c:	18c0      	addlt	r0, r0, r3
 800988e:	4770      	bx	lr

08009890 <__sfputc_r>:
 8009890:	6893      	ldr	r3, [r2, #8]
 8009892:	b410      	push	{r4}
 8009894:	3b01      	subs	r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	6093      	str	r3, [r2, #8]
 800989a:	da07      	bge.n	80098ac <__sfputc_r+0x1c>
 800989c:	6994      	ldr	r4, [r2, #24]
 800989e:	42a3      	cmp	r3, r4
 80098a0:	db01      	blt.n	80098a6 <__sfputc_r+0x16>
 80098a2:	290a      	cmp	r1, #10
 80098a4:	d102      	bne.n	80098ac <__sfputc_r+0x1c>
 80098a6:	bc10      	pop	{r4}
 80098a8:	f000 b94a 	b.w	8009b40 <__swbuf_r>
 80098ac:	6813      	ldr	r3, [r2, #0]
 80098ae:	1c58      	adds	r0, r3, #1
 80098b0:	6010      	str	r0, [r2, #0]
 80098b2:	7019      	strb	r1, [r3, #0]
 80098b4:	4608      	mov	r0, r1
 80098b6:	bc10      	pop	{r4}
 80098b8:	4770      	bx	lr

080098ba <__sfputs_r>:
 80098ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	18d5      	adds	r5, r2, r3
 80098c4:	42ac      	cmp	r4, r5
 80098c6:	d101      	bne.n	80098cc <__sfputs_r+0x12>
 80098c8:	2000      	movs	r0, #0
 80098ca:	e007      	b.n	80098dc <__sfputs_r+0x22>
 80098cc:	463a      	mov	r2, r7
 80098ce:	4630      	mov	r0, r6
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	f7ff ffdc 	bl	8009890 <__sfputc_r>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d1f3      	bne.n	80098c4 <__sfputs_r+0xa>
 80098dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098e0 <_vfiprintf_r>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	460d      	mov	r5, r1
 80098e6:	4614      	mov	r4, r2
 80098e8:	4698      	mov	r8, r3
 80098ea:	4606      	mov	r6, r0
 80098ec:	b09d      	sub	sp, #116	; 0x74
 80098ee:	b118      	cbz	r0, 80098f8 <_vfiprintf_r+0x18>
 80098f0:	6983      	ldr	r3, [r0, #24]
 80098f2:	b90b      	cbnz	r3, 80098f8 <_vfiprintf_r+0x18>
 80098f4:	f000 fb08 	bl	8009f08 <__sinit>
 80098f8:	4b89      	ldr	r3, [pc, #548]	; (8009b20 <_vfiprintf_r+0x240>)
 80098fa:	429d      	cmp	r5, r3
 80098fc:	d11b      	bne.n	8009936 <_vfiprintf_r+0x56>
 80098fe:	6875      	ldr	r5, [r6, #4]
 8009900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009902:	07d9      	lsls	r1, r3, #31
 8009904:	d405      	bmi.n	8009912 <_vfiprintf_r+0x32>
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	059a      	lsls	r2, r3, #22
 800990a:	d402      	bmi.n	8009912 <_vfiprintf_r+0x32>
 800990c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990e:	f000 fb99 	bl	800a044 <__retarget_lock_acquire_recursive>
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	071b      	lsls	r3, r3, #28
 8009916:	d501      	bpl.n	800991c <_vfiprintf_r+0x3c>
 8009918:	692b      	ldr	r3, [r5, #16]
 800991a:	b9eb      	cbnz	r3, 8009958 <_vfiprintf_r+0x78>
 800991c:	4629      	mov	r1, r5
 800991e:	4630      	mov	r0, r6
 8009920:	f000 f96e 	bl	8009c00 <__swsetup_r>
 8009924:	b1c0      	cbz	r0, 8009958 <_vfiprintf_r+0x78>
 8009926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009928:	07dc      	lsls	r4, r3, #31
 800992a:	d50e      	bpl.n	800994a <_vfiprintf_r+0x6a>
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	b01d      	add	sp, #116	; 0x74
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	4b7b      	ldr	r3, [pc, #492]	; (8009b24 <_vfiprintf_r+0x244>)
 8009938:	429d      	cmp	r5, r3
 800993a:	d101      	bne.n	8009940 <_vfiprintf_r+0x60>
 800993c:	68b5      	ldr	r5, [r6, #8]
 800993e:	e7df      	b.n	8009900 <_vfiprintf_r+0x20>
 8009940:	4b79      	ldr	r3, [pc, #484]	; (8009b28 <_vfiprintf_r+0x248>)
 8009942:	429d      	cmp	r5, r3
 8009944:	bf08      	it	eq
 8009946:	68f5      	ldreq	r5, [r6, #12]
 8009948:	e7da      	b.n	8009900 <_vfiprintf_r+0x20>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	0598      	lsls	r0, r3, #22
 800994e:	d4ed      	bmi.n	800992c <_vfiprintf_r+0x4c>
 8009950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009952:	f000 fb78 	bl	800a046 <__retarget_lock_release_recursive>
 8009956:	e7e9      	b.n	800992c <_vfiprintf_r+0x4c>
 8009958:	2300      	movs	r3, #0
 800995a:	9309      	str	r3, [sp, #36]	; 0x24
 800995c:	2320      	movs	r3, #32
 800995e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009962:	2330      	movs	r3, #48	; 0x30
 8009964:	f04f 0901 	mov.w	r9, #1
 8009968:	f8cd 800c 	str.w	r8, [sp, #12]
 800996c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009b2c <_vfiprintf_r+0x24c>
 8009970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009974:	4623      	mov	r3, r4
 8009976:	469a      	mov	sl, r3
 8009978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997c:	b10a      	cbz	r2, 8009982 <_vfiprintf_r+0xa2>
 800997e:	2a25      	cmp	r2, #37	; 0x25
 8009980:	d1f9      	bne.n	8009976 <_vfiprintf_r+0x96>
 8009982:	ebba 0b04 	subs.w	fp, sl, r4
 8009986:	d00b      	beq.n	80099a0 <_vfiprintf_r+0xc0>
 8009988:	465b      	mov	r3, fp
 800998a:	4622      	mov	r2, r4
 800998c:	4629      	mov	r1, r5
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff93 	bl	80098ba <__sfputs_r>
 8009994:	3001      	adds	r0, #1
 8009996:	f000 80aa 	beq.w	8009aee <_vfiprintf_r+0x20e>
 800999a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800999c:	445a      	add	r2, fp
 800999e:	9209      	str	r2, [sp, #36]	; 0x24
 80099a0:	f89a 3000 	ldrb.w	r3, [sl]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80a2 	beq.w	8009aee <_vfiprintf_r+0x20e>
 80099aa:	2300      	movs	r3, #0
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295
 80099b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b4:	f10a 0a01 	add.w	sl, sl, #1
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	9307      	str	r3, [sp, #28]
 80099bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c0:	931a      	str	r3, [sp, #104]	; 0x68
 80099c2:	4654      	mov	r4, sl
 80099c4:	2205      	movs	r2, #5
 80099c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ca:	4858      	ldr	r0, [pc, #352]	; (8009b2c <_vfiprintf_r+0x24c>)
 80099cc:	f7ff fa4a 	bl	8008e64 <memchr>
 80099d0:	9a04      	ldr	r2, [sp, #16]
 80099d2:	b9d8      	cbnz	r0, 8009a0c <_vfiprintf_r+0x12c>
 80099d4:	06d1      	lsls	r1, r2, #27
 80099d6:	bf44      	itt	mi
 80099d8:	2320      	movmi	r3, #32
 80099da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099de:	0713      	lsls	r3, r2, #28
 80099e0:	bf44      	itt	mi
 80099e2:	232b      	movmi	r3, #43	; 0x2b
 80099e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ec:	2b2a      	cmp	r3, #42	; 0x2a
 80099ee:	d015      	beq.n	8009a1c <_vfiprintf_r+0x13c>
 80099f0:	4654      	mov	r4, sl
 80099f2:	2000      	movs	r0, #0
 80099f4:	f04f 0c0a 	mov.w	ip, #10
 80099f8:	9a07      	ldr	r2, [sp, #28]
 80099fa:	4621      	mov	r1, r4
 80099fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a00:	3b30      	subs	r3, #48	; 0x30
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	d94e      	bls.n	8009aa4 <_vfiprintf_r+0x1c4>
 8009a06:	b1b0      	cbz	r0, 8009a36 <_vfiprintf_r+0x156>
 8009a08:	9207      	str	r2, [sp, #28]
 8009a0a:	e014      	b.n	8009a36 <_vfiprintf_r+0x156>
 8009a0c:	eba0 0308 	sub.w	r3, r0, r8
 8009a10:	fa09 f303 	lsl.w	r3, r9, r3
 8009a14:	4313      	orrs	r3, r2
 8009a16:	46a2      	mov	sl, r4
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	e7d2      	b.n	80099c2 <_vfiprintf_r+0xe2>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	1d19      	adds	r1, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	9103      	str	r1, [sp, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfbb      	ittet	lt
 8009a28:	425b      	neglt	r3, r3
 8009a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a2e:	9307      	strge	r3, [sp, #28]
 8009a30:	9307      	strlt	r3, [sp, #28]
 8009a32:	bfb8      	it	lt
 8009a34:	9204      	strlt	r2, [sp, #16]
 8009a36:	7823      	ldrb	r3, [r4, #0]
 8009a38:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3a:	d10c      	bne.n	8009a56 <_vfiprintf_r+0x176>
 8009a3c:	7863      	ldrb	r3, [r4, #1]
 8009a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a40:	d135      	bne.n	8009aae <_vfiprintf_r+0x1ce>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	3402      	adds	r4, #2
 8009a46:	1d1a      	adds	r2, r3, #4
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9203      	str	r2, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfb8      	it	lt
 8009a50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009b30 <_vfiprintf_r+0x250>
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	7821      	ldrb	r1, [r4, #0]
 8009a60:	f7ff fa00 	bl	8008e64 <memchr>
 8009a64:	b140      	cbz	r0, 8009a78 <_vfiprintf_r+0x198>
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	eba0 000a 	sub.w	r0, r0, sl
 8009a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a70:	9b04      	ldr	r3, [sp, #16]
 8009a72:	3401      	adds	r4, #1
 8009a74:	4303      	orrs	r3, r0
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7c:	2206      	movs	r2, #6
 8009a7e:	482d      	ldr	r0, [pc, #180]	; (8009b34 <_vfiprintf_r+0x254>)
 8009a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a84:	f7ff f9ee 	bl	8008e64 <memchr>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d03f      	beq.n	8009b0c <_vfiprintf_r+0x22c>
 8009a8c:	4b2a      	ldr	r3, [pc, #168]	; (8009b38 <_vfiprintf_r+0x258>)
 8009a8e:	bb1b      	cbnz	r3, 8009ad8 <_vfiprintf_r+0x1f8>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	3307      	adds	r3, #7
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	3308      	adds	r3, #8
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9e:	443b      	add	r3, r7
 8009aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa2:	e767      	b.n	8009974 <_vfiprintf_r+0x94>
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aac:	e7a5      	b.n	80099fa <_vfiprintf_r+0x11a>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f04f 0c0a 	mov.w	ip, #10
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	3401      	adds	r4, #1
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	4620      	mov	r0, r4
 8009abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac0:	3a30      	subs	r2, #48	; 0x30
 8009ac2:	2a09      	cmp	r2, #9
 8009ac4:	d903      	bls.n	8009ace <_vfiprintf_r+0x1ee>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0c5      	beq.n	8009a56 <_vfiprintf_r+0x176>
 8009aca:	9105      	str	r1, [sp, #20]
 8009acc:	e7c3      	b.n	8009a56 <_vfiprintf_r+0x176>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad6:	e7f0      	b.n	8009aba <_vfiprintf_r+0x1da>
 8009ad8:	ab03      	add	r3, sp, #12
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	462a      	mov	r2, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4b16      	ldr	r3, [pc, #88]	; (8009b3c <_vfiprintf_r+0x25c>)
 8009ae2:	a904      	add	r1, sp, #16
 8009ae4:	f7fd ff28 	bl	8007938 <_printf_float>
 8009ae8:	4607      	mov	r7, r0
 8009aea:	1c78      	adds	r0, r7, #1
 8009aec:	d1d6      	bne.n	8009a9c <_vfiprintf_r+0x1bc>
 8009aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af0:	07d9      	lsls	r1, r3, #31
 8009af2:	d405      	bmi.n	8009b00 <_vfiprintf_r+0x220>
 8009af4:	89ab      	ldrh	r3, [r5, #12]
 8009af6:	059a      	lsls	r2, r3, #22
 8009af8:	d402      	bmi.n	8009b00 <_vfiprintf_r+0x220>
 8009afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009afc:	f000 faa3 	bl	800a046 <__retarget_lock_release_recursive>
 8009b00:	89ab      	ldrh	r3, [r5, #12]
 8009b02:	065b      	lsls	r3, r3, #25
 8009b04:	f53f af12 	bmi.w	800992c <_vfiprintf_r+0x4c>
 8009b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b0a:	e711      	b.n	8009930 <_vfiprintf_r+0x50>
 8009b0c:	ab03      	add	r3, sp, #12
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	462a      	mov	r2, r5
 8009b12:	4630      	mov	r0, r6
 8009b14:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <_vfiprintf_r+0x25c>)
 8009b16:	a904      	add	r1, sp, #16
 8009b18:	f7fe f9aa 	bl	8007e70 <_printf_i>
 8009b1c:	e7e4      	b.n	8009ae8 <_vfiprintf_r+0x208>
 8009b1e:	bf00      	nop
 8009b20:	0800a8b4 	.word	0x0800a8b4
 8009b24:	0800a8d4 	.word	0x0800a8d4
 8009b28:	0800a894 	.word	0x0800a894
 8009b2c:	0800a782 	.word	0x0800a782
 8009b30:	0800a788 	.word	0x0800a788
 8009b34:	0800a78c 	.word	0x0800a78c
 8009b38:	08007939 	.word	0x08007939
 8009b3c:	080098bb 	.word	0x080098bb

08009b40 <__swbuf_r>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	4605      	mov	r5, r0
 8009b48:	b118      	cbz	r0, 8009b52 <__swbuf_r+0x12>
 8009b4a:	6983      	ldr	r3, [r0, #24]
 8009b4c:	b90b      	cbnz	r3, 8009b52 <__swbuf_r+0x12>
 8009b4e:	f000 f9db 	bl	8009f08 <__sinit>
 8009b52:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <__swbuf_r+0x98>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	d12b      	bne.n	8009bb0 <__swbuf_r+0x70>
 8009b58:	686c      	ldr	r4, [r5, #4]
 8009b5a:	69a3      	ldr	r3, [r4, #24]
 8009b5c:	60a3      	str	r3, [r4, #8]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	071a      	lsls	r2, r3, #28
 8009b62:	d52f      	bpl.n	8009bc4 <__swbuf_r+0x84>
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	b36b      	cbz	r3, 8009bc4 <__swbuf_r+0x84>
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	6820      	ldr	r0, [r4, #0]
 8009b6c:	b2f6      	uxtb	r6, r6
 8009b6e:	1ac0      	subs	r0, r0, r3
 8009b70:	6963      	ldr	r3, [r4, #20]
 8009b72:	4637      	mov	r7, r6
 8009b74:	4283      	cmp	r3, r0
 8009b76:	dc04      	bgt.n	8009b82 <__swbuf_r+0x42>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f930 	bl	8009de0 <_fflush_r>
 8009b80:	bb30      	cbnz	r0, 8009bd0 <__swbuf_r+0x90>
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	3001      	adds	r0, #1
 8009b86:	3b01      	subs	r3, #1
 8009b88:	60a3      	str	r3, [r4, #8]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	6022      	str	r2, [r4, #0]
 8009b90:	701e      	strb	r6, [r3, #0]
 8009b92:	6963      	ldr	r3, [r4, #20]
 8009b94:	4283      	cmp	r3, r0
 8009b96:	d004      	beq.n	8009ba2 <__swbuf_r+0x62>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	07db      	lsls	r3, r3, #31
 8009b9c:	d506      	bpl.n	8009bac <__swbuf_r+0x6c>
 8009b9e:	2e0a      	cmp	r6, #10
 8009ba0:	d104      	bne.n	8009bac <__swbuf_r+0x6c>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f91b 	bl	8009de0 <_fflush_r>
 8009baa:	b988      	cbnz	r0, 8009bd0 <__swbuf_r+0x90>
 8009bac:	4638      	mov	r0, r7
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <__swbuf_r+0x9c>)
 8009bb2:	429c      	cmp	r4, r3
 8009bb4:	d101      	bne.n	8009bba <__swbuf_r+0x7a>
 8009bb6:	68ac      	ldr	r4, [r5, #8]
 8009bb8:	e7cf      	b.n	8009b5a <__swbuf_r+0x1a>
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <__swbuf_r+0xa0>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	bf08      	it	eq
 8009bc0:	68ec      	ldreq	r4, [r5, #12]
 8009bc2:	e7ca      	b.n	8009b5a <__swbuf_r+0x1a>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f81a 	bl	8009c00 <__swsetup_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d0cb      	beq.n	8009b68 <__swbuf_r+0x28>
 8009bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8009bd4:	e7ea      	b.n	8009bac <__swbuf_r+0x6c>
 8009bd6:	bf00      	nop
 8009bd8:	0800a8b4 	.word	0x0800a8b4
 8009bdc:	0800a8d4 	.word	0x0800a8d4
 8009be0:	0800a894 	.word	0x0800a894

08009be4 <__ascii_wctomb>:
 8009be4:	4603      	mov	r3, r0
 8009be6:	4608      	mov	r0, r1
 8009be8:	b141      	cbz	r1, 8009bfc <__ascii_wctomb+0x18>
 8009bea:	2aff      	cmp	r2, #255	; 0xff
 8009bec:	d904      	bls.n	8009bf8 <__ascii_wctomb+0x14>
 8009bee:	228a      	movs	r2, #138	; 0x8a
 8009bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	4770      	bx	lr
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	700a      	strb	r2, [r1, #0]
 8009bfc:	4770      	bx	lr
	...

08009c00 <__swsetup_r>:
 8009c00:	4b32      	ldr	r3, [pc, #200]	; (8009ccc <__swsetup_r+0xcc>)
 8009c02:	b570      	push	{r4, r5, r6, lr}
 8009c04:	681d      	ldr	r5, [r3, #0]
 8009c06:	4606      	mov	r6, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	b125      	cbz	r5, 8009c16 <__swsetup_r+0x16>
 8009c0c:	69ab      	ldr	r3, [r5, #24]
 8009c0e:	b913      	cbnz	r3, 8009c16 <__swsetup_r+0x16>
 8009c10:	4628      	mov	r0, r5
 8009c12:	f000 f979 	bl	8009f08 <__sinit>
 8009c16:	4b2e      	ldr	r3, [pc, #184]	; (8009cd0 <__swsetup_r+0xd0>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d10f      	bne.n	8009c3c <__swsetup_r+0x3c>
 8009c1c:	686c      	ldr	r4, [r5, #4]
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c24:	0719      	lsls	r1, r3, #28
 8009c26:	d42c      	bmi.n	8009c82 <__swsetup_r+0x82>
 8009c28:	06dd      	lsls	r5, r3, #27
 8009c2a:	d411      	bmi.n	8009c50 <__swsetup_r+0x50>
 8009c2c:	2309      	movs	r3, #9
 8009c2e:	6033      	str	r3, [r6, #0]
 8009c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	e03e      	b.n	8009cba <__swsetup_r+0xba>
 8009c3c:	4b25      	ldr	r3, [pc, #148]	; (8009cd4 <__swsetup_r+0xd4>)
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d101      	bne.n	8009c46 <__swsetup_r+0x46>
 8009c42:	68ac      	ldr	r4, [r5, #8]
 8009c44:	e7eb      	b.n	8009c1e <__swsetup_r+0x1e>
 8009c46:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <__swsetup_r+0xd8>)
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	bf08      	it	eq
 8009c4c:	68ec      	ldreq	r4, [r5, #12]
 8009c4e:	e7e6      	b.n	8009c1e <__swsetup_r+0x1e>
 8009c50:	0758      	lsls	r0, r3, #29
 8009c52:	d512      	bpl.n	8009c7a <__swsetup_r+0x7a>
 8009c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c56:	b141      	cbz	r1, 8009c6a <__swsetup_r+0x6a>
 8009c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c5c:	4299      	cmp	r1, r3
 8009c5e:	d002      	beq.n	8009c66 <__swsetup_r+0x66>
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff fca3 	bl	80095ac <_free_r>
 8009c66:	2300      	movs	r3, #0
 8009c68:	6363      	str	r3, [r4, #52]	; 0x34
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	2300      	movs	r3, #0
 8009c74:	6063      	str	r3, [r4, #4]
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f043 0308 	orr.w	r3, r3, #8
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	b94b      	cbnz	r3, 8009c9a <__swsetup_r+0x9a>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c90:	d003      	beq.n	8009c9a <__swsetup_r+0x9a>
 8009c92:	4621      	mov	r1, r4
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 f9fd 	bl	800a094 <__smakebuf_r>
 8009c9a:	89a0      	ldrh	r0, [r4, #12]
 8009c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca0:	f010 0301 	ands.w	r3, r0, #1
 8009ca4:	d00a      	beq.n	8009cbc <__swsetup_r+0xbc>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	6963      	ldr	r3, [r4, #20]
 8009cac:	425b      	negs	r3, r3
 8009cae:	61a3      	str	r3, [r4, #24]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	b943      	cbnz	r3, 8009cc6 <__swsetup_r+0xc6>
 8009cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cb8:	d1ba      	bne.n	8009c30 <__swsetup_r+0x30>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	0781      	lsls	r1, r0, #30
 8009cbe:	bf58      	it	pl
 8009cc0:	6963      	ldrpl	r3, [r4, #20]
 8009cc2:	60a3      	str	r3, [r4, #8]
 8009cc4:	e7f4      	b.n	8009cb0 <__swsetup_r+0xb0>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e7f7      	b.n	8009cba <__swsetup_r+0xba>
 8009cca:	bf00      	nop
 8009ccc:	200000c4 	.word	0x200000c4
 8009cd0:	0800a8b4 	.word	0x0800a8b4
 8009cd4:	0800a8d4 	.word	0x0800a8d4
 8009cd8:	0800a894 	.word	0x0800a894

08009cdc <__sflush_r>:
 8009cdc:	898a      	ldrh	r2, [r1, #12]
 8009cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	0710      	lsls	r0, r2, #28
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	d457      	bmi.n	8009d98 <__sflush_r+0xbc>
 8009ce8:	684b      	ldr	r3, [r1, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc04      	bgt.n	8009cf8 <__sflush_r+0x1c>
 8009cee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dc01      	bgt.n	8009cf8 <__sflush_r+0x1c>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d0fa      	beq.n	8009cf4 <__sflush_r+0x18>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d04:	682f      	ldr	r7, [r5, #0]
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	d032      	beq.n	8009d70 <__sflush_r+0x94>
 8009d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	075a      	lsls	r2, r3, #29
 8009d10:	d505      	bpl.n	8009d1e <__sflush_r+0x42>
 8009d12:	6863      	ldr	r3, [r4, #4]
 8009d14:	1ac0      	subs	r0, r0, r3
 8009d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d18:	b10b      	cbz	r3, 8009d1e <__sflush_r+0x42>
 8009d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d1c:	1ac0      	subs	r0, r0, r3
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4602      	mov	r2, r0
 8009d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d24:	4628      	mov	r0, r5
 8009d26:	6a21      	ldr	r1, [r4, #32]
 8009d28:	47b0      	blx	r6
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	d106      	bne.n	8009d3e <__sflush_r+0x62>
 8009d30:	6829      	ldr	r1, [r5, #0]
 8009d32:	291d      	cmp	r1, #29
 8009d34:	d82c      	bhi.n	8009d90 <__sflush_r+0xb4>
 8009d36:	4a29      	ldr	r2, [pc, #164]	; (8009ddc <__sflush_r+0x100>)
 8009d38:	40ca      	lsrs	r2, r1
 8009d3a:	07d6      	lsls	r6, r2, #31
 8009d3c:	d528      	bpl.n	8009d90 <__sflush_r+0xb4>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	6062      	str	r2, [r4, #4]
 8009d42:	6922      	ldr	r2, [r4, #16]
 8009d44:	04d9      	lsls	r1, r3, #19
 8009d46:	6022      	str	r2, [r4, #0]
 8009d48:	d504      	bpl.n	8009d54 <__sflush_r+0x78>
 8009d4a:	1c42      	adds	r2, r0, #1
 8009d4c:	d101      	bne.n	8009d52 <__sflush_r+0x76>
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	b903      	cbnz	r3, 8009d54 <__sflush_r+0x78>
 8009d52:	6560      	str	r0, [r4, #84]	; 0x54
 8009d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d56:	602f      	str	r7, [r5, #0]
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	d0cb      	beq.n	8009cf4 <__sflush_r+0x18>
 8009d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d60:	4299      	cmp	r1, r3
 8009d62:	d002      	beq.n	8009d6a <__sflush_r+0x8e>
 8009d64:	4628      	mov	r0, r5
 8009d66:	f7ff fc21 	bl	80095ac <_free_r>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d6e:	e7c2      	b.n	8009cf6 <__sflush_r+0x1a>
 8009d70:	6a21      	ldr	r1, [r4, #32]
 8009d72:	2301      	movs	r3, #1
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b0      	blx	r6
 8009d78:	1c41      	adds	r1, r0, #1
 8009d7a:	d1c7      	bne.n	8009d0c <__sflush_r+0x30>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0c4      	beq.n	8009d0c <__sflush_r+0x30>
 8009d82:	2b1d      	cmp	r3, #29
 8009d84:	d001      	beq.n	8009d8a <__sflush_r+0xae>
 8009d86:	2b16      	cmp	r3, #22
 8009d88:	d101      	bne.n	8009d8e <__sflush_r+0xb2>
 8009d8a:	602f      	str	r7, [r5, #0]
 8009d8c:	e7b2      	b.n	8009cf4 <__sflush_r+0x18>
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	e7ae      	b.n	8009cf6 <__sflush_r+0x1a>
 8009d98:	690f      	ldr	r7, [r1, #16]
 8009d9a:	2f00      	cmp	r7, #0
 8009d9c:	d0aa      	beq.n	8009cf4 <__sflush_r+0x18>
 8009d9e:	0793      	lsls	r3, r2, #30
 8009da0:	bf18      	it	ne
 8009da2:	2300      	movne	r3, #0
 8009da4:	680e      	ldr	r6, [r1, #0]
 8009da6:	bf08      	it	eq
 8009da8:	694b      	ldreq	r3, [r1, #20]
 8009daa:	1bf6      	subs	r6, r6, r7
 8009dac:	600f      	str	r7, [r1, #0]
 8009dae:	608b      	str	r3, [r1, #8]
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	dd9f      	ble.n	8009cf4 <__sflush_r+0x18>
 8009db4:	4633      	mov	r3, r6
 8009db6:	463a      	mov	r2, r7
 8009db8:	4628      	mov	r0, r5
 8009dba:	6a21      	ldr	r1, [r4, #32]
 8009dbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009dc0:	47e0      	blx	ip
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	dc06      	bgt.n	8009dd4 <__sflush_r+0xf8>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	e790      	b.n	8009cf6 <__sflush_r+0x1a>
 8009dd4:	4407      	add	r7, r0
 8009dd6:	1a36      	subs	r6, r6, r0
 8009dd8:	e7ea      	b.n	8009db0 <__sflush_r+0xd4>
 8009dda:	bf00      	nop
 8009ddc:	20400001 	.word	0x20400001

08009de0 <_fflush_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	4605      	mov	r5, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	b913      	cbnz	r3, 8009df0 <_fflush_r+0x10>
 8009dea:	2500      	movs	r5, #0
 8009dec:	4628      	mov	r0, r5
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	b118      	cbz	r0, 8009dfa <_fflush_r+0x1a>
 8009df2:	6983      	ldr	r3, [r0, #24]
 8009df4:	b90b      	cbnz	r3, 8009dfa <_fflush_r+0x1a>
 8009df6:	f000 f887 	bl	8009f08 <__sinit>
 8009dfa:	4b14      	ldr	r3, [pc, #80]	; (8009e4c <_fflush_r+0x6c>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	d11b      	bne.n	8009e38 <_fflush_r+0x58>
 8009e00:	686c      	ldr	r4, [r5, #4]
 8009e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0ef      	beq.n	8009dea <_fflush_r+0xa>
 8009e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e0c:	07d0      	lsls	r0, r2, #31
 8009e0e:	d404      	bmi.n	8009e1a <_fflush_r+0x3a>
 8009e10:	0599      	lsls	r1, r3, #22
 8009e12:	d402      	bmi.n	8009e1a <_fflush_r+0x3a>
 8009e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e16:	f000 f915 	bl	800a044 <__retarget_lock_acquire_recursive>
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f7ff ff5d 	bl	8009cdc <__sflush_r>
 8009e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e24:	4605      	mov	r5, r0
 8009e26:	07da      	lsls	r2, r3, #31
 8009e28:	d4e0      	bmi.n	8009dec <_fflush_r+0xc>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	059b      	lsls	r3, r3, #22
 8009e2e:	d4dd      	bmi.n	8009dec <_fflush_r+0xc>
 8009e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e32:	f000 f908 	bl	800a046 <__retarget_lock_release_recursive>
 8009e36:	e7d9      	b.n	8009dec <_fflush_r+0xc>
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <_fflush_r+0x70>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d101      	bne.n	8009e42 <_fflush_r+0x62>
 8009e3e:	68ac      	ldr	r4, [r5, #8]
 8009e40:	e7df      	b.n	8009e02 <_fflush_r+0x22>
 8009e42:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <_fflush_r+0x74>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	bf08      	it	eq
 8009e48:	68ec      	ldreq	r4, [r5, #12]
 8009e4a:	e7da      	b.n	8009e02 <_fflush_r+0x22>
 8009e4c:	0800a8b4 	.word	0x0800a8b4
 8009e50:	0800a8d4 	.word	0x0800a8d4
 8009e54:	0800a894 	.word	0x0800a894

08009e58 <std>:
 8009e58:	2300      	movs	r3, #0
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e66:	6083      	str	r3, [r0, #8]
 8009e68:	8181      	strh	r1, [r0, #12]
 8009e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e6c:	81c2      	strh	r2, [r0, #14]
 8009e6e:	6183      	str	r3, [r0, #24]
 8009e70:	4619      	mov	r1, r3
 8009e72:	2208      	movs	r2, #8
 8009e74:	305c      	adds	r0, #92	; 0x5c
 8009e76:	f7fd fcb9 	bl	80077ec <memset>
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <std+0x38>)
 8009e7c:	6224      	str	r4, [r4, #32]
 8009e7e:	6263      	str	r3, [r4, #36]	; 0x24
 8009e80:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <std+0x3c>)
 8009e82:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <std+0x40>)
 8009e86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <std+0x44>)
 8009e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800a115 	.word	0x0800a115
 8009e94:	0800a137 	.word	0x0800a137
 8009e98:	0800a16f 	.word	0x0800a16f
 8009e9c:	0800a193 	.word	0x0800a193

08009ea0 <_cleanup_r>:
 8009ea0:	4901      	ldr	r1, [pc, #4]	; (8009ea8 <_cleanup_r+0x8>)
 8009ea2:	f000 b8af 	b.w	800a004 <_fwalk_reent>
 8009ea6:	bf00      	nop
 8009ea8:	08009de1 	.word	0x08009de1

08009eac <__sfmoreglue>:
 8009eac:	2268      	movs	r2, #104	; 0x68
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	1e4d      	subs	r5, r1, #1
 8009eb2:	4355      	muls	r5, r2
 8009eb4:	460e      	mov	r6, r1
 8009eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eba:	f7ff fbdf 	bl	800967c <_malloc_r>
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	b140      	cbz	r0, 8009ed4 <__sfmoreglue+0x28>
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ec8:	300c      	adds	r0, #12
 8009eca:	60a0      	str	r0, [r4, #8]
 8009ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ed0:	f7fd fc8c 	bl	80077ec <memset>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}

08009ed8 <__sfp_lock_acquire>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__sfp_lock_acquire+0x8>)
 8009eda:	f000 b8b3 	b.w	800a044 <__retarget_lock_acquire_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20000e3d 	.word	0x20000e3d

08009ee4 <__sfp_lock_release>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__sfp_lock_release+0x8>)
 8009ee6:	f000 b8ae 	b.w	800a046 <__retarget_lock_release_recursive>
 8009eea:	bf00      	nop
 8009eec:	20000e3d 	.word	0x20000e3d

08009ef0 <__sinit_lock_acquire>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sinit_lock_acquire+0x8>)
 8009ef2:	f000 b8a7 	b.w	800a044 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20000e3e 	.word	0x20000e3e

08009efc <__sinit_lock_release>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sinit_lock_release+0x8>)
 8009efe:	f000 b8a2 	b.w	800a046 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	20000e3e 	.word	0x20000e3e

08009f08 <__sinit>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	f7ff fff0 	bl	8009ef0 <__sinit_lock_acquire>
 8009f10:	69a3      	ldr	r3, [r4, #24]
 8009f12:	b11b      	cbz	r3, 8009f1c <__sinit+0x14>
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f7ff bff0 	b.w	8009efc <__sinit_lock_release>
 8009f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f20:	6523      	str	r3, [r4, #80]	; 0x50
 8009f22:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <__sinit+0x68>)
 8009f24:	4a13      	ldr	r2, [pc, #76]	; (8009f74 <__sinit+0x6c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	bf08      	it	eq
 8009f2e:	2301      	moveq	r3, #1
 8009f30:	4620      	mov	r0, r4
 8009f32:	bf08      	it	eq
 8009f34:	61a3      	streq	r3, [r4, #24]
 8009f36:	f000 f81f 	bl	8009f78 <__sfp>
 8009f3a:	6060      	str	r0, [r4, #4]
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 f81b 	bl	8009f78 <__sfp>
 8009f42:	60a0      	str	r0, [r4, #8]
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 f817 	bl	8009f78 <__sfp>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2104      	movs	r1, #4
 8009f4e:	60e0      	str	r0, [r4, #12]
 8009f50:	6860      	ldr	r0, [r4, #4]
 8009f52:	f7ff ff81 	bl	8009e58 <std>
 8009f56:	2201      	movs	r2, #1
 8009f58:	2109      	movs	r1, #9
 8009f5a:	68a0      	ldr	r0, [r4, #8]
 8009f5c:	f7ff ff7c 	bl	8009e58 <std>
 8009f60:	2202      	movs	r2, #2
 8009f62:	2112      	movs	r1, #18
 8009f64:	68e0      	ldr	r0, [r4, #12]
 8009f66:	f7ff ff77 	bl	8009e58 <std>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	61a3      	str	r3, [r4, #24]
 8009f6e:	e7d1      	b.n	8009f14 <__sinit+0xc>
 8009f70:	0800a51c 	.word	0x0800a51c
 8009f74:	08009ea1 	.word	0x08009ea1

08009f78 <__sfp>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	f7ff ffac 	bl	8009ed8 <__sfp_lock_acquire>
 8009f80:	4b1e      	ldr	r3, [pc, #120]	; (8009ffc <__sfp+0x84>)
 8009f82:	681e      	ldr	r6, [r3, #0]
 8009f84:	69b3      	ldr	r3, [r6, #24]
 8009f86:	b913      	cbnz	r3, 8009f8e <__sfp+0x16>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ffbd 	bl	8009f08 <__sinit>
 8009f8e:	3648      	adds	r6, #72	; 0x48
 8009f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	d503      	bpl.n	8009fa0 <__sfp+0x28>
 8009f98:	6833      	ldr	r3, [r6, #0]
 8009f9a:	b30b      	cbz	r3, 8009fe0 <__sfp+0x68>
 8009f9c:	6836      	ldr	r6, [r6, #0]
 8009f9e:	e7f7      	b.n	8009f90 <__sfp+0x18>
 8009fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fa4:	b9d5      	cbnz	r5, 8009fdc <__sfp+0x64>
 8009fa6:	4b16      	ldr	r3, [pc, #88]	; (800a000 <__sfp+0x88>)
 8009fa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fac:	60e3      	str	r3, [r4, #12]
 8009fae:	6665      	str	r5, [r4, #100]	; 0x64
 8009fb0:	f000 f847 	bl	800a042 <__retarget_lock_init_recursive>
 8009fb4:	f7ff ff96 	bl	8009ee4 <__sfp_lock_release>
 8009fb8:	2208      	movs	r2, #8
 8009fba:	4629      	mov	r1, r5
 8009fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fc4:	6025      	str	r5, [r4, #0]
 8009fc6:	61a5      	str	r5, [r4, #24]
 8009fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fcc:	f7fd fc0e 	bl	80077ec <memset>
 8009fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fd8:	4620      	mov	r0, r4
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	3468      	adds	r4, #104	; 0x68
 8009fde:	e7d9      	b.n	8009f94 <__sfp+0x1c>
 8009fe0:	2104      	movs	r1, #4
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	f7ff ff62 	bl	8009eac <__sfmoreglue>
 8009fe8:	4604      	mov	r4, r0
 8009fea:	6030      	str	r0, [r6, #0]
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d1d5      	bne.n	8009f9c <__sfp+0x24>
 8009ff0:	f7ff ff78 	bl	8009ee4 <__sfp_lock_release>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	e7ee      	b.n	8009fd8 <__sfp+0x60>
 8009ffa:	bf00      	nop
 8009ffc:	0800a51c 	.word	0x0800a51c
 800a000:	ffff0001 	.word	0xffff0001

0800a004 <_fwalk_reent>:
 800a004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a008:	4606      	mov	r6, r0
 800a00a:	4688      	mov	r8, r1
 800a00c:	2700      	movs	r7, #0
 800a00e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a016:	f1b9 0901 	subs.w	r9, r9, #1
 800a01a:	d505      	bpl.n	800a028 <_fwalk_reent+0x24>
 800a01c:	6824      	ldr	r4, [r4, #0]
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d1f7      	bne.n	800a012 <_fwalk_reent+0xe>
 800a022:	4638      	mov	r0, r7
 800a024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d907      	bls.n	800a03e <_fwalk_reent+0x3a>
 800a02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a032:	3301      	adds	r3, #1
 800a034:	d003      	beq.n	800a03e <_fwalk_reent+0x3a>
 800a036:	4629      	mov	r1, r5
 800a038:	4630      	mov	r0, r6
 800a03a:	47c0      	blx	r8
 800a03c:	4307      	orrs	r7, r0
 800a03e:	3568      	adds	r5, #104	; 0x68
 800a040:	e7e9      	b.n	800a016 <_fwalk_reent+0x12>

0800a042 <__retarget_lock_init_recursive>:
 800a042:	4770      	bx	lr

0800a044 <__retarget_lock_acquire_recursive>:
 800a044:	4770      	bx	lr

0800a046 <__retarget_lock_release_recursive>:
 800a046:	4770      	bx	lr

0800a048 <__swhatbuf_r>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	460e      	mov	r6, r1
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	4614      	mov	r4, r2
 800a052:	2900      	cmp	r1, #0
 800a054:	461d      	mov	r5, r3
 800a056:	b096      	sub	sp, #88	; 0x58
 800a058:	da08      	bge.n	800a06c <__swhatbuf_r+0x24>
 800a05a:	2200      	movs	r2, #0
 800a05c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a060:	602a      	str	r2, [r5, #0]
 800a062:	061a      	lsls	r2, r3, #24
 800a064:	d410      	bmi.n	800a088 <__swhatbuf_r+0x40>
 800a066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a06a:	e00e      	b.n	800a08a <__swhatbuf_r+0x42>
 800a06c:	466a      	mov	r2, sp
 800a06e:	f000 f8b7 	bl	800a1e0 <_fstat_r>
 800a072:	2800      	cmp	r0, #0
 800a074:	dbf1      	blt.n	800a05a <__swhatbuf_r+0x12>
 800a076:	9a01      	ldr	r2, [sp, #4]
 800a078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a080:	425a      	negs	r2, r3
 800a082:	415a      	adcs	r2, r3
 800a084:	602a      	str	r2, [r5, #0]
 800a086:	e7ee      	b.n	800a066 <__swhatbuf_r+0x1e>
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	2000      	movs	r0, #0
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	b016      	add	sp, #88	; 0x58
 800a090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a094 <__smakebuf_r>:
 800a094:	898b      	ldrh	r3, [r1, #12]
 800a096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a098:	079d      	lsls	r5, r3, #30
 800a09a:	4606      	mov	r6, r0
 800a09c:	460c      	mov	r4, r1
 800a09e:	d507      	bpl.n	800a0b0 <__smakebuf_r+0x1c>
 800a0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	6123      	str	r3, [r4, #16]
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	6163      	str	r3, [r4, #20]
 800a0ac:	b002      	add	sp, #8
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	466a      	mov	r2, sp
 800a0b2:	ab01      	add	r3, sp, #4
 800a0b4:	f7ff ffc8 	bl	800a048 <__swhatbuf_r>
 800a0b8:	9900      	ldr	r1, [sp, #0]
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f7ff fadd 	bl	800967c <_malloc_r>
 800a0c2:	b948      	cbnz	r0, 800a0d8 <__smakebuf_r+0x44>
 800a0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c8:	059a      	lsls	r2, r3, #22
 800a0ca:	d4ef      	bmi.n	800a0ac <__smakebuf_r+0x18>
 800a0cc:	f023 0303 	bic.w	r3, r3, #3
 800a0d0:	f043 0302 	orr.w	r3, r3, #2
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	e7e3      	b.n	800a0a0 <__smakebuf_r+0xc>
 800a0d8:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <__smakebuf_r+0x7c>)
 800a0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	6020      	str	r0, [r4, #0]
 800a0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	9b00      	ldr	r3, [sp, #0]
 800a0e8:	6120      	str	r0, [r4, #16]
 800a0ea:	6163      	str	r3, [r4, #20]
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	b15b      	cbz	r3, 800a108 <__smakebuf_r+0x74>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0f6:	f000 f885 	bl	800a204 <_isatty_r>
 800a0fa:	b128      	cbz	r0, 800a108 <__smakebuf_r+0x74>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f023 0303 	bic.w	r3, r3, #3
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	89a0      	ldrh	r0, [r4, #12]
 800a10a:	4305      	orrs	r5, r0
 800a10c:	81a5      	strh	r5, [r4, #12]
 800a10e:	e7cd      	b.n	800a0ac <__smakebuf_r+0x18>
 800a110:	08009ea1 	.word	0x08009ea1

0800a114 <__sread>:
 800a114:	b510      	push	{r4, lr}
 800a116:	460c      	mov	r4, r1
 800a118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11c:	f000 f894 	bl	800a248 <_read_r>
 800a120:	2800      	cmp	r0, #0
 800a122:	bfab      	itete	ge
 800a124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a126:	89a3      	ldrhlt	r3, [r4, #12]
 800a128:	181b      	addge	r3, r3, r0
 800a12a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a12e:	bfac      	ite	ge
 800a130:	6563      	strge	r3, [r4, #84]	; 0x54
 800a132:	81a3      	strhlt	r3, [r4, #12]
 800a134:	bd10      	pop	{r4, pc}

0800a136 <__swrite>:
 800a136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13a:	461f      	mov	r7, r3
 800a13c:	898b      	ldrh	r3, [r1, #12]
 800a13e:	4605      	mov	r5, r0
 800a140:	05db      	lsls	r3, r3, #23
 800a142:	460c      	mov	r4, r1
 800a144:	4616      	mov	r6, r2
 800a146:	d505      	bpl.n	800a154 <__swrite+0x1e>
 800a148:	2302      	movs	r3, #2
 800a14a:	2200      	movs	r2, #0
 800a14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a150:	f000 f868 	bl	800a224 <_lseek_r>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	4632      	mov	r2, r6
 800a158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	4628      	mov	r0, r5
 800a160:	463b      	mov	r3, r7
 800a162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a16a:	f000 b817 	b.w	800a19c <_write_r>

0800a16e <__sseek>:
 800a16e:	b510      	push	{r4, lr}
 800a170:	460c      	mov	r4, r1
 800a172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a176:	f000 f855 	bl	800a224 <_lseek_r>
 800a17a:	1c43      	adds	r3, r0, #1
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	bf15      	itete	ne
 800a180:	6560      	strne	r0, [r4, #84]	; 0x54
 800a182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a18a:	81a3      	strheq	r3, [r4, #12]
 800a18c:	bf18      	it	ne
 800a18e:	81a3      	strhne	r3, [r4, #12]
 800a190:	bd10      	pop	{r4, pc}

0800a192 <__sclose>:
 800a192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a196:	f000 b813 	b.w	800a1c0 <_close_r>
	...

0800a19c <_write_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4d05      	ldr	r5, [pc, #20]	; (800a1bc <_write_r+0x20>)
 800a1a8:	602a      	str	r2, [r5, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f7f9 ffa0 	bl	80040f0 <_write>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d102      	bne.n	800a1ba <_write_r+0x1e>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	b103      	cbz	r3, 800a1ba <_write_r+0x1e>
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	20000e38 	.word	0x20000e38

0800a1c0 <_close_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4d05      	ldr	r5, [pc, #20]	; (800a1dc <_close_r+0x1c>)
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7f9 ffac 	bl	8004128 <_close>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_close_r+0x1a>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_close_r+0x1a>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	20000e38 	.word	0x20000e38

0800a1e0 <_fstat_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	4d06      	ldr	r5, [pc, #24]	; (800a200 <_fstat_r+0x20>)
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	602b      	str	r3, [r5, #0]
 800a1ee:	f7f9 ffa6 	bl	800413e <_fstat>
 800a1f2:	1c43      	adds	r3, r0, #1
 800a1f4:	d102      	bne.n	800a1fc <_fstat_r+0x1c>
 800a1f6:	682b      	ldr	r3, [r5, #0]
 800a1f8:	b103      	cbz	r3, 800a1fc <_fstat_r+0x1c>
 800a1fa:	6023      	str	r3, [r4, #0]
 800a1fc:	bd38      	pop	{r3, r4, r5, pc}
 800a1fe:	bf00      	nop
 800a200:	20000e38 	.word	0x20000e38

0800a204 <_isatty_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	2300      	movs	r3, #0
 800a208:	4d05      	ldr	r5, [pc, #20]	; (800a220 <_isatty_r+0x1c>)
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7f9 ffa4 	bl	800415c <_isatty>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_isatty_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_isatty_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20000e38 	.word	0x20000e38

0800a224 <_lseek_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	4611      	mov	r1, r2
 800a22c:	2200      	movs	r2, #0
 800a22e:	4d05      	ldr	r5, [pc, #20]	; (800a244 <_lseek_r+0x20>)
 800a230:	602a      	str	r2, [r5, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	f7f9 ff9c 	bl	8004170 <_lseek>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d102      	bne.n	800a242 <_lseek_r+0x1e>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	b103      	cbz	r3, 800a242 <_lseek_r+0x1e>
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	20000e38 	.word	0x20000e38

0800a248 <_read_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	2200      	movs	r2, #0
 800a252:	4d05      	ldr	r5, [pc, #20]	; (800a268 <_read_r+0x20>)
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	f7f9 ff2d 	bl	80040b6 <_read>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_read_r+0x1e>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_read_r+0x1e>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	20000e38 	.word	0x20000e38

0800a26c <_init>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	bf00      	nop
 800a270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a272:	bc08      	pop	{r3}
 800a274:	469e      	mov	lr, r3
 800a276:	4770      	bx	lr

0800a278 <_fini>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	bf00      	nop
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr
